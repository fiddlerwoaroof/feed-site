<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://remimercier.com/feed.xml" rel="self" type="application/atom+xml"><link href="https://remimercier.com/" rel="alternate" type="text/html"><updated>2022-01-28T10:53:39+00:00</updated><id>https://remimercier.com/feed.xml</id><title type="html">Rémi Mercier</title><subtitle>This is where I write (sometimes).</subtitle><author><name>Rémi Mercier</name></author><entry><title type="html">Build a minimal feature flags manager in under an hour</title><link href="https://remimercier.com/minimal-feature-flags-manager/" rel="alternate" type="text/html" title="Build a minimal feature flags manager in under an hour"><published>2022-01-18T00:00:00+00:00</published><updated>2022-01-18T00:00:00+00:00</updated><id>https://remimercier.com/barebone-feature-flag</id><content type="html" xml:base="https://remimercier.com/minimal-feature-flags-manager/">&lt;p&gt;When you deploy your code continuously, feature flags (or feature toggles) are a neat way to hide in-progress features from your users. In the past, I’ve written about &lt;a href=&quot;/building-large-features-process/&quot;&gt;my process for releasing large features&lt;/a&gt;. But after using feature flags in the last six months, I’ve come to like them better than my former process.&lt;/p&gt;

&lt;p&gt;Still, hiding behavior behind &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if ENV['MY-FEATURE'].present?&lt;/code&gt;-type conditionals bothers me.&lt;/p&gt;

&lt;p&gt;First, I don’t think the syntax is very legible. Second, I &lt;em&gt;know&lt;/em&gt; it’s hard to maintain a naming convention across a team. You’ll soon end up with endless variations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV['MY-FEATURE]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV[FF-MY-FEATURE-NAME]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV['TOGGLE-FEATURE']&lt;/code&gt;, etc… These discrepancies make it hard to keep track of all your feature flags.&lt;/p&gt;

&lt;p&gt;Sure, you could use a gem or a third-party service. But for those who just need an &lt;em&gt;on-and-off&lt;/em&gt; system, here’s a minimal feature flag manager that’ll take you less than an hour to build. It’s a plain &lt;a href=&quot;/series/ruby&quot;&gt;Ruby&lt;/a&gt; object but its configuration leans on &lt;a href=&quot;/series/rails&quot;&gt;Ruby on Rails&lt;/a&gt;. I’m sure a Ruby-only implementation wouldn’t be too hard to whip up, though.&lt;/p&gt;

&lt;h2 id=&quot;expected-outcome&quot;&gt;Expected outcome&lt;/h2&gt;

&lt;p&gt;Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if ENV['EDITORIAL_FEED_FEATURE'].present?&lt;/code&gt;, I’d like to see this syntax:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:editorial_feed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While looking at it, a few ideas come to mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;My &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features&lt;/code&gt; class will need access to all available feature flags and check if the flag passed as argument is present and enabled.&lt;/li&gt;
  &lt;li&gt;All my feature flags will need to follow the same naming strategy.&lt;/li&gt;
  &lt;li&gt;Since I’ll probably still use environment variables at some level of my stack, I’ll need somewhere to centralize all those variables related to feature flags.&lt;/li&gt;
  &lt;li&gt;My method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enabled?&lt;/code&gt; should return either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A basic implementation of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features&lt;/code&gt; class could be this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# check if _feature_ is in the list of flags AND enabled&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-shameless-green-version&quot;&gt;A shameless green version&lt;/h2&gt;

&lt;p&gt;What behavior should we expect from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features&lt;/code&gt; class?&lt;/p&gt;

&lt;p&gt;If you pass a feature’s name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features.enabled?&lt;/code&gt;, the method should:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Check if the feature’s name is present in a list of feature flag.&lt;/li&gt;
  &lt;li&gt;Check if the feature flag is either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Return a boolean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s draft our first test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.enabled?'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A minimal implementation could be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FEATURES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;audiobooks: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;comic_strips: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;editorial_feed: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;FEATURES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This code is problematic on several levels. Our test is green, though. If you were to put this code into the world right now, it’ll work. I also like that all feature flags are neatly organized in one place.&lt;/p&gt;

&lt;p&gt;Some of the problems we can guess:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Every time we need to switch a feature flag from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, we’ll have to push changes to production.&lt;/li&gt;
  &lt;li&gt;Having a constant in the class might prove inefficient when the number of flags grows.&lt;/li&gt;
  &lt;li&gt;We’re not relying on environment variables like we originally intended to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s try and tackle the latter first.&lt;/p&gt;

&lt;h2 id=&quot;use-environment-variables&quot;&gt;Use environment variables&lt;/h2&gt;

&lt;p&gt;The smallest step we can take is to replace hardcoded values with environment variables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FEATURES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;audiobooks: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AUDIOBOOKS_FEATURE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;comic_strips: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'COMIC_STRIPS_FEATURE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;editorial_feed: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'EDITORIAL_FEED_FEATURE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;FEATURES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this code, our test still passes but not for the right reasons.&lt;/p&gt;

&lt;p&gt;The application evaluates the presence of environment variables at runtime. If one misses in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV&lt;/code&gt;, the variable will default to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; instead of crashing (thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; accepting a default value).&lt;/p&gt;

&lt;p&gt;So our test does not &lt;em&gt;really&lt;/em&gt; evaluate the presence and setting of our feature flags. It only tests if the return value is truthy or falsy. And it is, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt; defaults to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; every time. We could mock the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ENV&lt;/code&gt; returns, but it’ll couple our tests too tightly to our testing environment. This &lt;em&gt;smells&lt;/em&gt; like a bad idea.&lt;/p&gt;

&lt;p&gt;Our tests could be better if we changed the expectation from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to be_in([true, false])&lt;/code&gt; to a more constrained &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to be(true)&lt;/code&gt;. This would make sure that the tests don’t return a false positive.&lt;/p&gt;

&lt;p&gt;Another thing I don’t like is passing variables - which are &lt;em&gt;variable&lt;/em&gt; by definition - to a constant? Meh.&lt;/p&gt;

&lt;p&gt;I’d rather group these variables into a dedicated file. If we could load all these feature flags’ variables at boot time, we’d save up some time when our application needs to evaluate those flags.&lt;/p&gt;

&lt;h2 id=&quot;move-your-environment-variables-to-a-single-file-and-load-them-at-boot-time&quot;&gt;Move your environment variables to a single file and load them at boot time&lt;/h2&gt;

&lt;p&gt;One way to group your feature flags in the standard &lt;a href=&quot;https://guides.rubyonrails.org/v5.1/configuring.html#custom-configuration&quot; target=&quot;\_blank&quot;&gt;Rails configuration&lt;/a&gt;. And it’s simpler than it sounds.&lt;/p&gt;

&lt;p&gt;You can create a custom accessor in your Rails configuration that leans on a single YAML file.&lt;/p&gt;

&lt;p&gt;First, go to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.rb&lt;/code&gt;. At the end of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application&lt;/code&gt; class, add your own configuration.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# in config/application.rb&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyApp&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s happening here? Now, your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails::Application::Configuration&lt;/code&gt; class has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;features&lt;/code&gt; accessor that you can call with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails.config.features&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails.config.features&lt;/code&gt; will return an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActiveSupport::OrderedOptions&lt;/code&gt; that inherits from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt; and provides a dynamic accessor method.&lt;/p&gt;

&lt;p&gt;Your application will now look for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML&lt;/code&gt; file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;features.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; directory, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;features.yml&lt;/code&gt; file. The first key represents the environment where your variables will apply. In our example, I’ve used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shared&lt;/code&gt; which means that all environments will share the information.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# in config/features.yml&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;shared:
    audiobooks: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= ENV.fetch('AUDIOBOOKS_FEATURE', false) %&amp;gt;
    comic_strips: &amp;lt;%=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'COMIC_STRIPS_FEATURE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;editorial_feed: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= ENV.fetch('EDITORIAL_FEED_FEATURE', false) %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We usually store strings in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML&lt;/code&gt; files, but it’s possible to execute Ruby code with the help of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;%= =&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;we have a single file where all our feature flags and their respective environment variables will be neatly gathered&lt;/strong&gt;. I used to be a librarian, I love things arranged neatly.&lt;/p&gt;

&lt;h2 id=&quot;access-our-feature-flags-through-rails-configuration&quot;&gt;Access our feature flags through Rails configuration&lt;/h2&gt;

&lt;p&gt;Now, &lt;strong&gt;a single file centralize all our feature flag keys and their respective environment variables&lt;/strong&gt;. I used to be a librarian. I love things arranged neatly.&lt;/p&gt;

&lt;p&gt;It’s time to get back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;We don’t need our constant anymore. But we need to pull the configuration in its place.&lt;/p&gt;

&lt;p&gt;Let’s whip up a second test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.configuration'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_an_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s try to code our method and make the test green.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Easy right! The test passes. On the other hand, we’re creating a dependency between our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features&lt;/code&gt; class and the Rails configuration.&lt;/p&gt;

&lt;p&gt;Now that we’ve made the change easy, it’s just a matter of changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FEATURES&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration&lt;/code&gt; in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enabled?&lt;/code&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The full test suite is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.configuration'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_an_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.enabled?'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Okay, so why does my second test throw a failure?&lt;/p&gt;

&lt;p&gt;Well, we created a dependency between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features.configuration&lt;/code&gt; and the Rails configuration. And that dependency needs to be mocked!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.configuration'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_an_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.enabled?'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;my_feature: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This’ll take care of the dependency. Now, my tests pass.&lt;/p&gt;

&lt;h2 id=&quot;check-for-different-return-scenarii&quot;&gt;Check for different return scenarii&lt;/h2&gt;

&lt;p&gt;What happens if the feature we’d like to check is not in our list? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;configuration[feature.to_sym]&lt;/code&gt; will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;. Let’s update our tests accordingly.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.configuration'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_an_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.enabled?'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;my_feature: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'with a feature not in the features list'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:an_inexistant_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My third test passes. But by convention, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enabled?&lt;/code&gt; should return a boolean, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt;. So we need to enforce its return type.&lt;/p&gt;

&lt;h2 id=&quot;enforce-a-boolean-return-type&quot;&gt;Enforce a boolean return type&lt;/h2&gt;

&lt;p&gt;First, let’s update our tests.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Features&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.configuration'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_an_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OrderedOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.enabled?'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;described_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;my_feature: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when the symbol is not present is our list of feature flags'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:an_inexistent_feature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are several ways of doing this. Initially, I’d decided to modify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TrueClass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FalseClass&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NilClass&lt;/code&gt; to accept a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_boolean&lt;/code&gt; method. Several readers pointed out it was &lt;em&gt;a tad&lt;/em&gt; overkill.&lt;/p&gt;

&lt;h3 id=&quot;use-hashes-capabilities&quot;&gt;Use hashes capabilities&lt;/h3&gt;

&lt;p&gt;Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.configuration&lt;/code&gt; return an object inheriting from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt;, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fetch&lt;/code&gt; on it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happens is if our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.configuration&lt;/code&gt; contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt; we’re passing along, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.enabled?&lt;/code&gt; will return the boolean stored in the YAML. If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt; is not present, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fetch&lt;/code&gt; will default to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;use-present&quot;&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.present?&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Another suggestion was using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.present?&lt;/code&gt; on my configuration hash.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The return results’ strategy works as in the previous example.&lt;/p&gt;

&lt;h3 id=&quot;use-the-double-bang&quot;&gt;Use the double bang&lt;/h3&gt;

&lt;p&gt;A last suggestion was using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!!&lt;/code&gt; a.k.a the &lt;em&gt;&lt;a href=&quot;https://stackoverflow.com/a/3994065&quot; target=&quot;\_blank&quot;&gt;double bang&lt;/a&gt;&lt;/em&gt;. This would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;features&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enabled?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The rationale behind it is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you negate something, that forces a boolean context. Of course, it also negates it. If you double-negate it, it forces the boolean context, but returns the proper boolean value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And voilà! Your feature flags manager is ready. Now, you can safely wrap your features with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Features.enabled? :editorial_feed&lt;/code&gt; conditionals!&lt;/p&gt;

&lt;p&gt;Hope you liked this code-along as much as I did!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS: Many thanks to &lt;a href=&quot;https://twitter.com/NotGrm&quot; target=&quot;\_blank&quot;&gt;@NotGrm&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sunfox&quot; target=&quot;\_blank&quot;&gt;@sunfox&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/_swanson&quot; target=&quot;\_blank&quot;&gt;@_swanson&lt;/a&gt;, and Kaloyan for their suggestions!&lt;/p&gt;

&lt;p&gt;PPS: John Nunemaker wrote a &lt;a href=&quot;https://www.johnnunemaker.com/hourly-feature-flags/&quot; target=&quot;\_blank&quot;&gt;Rebuttal and Addendum&lt;/a&gt; to this post. John - whose blog I love - makes some great suggestions to better the feature flags manager. I like the idea of switching features during runtime without restarting your dynos. Obviously, as the creator of Flipper - a gem dedicated to flipping features - he’s created something much more comprehensive for people who need more control over their feature toggles.&lt;/p&gt;</content><author><name>Rémi Mercier</name></author><category term="[&quot;ruby&quot;, &quot;rails&quot;]"/><summary type="html">Feature flags (or feature toggles) are a neat way to hide in-progress features from your users. For those who need a simple on-and-off system, here's a minimal feature flag manager that'll take less than an hour to build, using plain Ruby objects, the Rails configuration, and some neat variables organization.</summary></entry><entry><title type="html">Exploring dependency injection in Ruby</title><link href="https://remimercier.com/dependency-injection-in-ruby/" rel="alternate" type="text/html" title="Exploring dependency injection in Ruby"><published>2021-12-07T00:00:00+00:00</published><updated>2021-12-07T00:00:00+00:00</updated><id>https://remimercier.com/dependency-injection-in-ruby</id><content type="html" xml:base="https://remimercier.com/dependency-injection-in-ruby/">&lt;p&gt;Lately, I’ve been interested in abstractions: why objects behave the way they do, how do we architecture our code so it’s open to change (without causing unnecessary headaches), to which class &lt;em&gt;that&lt;/em&gt; specific behavior should belong? And during that time, I’ve repeatedly heard folks talk about &lt;strong&gt;dependency injection&lt;/strong&gt;. Yet, dependency injection in Ruby is not widely covered.&lt;/p&gt;

&lt;p&gt;I’m glad to report that I’ve finally managed to wrap my head around this enough to use this practice regularly. I guess it’s time for me to give you a tour of my current understanding of dependency injection: what it is, why do you need it, and how to use it?&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-dependency&quot;&gt;What is a dependency?&lt;/h2&gt;

&lt;p&gt;First, let’s explain what a dependency is.&lt;/p&gt;

&lt;blockquote&gt;A dependency is an abstraction upon which another abstraction depends.&lt;/blockquote&gt;

&lt;p&gt;In the context of a Ruby - or a Rails - application, &lt;a href=&quot;/beginners-introduction-to-ruby-classes-objects/&quot;&gt;&lt;em&gt;abstraction&lt;/em&gt; mainly refers to &lt;em&gt;classes&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the codebase you’re working on right now. Look out for classes that send messages to other classes directly from their methods.&lt;/p&gt;

&lt;p&gt;Let’s draw an example: each month, you need to compute revenue for authors.&lt;/p&gt;

&lt;p&gt;The code could look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; has &lt;strong&gt;one dependency&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; depends on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt; to pull the raw statistics.&lt;/p&gt;

&lt;p&gt;That dependency lies within the body of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;monthly_revenue&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; knows that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt; exists, that it responds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_for&lt;/code&gt;, and that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_for&lt;/code&gt; takes two arguments.&lt;/p&gt;

&lt;p&gt;This knowledge introduces tight coupling between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt;. And tight coupling makes for difficult changes when new requirements are introduced. And dependency injection can loosen the coupling between your classes.&lt;/p&gt;

&lt;h2 id=&quot;dependency-injection-explained-with-simple-words&quot;&gt;Dependency injection explained with simple words&lt;/h2&gt;

&lt;blockquote&gt;Dependency injection is a coding practice that allows you to move a dependency from the guts of a class to its initialization.&lt;/blockquote&gt;

&lt;p&gt;Dependy injection is &lt;a href=&quot;https://stackoverflow.com/a/46745172&quot; target=&quot;\_blank&quot;&gt;the implementation derived from the Dependency Inversion Principle&lt;/a&gt; (DIP). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; in DIP is also known as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; in the &lt;a href=&quot;http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&quot; target=&quot;\_blank&quot;&gt;SOLID principles&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The Dependency Inversion Principle says that your objects should not rely on other specific objects (&lt;em&gt;concretions&lt;/em&gt;) but higher-level abstractions.&lt;/p&gt;

&lt;p&gt;Here are a few examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; is a concretion. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt; is its higher-level abstraction.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;like&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;follow&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retweet&lt;/code&gt; are concretions. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interaction&lt;/code&gt; is their higher-level abstraction.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algolia&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ElasticSearch&lt;/code&gt; are concretions. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SearchEngine&lt;/code&gt; is their higher-level abstraction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-wrong-with-dependencies&quot;&gt;What’s wrong with dependencies?&lt;/h2&gt;

&lt;p&gt;The best way to &lt;em&gt;feel&lt;/em&gt; the problem with dependencies is to work on existing abstractions and add new requirements.&lt;/p&gt;

&lt;p&gt;Here’s your initial code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What is the problem here?&lt;/p&gt;

&lt;p&gt;Here, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; class is &lt;em&gt;tighly coupled&lt;/em&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt; class for its statistics calculations.&lt;/p&gt;

&lt;p&gt;What if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt; is a third-party application? What if I need to use a different service based on the author’s country?&lt;/p&gt;

&lt;p&gt;I could make some changes inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt;, of course. A simple conditional would work just fine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;french?&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;FrenchRevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what if a new country requires a new third-party service? Should I add a new conditional?&lt;/p&gt;

&lt;p&gt;Conditionals breed says, Sandi Metz. Once you go down that path, each new requirement makes your code harder to articulate.&lt;/p&gt;

&lt;p&gt;It’s time to call dependency injection to the rescue!&lt;/p&gt;

&lt;h2 id=&quot;how-to-inject-dependencies&quot;&gt;How to inject dependencies?&lt;/h2&gt;

&lt;p&gt;You’ll see that the definition of dependency injection sounds quite pompous compared to the &lt;em&gt;how-to&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The main idea behind dependency injection is that your class can interact with different abstractions instead of being stuck with one concretion. How do you do that? By passing the dependency to the class during initialization.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;revenue_calculator: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@revenue_calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revenue_calculator&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@revenue_calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happened here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We moved the first mention of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt; from the guts of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; to its initialization.&lt;/li&gt;
  &lt;li&gt;Then, we replaced all other occurrences of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt; with an instance variable describing the higher abstraction (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@revenue_calculator&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I can pass a new calculator while initializing an author or default to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; is more modulable. The class can work with different calculators as long as they respond to the same API (i.e., the same public methods).&lt;/p&gt;

&lt;h2 id=&quot;why-is-dependency-injection-important&quot;&gt;Why is dependency injection important?&lt;/h2&gt;

&lt;h3 id=&quot;loose-coupling--decreased-cost-of-change&quot;&gt;Loose coupling == decreased cost of change&lt;/h3&gt;

&lt;p&gt;Without belaboring the point, let’s repeat it one last time: Classes depend on each other all the time. But the way you tie those classes together will determine the &lt;em&gt;cost of change&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the example above, we saw that if the need arises to handle several calculators for statistics, injecting them during initialization is much simpler than choosing between them through conditionals.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper, go and read &lt;a href=&quot;https://sandimetz.com/99bottles&quot; target=&quot;\_blank&quot;&gt;99 Bottles of OOP&lt;/a&gt; by Sandi Metz. She wrote some beautiful chapters on the subject.&lt;/p&gt;

&lt;h3 id=&quot;better-readability&quot;&gt;Better readability&lt;/h3&gt;

&lt;p&gt;When programmers scatter dependencies around a class, it’s not easy for the readers to find them, even harder to keep track of them. Dependency injection reduces that friction.&lt;/p&gt;

&lt;p&gt;Injecting dependencies at initialization gather them in the same place. They are easier to read and remember.&lt;/p&gt;

&lt;h3 id=&quot;better-testing&quot;&gt;Better testing&lt;/h3&gt;

&lt;p&gt;When a class is tightly coupled to another, its complexity shows through in your tests.&lt;/p&gt;

&lt;p&gt;If you want to test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author#monthly_revenue&lt;/code&gt; as it’s defined below, you’d need to create an instance double for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt;, allow the double to receive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_for&lt;/code&gt;, then mock its response.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#montly_revenue'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:montly_revenue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'fetches statistics'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# test things here&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Your tests know more than they should. They know about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RevenueCalculator&lt;/code&gt;, about its method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate_for&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; keeps a dependency at its heart, it’s impossible to test it in isolation. You &lt;em&gt;have&lt;/em&gt; to create a whole context around it. You need to bring in the dependency and directly interact with it. Your tests are tied to the current implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#monthly_revenue&lt;/code&gt;. If your code changes - by adding conditionals, for instance - your tests need to change too. You’ll have to allow another &lt;em&gt;concrete&lt;/em&gt; class to receive a method.&lt;/p&gt;

&lt;p&gt;With dependency injection, you loosen that coupling a bit. You can inject any fake Ruby object that serves as a test-only statistics calculator. When you inject a dependency, you rely on polymorphism instead of conditionals. The dependency needed in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author#monthly_revenue&lt;/code&gt; responds to the same API, whichever calculator you feed your class. And your tests don’t need to change.&lt;/p&gt;

&lt;p&gt;Once again, I encourage you to read the end of &lt;em&gt;99 Bottles of OOP&lt;/em&gt;, which explores the topic of testing while moving dependencies to initialization with &lt;em&gt;brio&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;additional-thoughts&quot;&gt;Additional thoughts&lt;/h2&gt;

&lt;p&gt;After discussing my first draft with &lt;a href=&quot;https://blog.notgrm.dev/&quot; target=&quot;\_blank&quot;&gt;Jeremy Bertrand&lt;/a&gt;, I thought I’d add some thoughts to reflect our conversation.&lt;/p&gt;

&lt;p&gt;First, dependency injection can happen at different moments in an object’s life.&lt;/p&gt;

&lt;p&gt;Let’s consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;revenue_calculator: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RevenueCalculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@revenue_calculator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revenue_calculator&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@revenue_calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I needed to specify a calculator other than the default, I’d need to write something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  Author.create&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;revenue_calculator: GermanRevenueCalculator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s face it. There won’t be many times when you’ll know which calculator you need when initializing an author.&lt;/p&gt;

&lt;p&gt;A more realistic injection could have been:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;monthly_revenue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;revenue_calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;revenue_calculator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;calculate_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month_to_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, I inject a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;revenue_calculator&lt;/code&gt; only when I need it. And I don’t need to know which calculator my author will need during initialization.&lt;/p&gt;

&lt;p&gt;I could use the modularity of injection like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  author &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Author.create&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;first_name: &lt;span class=&quot;s1&quot;&gt;'Deborah'&lt;/span&gt;, last_name: &lt;span class=&quot;s1&quot;&gt;'Levy'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  author.monthly_revenue&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;EnglishRevenueCalculator&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, the definition of dependency injection I gave earlier is misleading.&lt;/p&gt;

&lt;blockquote&gt;Dependency injection is a coding practice that allows you &lt;bold&gt;to require&lt;/bold&gt; a dependency from the guts of a class to the right moment in the life of an object.&lt;/blockquote&gt;

&lt;p&gt;Dependency injection is not a panacea either. Sometimes, it’ll be the right tool for the job. Sometimes, it’ll take deeper refactoring to loosen your code coupling.&lt;/p&gt;

&lt;p&gt;Hope these closing thoughts will help!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I’ve never managed to learn the meaning of all SOLID principles. I mean, an acronym that declines into five acronyms, that decline into cryptic principles. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="ruby"/><summary type="html">Classes depend on each other all the time. But the way you tie those classes together will determine how hard it is to change your code. Dependency injection can help you reduce that coupling and reduce your cost of change.</summary></entry><entry><title type="html">Introduction to Git Bisect: travel through time and bugs</title><link href="https://remimercier.com/how-to-use-git-bisect/" rel="alternate" type="text/html" title="Introduction to Git Bisect: travel through time and bugs"><published>2021-10-20T00:00:00+00:00</published><updated>2021-10-20T00:00:00+00:00</updated><id>https://remimercier.com/time-travel-to-solve-bugs-with-git-bisect</id><content type="html" xml:base="https://remimercier.com/how-to-use-git-bisect/">&lt;p&gt;No matter how thorough your &lt;a href=&quot;/series/rspec/&quot;&gt;test coverage&lt;/a&gt; is, you can’t test everything.&lt;/p&gt;

&lt;p&gt;One day, you’ll introduce a regression in your application, and you won’t notice it straight away. When you finally realize you broke your feature, it can be hard to pinpoint where and when it happened. It’s even harder when several people are working on the same application.&lt;/p&gt;

&lt;p&gt;Now is a good time to get acquainted with &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ready to time travel through your application?&lt;/p&gt;

&lt;h2 id=&quot;the-inefficient-way-of-debugging-checking-every-commit-one-by-one&quot;&gt;The inefficient way of debugging: checking every commit, one by one&lt;/h2&gt;

&lt;p&gt;The other day, the situation described above happened to me.&lt;/p&gt;

&lt;p&gt;My first instinct was to browse the list of commits and check each one for breaking changes. I kept throwing wild guesses for an hour before giving up.&lt;/p&gt;

&lt;p&gt;Antichronologically looking through your commit list is a real-life example of &lt;a href=&quot;https://jvns.ca/blog/2021/09/10/hashmaps-make-things-fast/&quot; target=&quot;\_blank&quot;&gt;quadratic&lt;/a&gt; searches.&lt;/p&gt;

&lt;p&gt;It might work if you have a couple of commits. But the more commits you need to check, the exponentially&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; longer it’ll take.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; uses a binary search algorithm to search through your list of commits. And it’s fast!&lt;/p&gt;

&lt;p&gt;Ok, but what is a binary search?&lt;/p&gt;

&lt;p&gt;A binary search takes a sorted list of information. Instead of checking elements one by one, from first to last, the algorithm jumps straight to the middle element.&lt;/p&gt;

&lt;p&gt;Based on the condition of your search, the algorithm will either:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;return the current element&lt;/li&gt;
  &lt;li&gt;inspect the left-hand side of your list&lt;/li&gt;
  &lt;li&gt;inspect the right-hand side of your list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At each iteration, the algorithm checks the middle element in an ever-narrowing list.&lt;/p&gt;

&lt;p&gt;TL;DR: A binary search doesn’t check every element in the list. Only a fraction of them.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; works in a similar way.&lt;/p&gt;

&lt;h2 id=&quot;the-efficient-way-of-debugging-git-bisect&quot;&gt;The efficient way of debugging: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Right now, your application doesn’t work as intended. But you &lt;em&gt;do&lt;/em&gt; know that two months ago, your application was working fine. Somewhere in your list of commits, you introduced a regression.&lt;/p&gt;

&lt;p&gt;The problem? You don’t know when.&lt;/p&gt;

&lt;p&gt;There is one commit that draws a line in your application’s timeline:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;before that faulty commit, your application worked fine&lt;/li&gt;
  &lt;li&gt;after that faulty commit, your application crashes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; leverages binary search to pinpoint the commit that introduced the regression.&lt;/p&gt;

&lt;p&gt;It uses the most recent “bad” commit and the last know “good” commits as a range.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; picks a commit in the middle of that range and asks you whether the selected commit is “good” or “bad”. It continues narrowing down the range until it finds the exact commit that introduced the change.&lt;/p&gt;

&lt;p&gt;Let’s try it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  my-app git:(main) ✗ git bisect start
➜  my-app git:(main|BISECTING) ✗ git bisect bad
➜  my-app git:(main|BISECTING) ✗ git bisect good ae998022
Bisecting: 4 revisions left to test after this (roughly 4 steps)
[02ca345f3e29217bb6553] Refactor the asset pipeline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here’s a breakdown:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect start&lt;/code&gt; lets you enter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bisect&lt;/code&gt; mode.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect bad&lt;/code&gt;: tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bisect&lt;/code&gt; that the current HEAD doesn’t work.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect good &amp;lt;commit sha&amp;gt;&lt;/code&gt;: tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bisect&lt;/code&gt; the last known working commit.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bisecting: 4 revisions left...&lt;/code&gt;: an estimated number of steps&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[02ca345f3e29217bb6553] Refactor...&lt;/code&gt;: the commit your app is currently staged.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of checking commits one by one, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; jumps to the middle commit in your list (here, the commit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;02ca345f3e29217bb6553&lt;/code&gt;) and &lt;strong&gt;stage your application in the state it was at that time&lt;/strong&gt;. Fancy!&lt;/p&gt;

&lt;p&gt;You can now interact with your application. Run your tests. Go and try the faulty feature in your local environment. I repeat, go and check your app. Click on something!&lt;/p&gt;

&lt;p&gt;Why am I insisting on this? Because the first time I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bisect&lt;/code&gt;, I had a preconception about the commit that had introduced the bug. Instead of testing my application at each stage of the process, I told &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; what I imagined the state was. I ended up in a self-referential loop that led me to the commit I assumed in the first place.&lt;/p&gt;

&lt;p&gt;Once I started using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; correctly, I realized I was quite wrong about the breaking commit.&lt;/p&gt;

&lt;p&gt;Back to our current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bisect&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  my-app git:(main) ✗ git bisect start
➜  my-app git:(main|BISECTING) ✗ git bisect bad
➜  my-app git:(main|BISECTING) ✗ git bisect good ae998022
Bisecting: 4 revisions left to test after this (roughly 4 steps)
[02ca345f3e29217bb6553] Refactor the asset pipeline

➜  my-app git:((02ca345f3...)|BISECTING) ✗ git bisect bad
Bisecting: 11 revisions left to test after this (roughly 3 steps)
[76c502e15dba8ac5b] Add new feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your application is currently running in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;02ca345f3e29217bb6553&lt;/code&gt; commit’s state.&lt;/p&gt;

&lt;p&gt;If this current state is faulty, it means the bug was introduced earlier. When typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect bad&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; takes a note about the non-working state of your application then jumps to the middle commit on the left-hand side of our range (i.e. older commits).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/10/remi-mercier-how-to-use-git-bisect-02.jpg&quot; alt=&quot;a graph about git bisect bad commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the application works fine in the current state, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect good&lt;/code&gt; will prompt&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; git bisect&lt;/code&gt; to explore the right-hand side of our range (i.e. newer commits).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/10/remi-mercier-how-to-use-git-bisect-01.jpg&quot; alt=&quot;a graph about git bisect good commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Repeat until there are no revisions left.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  my-app git:(main) ✗ git bisect start
➜  my-app git:(main|BISECTING) ✗ git bisect bad
➜  my-app git:(main|BISECTING) ✗ git bisect good ae998022
Bisecting: 4 revisions left to test after this (roughly 4 steps)
[02ca345f3e29217bb6553] Refactor the asset pipeline

➜  my-app git:((02ca345f3...)|BISECTING) ✗ git bisect bad
Bisecting: 11 revisions left to test after this (roughly 3 steps)
[76c502e15dba8ac5b] Add new feature

➜  my-app git:((76c502e15...)|BISECTING) ✗ git bisect bad
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[e7e6f2ab20a7f9b] Merge branch 'new-payment-system' into 'main'

➜  my-app git:((e7e6f2ab2...)|BISECTING) ✗ git bisect bad
Bisecting: 1 revision left to test after this (roughly 1 step)
[4a6d8943db4e2d] Change CORS

➜  my-app git:((4a6d8943d...)|BISECTING) ✗ git bisect bad
Bisecting: 0 revisions left to test after this (roughly 1 step)
[996e5a376c7b9] Update GEMFILE

➜  my-app git:((a7c40a681...)|BISECTING) ✗ git bisect bad
a7c40a6818c34f1ea1 is the first bad commit
commit a7c40a6818c34f1ea1
Merge: xxx xxx
Author: Remi Mercier
Date:   Tue Aug 3 13:51:20 2021 +0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An aside: if you need to try your app in real life, it probably means you need to write a test of some kind. In my case, the problem would have required an integration test and mocking responses between two services.&lt;/p&gt;

&lt;p&gt;It’s just so much faster than looking for things in the dark!&lt;/p&gt;

&lt;p&gt;If you can’t try the commit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; currently outputs, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect skip&lt;/code&gt; and, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git bisect&lt;/code&gt; will move on to the next commit.&lt;/p&gt;

&lt;p&gt;Feeling adventurous? You can check the official documentation for &lt;a href=&quot;https://git-scm.com/docs/git-bisect&quot; target=&quot;\_blank&quot;&gt;git bisect&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The time it takes for a quadratic search to perform is proportional to the squared size of its input. 10x the data take 100x more time. Hence it’s Big 0 notation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0(n^2)&lt;/code&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="other"/><summary type="html">No matter how thorough your test coverage is, you can't test everything. So when you introduce a bug in your application, git bisect will help you zero in on your regression's origin.</summary></entry><entry><title type="html">Upgrading Ruby on Rails: a beginner’s guide</title><link href="https://remimercier.com/upgrading-ruby-on-rails/" rel="alternate" type="text/html" title="Upgrading Ruby on Rails: a beginner’s guide"><published>2021-09-20T00:00:00+00:00</published><updated>2021-09-20T00:00:00+00:00</updated><id>https://remimercier.com/upgrading-ruby-on-rails</id><content type="html" xml:base="https://remimercier.com/upgrading-ruby-on-rails/">&lt;p&gt;For a long time, upgrading applications to newer versions of Ruby on Rails seemed one of those tasks reserved to experienced developers.&lt;/p&gt;

&lt;p&gt;Last July, I migrated an app from Rails 5.2 to Rails 6.0. A major upgrade, then.&lt;/p&gt;

&lt;p&gt;While upgrading the application, I wrote notes about the process, the tricky parts, etc. This is what I want to share with you today: a straightforward guide about upgrading Rails for those of you who never did it (yet!).&lt;/p&gt;

&lt;p&gt;I was lucky enough to be coached through the whole thing by one of my senior colleagues. So if you have to do it alone, I want this guide to be a companion of sorts to you.&lt;/p&gt;

&lt;p&gt;You’ll see, it’ll be fun!&lt;/p&gt;

&lt;h2 id=&quot;read-the-official-guide-first&quot;&gt;Read the official guide first&lt;/h2&gt;

&lt;p&gt;Rails has an &lt;a href=&quot;https://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html&quot; target=&quot;\_blank&quot;&gt;offical guide&lt;/a&gt; for upgrading Ruby on Rails.&lt;/p&gt;

&lt;p&gt;The first chapter - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General Advice&lt;/code&gt; - is full of gold. If you’re like me and tend to skim through documentation, don’t! Carefully read that chapter and take notes about the important bits. You’ll learn about the recommended process, the various commands Rails give, etc.&lt;/p&gt;

&lt;p&gt;I particularly liked the first couple of advice:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You should have good reasons to upgrade your application because it can be a challenging feat.&lt;/li&gt;
  &lt;li&gt;You should have good test coverage to give you some confidence. Many things will change, and it can be hard to grasp the full effect of these changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-full-process-i-went-through&quot;&gt;The full process I went through&lt;/h2&gt;

&lt;h3 id=&quot;upgrading-rails&quot;&gt;Upgrading Rails&lt;/h3&gt;

&lt;p&gt;Here, I’ll leave the path of the recommended process to explain what I went through. There’s a lot of overlaps with the official guide, though.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change the Rails version number in your Gemfile.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Fix dependencies as they arise during the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt; process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s pause for a minute and check a typical error message from a gem:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;Bundler could not find compatible versions &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gem &lt;span class=&quot;s2&quot;&gt;&quot;railties&quot;&lt;/span&gt;:
  In Gemfile:
    devise &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 4.4.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 4.4.3, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(&amp;gt;=&lt;/span&gt; 4.1.0, &amp;lt; 6.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    rails &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 6.0.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; was resolved to 6.0.4, which depends on
      railties &lt;span class=&quot;o&quot;&gt;(=&lt;/span&gt; 6.0.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reading error messages is one fundamental skill in debugging (one I often overlook myself 😅).&lt;/p&gt;

&lt;p&gt;What this message tells you is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In your Gemfile, you declared the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devise&lt;/code&gt; gem and locked it to the latest version between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.4.0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt; 5.0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Your version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devise&lt;/code&gt; needs a version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;railties&lt;/code&gt; between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.1.0&lt;/code&gt; and the latest minor version before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6.0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the other hand, you declared your new version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails&lt;/code&gt; and locked it to the latest minor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6.0.4&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;The new version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails&lt;/code&gt; needs a specific version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;railties&lt;/code&gt;: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6.0.4&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s a conflict between the version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;railties&lt;/code&gt; your current configuration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devise&lt;/code&gt; uses and the one your new version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails&lt;/code&gt; needs. &lt;strong&gt;You need to upgrade &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devise&lt;/code&gt; too.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do so, change the Devise version number in your Gemfile, then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Rinse and repeat until you don’t get any more error messages from your gems.&lt;/p&gt;

&lt;p&gt;A side note: How do you chose the version of the gem you should use?&lt;/p&gt;

&lt;p&gt;I went through the changelog of each gem and checked for backward-incompatible changes that would break my codebase. If all is safe, you can use the latest stable version. Keep in mind that there’s a lot of guessing involved, and you will break things no matter how careful you are.&lt;/p&gt;

&lt;p&gt;I didn’t need to worry about Javascript packages (I upgraded an API). But if you use Javascript, check the &lt;a href=&quot;https://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#moving-between-versions&quot; target=&quot;\_blank&quot;&gt;official guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;update-your-application&quot;&gt;Update your application&lt;/h3&gt;

&lt;p&gt;Rails comes with a handy command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails app:update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The command will output a list of configuration files Rails wants to update.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  identical  config/boot.rb
  exist      config
  conflict   config/routes.rb
  Overwrite  ~/config/routes.rb? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;enter &lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ynaqdhm]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a tricky part. Sometimes, you’re okay with Rails updating files, and sometimes you’re not.&lt;/p&gt;

&lt;p&gt;For each conflict, I’ve entered the letter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; to print the &lt;strong&gt;d&lt;/strong&gt;ifference in my terminal. The output is color-coded:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In white: the lines that won’t change.&lt;/li&gt;
  &lt;li&gt;In green: the lines that Rails wants to add.&lt;/li&gt;
  &lt;li&gt;In red: the lines that Rails wants to delete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also see the little &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; at the beginning of each line that hint about the expected behavior.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;Overwrite  ~/config/routes.rb? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;enter &lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ynaqdhm] d
Rails.application.routes.draw &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
-   &lt;span class=&quot;c&quot;&gt;# For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html&lt;/span&gt;
+   &lt;span class=&quot;c&quot;&gt;# For details on the DSL available within this file, see https://guides.rubyonrails.org/routing.html&lt;/span&gt;
-&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You want to be extra careful here. You should know what needs to stay (custom configuration, for example) and what can be changed (configuration comments, typos, etc.).&lt;/p&gt;

&lt;p&gt;I chose to be conservative. I’ve kept everything that looked custom, and I’ve stayed as close to the new Rails defaults as possible.&lt;/p&gt;

&lt;p&gt;I manually updated most of my configuration files. For each file, I would copy/paste the new content, then replied &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; in the terminal prompt (as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no, do not overwrite&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Sometimes, standard Rails configuration changes in its implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;conflict  config/spring.rb
Overwrite ~/config/spring.rb? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;enter &lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ynaqdhm] d
- %w[
+ Spring.watch&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
-   .ruby-version
+   &lt;span class=&quot;s2&quot;&gt;&quot;.ruby-version&quot;&lt;/span&gt;,
-   .rbenv-vars
+   &lt;span class=&quot;s2&quot;&gt;&quot;.rbenv-vars&quot;&lt;/span&gt;,
-   tmp/restart.txt
+   &lt;span class=&quot;s2&quot;&gt;&quot;tmp/restart.txt&quot;&lt;/span&gt;,
-   tmp/caching-dev.txt
+   &lt;span class=&quot;s2&quot;&gt;&quot;tmp/caching-dev.txt&quot;&lt;/span&gt;
- &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;.each &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; |path| Spring.watch&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
+ &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Retrying...
Overwrite ~/config/spring.rb? &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;enter &lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Ynaqdhm] y&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this case, I would allow Rails to overwrite the whole file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The process is long and tedious. You’ll need to stay focused. I missed a couple of changes in my configuration file for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puma&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you’re confident (more or less) about the changes, add your files to GIT and commit them.&lt;/p&gt;

&lt;h3 id=&quot;run-your-tests&quot;&gt;Run your tests&lt;/h3&gt;

&lt;p&gt;Now, you can run your tests for the first time. Take it slow.&lt;/p&gt;

&lt;p&gt;Start with testing your models, then your controllers/requests, then the whole suite.&lt;/p&gt;

&lt;p&gt;A major upgrade can introduce breaking changes, so you’ll need to fix your code (and your tests) to reflect those changes.&lt;/p&gt;

&lt;p&gt;If you see some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadError: Unable to autoload constant&lt;/code&gt;, try to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bin/spring stop&lt;/code&gt; to reload the application.&lt;/p&gt;

&lt;p&gt;At this point, you’ll see a lot of deprecation warnings. We’ll tackle those in a minute.&lt;/p&gt;

&lt;p&gt;Once your tests are all green again, add your files to GIT and commit them.&lt;/p&gt;

&lt;h3 id=&quot;handling-deprecation-warnings&quot;&gt;Handling deprecation warnings&lt;/h3&gt;

&lt;p&gt;Upgrades also introduce deprecation warnings. These warnings can range from method aliases to gems that need an update.&lt;/p&gt;

&lt;p&gt;Every time you fix one deprecation warning, add your modification to GIT and commit. You’d better keep your commit history clean if you need to revert some changes.&lt;/p&gt;

&lt;p&gt;Here are a few warnings I had:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEPRECATION WARNING: update_attributes! is deprecated and will be removed from Rails 6.1&lt;/code&gt;: I had to change those occurences in my code.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEPRECATION WARNING: Single arity template handlers are deprecated...&lt;/code&gt;: an warning from Prawn, a gem handling PDF creation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each deprecation can introduce unexpected problems. Gems rely on other gems. Updating a gem can trigger the update of another one. This is why &lt;strong&gt;upgrading can be so daunting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I had a lot of tests failing after I had resolved some deprecation warnings. That sucks, but that’s normal.&lt;/p&gt;

&lt;p&gt;Do not hesitate to read the changelog of the incriminated gems! The gem &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shoulda matchers&lt;/code&gt; had me on my heels for hours, but the changelog of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shoulda matchers&lt;/code&gt; showed me the change that was breaking my tests. I had to rewrite a few tests from the ground up.&lt;/p&gt;

&lt;h3 id=&quot;configure-framework-defaults&quot;&gt;Configure framework defaults&lt;/h3&gt;

&lt;p&gt;Since Rails 5, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app update&lt;/code&gt; command generates a file with the new default configuration.&lt;/p&gt;

&lt;p&gt;You’ll need to uncomment each configuration line gradually check if your tests still pass.&lt;/p&gt;

&lt;p&gt;I’ve found it handy to have all my tests green before toggling on these new configuration defaults.&lt;/p&gt;

&lt;h3 id=&quot;a-rails-6-specificity-zeitwerk&quot;&gt;A Rails 6 specificity: Zeitwerk&lt;/h3&gt;

&lt;p&gt;One of the major changes introduced by Rails 6 is the new autolading strategy: &lt;a href=&quot;https://github.com/fxn/zeitwerk&quot; target=&quot;\_blank&quot;&gt;Zeitwerk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I had to change a few things to make Zeitwerk work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Class names inferred from filenames that contain inflections (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Csv&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ftp&lt;/code&gt;). Some names were capitalized, others were uppercased. I had to homogenize them all.&lt;/li&gt;
  &lt;li&gt;Configuration about auto-reloading in tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully, Zeitwerk comes with a neat command: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails zeitwerk:check&lt;/code&gt;. It’ll give you the next problem that needs fixing. Once you’re done with Zeitwerk, run your test one more time!&lt;/p&gt;

&lt;h2 id=&quot;last-check&quot;&gt;Last check&lt;/h2&gt;

&lt;p&gt;You’re almost done!&lt;/p&gt;

&lt;p&gt;Check the official Rails guide and verify you didn’t miss anything relevant to you.&lt;/p&gt;

&lt;p&gt;Run your specs one last time. Then run your linter.&lt;/p&gt;

&lt;p&gt;Run a Rails console. Then fire up a server to see if your application behaves the way it should.&lt;/p&gt;

&lt;p&gt;All good? Great, you’re done!&lt;/p&gt;

&lt;h2 id=&quot;beware-of-scope-creep&quot;&gt;Beware of scope creep&lt;/h2&gt;

&lt;p&gt;While you’re fixing things, you’ll realize that some objects could do with a little refactoring. Don’t!&lt;/p&gt;

&lt;p&gt;Focus on making your tests pass. That way, if a new bug pops out, it’ll be easier to tell it’s because of your migration. You won’t have to worry about separating the migration from the refactoring while chasing bugs.&lt;/p&gt;

&lt;p&gt;Happy migrating!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A small reminder on gem versioning: &lt;strong&gt;0.0.x&lt;/strong&gt; is a patch: implementation details, bug fixes, etc..  &lt;strong&gt;0.x.0&lt;/strong&gt; is a minor upgrade: new features with backward compatibility. &lt;strong&gt;x.0.0&lt;/strong&gt; is a major upgrade: can contain backward incompatible changes. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="rails"/><summary type="html">You're about to upgrade your application to the newest version of Ruby on Rails. And you've never done it before? Fear not! Here's my battle-tested companion to migrating Rails.</summary></entry><entry><title type="html">Building large features: my process for branches, requests and reviews</title><link href="https://remimercier.com/building-large-features-process/" rel="alternate" type="text/html" title="Building large features: my process for branches, requests and reviews"><published>2021-06-17T00:00:00+00:00</published><updated>2021-06-17T00:00:00+00:00</updated><id>https://remimercier.com/working-on-big-features-my-process</id><content type="html" xml:base="https://remimercier.com/building-large-features-process/">&lt;p&gt;During my first couple of years as a developer, I didn’t have much of a process for large features.&lt;/p&gt;

&lt;p&gt;I would start a feature branch from the main branch, work on my feature for weeks, and open up a pull request. I would subject my coworkers to grueling thousand-lines-of-code reviews without thinking about it twice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/06/remi-mercier-feature-process-big-pr.png&quot; alt=&quot;a passive pr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the time, that seemed normal. Everyone was doing it.&lt;/p&gt;

&lt;p&gt;But no more!&lt;/p&gt;

&lt;p&gt;Now that I regularly work on large features, I’ve found a process that suits my needs (and my teammates’). It helps me keep in touch with the main branch. Code reviews are easier for my coworkers. And it’s easier for me to maintain over time.&lt;/p&gt;

&lt;p&gt;This process was born from three constraints:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Break down large features into smaller chunks to make reviews easier.&lt;/li&gt;
  &lt;li&gt;Don’t commit code to production that is not used right away.&lt;/li&gt;
  &lt;li&gt;Make do with reviews (and subsequent modifications) that can happen over a few days.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-01-the-way-i-specify--the-way-i-code&quot;&gt;Step 01: The way I specify == the way I code&lt;/h2&gt;

&lt;p&gt;My brain has a mind of its own.&lt;/p&gt;

&lt;p&gt;If I write my feature specifications in one card &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I’ll end up writing this feature in one go, then submit a massive pull request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/06/remi-mercier-feature-process-one-card-one-pr.jpg&quot; alt=&quot;one card equals one pull request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If I centralize all my specifications in one parent card, then isolate each conceptual chunk into its own child card, I’ll create a dedicated branch and a (well-sized) pull request for each child card.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/06/remi-mercier-feature-process-multiple-cards.jpg&quot; alt=&quot;multiple cards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One side benefit of splitting your feature into conceptual chunks is that you need to take some extra time to think about what needs to be done. You can organize your work and know that first, you need to code some endpoints, then move on to the views, then wrap up with some data migration.&lt;/p&gt;

&lt;p&gt;The way you split your specifications is the way you’ll work through your feature. There’s no need for your favorite to-do list tool anymore. &lt;mark&gt;Your specifications are your to-do list.&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;Ok, time to code that feature!&lt;/p&gt;

&lt;h2 id=&quot;step-02-create-the-parent-branch&quot;&gt;Step 02: Create the parent branch&lt;/h2&gt;

&lt;p&gt;As a title, I pick the ID of the parent card and append a descriptive name to it.&lt;/p&gt;

&lt;p&gt;Make the naming suits your need. I use a number and a name because I work with an issue tracking software that heavily leans on card ids. The (most) important bit is the descriptive naming.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git pull origin main
  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 313-my-feature-parent-branch

  Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'313-my-feature-parent-branch'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;313-my-feature-parent-branch&lt;/code&gt; will serve as a basis for all my child branches. The parent branch is empty for now. It’s only there as a hub for future child branches.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;                 ---    313-my-feature-parent-branch (empty for now)
               /
  X --- Y --- Z         main branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s push my parent branch onto my remote repository manager &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-03-open-a-pull-request-for-the-parent-branch&quot;&gt;Step 03: Open a pull request for the parent branch&lt;/h2&gt;

&lt;p&gt;Now that my code is online, I open a pull request for my parent branch.&lt;/p&gt;

&lt;p&gt;Here’s my set-up:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The parent pull request has &lt;strong&gt;a descriptive title&lt;/strong&gt; - usually the name of my parent branch minus the number.&lt;/li&gt;
  &lt;li&gt;Prefix the title of the parent pull request with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Draft&lt;/code&gt;. It shouldn’t be reviewed or merged.&lt;/li&gt;
  &lt;li&gt;The parent pull request targets the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;The description of the parent pull request links to the parent card. Also, I usually add a link to each child pull request as I open them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/06/remi-mercier-feature-process-parent-pull-request.png&quot; alt=&quot;a github pull request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The parent pull request shows no difference with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch. It’s perfectly normal. Right now, my parent pull request is an empty shell until my first child pull request is approved and merged in it. Since my parent branch is blank, I’m not submitting for reviews (yet).&lt;/p&gt;

&lt;p&gt;Let’s code our first code chunk!&lt;/p&gt;

&lt;h2 id=&quot;step-04-create-the-first-child-branch&quot;&gt;Step 04: Create the first child branch&lt;/h2&gt;

&lt;p&gt;Now, I can open my first child branch from my parent branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;313-my-feature-parent-branch&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;313-my-feature-parent-branch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 314-my-feature-add-models

  Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'314-my-feature-add-models'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This first child branch starts from the parent branch. The parent branch only serves, for now, as a proxy. Time to write some code!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;                       A --- B    314-my-feature-add-models
                     /
                 ---              313-my-feature-parent-branch (empty for now)
               /
  X --- Y --- Z                   main branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once I’ve coded this part of my feature, I push my first child branch - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;314-my-feature-add-models&lt;/code&gt; - on my remote repository.&lt;/p&gt;

&lt;h2 id=&quot;step-05-open-a-pull-request-for-the-first-child-branch&quot;&gt;Step 05: Open a pull request for the first child branch&lt;/h2&gt;

&lt;p&gt;Ok, now the code for my first child pull request is live on my remote repository manager.&lt;/p&gt;

&lt;p&gt;I’ll open a pull request for my first child branch:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The child pull request has &lt;strong&gt;a descriptive title&lt;/strong&gt; - usually the name of my child branch minus the number.&lt;/li&gt;
  &lt;li&gt;The child pull request &lt;strong&gt;targets the parent branch&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The description of the child pull request specifies its status - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⚠️ This is a child-pull request of 313-my-feature-parent-branch&lt;/code&gt; - and links to the parent branch.&lt;/li&gt;
  &lt;li&gt;The description of the child pull request also specifies if the branch is forked from the parent branch or from another branch (we’ll see why later).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/06/remi-mercier-feature-process-child-pull-request.png&quot; alt=&quot;a github pull request&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-06-handling-the-following-child-branches-and-their-respective-pull-requests&quot;&gt;Step 06: Handling the following child branches and their respective pull requests&lt;/h2&gt;

&lt;p&gt;I’ve written my first chunk of code. I’ve opened a pull request for my first child card, and I’m waiting for reviews to pour in. Now what?&lt;/p&gt;

&lt;p&gt;I usually need the code in my first child branch in my second child branch. I can spawn a new child branch from a previous child branch.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;314-my-feature-add-models&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 315-my-feature-add-endpoints

  Switched to a new branch &lt;span class=&quot;s1&quot;&gt;'315-my-feature-add-endpoints'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me show you the git graph.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;                                 D --- E --- F    315-my-feature-add-endpoints
                               /
                       A --- B                    314-my-feature-add-models
                     /
                 ---                              313-my-feature-parent-branch (empty for now)
               /
  X --- Y --- Z                                   main branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, I can lean on the work I’ve done before.&lt;/p&gt;

&lt;p&gt;But what happens if my first child branch - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;314-my-feature-add-models&lt;/code&gt; - is modified during reviews? It’s easy. I can rebase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;315-my-feature-add-endpoints&lt;/code&gt; onto the latest &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;314-my-feature-add-models&lt;/code&gt; to move the starting point where needed. We’ll see different scenarios later on.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;                                       D --- E --- F    315-my-feature-add-endpoints
                                     /
                       A --- B --- C                     314-my-feature-add-models
                     /
                 ---                                     313-my-feature-parent-branch (empty for now)
               /
  X --- Y --- Z                                          main branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I usually have this cascading type of branch dependencies &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Each new child branch starts from the previous child. It gives me the code and the context I need to move forward in my feature. Plus, it’s easier for reviewers.&lt;/p&gt;

&lt;p&gt;When I finish a child branch, I push it on my remote repository manager.&lt;/p&gt;

&lt;p&gt;I’ll open a pull request for each child branch:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The child pull request has &lt;strong&gt;a descriptive title&lt;/strong&gt; - usually the name of my child branch minus the number.&lt;/li&gt;
  &lt;li&gt;The child pull request &lt;strong&gt;points to the branch it’s forked from&lt;/strong&gt; (either the parent branch, or the previous child branch).&lt;/li&gt;
  &lt;li&gt;The child pull request’s description specifies its status and links to the parent branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⚠️ This is a child-pull request of 313-my-feature-parent-branch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The child pull request’s description specifies if the branch is forked from the parent branch or the previous child branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-07-getting-things-together-with-merge-and-rebase&quot;&gt;Step 07: Getting things together with merge and rebase&lt;/h2&gt;

&lt;p&gt;Okay. Now is the time to start merging my branches. In real life, this happens progressively, one branch at a time.&lt;/p&gt;

&lt;p&gt;The main take-aways are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Child pull requests are created in cascade.&lt;/li&gt;
  &lt;li&gt;Each child pull request has to be merged into the parent pull request (not into the child pull request it’s forked from).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My first child pull request targets the parent pull request. Once the first child pull request is finished and approved, I merge it into the parent pull request. My parent branch just got its first commit!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;                                     D --- E --- F    315-my-feature-add-endpoints
                                   /
                     A --- B --- C                     314-my-feature-add-models
                   /              \
                 ------------------ A'                 313-my-feature-parent-branch
               /
  X --- Y --- Z                                        main branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My second child pull request initially targets the first child pull request. Now that the first child pull request is merged into the parent pull request, I need to do two things.&lt;/p&gt;

&lt;h3 id=&quot;on-my-machine&quot;&gt;On my machine&lt;/h3&gt;

&lt;p&gt;I need to rebase my second child branch onto the latest parent branch (which now contains the code from the first child branch). This rebase changes the basis for my second child branch from the first child branch to the parent branch.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;313-my-feature-parent-branch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git pull origin 313-my-feature-parent-branch
  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;313-my-feature-parent-branch&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git checkout 315-my-feature-add-endpoints

  Switched to branch &lt;span class=&quot;s1&quot;&gt;'315-my-feature-add-endpoints'&lt;/span&gt;

  ➜  my-project git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;315-my-feature-add-endpoints&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; git rebase &lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; 314-my-feature-add-models 313-my-feature-parent-branch

  Successfully rebased and updated refs/heads/315-my-feature-add-endpoints&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;My git tree would now look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-git&quot; data-lang=&quot;git&quot;&gt;                         D --- E --- F    315-my-feature-add-endpoints
                       /
                 --- A'                   313-my-feature-parent-branch
               /
  X --- Y --- Z                           main branch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that my first child branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;314-my-feature-add-models&lt;/code&gt; is merged into the parent branch, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;315-my-feature-add-endpoints&lt;/code&gt; has been rebased, I can delete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;314-my-feature-add-models&lt;/code&gt;. The graph above shows just that. My second child branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;315-my-feature-add-enpoints&lt;/code&gt; doesn’t lean on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;314-my-feature-add-models&lt;/code&gt; anymore. It spawns from the latest parent branch.&lt;/p&gt;

&lt;p&gt;Since I changed history by rebasing my second child branch onto my parent branch, I need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push --force-with-lease origin 315-my-feature-add-endpoints&lt;/code&gt; onto my remote branch.&lt;/p&gt;

&lt;h3 id=&quot;on-my-remote-repository-manager&quot;&gt;On my remote repository manager&lt;/h3&gt;

&lt;p&gt;First, I go to my second child pull request and change the target branch from the first child pull request to the parent pull request.&lt;/p&gt;

&lt;p&gt;Then, I update the parent pull request description with a link to the newly-merged first child pull request. It allows me to keep track of all child pull requests in one place.&lt;/p&gt;

&lt;p&gt;All set!&lt;/p&gt;

&lt;h3 id=&quot;rinse-and-repeat&quot;&gt;Rinse and repeat&lt;/h3&gt;

&lt;p&gt;For each child pull request, repeat this step until they are no child branches left.&lt;/p&gt;

&lt;h2 id=&quot;step-08-submit-the-parent-pull-request&quot;&gt;Step 08: Submit the parent pull request&lt;/h2&gt;

&lt;p&gt;All child pull requests are merged into the parent pull request. Now is the time to submit the full feature for a final review.&lt;/p&gt;

&lt;p&gt;Usually, reviews for the parent pull request are trivial: typos, tiny fixes, etc.&lt;/p&gt;

&lt;p&gt;Once the parent pull request is approved, I merge it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;. And I’m done!&lt;/p&gt;

&lt;p&gt;Hope you found this interesting! It’s not set in stone obviously. But I’ve found this process to be adequate for me these past few months. Let me know if you have any suggestions to make it better.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ps: Many thanks to &lt;a href=&quot;https://twitter.com/NotGrm&quot; target=&quot;\_blank&quot;&gt;Jeremy&lt;/a&gt; for helping me make this post clearer (even though I didn’t follow all of his suggestions 😜)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;July 9th 2021 update&lt;/strong&gt;: I’ve been invited to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rails With Jason&lt;/code&gt; podcast to talk about this process and other strategies for releasing features (amongst other things). Listen to it here: &lt;a href=&quot;https://www.codewithjason.com/rails-with-jason-podcast/episodes/102-building-and-releasing-large-features-with-remi-mercier-Mb1sP_iY/&quot; target=&quot;\_blank&quot;&gt;Building and Releasing Large Features with Rémi Mercier&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For clarity’s sake, I’ll use the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;card&lt;/code&gt; to describe an information entity where you write a piece of specification. Think Trello cards, Jira issues, Post-Its, whatever tickles your fancy. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;GitHub or GitLab for instance. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I can picture horrified looks at the words &lt;em&gt;cascading type of branch dependencies&lt;/em&gt;, but fear not! The benefits of branch dependency offset its potential problems. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="other"/><summary type="html">Working on large features can be tricky. I've spent the last few months refining a process that makes it easy to keep in touch with the main branch, to make reviews more manageable, and with little GIT overhead.</summary></entry><entry><title type="html">RSpec fundamentals: a basic glossary</title><link href="https://remimercier.com/rspec-fundamentals-glossary/" rel="alternate" type="text/html" title="RSpec fundamentals: a basic glossary"><published>2021-03-21T00:00:00+00:00</published><updated>2021-03-21T00:00:00+00:00</updated><id>https://remimercier.com/rspec-fundamentals-a-basic-glossary</id><content type="html" xml:base="https://remimercier.com/rspec-fundamentals-glossary/">&lt;p&gt;In this second part of the &lt;a href=&quot;/series/rspec/&quot;&gt;RSpec fundamentals series&lt;/a&gt;, I want to explore the methods you’ll use the most when testing with RSpec: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let!&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t read the first part - &lt;a href=&quot;/rspec-101-basic-set-up/&quot;&gt;how to setup RSpec and name files and, digging into their basic structure&lt;/a&gt;, go and read it, I’ll wait.&lt;/p&gt;

&lt;p&gt;Done? Let’s move on to our second installment!&lt;/p&gt;

&lt;p&gt;We’ll build an example test for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; model. I’ll explain key concepts and keywords along the way.&lt;/p&gt;

&lt;h2 id=&quot;describe-your-abstraction-with-describe&quot;&gt;Describe your abstraction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We’ve already dug into the inner workings of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; in the first post. So here’s the gist of it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; is used to group your tests around a common abstraction: a class, a request, etc. It’s a wrapper that builds an example group.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since methods are an abstraction, you usually nest several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;s in your example group. Let’s test an instance method - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# test the output of the method full_name&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, the first &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; is called on the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSpec&lt;/code&gt; and &lt;em&gt;describes&lt;/em&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; class. &lt;mark&gt;This is the top-level example group&lt;/mark&gt;. The second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; is called within our top-level example group and describes the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; is nested in the top-level one. Both describe &lt;em&gt;something&lt;/em&gt;: a class, a method.&lt;/p&gt;

&lt;p&gt;The emphasis on &lt;em&gt;“something”&lt;/em&gt; here is important. We’ll get back to it when we talk about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note how the second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; takes a string as an argument. The string is the description of the abstraction your testing. As a rule of thumb, when testing a method, the description is its name. Prefix it with a hash or a dot, based on the scope of the method:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe '#instance_method_name'&lt;/code&gt; for instance methods&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe '.class_method_name'&lt;/code&gt; for class methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you run your tests, RSpec will output your description like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  Randomized with seed 4321

  User
    &lt;span class=&quot;c&quot;&gt;#full_name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once we write tests, RSpec will output more details.&lt;/p&gt;

&lt;h2 id=&quot;declare-your-abstraction-with-subject-and-named-subject&quot;&gt;Declare your abstraction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; (and named subject)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; represents the abstraction you’re testing. Your subject can be a method, a request, a serialized object, etc. In our example, it’s the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; is a method that takes a block in which I call the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt; on an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What’s the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; then? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; tells RSpec what to evaluate. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; is &lt;em&gt;just&lt;/em&gt; here to make your tests readable.&lt;/p&gt;

&lt;p&gt;Sometimes, you need to explicitly reference your subject in your tests (we’ll see an example in a little while). In that case, it’s best to name your subject.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:full_name_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;full_name_method&lt;/code&gt; will reference the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt; method in our tests. I’ve chosen a somewhat crappy name - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;full_name_method&lt;/code&gt; - to highlight the difference between the name of the subject and the actual evaluation of the method.&lt;/p&gt;

&lt;p&gt;Why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; class is not the subject of our whole example group? Are we not testing the model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;? You’re right. We &lt;em&gt;are&lt;/em&gt; testing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; class but you can’t test the class as a whole. So you test each part, each behavior until they sum up to your class. Each behavior is a different test subject. This is why RSpec advertises itself as &lt;em&gt;behavior driven development&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But hang on! In our example, where does that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.full_name&lt;/code&gt; comes from? Let me show you how variables work in RSpec.&lt;/p&gt;

&lt;h2 id=&quot;creating-variables-with-let-and-let&quot;&gt;Creating variables with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let!&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; is specific to RSpec. It’s the method that lets you create variables.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Buffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Summers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, we create a user and assign it to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But why don’t we just use a good old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user = User.create&lt;/code&gt;? We could get rid of those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{}&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Technically, you could. This is valid and your tests will be able to access the value store in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; is not just a way to assign values to variables.&lt;/p&gt;

&lt;p&gt;First, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; is lazy-evaluated. It means - in our example - that the user won’t be created and assigned until your tests invoke the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; for the first time. Second, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; is a memoized helper method. Once the value is evaluated for the first time, it won’t be evaluated again. Its value is cached across the example group. In our example above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; is evaluated once and its value is cached across all examples because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let(:user)&lt;/code&gt; is defined at the top-level example group (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSpec.define&lt;/code&gt; block)&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-about-let&quot;&gt;What about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let!&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;If you want to force the evaluation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User.create&lt;/code&gt; before your tests run, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let!&lt;/code&gt; instead. This is useful when you need to create several instances as a context for your tests.&lt;/p&gt;

&lt;p&gt;To recap:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let(:user) { ... }&lt;/code&gt; is only evaluated the first time a test calls the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let!(:user) { ... }&lt;/code&gt; is evaluated before each test.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-variables&quot;&gt;Other variables&lt;/h3&gt;

&lt;p&gt;In your test, you can also access the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;described_class&lt;/code&gt; which represents the core abstraction of your spec file. In our case, this is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; class.&lt;/p&gt;

&lt;h3 id=&quot;contextual-let&quot;&gt;Contextual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;You often need to change the value of variables based on some context. Here’s an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Buffy'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Summers'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt; is still accessible everywhere, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_name: 'Buffy'&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_name: 'Summers'&lt;/code&gt; are only accessible within the context of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt; example group.&lt;/p&gt;

&lt;p&gt;This allows you to change the value when you need it. Speaking of context, let’s check it out.&lt;/p&gt;

&lt;h2 id=&quot;test-conditionnal-behavior-with-context&quot;&gt;Test conditionnal behavior with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; is best understood with an example. Let me show you something before I give you a definition.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Buffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Summers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when a user has a first_name and a last_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# test the output of the method full_name under a specific constraint&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when a user has no last_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# test the output of the method full_name under another constraint&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can you guess what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; does?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; is used to group your tests around - drum roll 🥁 - a specific context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know. It sounds silly when you spell it out.&lt;/p&gt;

&lt;p&gt;If you expect a different output for your method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#full_name&lt;/code&gt; based on a condition - a blank last name, for example - you can group your tests in several &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; blocks.&lt;/p&gt;

&lt;p&gt;Some examples of contexts you’ll use in your tests:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What happens if an attribute is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; when I expected a truthy value?&lt;/li&gt;
  &lt;li&gt;What happens if the type of my input is different from the one I expected?&lt;/li&gt;
  &lt;li&gt;What happens when methods raise an error? And when it doesn’t?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the output of your tests with some contexts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  Randomized with seed 4321

  User
    &lt;span class=&quot;c&quot;&gt;#full_name&lt;/span&gt;
      when a user has a first_name and a last_name
        ...
      when a user has no last_name
        ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;when-to-use-describe-and-when-to-use-context&quot;&gt;When to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; and when to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To be honest, when I first started testing, I would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt; indifferently. Then after a while, I set into a pattern:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When I test &lt;em&gt;something&lt;/em&gt; - a class, a method, an abstraction -, I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;When I test &lt;em&gt;how that something fare under a certain circumstance&lt;/em&gt; - a missing parameter, an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; value, etc -, I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;describe-your-test-with-it&quot;&gt;Describe your test with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We’re getting there! But before we write the &lt;em&gt;actual&lt;/em&gt; content of our first test, we need to describe it first. And this is what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt; does. As &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; is a wrapper to build an example group, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt; is a wrapper to build an example. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;takes a string as an argument.&lt;/p&gt;

&lt;p&gt;The description of each test should state the expected behavior of the abstraction you’re testing.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Buffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Summers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when a user has a first_name and a last_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns the user's full name&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# test expected behaviour&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when a user has no last_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns an error&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# test the expected behaviour&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;, I expect a specific output. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt; makes it clear what I should get out of my abstraction.&lt;/p&gt;

&lt;p&gt;RSpec will print out your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;s in your console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  Randomized with seed 4321

  User
    &lt;span class=&quot;c&quot;&gt;#full_name&lt;/span&gt;
      when a user has a first_name and a last_name
        returns the user&lt;span class=&quot;s1&quot;&gt;'s full name
      when a user has no last_name
        returns an error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See? This is super easy to read. You are testing the instance method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;full_name&lt;/code&gt; defined in your class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;. When your instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; has a value for first name and last name, you expect your method to return your user’s full name. When your user has no last name, you expect your method to raise an error.&lt;/p&gt;

&lt;p&gt;And now, it’s time to write the body of our first test, our expectation.&lt;/p&gt;

&lt;h2 id=&quot;what-did-you-expect&quot;&gt;What did you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt;?&lt;/h2&gt;

&lt;p&gt;RSpec is behavior-based. It allows you to compare the &lt;em&gt;expected&lt;/em&gt; behavior of your abstraction with the actual behavior of your abstraction (i.e. your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt; your test’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; to equal / contain / include your expected output. Let me show you.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Buffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Summers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when a user has a first_name and a last_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns the user's full name&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Buffy Summers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'when a user has no last_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns an error&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UserErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;InvalidLastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt; takes your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subject&lt;/code&gt; as an argument and returns an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpectationTarget&lt;/code&gt; object with the actual result of your abstraction evaluation stored in it. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt; calls the method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to&lt;/code&gt; with a &lt;em&gt;matcher&lt;/em&gt; as an argument. In our example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eq&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raise_error&lt;/code&gt; are matchers. These matchers take an argument too: the expected output.&lt;/p&gt;

&lt;p&gt;The matchers’ job is to compare the expected output with the actual output. Here’s the &lt;a href=&quot;https://github.com/rspec/rspec-expectations/blob/main/lib/rspec/matchers/built_in/eq.rb#L34&quot; target=&quot;\_blank&quot;&gt;code from RSpec&lt;/a&gt;, it’s pretty straighforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RSpec&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Matchers&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BuiltIn&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseMatcher&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

          &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

          &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If your expectation is fulfilled, your example’s description will print out green. If the expectation is not fulfilled, it’ll output red.&lt;/p&gt;

&lt;p&gt;Before we conclude, let list the basic expectations and matchers from RSpec.&lt;/p&gt;

&lt;h3 id=&quot;basic-expectations-and-matchers&quot;&gt;Basic expectations and matchers&lt;/h3&gt;

&lt;p&gt;Expectations’ job is mostly to create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExpectationTarget&lt;/code&gt; object that responds to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to_not&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to_not&lt;/code&gt; allow you to create positive or negative expectations. This is also where RSpec handle specific examples, like aggregate failures (i.e. when you test several assertions in one example&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;).&lt;/p&gt;

&lt;p&gt;You can write your expectation in three ways:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type: :model&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;first_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Buffy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Summers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#full_name'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;returns the user's full name&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Buffy Summers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Buffy Summers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Buffy Summers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;RSpec generates its own message when your write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it { expect(subject).to ... }&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_expected&lt;/code&gt; triggers the evaluation of your subject implicitly and returns an RSpec-generated message.&lt;/p&gt;

&lt;p&gt;You can dive into &lt;a href=&quot;https://github.com/rspec/rspec-expectations/tree/main/lib/rspec/expectations&quot; target=&quot;\_blank&quot;&gt;expectations in the RSpec codebase&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Matchers are a powerful feature. They allow you to define specific matching rules between your actual output and your expected output:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eq&lt;/code&gt; does a simple comparison.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contain_exactly&lt;/code&gt; checks if every arguments passed to your matcher are contain in your actual result regardless of order.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt; checks is the argument passed to your matcher is included in your result.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;have_http_status&lt;/code&gt; is damn useful for testing requests’ responses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can discover all matchers &lt;a href=&quot;https://github.com/rspec/rspec-expectations/tree/main/lib/rspec/matchers/built_in&quot; target=&quot;\_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;You were too lazy to read all this? I’ve made you a gif.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/03/rspec-fundamentals-glossary-remi-mercier.gif&quot; alt=&quot;a gif of a test building up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you feel like digging deeper, here are a few links for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=B8yKlTNlY5E&quot; target=&quot;\_blank&quot;&gt;How RSpec works?&lt;/a&gt;: a presentation by Sam Phippen at RubyKaigi in 2019 that gives a good introduction to RSpec’s architecture. It’s neat!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rspec/rspec-core/tree/main/lib/rspec/core&quot; target=&quot;\_blank&quot;&gt;RSpec core library&lt;/a&gt;: contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rspec/rspec-expectations&quot; target=&quot;\_blank&quot;&gt;RSpec expectations&lt;/a&gt;: contains &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expect&lt;/code&gt; and matchers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This is the context which encapsulates all your tests for the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aggregate failures&lt;/code&gt; is pretty useful for testing attributes in a serialized object. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="rspec fundamentals"/><summary type="html">RSpec syntax can be tricky to get at first. Here's a glossary of the keywords you'll use the most when testing with RSpec: describe, subject, let vs let!, it, context, etc...</summary></entry><entry><title type="html">RSpec fundamentals: setup, naming and basic structure</title><link href="https://remimercier.com/rspec-101-basic-set-up/" rel="alternate" type="text/html" title="RSpec fundamentals: setup, naming and basic structure"><published>2021-03-09T00:00:00+00:00</published><updated>2021-03-09T00:00:00+00:00</updated><id>https://remimercier.com/rspec-101-setup-and-structure</id><content type="html" xml:base="https://remimercier.com/rspec-101-basic-set-up/">&lt;p&gt;When you start programming, it’s not easy to know what to test, how to test, and why should you test? You’ve probably heard that TDD (as in Test Driven Development) is THE best practice. But at first, it’s hard to know what your code should do before you’re writing it.&lt;/p&gt;

&lt;p&gt;Testing requires practice to reveal its potential.&lt;/p&gt;

&lt;p&gt;When I started programming, I’d copy other people’s tests because, well, I had to test, right? But after a while, my tests would uncover edge cases, potential bugs I’d overlooked.&lt;/p&gt;

&lt;p&gt;So, I feel a &lt;a href=&quot;/series/rspec/&quot;&gt;series of RSpec fundamentals&lt;/a&gt; - short know-hows, know-whats and, know-whys - could be of some use to newcomers. Brief essays explaining one aspect of testing with RSpec.&lt;/p&gt;

&lt;p&gt;If this sounds fun to you, let’s start with the basics.&lt;/p&gt;

&lt;h2 id=&quot;what-is-rspec&quot;&gt;What is RSpec?&lt;/h2&gt;

&lt;p&gt;First, let’s begin with the obvious question: what is RSpec?&lt;/p&gt;

&lt;p&gt;&lt;mark&gt;RSpec is a testing framework built in Ruby to test Ruby code. It focuses on testing the behavior of your program: what am I feeding my code? What do I expect to come out?&lt;/mark&gt;&lt;/p&gt;

&lt;p&gt;It’s one of several testing frameworks available out there. You might also know Minitest.&lt;/p&gt;

&lt;h2 id=&quot;adding-rspec-to-your-application&quot;&gt;Adding RSpec to your application&lt;/h2&gt;

&lt;p&gt;The RSpec team maintains a gem, making it easy to use the framework in Rails applications.&lt;/p&gt;

&lt;p&gt;First, add RSpec to your Gemfile.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rspec-rails&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;group: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Install the gem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Scaffold RSpec’s configuration and switch your application’s testing framework to RSpec.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  rails generate rspec:install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, run your migrations and prepare your test database.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  rails db:migrate &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rails db:test:prepare&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There! Now, you can run your tests by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rspec spec&lt;/code&gt; in your shell. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec&lt;/code&gt; is the folder where you’ll create your test files.&lt;/p&gt;

&lt;h2 id=&quot;naming-your-rspec-files&quot;&gt;Naming your RSpec files&lt;/h2&gt;

&lt;p&gt;RSpec naming convention is straightforward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users_controller.rb&lt;/code&gt; is tested by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users_controller_spec.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.rb&lt;/code&gt; is tested by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_spec.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_notification_job.rb&lt;/code&gt; is tested by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user_notification_job_spec.rb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;architecturing-your-spec-folder&quot;&gt;Architecturing your spec folder&lt;/h2&gt;

&lt;p&gt;To make sure RSpec and Rails work smoothly together, &lt;mark&gt;mimick the structure of your `app` folder.&lt;/mark&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  my_app_directory
  |
  |- app
  |  |
  |  |- models
  |     |
  |     |- user.rb
  |
  |- spec
     |
     |- models
        |
        |- user_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/models/user.rb&lt;/code&gt; is tested by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/models/user_spec.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/serializers/admin/book_serializer.rb&lt;/code&gt; is tested by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/serializers/admin/book_serializer_spec.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s only one catch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/controllers/users_controller.rb&lt;/code&gt; is tested by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/requests/users_controller.rb&lt;/code&gt;. The RSpec team discourages you to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec/controllers&lt;/code&gt;. Why? Because testing requests allows you to test the behaviour of your controller’s actions through the stack (routing, request, response, etc…) versus testing the controller in isolation &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for testing controllers, your folder’s structure is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  my_app_directory
  |
  |- app
  |  |
  |  |- controllers
  |     |
  |     |- users_controller.rb
  |
  |- spec
     |
     |- controllers ❌
     |
     |- requests
        |
        |- users_controller_spec.rb&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-structure-of-your-rspec-files&quot;&gt;The structure of your RSpec files&lt;/h2&gt;

&lt;p&gt;Let’s say we want to test our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; model. Our file’s structure would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# spec/models/user_spec.rb&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rails_helper'&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# test stuff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There! Your setup is done.&lt;/p&gt;

&lt;p&gt;But now, I’d like us to dig into each element so we get a better understanding of what’s going on.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require 'rails_helper'&lt;/code&gt; loads the configuration for RSpec. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails_helper.rb&lt;/code&gt; is located at the root of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec&lt;/code&gt; folder. RSpec is configured out of the box so no need to worry about it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSpec&lt;/code&gt; is the core module for all RSpec code. It encapsulates and loads a lot of things on instantiation: configuration, expectations, examples, etc. You can check out the code &lt;a href=&quot;https://github.com/rspec/rspec-core/blob/main/lib/rspec/core.rb#L41&quot; target=&quot;\_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.describe&lt;/code&gt; is a class method defined on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSpec&lt;/code&gt; module. It groups your tests around a common abstraction: a class, a request, etc. In the example above, our abstraction is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; model.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code below is from &lt;a href=&quot;https://github.com/rspec/rspec-core/blob/fe3084758857f0714f05ada44a18f1dfe9bf7a7e/lib/rspec/core/dsl.rb#L42&quot; target=&quot;\_blank&quot;&gt;the RSpec repository&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expose_example_group_alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example_group_aliases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;example_group_aliases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example_group_block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExampleGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example_group_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;expose_example_group_alias_globally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exposed_globally?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s a bit hard to read because of the metaprogramming bits, but the main idea is that it defines the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.describe&lt;/code&gt; instance method in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSpec::Core::ExampleGroup&lt;/code&gt; class with the abstraction you’re testing (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;) and the tests you wrote as arguments.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt; is the class you’re testing. It’s passed as an argument to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.describe&lt;/code&gt; method.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do ... end&lt;/code&gt; is the block where you’re writing your tests. These will be passed as a second argument to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.describe&lt;/code&gt; method (see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;example_group_block&lt;/code&gt; above).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope these explanations will give you a better understanding of how RSpec works. Next time, we’ll write our first tests.&lt;/p&gt;

&lt;p&gt;Noticed something? &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;Ping me on Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/merciremi/remicodes/issues/new&quot;&gt;create an issue on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Thanks &lt;a href=&quot;https://twitter.com/Benoit_Tgt&quot; target=&quot;\_blank&quot;&gt;@Benoit&lt;/a&gt; for pointing that out! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="rspec fundamentals"/><summary type="html">When you start programming, it's not easy to know what to test, how to test, and why should you test? So let's start with the basics: a basic setup and exploring your tests structure.</summary></entry><entry><title type="html">Always serving someone</title><link href="https://remimercier.com/always-serving-someone/" rel="alternate" type="text/html" title="Always serving someone"><published>2021-01-21T00:00:00+00:00</published><updated>2021-01-21T00:00:00+00:00</updated><id>https://remimercier.com/always-serving-someone</id><content type="html" xml:base="https://remimercier.com/always-serving-someone/">&lt;p&gt;It’s Monday morning, and you open up a handful of files. You want to get a sense of that piece of the codebase you’re about to work on. You’re soon finding yourself surrounded by circumvoluted code, abstractions pilling on each other, classes filled to the brim. You end up spending your day trying to figure things out.&lt;/p&gt;

&lt;p&gt;This is a lousy Monday.&lt;/p&gt;

&lt;p&gt;What happened then? Well, the person/people who wrote the code forgot they’re delivering a service. Maybe it was you.&lt;/p&gt;

&lt;p&gt;I mean, it’s easy to tell yourself that you don’t give a hoot about your users when you’re knee-deep into SQL queries. You’re not here to provide a great service to your users. You’re here to fetch data, pass it around between abstractions, and send it to the front-end team.&lt;/p&gt;

&lt;p&gt;But what about the person who’ll work on your code two years from now? What about your future self that’ll get back to that &lt;em&gt;awful&lt;/em&gt; transaction you wrote last month.&lt;/p&gt;

&lt;p&gt;I know it’s neither easy nor possible to write beautiful code. The deadline is looming. Everyone has their own likings and tastes when it comes to design patterns.&lt;/p&gt;

&lt;p&gt;But when I can, I like to think myself as a designer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I state what the problem is.&lt;/li&gt;
  &lt;li&gt;I explore solutions.&lt;/li&gt;
  &lt;li&gt;I produce something that’s both functional and beautiful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure, well-articulated code doesn’t come if you’re burning the candle at both ends. You can’t conjure up beauty when you’re always fighting against ludicrous deadlines.&lt;/p&gt;

&lt;p&gt;Aesthetic needs room to breathe.&lt;/p&gt;

&lt;p&gt;This extra time will save you a massive amount of time over and over again. It’ll compound. And what was a lost Monday to you will become a joyful one for another developer.&lt;/p&gt;

&lt;p&gt;Writing expressive code is me providing a great service to myself and my teammates. We are my own customers. And I want to serve them well.&lt;/p&gt;

&lt;p&gt;Noticed something? &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;Ping me on Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/merciremi/remicodes/issues/new&quot;&gt;create an issue on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi&lt;/p&gt;</content><author><name>Rémi Mercier</name></author><category term="career"/><summary type="html">It's easy to tell yourself it's not your job to provide a great service to your users. But taking time to write beautiful code will bring joy and value to you and your teammates.</summary></entry><entry><title type="html">Debugging with pry-byebug: moving in the stack frame</title><link href="https://remimercier.com/pry-byebug-intermediate/" rel="alternate" type="text/html" title="Debugging with pry-byebug: moving in the stack frame"><published>2021-01-18T00:00:00+00:00</published><updated>2021-01-18T00:00:00+00:00</updated><id>https://remimercier.com/debugging-with-prybyebug-stack-frame</id><content type="html" xml:base="https://remimercier.com/pry-byebug-intermediate/">&lt;p&gt;It is a truth universally acknowledged that a single developer in possession of a good codebase must be in want of a bug-free application &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Alas, debugging never ends. The more you learn, the more debugging becomes complex.&lt;/p&gt;

&lt;p&gt;I think it is high time we dive deeper into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry-byebug&lt;/code&gt;. Are you new to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry-byebug&lt;/code&gt;? Go and check &lt;a href=&quot;/pry-byebug-tutorial/&quot;&gt;the beginners introduction to debugging your code&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;Here our &lt;em&gt;menu du jour&lt;/em&gt;: moving in the stack frame, adding breakpoints on the fly, and some handy shortcuts (because who loves to write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue&lt;/code&gt; continually).&lt;/p&gt;

&lt;h2 id=&quot;step-into-the-stack-frame-step&quot;&gt;Step into the stack frame: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I discovered &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; only recently. One easy way to understand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; is to explain it in contrast to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; executes the next line in your current context. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; steps into the specific context - the &lt;strong&gt;frame&lt;/strong&gt; - of the next line in your code.&lt;/p&gt;

&lt;p&gt;The following example is a basic endpoint that allows me to get all available books and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt; model with a class method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;# app/controllers/books_controller.rb&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BooksController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseController&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;available_books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;available_books&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# app/model/book.rb&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;available&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The breakpoint will pause execution before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.available&lt;/code&gt; and open a debugging console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 4 BooksController#index:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def index
    02:     binding.pry
    03:
 =&amp;gt; 04:     available_books = Book.available
    05:
    06:     render json: available_books
    07:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When I type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt;, the result of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book.available&lt;/code&gt; is assigned to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;available_books&lt;/code&gt; and the execution stops before the next line.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 4 BooksController#index:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def index
    02:     binding.pry
    03:
    04:     available_books = Book.available
    05:
 =&amp;gt; 06:     render json: available_books
    07:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happened in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book.available&lt;/code&gt;? I don’t know. I only executed that line of code and stayed in my current frame - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BooksController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/01/debugging-frame-stack-remi-mercier-01.jpeg&quot; alt=&quot;a schema explaining how the next command stays in the same frame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s re-run my code and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; instead.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 4 BooksController#index:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def index
    02:     binding.pry
    03:
 =&amp;gt; 04:     available_books = Book.available
    05:
    06:     render json: available_books
    07:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; takes me from my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BooksController&lt;/code&gt; to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt; model. I’ve changed frames. I’m now exploring the class method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book.available&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 2 Book.available:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def self.available
 =&amp;gt; 02:     where(available: true)
    03:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can now check whether my class method works as intended.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/01/debugging-frame-stack-remi-mercier-02.jpeg&quot; alt=&quot;a schema explaining how the step command changes frame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; is a bit of a rabbit hole. It’s a great way to explore how Rails works. For instance, if I type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; before &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where(available: true)&lt;/code&gt;, my console returns:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: .rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-6.0.3.4/lib/active_record/querying.rb:21 ActiveRecord::Querying#where:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt; =&amp;gt; 21: delegate(*QUERYING_METHODS, to: :all)`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yep, I’m now checking out ActiveRecord’s inner gut.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/01/debugging-frame-stack-remi-mercier-03.jpeg&quot; alt=&quot;a schema explaining how the step command changes frame&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;move-up-the-stack-frame-up&quot;&gt;Move up the stack frame: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Remember when we dived into the frames? Well, how do I come back to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BooksController&lt;/code&gt;? With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt;, of course.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 2 Book.available:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def self.available
 =&amp;gt; 02:     where(available: true)
    03:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If I type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt; in my console, I’ll move up the frames towards my initial breakpoint.&lt;/p&gt;

&lt;p&gt;What if I’ve moved down frames several times? I can either pass the number of frames I’d like to go up as an argument - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up(2)&lt;/code&gt; - or type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;up&lt;/code&gt; several times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2021/01/debugging-frame-stack-remi-mercier-04.jpeg&quot; alt=&quot;a schema explaining how the up command moves up the frame stack&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-and-remove-breakpoints-on-the-fly&quot;&gt;Add and remove breakpoints on the fly&lt;/h2&gt;

&lt;h3 id=&quot;1-add-a-breakpoint-from-the-console-break&quot;&gt;1) Add a breakpoint from the console: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If I realize, once I’m in my debugging console, that I would have needed another breakpoint, I can add it on the fly with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break line_number&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 4 BooksController#index:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def index
    02:     binding.pry
    03:
 =&amp;gt; 04:     available_books = Book.available
    05:
    06:     render json: available_books
    07:   end
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  [1] pry(BooksController#index)&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;  Breakpoint 1: /path/controllers/books_controller.rb @ 06 (Enabled)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;     01:   def index
     02:     binding.pry
     03:
     04:     available_books = Book.available
     05:
  =&amp;gt; 06:     render json: available_books
     07:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break 06&lt;/code&gt;, resume the execution, and have it paused before the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A few things to consider:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoint 1: /path/controllers/books_controller.rb @ 06 (Enabled)&lt;/code&gt; gives me my new breakpoint reference number: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;. This will come handly later.&lt;/li&gt;
  &lt;li&gt;What appears after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Breakpoint 1 ...&lt;/code&gt; is part of my breakpoint’s information. Not where my program is currently paused.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adding breakpoint son the fly makes for a pretty seamless debugging experience. I used to exit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry&lt;/code&gt; session, go back to my code, add a new breakpoint, then re-run execution. Let me tell you, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break 06&lt;/code&gt; came as a relief!&lt;/p&gt;

&lt;h3 id=&quot;2-remove-a-breakpoint-from-the-console-break---delete-breakpoint_number-or-break--d-breakpoint_number&quot;&gt;2) Remove a breakpoint from the console: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break --delete breakpoint_number&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break -D breakpoint_number&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;So, now my program is paused before the line 04, and I know I added a second breakpoint on the line 06:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;  From: (pry) @ line 4 BooksController#index:
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    01:   def index
    02:     binding.pry
    03:
 =&amp;gt; 04:     available_books = Book.available
    05:
    06:     render json: available_books
    07:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What if I want to remove this second breakpoint?&lt;/p&gt;

&lt;p&gt;First, I want to find my breakpoint’s reference by listing all breakpoints with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt;. Then, I can delete the breakpoint with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break --delete breakpoint_number&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;  [1] pry(BooksController#index)&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;  # Enabled At
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;  -------------
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;  1 Yes     /path/controllers/books_controller.rb @ 06
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  [2] pry(BooksController#index)&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;  # Enabled At
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   -------------&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break&lt;/code&gt; outputs the list of all the breakpoints added in the console.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break --delete breakpoint_number&lt;/code&gt; outputs the list of all remaining breakpoints.&lt;/p&gt;

&lt;h3 id=&quot;3-show-breakpoints-information-break---show-breakpoint_number&quot;&gt;3) Show breakpoints information: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break --show breakpoint_number&lt;/code&gt;&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-irb&quot; data-lang=&quot;irb&quot;&gt;&lt;span class=&quot;gp&quot;&gt;  [1] pry(BooksController#index)&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;    Breakpoint 1: /path/controllers/books_controller.rb @ 06 (Enabled)
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;     01:   def index
     02:     binding.pry
     03:
     04:     available_books = Book.available
     05:
  =&amp;gt; 06:     render json: available_books
     07:   end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the same output that the one I get after adding a breakpoint.&lt;/p&gt;

&lt;h2 id=&quot;check-your-latest-commands-history&quot;&gt;Check your latest commands: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;history&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;history&lt;/code&gt; gives me a list of all past commands I ran during the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pry&lt;/code&gt; session.&lt;/p&gt;

&lt;h2 id=&quot;commands-and-aliases&quot;&gt;Commands and aliases&lt;/h2&gt;

&lt;p&gt;Finally, here’s a handy table with some commands and their aliases.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;command&lt;/th&gt;
      &lt;th&gt;alias&lt;/th&gt;
      &lt;th&gt;expected behavior&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wherami&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints out your current context&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;continue program execution&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;execute the next line in the current stack frame&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;step execution into the next line&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break --delete&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break -D&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;delete a breakpoint&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break --show&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;break -s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;show a breakpoints details and source&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There’s only one thing left to say: Happy debugging!&lt;/p&gt;

&lt;p&gt;Noticed something? &lt;a href=&quot;https://twitter.com/mercier_remi&quot;&gt;Ping me on Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/merciremi/remicodes/issues/new&quot;&gt;create an issue on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Sorry, just re-read for the umpteenth time Pride and Prejudice. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rémi Mercier</name></author><category term="other"/><summary type="html">Time to level up your debugging game with frames, adding breakpoints on the fly, and some handy shortcuts.</summary></entry><entry><title type="html">Get started with ActiveRecord scoped associations</title><link href="https://remimercier.com/scoped-active-record-associations/" rel="alternate" type="text/html" title="Get started with ActiveRecord scoped associations"><published>2020-10-07T00:00:00+00:00</published><updated>2020-10-07T00:00:00+00:00</updated><id>https://remimercier.com/scoped-active-record-associations</id><content type="html" xml:base="https://remimercier.com/scoped-active-record-associations/">&lt;p&gt;Active Record Associations are a great feature of &lt;a href=&quot;/series/rails/&quot;&gt;Ruby on Rails&lt;/a&gt;. Associations allow you to declare - well - associations between your models. AR Associations also allow you to write operations when several models are linked (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author.first.books.create(title: 'I love Rails!')&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;But I had never thought of using them as scopes until last week! So let me show you a neat little trick that’ll make your code much much more expressive (and keep your N+1 queries in check).&lt;/p&gt;

&lt;h2 id=&quot;defining-basic-associations&quot;&gt;Defining basic associations&lt;/h2&gt;

&lt;p&gt;I won’t dig into the &lt;a href=&quot;https://guides.rubyonrails.org/association_basics.html&quot; target=&quot;\_blank&quot;&gt;basics of Active Record Associations&lt;/a&gt;. If you don’t know your way around them, go and read the doc first.&lt;/p&gt;

&lt;p&gt;Let’s define a couple of models with their associations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Okay, so now we have a one-to-many relationship between an author and its books. In my console, I can query all the books from one author like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  author &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Author.first

  author.books&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will return a collection of books for my first author.&lt;/p&gt;

&lt;h2 id=&quot;filtering-things-out-with-scopes&quot;&gt;Filtering things out with scopes&lt;/h2&gt;

&lt;p&gt;Now, let’s say some books can either be available or not available. What I’d like is to get a collection of all the books that are currently available in my application.&lt;/p&gt;

&lt;p&gt;How can I filter out unavailable books?&lt;/p&gt;

&lt;p&gt;I could write something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  available_books &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; author.books.where&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;available: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what if I write this line above in multiple places in my code? Well, if I decided to change the condition of the collection, I would need to edit my code several times. This would be time-consuming, and error-prone.&lt;/p&gt;

&lt;p&gt;To DRY things up, I can write a scope in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt; model to centralize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where(available: true)&lt;/code&gt; bit.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;available&lt;/code&gt; scope now lets me do this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  author.books.available&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It looks already more readable, right?&lt;/p&gt;

&lt;p&gt;One caveat with scopes is that &lt;a href=&quot;https://www.justinweiss.com/articles/how-to-preload-rails-scopes/&quot; target=&quot;\_blank&quot;&gt;they are not preloaded&lt;/a&gt;. This’ll eventually results in N+1 queries.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  authors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Author.first&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  authors.map &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |author|
    &lt;span class=&quot;s2&quot;&gt;&quot;#{author.first_name} has #{author.books.available.length} books available&quot;&lt;/span&gt;
  end

  Author Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt; ORDER BY &lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; ASC LIMIT ?  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LIMIT&quot;&lt;/span&gt;, 2]]
  Book Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.3ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt; WHERE &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ? AND &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ?  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt;, 1], &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt;, 1]]
  Book Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.1ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt; WHERE &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ? AND &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ?  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt;, 2], &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt;, 1]]

  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob has 2 books available&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Starhawk has 0 books available&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What you see above are N+1 queries: one query for the author, one query for each book. Not something you want to keep around in your code.&lt;/p&gt;

&lt;p&gt;Let’s make our code more expressive and robust!&lt;/p&gt;

&lt;h2 id=&quot;adding-scopes-to-your-has_one-or-has_many-associations&quot;&gt;Adding scopes to your has_one or has_many associations&lt;/h2&gt;

&lt;p&gt;Remember our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;available&lt;/code&gt; scope?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I can define a new association with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;available&lt;/code&gt; scope as a parameter.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:available_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Book'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please note that I’m passing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the name of the scope - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;available&lt;/code&gt; - in the association lambda&lt;/li&gt;
  &lt;li&gt;the name of the class the association points to, with the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I can query available books like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  author.available_books&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It reads like plain English. Beautiful, isn’t it?&lt;/p&gt;

&lt;p&gt;I also like that the model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Author&lt;/code&gt; doesn’t get to know about the internal logic of books’ availability. This logic is encapsulated in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt; model because it only concerns books. Neat!&lt;/p&gt;

&lt;h2 id=&quot;many-to-many-associations-with-scope&quot;&gt;Many-to-many associations with scope&lt;/h2&gt;

&lt;p&gt;What if our books have several authors? How do we scope through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_many&lt;/code&gt; association?&lt;/p&gt;

&lt;p&gt;Let’s edit our models.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :authors_books&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;though: :authors_books&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorsBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We changed the nature of the association in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Book&lt;/code&gt; and added a third table to handle the relationship: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthorsBooks&lt;/code&gt;. Let’s re-create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_many :available_books&lt;/code&gt; association.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :authors_books&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:available_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;available&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :authors_books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;source: :book&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Like for the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt; association, we passed the name of the scope in a lambda. Only this time, we send it through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authors_books&lt;/code&gt; table. Note that we’re not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_name&lt;/code&gt; anymore. We’re using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; instead &lt;em&gt;as per&lt;/em&gt; &lt;a href=&quot;https://guides.rubyonrails.org/association_basics.html#options-for-has-many-source&quot; target=&quot;\_blank&quot;&gt;Rails documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And what about preloading?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;  authors &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Author.includes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;:available_books&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.first&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  authors.map &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |author|
    &lt;span class=&quot;s2&quot;&gt;&quot;#{author.first_name} has #{author.available_books.length} books available&quot;&lt;/span&gt;
  end

  Author Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.2ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt; ORDER BY &lt;span class=&quot;s2&quot;&gt;&quot;authors&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; ASC LIMIT ?  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;LIMIT&quot;&lt;/span&gt;, 2]]

  Book Load &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.5ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  SELECT &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; FROM &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt; WHERE &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ? AND &lt;span class=&quot;s2&quot;&gt;&quot;books&quot;&lt;/span&gt;.&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt; IN &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;?, ?&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt;, 1], &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt;, 1], &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author_id&quot;&lt;/span&gt;, 2]]

  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob has 2 books available&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Starhawk has 0 books available&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt;, I can preload my scoped association. No more N+1 queries: one query for the author and one query for all the books. Note that, in my loop, I can replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author.books.available&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author.available_books&lt;/code&gt; for more readability.&lt;/p&gt;

&lt;p&gt;I hope it’ll help next time you need to access a scope through a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;has_many&lt;/code&gt; association!&lt;/p&gt;

&lt;p&gt;Did I miss something? &lt;a href=&quot;https://github.com/merciremi/remicodes/issues/new&quot; target=&quot;\_blank&quot;&gt;Submit an edit on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Rémi - &lt;a href=&quot;https://twitter.com/mercier_remi&quot; target=&quot;\_blank&quot;&gt;@mercier_remi&lt;/a&gt;&lt;/p&gt;</content><author><name>Rémi Mercier</name></author><category term="rails"/><summary type="html">Active Record Associations are a great feature of Rails. But I never thought of using scopes with has_one or has_many associations until recently! So let me show you a neat little trick that'll make your code much much more expressive (and keep your N+1 queries in check).</summary></entry></feed>