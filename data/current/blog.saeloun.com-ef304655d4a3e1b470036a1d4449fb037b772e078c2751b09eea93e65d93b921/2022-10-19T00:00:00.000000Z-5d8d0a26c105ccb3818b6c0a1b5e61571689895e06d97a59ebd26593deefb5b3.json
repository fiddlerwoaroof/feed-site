{
  "title":"Rails now supports infinite range options in LengthValidators",
  "date":"2022-10-19T00:00:00.000000Z",
  "author":null,
  "id":"https://blog.saeloun.com/2022/10/19/infinite-range.html",
  "link":"https://blog.saeloun.com/2022/10/19/infinite-range.html",
  "content":"<p>Rails model validations have a host of options \nthat allow developers to write complex rules for clean data entry. \nA common validation is to ensure that the length of a string is within a certain range. \nFor example, a userâ€™s name should be between 2 \nand 20 characters. \nThis can be achieved using the <code class=\"highlighter-rouge\">length</code> validator.</p>\n\n<p>app/models/user.rb</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">class</span> <span class=\"nc\">User</span>\n    <span class=\"n\">validates_length_of</span> <span class=\"ss\">:first_name</span><span class=\"p\">,</span> <span class=\"ss\">in: </span><span class=\"mi\">2</span><span class=\"o\">..</span><span class=\"mi\">30</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n<p>For most part this gets the job done. \nWhen a user model is created with a name less than 2 characters \nor more than 30 characters, \nan appropriate error is thrown,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">create!</span> <span class=\"ss\">first_name: </span><span class=\"s2\">&quot;A&quot;</span>\n  <span class=\"sr\">/Users/s</span><span class=\"n\">waathi</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"nf\">rbenv</span><span class=\"o\">/</span><span class=\"n\">versions</span><span class=\"o\">/</span><span class=\"mf\">3.1</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">ruby</span><span class=\"o\">/</span><span class=\"n\">gems</span><span class=\"o\">/</span><span class=\"mf\">3.1</span><span class=\"o\">.</span><span class=\"mi\">0</span><span class=\"o\">/</span><span class=\"n\">bundler</span><span class=\"o\">/</span><span class=\"n\">gems</span><span class=\"o\">/</span><span class=\"n\">rails</span><span class=\"o\">-</span><span class=\"n\">c41e2f1bca65</span><span class=\"o\">/</span><span class=\"n\">activerecord</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">active_record</span><span class=\"o\">/</span><span class=\"n\">validations</span><span class=\"p\">.</span><span class=\"nf\">rb</span><span class=\"p\">:</span><span class=\"mi\">82</span><span class=\"ss\">:in</span> <span class=\"sb\">`raise_validation_error': Validation failed: First name is too short (minimum is 2 characters) (ActiveRecord::RecordInvalid)\n\n  irb(main):002:0&gt; User.create! first_name: &quot;A&quot;*31\n  /Users/swaathi/.rbenv/versions/3.1.2/lib/ruby/gems/3.1.0/bundler/gems/rails-c41e2f1bca65/activerecord/lib/active_record/validations.rb:82:in `</span><span class=\"n\">raise_validation_error</span><span class=\"err\">'</span><span class=\"p\">:</span> <span class=\"no\">Validation</span> <span class=\"ss\">failed: </span><span class=\"no\">First</span> <span class=\"nb\">name</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">long</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">is</span> <span class=\"mi\">30</span> <span class=\"n\">characters</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">RecordInvalid</span><span class=\"p\">)</span></code></pre></figure>\n\n<h3 id=\"before\">Before</h3>\n<p>However not all attributes require a minimum or maximum length. \nFor example, a middle name can have a maximum length of 30 characters, \nbut it can be empty. \nThis is not possible with the current implementation of the <code class=\"highlighter-rouge\">length</code> validator.</p>\n\n<p>The length validation or a custom one would have to be written.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">class</span> <span class=\"nc\">User</span>\n    <span class=\"n\">validates</span> <span class=\"ss\">:middle_name</span><span class=\"p\">,</span> <span class=\"ss\">length: </span><span class=\"p\">{</span> <span class=\"ss\">maximum: </span><span class=\"mi\">30</span> <span class=\"p\">}</span>\n    <span class=\"n\">validate</span> <span class=\"ss\">:middle_name_length</span>\n\n    <span class=\"kp\">private</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">middle_name_length</span>\n      <span class=\"k\">if</span> <span class=\"n\">middle_name</span><span class=\"p\">.</span><span class=\"nf\">present?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">middle_name</span><span class=\"p\">.</span><span class=\"nf\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span>\n        <span class=\"n\">errors</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"ss\">:middle_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is too long (maximum is 30 characters)&quot;</span><span class=\"p\">)</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n<h3 id=\"after\">After</h3>\n<p>Thanks to <a href=\"https://github.com/rails/rails/pull/45138\">this PR</a> \nwhich introduces extensions to the Range class, \nthe first or the last value of a range can be infinite. \nThis allows us to write the following validations,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">class</span> <span class=\"nc\">User</span>\n    <span class=\"n\">validates_length_of</span> <span class=\"ss\">:first_name</span><span class=\"p\">,</span> <span class=\"ss\">in: </span><span class=\"mi\">2</span><span class=\"o\">..</span>\n    <span class=\"n\">validates_length_of</span> <span class=\"ss\">:middle_name</span><span class=\"p\">,</span> <span class=\"ss\">in: </span><span class=\"o\">..</span><span class=\"mi\">30</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n<p>This allows validations to be written in a more concise way. \nThe <code class=\"highlighter-rouge\">length</code> validator now supports infinite ranges in the <code class=\"highlighter-rouge\">:in</code> \nand <code class=\"highlighter-rouge\">:within</code> options.</p>\n\n<p>This change is possible due to the <code class=\"highlighter-rouge\">Float::INFINITY</code> \noption which is a number that is always the largest in a comparison. \nThis is how the code looks now,</p>\n\n<p>activemodel/lib/active_model/validations/length.rb</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">range</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"ss\">:in</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"ss\">:within</span><span class=\"p\">))</span>\n      <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s2\">&quot;:in and :within must be a Range&quot;</span> <span class=\"k\">unless</span> <span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">Range</span><span class=\"p\">)</span>\n      <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:minimum</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">min</span> <span class=\"k\">if</span> <span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">begin</span>\n      <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:maximum</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">exclude_end?</span> <span class=\"p\">?</span> <span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">end</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">end</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">range</span><span class=\"p\">.</span><span class=\"nf\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:allow_blank</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"kp\">false</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:minimum</span><span class=\"p\">].</span><span class=\"nf\">nil?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:is</span><span class=\"p\">].</span><span class=\"nf\">nil?</span>\n\n    <span class=\"o\">...</span>\n\n  <span class=\"k\">end</span>\n    \n  <span class=\"k\">def</span> <span class=\"nf\">check_validity!</span>\n    <span class=\"n\">keys</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">key</span><span class=\"o\">|</span>\n      <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n\n      <span class=\"k\">unless</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">Integer</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">value</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n              <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"no\">Float</span><span class=\"o\">::</span><span class=\"no\">INFINITY</span> <span class=\"o\">||</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"no\">Float</span><span class=\"o\">::</span><span class=\"no\">INFINITY</span> <span class=\"o\">||</span>\n              <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">Symbol</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">is_a?</span><span class=\"p\">(</span><span class=\"no\">Proc</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">,</span> <span class=\"s2\">&quot;:</span><span class=\"si\">#{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\"> must be a non-negative Integer, Infinity, Symbol, or Proc&quot;</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"o\">...</span>\n\n  <span class=\"k\">end</span></code></pre></figure>\n\n"
}