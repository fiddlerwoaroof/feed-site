{
  "title":"Rails no longer produces false-positive query cache hits when querying with mutable bound parameters",
  "date":"2022-10-18T00:00:00.000000Z",
  "author":null,
  "id":"https://blog.saeloun.com/2022/10/18/fix-cache-when-querying-with-mutable-params.html",
  "link":"https://blog.saeloun.com/2022/10/18/fix-cache-when-querying-with-mutable-params.html",
  "content":"<p>Ruby handles hash keys \nand values as mutable objects. \nThis means that if you pass a hash as a bound parameter to a query, \nthe query cache will not be able to detect \nif the hash has been mutated and will return a false-positive cache hit. \nThis can lead to unexpected results.</p>\n\n<p>First let’s understand hash mutation in Ruby. \nRuby hashes are mutable objects. \nThis means that even when a hash’s value changes, \nit still has the same object ID (a unique identifier for that object). \nLet’s see this in action:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"ss\">a: </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">002</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">30880</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">003</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">merge!</span><span class=\"p\">(</span><span class=\"ss\">b: </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ss\">:b</span><span class=\"o\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">004</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">30880</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">005</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> </code></pre></figure>\n\n<p>However when the value of an integer changes, it gets a new object id. Let’s see this in action:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">integer</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">002</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">integer</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">003</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">integer</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">004</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">integer</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">005</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> </code></pre></figure>\n\n<p>Interestingly, if you try this out in your Rails console, \nyou will see that the object id of the integer does not change. \nThis is because all integers are “frozen”. \nThis means that they cannot be mutated, i.e., \nit’s value can not change unless it’s object ID also changes.</p>\n\n<p>We can also freeze a hash to prevent it from being mutated. \nLet’s see this in action:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"ss\">a: </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">002</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">30880</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">003</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">freeze</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">004</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">merge!</span><span class=\"p\">(</span><span class=\"ss\">b: </span><span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"no\">RuntimeError</span> <span class=\"p\">(</span><span class=\"n\">can</span><span class=\"s1\">'t modify frozen Hash)\n  from (irb):4:in `merge!'</span>\n  <span class=\"n\">from</span> <span class=\"p\">(</span><span class=\"n\">irb</span><span class=\"p\">):</span><span class=\"mi\">4</span>\n  <span class=\"n\">from</span> <span class=\"sr\">/Users/s</span><span class=\"n\">waathi</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"nf\">rbenv</span><span class=\"o\">/</span><span class=\"n\">versions</span><span class=\"o\">/</span><span class=\"mf\">2.7</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">irb</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"ss\">:in</span> <span class=\"sb\">`&lt;main&gt;'\n  irb(main):005:0&gt; hash.object_id\n  =&gt; 30880\n  irb(main):006:0&gt; </span></code></pre></figure>\n\n<p>You can check if an object is frozen or not by calling the <code class=\"highlighter-rouge\">frozen?</code> method on it.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"ss\">a: </span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">002</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">frozen?</span>\n  <span class=\"o\">=&gt;</span> <span class=\"kp\">false</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">003</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">freeze</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{</span><span class=\"ss\">:a</span><span class=\"o\">=&gt;</span><span class=\"mi\">1</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">004</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">frozen?</span>\n  <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">005</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">integer</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">006</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">integer</span><span class=\"p\">.</span><span class=\"nf\">frozen?</span>\n  <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span></code></pre></figure>\n\n<p>In fact objects like integers, strings, symbols, true, false, nil are all frozen by default. This means that they cannot be mutated.</p>\n\n<p>Next, let’s look into how a hash queries for the key that is requested. It’s common knowledge that a hash is a key-value pair, however what is something that is less known is that <a href=\"https://en.wikipedia.org/wiki/Hash_function\">the hash</a> of the key is also stored along with this pair. This is what enables fast lookups. It is also what allows for a mutable object to be the key of a hash.</p>\n\n<p>Let’s see this in action:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">002</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">116740</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">003</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n  <span class=\"o\">=&gt;</span> <span class=\"o\">-</span><span class=\"mi\">2503994910684356896</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">004</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">array</span> <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span><span class=\"p\">}</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">=&gt;</span><span class=\"kp\">true</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">005</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">[</span><span class=\"n\">array</span><span class=\"p\">]</span>\n  <span class=\"o\">=&gt;</span> <span class=\"kp\">true</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">006</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">154720</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">007</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">00</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"p\">.</span><span class=\"nf\">object_id</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">116740</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">00</span><span class=\"mi\">9</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">array</span><span class=\"p\">.</span><span class=\"nf\">hash</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">3563926247310401007</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">010</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span><span class=\"p\">[</span><span class=\"n\">array</span><span class=\"p\">]</span>\n  <span class=\"o\">=&gt;</span> <span class=\"kp\">nil</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">011</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"nb\">hash</span>\n  <span class=\"o\">=&gt;</span> <span class=\"p\">{[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">=&gt;</span><span class=\"kp\">true</span><span class=\"p\">}</span>\n  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">012</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>  </code></pre></figure>\n\n<p>As you can see, the hash of the array changes when the array is mutated, \nsince its data has changed. \nThis might raise a question of how the value of the key continues to change within the hash. \nIt is because the object ID of the array is used to resolve the value. \nSince the object ID of the array does not change, \nthe value of the key is still resolved correctly. \nHowever, since the contents of that array have changed, \nit’s hash has also changed.</p>\n\n<p>Now any good hash function will have a low collision rate. \nThis means that the probability of two different keys having the same hash is low. \nThis is why the hash of the array is a good key to use for caching. \nHowever, low collision rate does not mean no collision rate. \nThis is the basis for the false-positive query cache hits \nwhen querying with mutable bound parameters.</p>\n\n<h3 id=\"before\">Before</h3>\n<p>Let’s look into how the query cache works. \nWhen a query is executed, the query cache stores the result \nand the query so that when the same query is requested again, \nthe result can be fetched from the cache. \nThis is a performance optimization that can be enabled \nby calling <code class=\"highlighter-rouge\">ActiveRecord::Base.connection.enable_query_cache!</code>.</p>\n\n<p>To see how such false-positives might occur, \nwe will create a Rocket model with a payload attribute that can store hashes.</p>\n\n<p>db/migrate/…create_rocket.rb</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">class</span> <span class=\"nc\">CreateRocket</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Migration</span><span class=\"p\">[</span><span class=\"mf\">6.0</span><span class=\"p\">]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change</span>\n      <span class=\"n\">create_table</span> <span class=\"ss\">:rockets</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span>\n        <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"nf\">jsonb</span> <span class=\"ss\">:payload</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n<p>We will now create a Rocket model that stores a hash in its payload attribute \nand then search for it using a query that has a mutable bound parameter. \nA mutable bound parameter is just passing in a hash as a parameter to the query.</p>\n\n<p>app/models/rocket.rb</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">def</span> <span class=\"nf\">test_bug</span><span class=\"p\">(</span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">false_positives</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"no\">Rocket</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">enable_query_cache!</span>\n\n    <span class=\"n\">iterations</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span>\n      <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">),</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)</span>\n\n      <span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"no\">Rocket</span><span class=\"p\">.</span><span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"ss\">payload: </span><span class=\"p\">{</span> <span class=\"n\">key</span> <span class=\"o\">=&gt;</span> <span class=\"n\">val</span> <span class=\"p\">})</span>\n\n      <span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">key</span> <span class=\"o\">=&gt;</span> <span class=\"n\">val</span> <span class=\"p\">}</span>\n      <span class=\"n\">the_record</span> <span class=\"o\">=</span> <span class=\"no\">Rocket</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">payload: </span><span class=\"n\">search</span><span class=\"p\">).</span><span class=\"nf\">first</span> <span class=\"c1\"># this should populate the cache</span>\n      <span class=\"k\">raise</span> <span class=\"k\">unless</span> <span class=\"n\">the_record</span><span class=\"p\">.</span><span class=\"nf\">present?</span>\n\n      <span class=\"c1\"># cache now looks like this, essentially:</span>\n      <span class=\"c1\">#  { &quot;SELECT * FROM rockets WHERE value = $1&quot; =&gt;</span>\n      <span class=\"c1\">#    { [search] =&gt; the_record }</span>\n      <span class=\"c1\">#  }</span>\n\n      <span class=\"n\">new_val</span> <span class=\"o\">=</span> <span class=\"nb\">rand</span><span class=\"p\">(</span><span class=\"mi\">100000</span><span class=\"p\">)</span> <span class=\"k\">until</span> <span class=\"n\">new_val</span> <span class=\"o\">!=</span> <span class=\"n\">val</span>\n\n      <span class=\"n\">search</span><span class=\"p\">.</span><span class=\"nf\">merge!</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">=&gt;</span> <span class=\"n\">new_val</span><span class=\"p\">)</span> <span class=\"c1\"># this mutates the key inside the query cache</span>\n\n      <span class=\"c1\"># normally: because the hash of the key has changed, this is a cache miss</span>\n      <span class=\"c1\"># however, if the new hash key's numerical hash falls into the same bucket</span>\n      <span class=\"c1\"># as the original, the hash lookup will a) find the first query's entry and</span>\n      <span class=\"c1\"># b) use it, because the objects are equal b/c the `search` hash was mutated</span>\n      <span class=\"c1\"># is equal to key_obj (since it's a reference)</span>\n\n      <span class=\"n\">should_not_exist</span> <span class=\"o\">=</span> <span class=\"no\">Rocket</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">payload: </span><span class=\"n\">search</span><span class=\"p\">).</span><span class=\"nf\">first</span> <span class=\"c1\"># this SHOULD not return a value</span>\n      <span class=\"n\">false_positives</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">should_not_exist</span><span class=\"p\">.</span><span class=\"nf\">present?</span>\n\n      <span class=\"n\">record</span><span class=\"p\">.</span><span class=\"nf\">destroy</span>\n      <span class=\"no\">Rocket</span><span class=\"p\">.</span><span class=\"nf\">connection</span><span class=\"p\">.</span><span class=\"nf\">clear_query_cache</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">false_positives</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n<p>Now when we run this test, we get a false-positive rate of 0.029%. \nThis is because when the new hash key is generated, sometimes, \nit falls into the same bucket as the original hash key. \nSo, instead of a cache miss, the query cache returns the original record.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">test_bug</span><span class=\"p\">()</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">29</span></code></pre></figure>\n\n<p>Though this is tiny, it can be a problem if you are using a query cache in production.</p>\n\n<h3 id=\"after\">After</h3>\n<p>Thanks to <a href=\"https://github.com/rails/rails/pull/46048\">this PR</a> \nwhich worked off the bug reported <a href=\"https://github.com/rails/rails/issues/46044\">here</a>, \nthe hash query is simply frozen before being stored in the cache. \nThis means that the query cache will not be affected by any mutations to the bound parameters.</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"n\">irb</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">):</span><span class=\"mo\">001</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span> <span class=\"n\">test_bug</span><span class=\"p\">()</span>\n  <span class=\"o\">=&gt;</span> <span class=\"mi\">0</span></code></pre></figure>\n\n<p>Here is the modification (among others) that was made to the Rails codebase:</p>\n\n<p>activemodel/lib/active_model/type/helpers/mutable.rb</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">module</span> <span class=\"nn\">Type</span>\n    <span class=\"k\">module</span> <span class=\"nn\">Helpers</span> <span class=\"c1\"># :nodoc: all</span>\n      <span class=\"k\">module</span> <span class=\"nn\">Mutable</span>\n        <span class=\"k\">def</span> <span class=\"nf\">immutable_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n          <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">deep_dup</span><span class=\"p\">.</span><span class=\"nf\">freeze</span>\n        <span class=\"k\">end</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n          <span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n        <span class=\"k\">end</span>\n\n        <span class=\"o\">...</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n"
}