{
  "title":"Rails adds :strict option to the default SQLite database.yml file",
  "date":"2022-11-15T00:00:00.000000Z",
  "author":null,
  "id":"https://blog.saeloun.com/2022/11/15/strict-sqlite.html",
  "link":"https://blog.saeloun.com/2022/11/15/strict-sqlite.html",
  "content":"<p>SQLite is usually very forgiving of unexpected \nor unusual inputs. \nHowever, when moving from SQLite to another database, \nthis can cause problems. \nRails 7.0 adds a <code class=\"highlighter-rouge\">:strict</code> option to the default <code class=\"highlighter-rouge\">database.yml</code> \nfile to circumvent some of these quirks.</p>\n\n<h3 id=\"before\">Before</h3>\n\n<p>The default mode of SQLite allows database indexes to be created for columns that don’t even exist. \nThis is because of the way SQLite resolves single \nand double strings, which found its way into the way Rails adds indexes.</p>\n\n<p>Let’s consider the following migration:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"k\">class</span> <span class=\"nc\">AddAgeToPatients</span> <span class=\"o\">&lt;</span> <span class=\"no\">ActiveRecord</span><span class=\"o\">::</span><span class=\"no\">Migration</span><span class=\"p\">[</span><span class=\"mf\">7.1</span><span class=\"p\">]</span>\n    <span class=\"k\">def</span> <span class=\"nf\">change</span>\n      <span class=\"n\">add_column</span> <span class=\"ss\">:patients</span><span class=\"p\">,</span> <span class=\"ss\">:age</span><span class=\"p\">,</span> <span class=\"ss\">:integer</span>\n      <span class=\"n\">add_index</span> <span class=\"ss\">:patients</span><span class=\"p\">,</span> <span class=\"ss\">:birthday</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span></code></pre></figure>\n\n<p>When Rails executes this, it will create a database index on the non-existent <code class=\"highlighter-rouge\">birthday</code> column. \nThis is because <a href=\"https://www.sqlite.org/quirks.html#double_quoted_string_literals_are_accepted\">SQLite resolves single \nand double strings differently</a>. \nSingle strings are resolved as column names, while double strings are resolved as string literals.</p>\n\n<p>So when Rails executes the <code class=\"highlighter-rouge\">add_index</code> statement, \nit will resolve <code class=\"highlighter-rouge\">:birthday</code> as a string literal, and create a computed index for that string. \nIt seems silly to create an index for a string literal, \nbut it’s not a problem for SQLite. \nHowever, \nwhen moving to another database, this will cause an error.</p>\n\n<p>Consider the following SQLite example,</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-sql\">  <span class=\"k\">CREATE</span> <span class=\"k\">INDEX</span> <span class=\"n\">index_patients_birthday</span> <span class=\"k\">ON</span> <span class=\"n\">patients</span> <span class=\"p\">(</span><span class=\"n\">birthday</span><span class=\"p\">);</span>\n  <span class=\"k\">CREATE</span> <span class=\"k\">INDEX</span> <span class=\"n\">index_patients_birthday</span> <span class=\"k\">ON</span> <span class=\"n\">patients</span> <span class=\"p\">(</span><span class=\"s1\">'birthday'</span><span class=\"p\">);</span>\n  <span class=\"k\">CREATE</span> <span class=\"k\">INDEX</span> <span class=\"n\">index_patients_birthday</span> <span class=\"k\">ON</span> <span class=\"n\">patients</span> <span class=\"p\">(</span><span class=\"nv\">&quot;birthday&quot;</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>The first and third statement will create an index on the <code class=\"highlighter-rouge\">birthday</code> column, \nwhile the second will create an index on the string literal <code class=\"highlighter-rouge\">birthday</code>. \nHowever, when the strict mode is enabled, \nthe second statement will raise an error.</p>\n\n<h3 id=\"after\">After</h3>\n<p>Thanks to <a href=\"https://github.com/rails/rails/pull/45346\">this PR</a> \nit is possible to enable SQLite strict mode by adding the following line to the <code class=\"highlighter-rouge\">database.yml</code> file:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-yaml\">  <span class=\"na\">strict</span><span class=\"pi\">:</span> <span class=\"no\">true</span></code></pre></figure>\n\n<p>Running the same migration as before will now raise an error:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\">  <span class=\"o\">==</span> <span class=\"mi\">20221017105541</span> <span class=\"no\">AddAgeToPatients</span><span class=\"p\">:</span> <span class=\"n\">migrating</span> <span class=\"o\">=================================</span>\n  <span class=\"o\">--</span> <span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"ss\">:patients</span><span class=\"p\">,</span> <span class=\"ss\">:age</span><span class=\"p\">,</span> <span class=\"ss\">:integer</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"ss\">:default</span><span class=\"o\">=&gt;</span><span class=\"mi\">10</span><span class=\"p\">})</span>\n    <span class=\"o\">-&gt;</span> <span class=\"mf\">0.0016</span><span class=\"n\">s</span>\n  <span class=\"o\">--</span> <span class=\"n\">add_index</span><span class=\"p\">(</span><span class=\"ss\">:patients</span><span class=\"p\">,</span> <span class=\"ss\">:birthday</span><span class=\"p\">)</span>\n  <span class=\"n\">rails</span> <span class=\"n\">aborted!</span>\n  <span class=\"no\">StandardError</span><span class=\"p\">:</span> <span class=\"no\">An</span> <span class=\"n\">error</span> <span class=\"n\">has</span> <span class=\"n\">occurred</span><span class=\"p\">,</span> <span class=\"n\">this</span> <span class=\"n\">and</span> <span class=\"n\">all</span> <span class=\"n\">later</span> <span class=\"n\">migrations</span> <span class=\"ss\">canceled:\n\n  </span><span class=\"no\">SQLite3</span><span class=\"o\">::</span><span class=\"no\">SQLException</span><span class=\"p\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"ss\">column: </span><span class=\"n\">birthday</span>\n  <span class=\"sr\">/Users/s</span><span class=\"n\">waathi</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">has_many_through_connection_test</span><span class=\"o\">/</span><span class=\"n\">db</span><span class=\"o\">/</span><span class=\"n\">migrate</span><span class=\"o\">/</span><span class=\"mi\">20221017105541</span><span class=\"n\">_add_age_to_patients</span><span class=\"p\">.</span><span class=\"nf\">rb</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"ss\">:in</span> <span class=\"sb\">`change'\n\n  Caused by:\n  ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: birthday\n  /Users/swaathi/code/work/has_many_through_connection_test/db/migrate/20221017105541_add_age_to_patients.rb:4:in `</span><span class=\"n\">change</span><span class=\"s1\">'\n\n  Caused by:\n  SQLite3::SQLException: no such column: birthday\n  /Users/swaathi/code/work/has_many_through_connection_test/db/migrate/20221017105541_add_age_to_patients.rb:4:in `change'</span>\n  <span class=\"no\">Tasks</span><span class=\"p\">:</span> <span class=\"no\">TOP</span> <span class=\"o\">=&gt;</span> <span class=\"n\">db</span><span class=\"ss\">:migrate:up:primary</span>\n  <span class=\"p\">(</span><span class=\"no\">See</span> <span class=\"n\">full</span> <span class=\"n\">trace</span> <span class=\"n\">by</span> <span class=\"n\">running</span> <span class=\"n\">task</span> <span class=\"n\">with</span> <span class=\"o\">--</span><span class=\"n\">trace</span><span class=\"p\">)</span></code></pre></figure>\n\n"
}