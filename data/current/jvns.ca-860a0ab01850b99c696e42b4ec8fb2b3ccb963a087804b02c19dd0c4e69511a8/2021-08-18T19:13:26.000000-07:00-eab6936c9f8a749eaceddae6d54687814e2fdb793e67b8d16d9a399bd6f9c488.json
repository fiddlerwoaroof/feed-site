{
  "title":"Patterns in confusing explanations",
  "date":"2021-08-18T19:13:26.000000-07:00",
  "author":null,
  "id":"https://jvns.ca/blog/confusing-explanations/",
  "link":"https://jvns.ca/blog/confusing-explanations/",
  "content":"\n\n<p>Hello! Recently I’ve been thinking about why I explain things the way I do. The\nusual way I write is:</p>\n\n<ol>\n<li>Try to learn a topic</li>\n<li>Read a bunch of explanations that I find confusing</li>\n<li>Eventually understand the topic</li>\n<li>Write an explanation that makes sense to me, to help others</li>\n</ol>\n\n<p>So why do I find all these explanations so confusing? I decided to try and find\nout! I came up with a list of 13 patterns that make explanations hard for me to\nunderstand. For each pattern I’ll also explain what I like to do instead to\navoid the issue.</p>\n\n<h3 id=\"these-patterns-are-very-normal\">these patterns are very normal</h3>\n\n<p>This list isn’t meant to make you feel bad about your writing. I’ve probably\ndone all of these things! I’m certainly going to do them again! I even did at\nleast one of them <strong>while writing this post</strong>!</p>\n\n<p>But knowing that I’m likely to accidentally do these things makes it easier for\nme to avoid them, and it makes me more receptive to critique when people point\nout issues with my writing (“Julia, this is assuming a lot of knowledge that I\ndon’t have!“).</p>\n\n<p>Being aware of these patterns also helps me when <em>reading</em> a confusing\nexplanation: “oh, I’m not confused by this explanation because I’m stupid, I’m\nconfused because it’s introduced 6 new-to-me concepts and it hasn’t explained\nwhat any of them is yet!“.</p>\n\n<h3 id=\"why-this-post-is-framed-in-a-negative-way\">why this post is framed in a negative way</h3>\n\n<p>I practically always write in a positive way (“X is a good practice!”) instead of in\na negative way (“Y is a bad practice!”). So why am I writing about confusing\npatterns instead of writing about positive patterns?</p>\n\n<p>Writing clearly is a LOT of work. A big part of what motivates me to put in the\nwork to write clearly is my frustration with confusing technical explanations (“ugh,\neverything I read about Linux containers was SO confusing, I wish someone had\njust told me X Y Z…“).</p>\n\n<p>But, if I’m not careful, it’s easy to reproduce the exact same confusing\npatterns in my own writing!  And the problem with positive patterns (like\n“avoid introducing unnecessary jargon”) is that they seem so obvious that I\ntrick myself into thinking I’m following them, even when I’m not! So I’m\nwriting these down to try to keep myself honest and hopefully help you avoid\nsome of these patterns as well.</p>\n\n<h3 id=\"now-for-the-patterns\">now for the patterns!</h3>\n\n<p>Now that I’ve explained my motivation, let’s explain the patterns! Here’s a\nquick index of all of them. They’re not in any particular order.</p>\n\n<ol>\n<li><a href=\"#pattern-1-making-outdated-assumptions-about-the-audience-s-knowledge\">pattern 1: making outdated assumptions about the audience’s knowledge</a></li>\n<li><a href=\"#pattern-2-having-inconsistent-expectations-of-the-reader-s-knowledge\">pattern 2: having inconsistent expectations of the reader’s knowledge</a></li>\n<li><a href=\"#pattern-3-strained-analogies\">pattern 3: strained analogies</a></li>\n<li><a href=\"#pattern-4-fun-illustrations-on-dry-explanations\">pattern 4: fun illustrations on dry explanations</a></li>\n<li><a href=\"#pattern-5-unrealistic-examples\">pattern 5: unrealistic examples</a></li>\n<li><a href=\"#pattern-6-jargon-that-doesn-t-mean-anything\">pattern 6: jargon that doesn’t mean anything</a></li>\n<li><a href=\"#pattern-7-missing-key-information\">pattern 7: missing key information</a></li>\n<li><a href=\"#pattern-8-introducing-too-many-concepts-at-a-time\">pattern 8: introducing too many concepts at a time</a></li>\n<li><a href=\"#pattern-9-starting-out-abstract\">pattern 9: starting out abstract</a></li>\n<li><a href=\"#pattern-10-unsupported-statements\">pattern 10: unsupported statements</a></li>\n<li><a href=\"#pattern-11-no-examples\">pattern 11: no examples</a></li>\n<li><a href=\"#pattern-12-explaining-the-wrong-way-to-do-something-without-saying-it-s-wrong\">pattern 12: explaining the “wrong” way to do something without saying it’s wrong</a></li>\n<li><a href=\"#pattern-13-what-without-why\">pattern 13: “what” without “why”</a></li>\n</ol>\n\n<h3 id=\"pattern-1-making-outdated-assumptions-about-the-audience-s-knowledge\">pattern 1: making outdated assumptions about the audience’s knowledge</h3>\n\n<p>I see a lot of writing, especially systems writing, that makes outdated\nassumptions about what the reader knows. For example, here’s a paragraph from\n<a href=\"https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell\">this Git book</a> comparing Git’s implementation of branching to other version control tools.</p>\n\n<blockquote>\n<p>Nearly every VCS has some form of branching support. […] In many VCS tools, this is a somewhat expensive\nprocess, often requiring you to create a new copy of your source code\ndirectory, which can take a long time for large projects.</p>\n</blockquote>\n\n<p>The outdated assumption here is that you (the reader) know how other version\ncontrol systems implement branching, and that comparing other tools’\nimplementation of branching to Git’s implementation will help you understand\nbranching.</p>\n\n<p>But if you’re reading this and you’ve never used another version control system\nand never plan to, this explanation is useless! Who cares about how other\nversion control systems implement branching? You just want to understand how\nGit works!</p>\n\n<p>The reason this explanation is written this way is probably that the first\nedition of the book was published in 2009, and this assumption was probably true\nin 2009! Many people learning Git shortly after it was released were switching from\nSubversion or CVS or something and found comparisons like this helpful.</p>\n\n<p>But in 2021 Git has been the dominant version control system for a long time,\nand most people learning Git for the first time won’t have <em>any</em> experience\nwith version control other than Git.</p>\n\n<p>I also sometimes see this “outdated assumptions about the audience’s knowledge”\nproblem with newer writing. It generally happens when the writer learned the\nconcept many years ago, but doesn’t have a lot of experience explaining it in\nthe present. So they give the type of explanation that assumes that the reader\nknows approximately the same things they and their friends knew in 2005 and\ndon’t realize that most people learning it today have a different set of\nknowledge.</p>\n\n<h4 id=\"instead-test-your-explanations\">instead: test your explanations!</h4>\n\n<p>Usually if I learned a concept a long time ago, it means that I’ve lost touch\nwith what it’s like to learn it for the first time today. So running an\nexplanation by a few people who <strong>don’t already know the concept</strong> helps to\ncatch incorrect assumptions I’ve made.</p>\n\n<p>(I bolded “don’t already know the concept” because it’s tempting to ask someone\nwho already understands the concept for a review. But they might have the exact\nsame blind spots as you!)</p>\n\n<h3 id=\"pattern-2-having-inconsistent-expectations-of-the-reader-s-knowledge\">pattern 2: having inconsistent expectations of the reader’s knowledge</h3>\n\n<p>For example, a new language tutorial might explain a concept that almost all\nprogrammers would know, like how a for loop is used for iteration, while the\nwriting that immediately follows implicitly assumes knowledge that many people\ndon’t have, like how the stack works, how malloc works, etc. (thanks to Dan\nLuu for this example!)</p>\n\n<p>The problem with this is that are probably zero people who understand malloc but\ndon’t understand how a for loop works! And even though it sounds silly, it’s\neasy to accidentally write like this if you don’t have a clear idea of who\nyou’re writing for.</p>\n\n<h4 id=\"instead-pick-1-specific-person-and-write-for-them\">instead: pick 1 specific person and write for them!</h4>\n\n<p>You can pick a friend, a coworker, or just a past version of yourself. Writing\nfor just 1 person might feel insufficiently general (“what about all the other\npeople??“) but writing that’s easy to understand for 1 person (other than you!)\nhas a good chance of being easy to understand for many other people as well.</p>\n\n<h3 id=\"pattern-3-strained-analogies\">pattern 3: strained analogies</h3>\n\n<p>Sometimes when trying to explain a complex technical concept, an author will\nstart with a real-world concept that the reader definitely understands and use\na very involved analogy to compare them.</p>\n\n<p>Here’s an example I made up:</p>\n\n<blockquote>\n<p>Imagine our event system is like the Mississippi River. It travels through\nmany different ecosystems, and some rain particles don’t make it all the way.\nSometimes it flows at different speeds depending on environmental conditions.\nThe Mississippi River ends in many different tributaries.</p>\n\n<p>Many different kinds of fish live in the event system. Different fish have\ndifferent destinations.  Humans decide to live along the river and use it for\ndifferent purposes. They construct dams to control the flow.</p>\n</blockquote>\n\n<p>This example is a parody, but I always find this type of analogy confusing\nbecause I end up wasting a lot of time trying to analyze exactly how an\nevent stream is different / the same as the Mississippi river instead of just\nlearning technical facts about event streams:</p>\n\n<p>I think authors do this because.. it’s kind of fun to write these Big Weird\nAnalogies! Like, is there something in a stream processing system that’s like a\ndam? Maybe! It’s kind of fun to think about! But even though these can be fun\nto write, they’re not as fun to read – it’s a struggle to extract the actual\ntechnical facts you want to know.</p>\n\n<h4 id=\"instead-keep-analogies-to-a-single-idea\">instead: keep analogies to a single idea</h4>\n\n<p>Instead of using “big” analogies where I explain in depth exactly how an event\nprocessing system is like a river, I prefer to explain the analogy in one or\ntwo sentences to make a specific point and then leave the analogy behind.</p>\n\n<p>Here are 2 ways to do that.</p>\n\n<p><strong>option 1: use “implicit” metaphors</strong></p>\n\n<p>For example, if we’re talking about streams, I might write:</p>\n\n<blockquote class=\"julia\">\nEvery event in a stream flows from a producer to a consumer.\n</blockquote>\n\n<p>Here I’m using the word “flow”, which is definitely a water metaphor. I think\nthis is great – it’s an efficient way to evoke an idea of directionality and\nthe idea that there are potentially a large number of events.</p>\n\n<p>I put together a bunch more metaphors in this style in <a href=\"https://jvns.ca/blog/2020/05/08/metaphors-in-man-pages/\">Metaphors in man pages</a>.</p>\n\n<p><strong>option 2: use a very limited analogy</strong></p>\n\n<p>For example, here’s a nice explanation from <a href=\"https://jessitron.com/2021/01/18/when-costs-are-nonlinear-keep-it-small/\">When costs are nonlinear, keep it small</a> by Jessica Kerr\nthat explains batching using an analogy to doing your laundry in a batch.</p>\n\n<blockquote class=\"julia\">\nWe like batching. Batching is more efficient: doing ten at once is faster than\ndoing one, one, two, one, one, etc. I don't wash my socks as soon as I take\nthem off, because lumping them in with the next load is free.\n</blockquote>\n\n<p>This analogy is very clear! I think it works well because batching in laundry\nworks for the same reasons as batching in computing – batching your laundry\nworks because there’s a low incremental cost to adding another pair of socks to\nthe load. And it’s only used to illustrate one idea – that batching is a good\nchoice when there’s a low incremental cost for adding a new item.</p>\n\n<h3 id=\"pattern-4-fun-illustrations-on-dry-explanations\">pattern 4: fun illustrations on dry explanations</h3>\n\n<p>Sometimes I see authors put fun illustrations with a very dry explanation to\nmake the explanation seem more appealing and approachable.</p>\n\n<p>The goal isn’t generally to trick the reader into expecting a more friendly\nexplanation – I think the logic is usually more like “people like fun\nillustrations! let’s add some!“. But no matter what the intent, the problem is\nthat the reader can end up feeling misled.</p>\n\n<h4 id=\"instead-make-the-design-reflect-the-style-of-the-explanation\">instead: make the design reflect the style of the explanation</h4>\n\n<p>There are lots of great examples of illustrated explanations where the writing\nis in a clear and friendly style:</p>\n\n<ul>\n<li><a href=\"https://howdns.works/ep1/\">how dns works</a></li>\n<li><a href=\"https://poignant.guide/\">why’s (poignant) guide to ruby</a></li>\n<li><a href=\"https://shop.bubblesort.io/products/how-do-calculators-even-zine\">how do calculators even</a></li>\n</ul>\n\n<p>On the other hand, dry explanations are useful too! Nobody expects the\n<a href=\"https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html\">Intel instruction-set reference</a>\nto be light reading! The writing is dry and technical, and the design is very\nutilitarian, which matches the style of the writing.</p>\n\n<h3 id=\"pattern-5-unrealistic-examples\">pattern 5: unrealistic examples</h3>\n\n<p>Here’s an unrealistic example of how to use <code>lambda</code> in Python:</p>\n\n<blockquote><pre>\nnumbers = [1, 2, 3, 4]\nsquares = map(lambda x: x * x, numbers)\n</pre></blockquote>\n\n<p>This example is unrealistic because most people don’t use <code>map</code> in Python – you’d use list comprehensions to do this instead.</p>\n\n<p>Here’s another unrealistic example: an interface example from <a href=\"https://docs.oracle.com/javase/tutorial/java/concepts/interface.html\">the Oracle docs on interfaces</a>.</p>\n\n<blockquote><pre>\ninterface Bicycle {\n    //  wheel revolutions per minute\n    void changeCadence(int newValue);\n    void changeGear(int newValue);\n    void speedUp(int increment);\n    void applyBrakes(int decrement);\n}\n</pre></blockquote>\n\n<p>This kind of “real world example” is super common in object oriented\nprogramming explanations but I find it quite confusing – I’ve never\nimplemented a bicycle or car in my code! It doesn’t tell me anything about what\ninterfaces are useful for!</p>\n\n<h4 id=\"instead-write-realistic-examples\">instead: write realistic examples!</h4>\n\n<p>Here’s a more realistic example of Python lambdas, which sorts a list of children by their age. (from my post <a href=\"https://jvns.ca/blog/2021/07/08/writing-great-examples/\">Write good examples by starting with real code</a>)\nThis is how I use Python lambdas the most in practice.</p>\n\n<blockquote class=\"julia\"><pre>\nchildren = [\n    {&quot;name&quot;: &quot;ashwin&quot;, &quot;age&quot;: 12},\n    {&quot;name&quot;: &quot;radhika&quot;, &quot;age&quot;: 3},\n]\nsorted_children = sorted(children, key=lambda x: x['age'])\n</pre></blockquote>\n\n<p>Here’s a more realistic example of Java interfaces.</p>\n\n<blockquote class=\"julia\"> \n<p>\nThe <code>Comparable</code> interface (from <a href=\"https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/share/classes/java/lang/Comparable.java\">the JDK source</a>)\njust has one method -- here's its full implementation.\n</p>\n\n<pre>\npublic interface Comparable&lt;T&gt; {\n    int compareTo(T o);\n}\n</pre>\n\n<p>\nTo implement this interface, you just need to implement the\n<code>compareTo</code> method. And if you write a class that implements this\ninterface (like a <code>Money</code> class for example), then you get all sorts\nof useful things for free! You can sort an array of <code>Money</code> objects with\n<code>Arrays.sort</code>! You can put them in a <code>SortedSet</code>!\n</p>\n</blockquote>\n\n<p>In this Java example, of course it’s not enough to explain built-in Java\ninterfaces – you also need realistic examples of how to create and use your own\ninterfaces. But this post isn’t about Java interfaces so let’s move on.</p>\n\n<h3 id=\"pattern-6-jargon-that-doesn-t-mean-anything\">pattern 6: jargon that doesn’t mean anything</h3>\n\n<p>Let’s talk about this sentence from this <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work\">chapter on commit signing</a>:</p>\n\n<blockquote>\n<p>Git is cryptographically secure, but it’s not foolproof.</p>\n</blockquote>\n\n<p>“Cryptographically secure” is unclear here because it <em>sounds</em>\nlike it should have a specific technical meaning, but it’s not explained\nanywhere what’s actualy meant. Is it saying that Git uses SHA-1 to hash\ncommits and it’s difficult to generate SHA-1 hash collisions? I don’t know!</p>\n\n<p>Using jargon in a meaningless way like this is confusing because it can trick\nthe reader into thinking something specific is being said, when the information\nthey need is not actually there. (the chapter doesn’t explain anywhere what’s\nmeant by “cryptographically secure” in this context)</p>\n\n<h4 id=\"instead-avoid-jargon-where-it-s-not-needed\">instead: Avoid jargon where it’s not needed</h4>\n\n<p>A lot of the time I find I can communicate what I need to without using any\njargon at all!  For example, I’d explain why commit signing is important like\nthis:</p>\n\n<blockquote class=\"julia\">\n\nWhen making a Git commit, you can set any name and email you want! For example, I can make a commit right now saying I'm Linus Torvalds like this:\n\n<pre>\ngit commit -m&quot;Very Serious Kernel Update&quot; \\\n --author='Linus Torvalds &lt;torvalds@linux-foundation.org&gt;'\n </pre>\n\n</blockquote>\n\n<h3 id=\"pattern-7-missing-key-information\">pattern 7: missing key information</h3>\n\n<p>Sometimes explanations of a concept are missing the most important idea to\nunderstand the concept. For example, take this explanation from <a href=\"https://git-scm.com/book/en/v2/Git-Internals-Git-Objects\">this chapter\non the Git object model</a> (which by the way has a nice concrete example of how to explore Git’s object model):</p>\n\n<blockquote>\n<p>Git is a <strong>content-addressable filesystem</strong>. Great. What does that mean? It means\nthat at the core of Git is a simple key-value data store. What this means is\nthat you can insert any kind of content into a Git repository, for which Git\nwill hand you back a unique key you can use later to retrieve that content.</p>\n</blockquote>\n\n<p>This paragraph is missing what to me is the main idea of content-addressable\nstorage – that the key for a piece of content is a deterministic function of\nthe content, usually a hash (though the page does later say that Git uses a\nSHA-1 hash). It’s important that the key is a function of the content and not\njust any random unique key because the idea is that the content is addressed by\n<em>itself</em> – if the content changes, then its key also has to change.</p>\n\n<p>This pattern is hard to recognize as a reader because – how are you supposed\nto recognize that there’s a key idea missing when you don’t know what the key\nideas <em>are</em>? So this is a case where a reviewer who understands the subject\nwell can be really helpful.</p>\n\n<h3 id=\"pattern-8-introducing-too-many-concepts-at-a-time\">pattern 8: introducing too many concepts at a time</h3>\n\n<p>Here’s an explanation of linkers from <a href=\"https://riptutorial.com/c/example/4360/the-linker\">this page</a> that I find confusing:</p>\n\n<blockquote>\n<p>During the link process, the linker will pick up all the object modules\nspecified on the command line, add some system-specific startup code in front\nand try to resolve all external references in the object module with external\ndefinitions in other object files (object files can be specified directly on\nthe command line or may implicitly be added through libraries). It will then\nassign load addresses for the object files, that is, it specifies where the\ncode and data will end up in the address space of the finished program. Once\nit’s got the load addresses, it can replace all the symbolic addresses in the\nobject code with “real”, numerical addresses in the target’s address space. The\nprogram is ready to be executed now.</p>\n</blockquote>\n\n<p>Here are the concepts in this paragraph:</p>\n\n<ul>\n<li>object modules (<code>.o</code> files)</li>\n<li>external references</li>\n<li>symbolic addresses</li>\n<li>load addresses</li>\n<li>system-specific startup code</li>\n</ul>\n\n<p>It’s too much!</p>\n\n<h4 id=\"instead-give-each-concept-some-space-to-breathe\">instead: give each concept some space to breathe</h4>\n\n<p>For example, I might explain “external references” like this:</p>\n\n<blockquote class=\"julia\">\n\n<p>\nif you run <code>objdump -d myfile.o</code> on an object file you can see\nthat the <code>call</code> function calls are missing a target address, so that's why the\nlinker needs to fill that in. \n</p>\n\n<pre>\n  33:   e8 00 00 00 00          call   38 &lt;emove_from_list+0x38&gt;\n           ^^^^^^^^^^^\n             this address is all 0s -- it needs to be filled in by the linker!\n             with the actual function that's going to be called!\n  38:   84 c0                   test   %al,%al\n  3a:   74 3b                   je     77 &lt;emove_from_list+0x77&gt;\n  3c:   48 83 7d f8 00          cmpq   $0x0,-0x8(%rbp)\n  </pre>\n  </blockquote>\n\n<p>There’s still a lot of missing information here (how does the linker know what\naddress to fill in?), but it’s a clear starting point and gives you questions\nto ask.</p>\n\n<h3 id=\"pattern-9-starting-out-abstract\">pattern 9: starting out abstract</h3>\n\n<p>Imagine I try to explain to you what a Unix signal using the <a href=\"https://en.wikipedia.org/wiki/Signal_(IPC)\">definition from Wikipedia</a>.</p>\n\n<blockquote>\n<p>Signals are a limited form of inter-process communication (IPC), typically\nused in Unix, Unix-like, and other POSIX-compliant operating systems. A signal\nis an asynchronous notification sent to a process or to a specific thread\nwithin the same process to notify it of an event. Signals originated in 1970s\nBell Labs Unix and were later specified in the POSIX standard.</p>\n</blockquote>\n\n<p>By itself, this probably isn’t going to help you understand signals if you’ve\nnever heard of them before! It’s very abstract and jargon-heavy (“asynchonous\nnotification”, “inter-process communication”) and doesn’t have any information\nabout what Unix signals are used for in practice.</p>\n\n<p>Of course, the Wikipedia explanation isn’t “bad” exactly – it’s probably\nwritten like that because teaching people about signals for the first time isn’t really the\ngoal of the Wikipedia article on signals.</p>\n\n<h4 id=\"instead-start-out-concrete\">instead: start out concrete</h4>\n\n<p>For example, I wrote this page explaining signals a few years ago.</p>\n\n<p><a href=\"https://wizardzines.com/comics/signals/\"><img src=\"https://wizardzines.com/comics/signals/signals.png\"></a></p>\n\n<p>I start out by relating signals to the reader’s experience (“have you used\n<code>kill</code>? you’ve used signals!“) before explaining how they work.</p>\n\n<h3 id=\"pattern-10-unsupported-statements\">pattern 10: unsupported statements</h3>\n\n<p>Here’s an explanation of C header files, from <a href=\"https://riptutorial.com/c/topic/6257/create-and-include-header-files\">this page</a>.</p>\n\n<blockquote>\n<p>In modern C, <strong>header files are crucial tools</strong> that must be designed and used\ncorrectly. They allow the compiler to cross-check independently compiled parts\nof a program.</p>\n\n<p>Headers declare types, functions, macros etc that are needed by the consumers\nof a set of facilities. All the code that uses any of those facilities includes\nthe header. All the code that defines those facilities includes the header.\nThis allows the compiler to check that the uses and definitions match.</p>\n</blockquote>\n\n<p>This says “In modern C, header files are crucial tools…” (which is true), but\nit doesn’t explain <strong>why</strong> header files are crucial. This of course wouldn’t be\na problem if the audience already understood why header files in C are\nimportant (it’s a very fundamental concept!). But the whole point here is to explain\nheader files, so it needs to be explained.</p>\n\n<h4 id=\"instead-prove-that-your-statements-are-true\">instead: Prove that your statements are true!</h4>\n\n<p>For example, I might write:</p>\n\n<blockquote class=\"julia\">\n\n<p>\nAlmost every C program includes header files. For example, if you've ever\nwritten <code>#include &lt;stdio.h&gt;</code> at the beginning of a C program, <code>stdio.h</code> is a\nheader file. <code>#include</code> basically tells the C preprocessor to paste\nthe contents of <code>stdio.h</code> at the beginning of the program.\n</p>\n\n<p>\nOne reason header files are important is that <strong>they define types and\nconstants you need in your programs</strong>.  For example, this code by itself\nwill fail to compile with the error <code>error: unknown type name\n'FILE'</code>, because the <code>FILE</code> type is undefined.\n</p>\n\n<pre>\nint main() {\n    FILE *fp;\n    fp  = fopen(&quot;data.txt&quot;, &quot;w&quot;);\n}\n</pre>\n<p>\n<code>FILE</code> is defined in <code>stdio.h</code> and if you add a\n<code>#include &lt;stdio.h&gt;</code>, at the top, then the program will\ncompile.\n</p>\n\n</blockquote>\n\n<p>This example program lets the reader actually run that program themselves and\nverify that it doesn’t compile if they want – they don’t have to take my word\nfor it!</p>\n\n<h3 id=\"pattern-11-no-examples\">pattern 11: no examples</h3>\n\n<p>Another problem with the previous explanation of header files is – there\naren’t any examples! Leaving out examples makes it harder for the reader to\nrelate the new terminology to their own experiences.</p>\n\n<p>Almost anyone who’s ever written a C program has definitely used header files,\nso a simple example (like mentioning <code>stdio.h</code>) can really help.</p>\n\n<p>In that header files example, I replaced</p>\n\n<blockquote>\n<p>In modern C, header files are crucial tools…</p>\n</blockquote>\n\n<p>with an explanation that includes a simple example:</p>\n\n<blockquote class=\"julia\">\nAlmost every C program includes header files -- if you've ever seen something\nlike <code>#include </code> at the beginning of a C program, <code>stdio.h</code> is a\nheader file.\n</blockquote>\n\n<h3 id=\"pattern-12-explaining-the-wrong-way-to-do-something-without-saying-it-s-wrong\">pattern 12: explaining the “wrong” way to do something without saying it’s wrong</h3>\n\n<p>Here’s a pattern I see sometimes in tutorials (though unfortunately I don’t have an example):</p>\n\n<ol>\n<li>Explain the “wrong” way of doing something without saying up front that it’s wrong</li>\n<li>Later on, show the consequences of doing the “wrong” thing</li>\n<li>Explain the “right” way</li>\n</ol>\n\n<p>I think the intention of this is to imitate the real-life experience of making\nmistakes. Usually when you make a mistake, you don’t know that it’s wrong at\nthe time!</p>\n\n<p>But often the reader will end up feeling misled or confused about which way is\nactually “correct”. And it’s possible that they would never even have made that\nparticular mistake on their own!</p>\n\n<h4 id=\"instead-here-are-four-options-for-presenting-mistakes\">instead: here are four options for presenting mistakes</h4>\n\n<p>Here are a few ways of accomplishing the same thing without misleading the\nreader:</p>\n\n<ol>\n<li>Frame the “wrong” thing as an experiment (“what if we try doing it X way?”)</li>\n<li>State an incorrect belief the reader might have: (“You might think that the\ncommand line tool would need to run as root (because it’s talking to the\nkernel, but…“)</li>\n<li>Explain a common mistake (for example “Avoid Striding and Slicing in a Single Expression” in <a href=\"https://effectivepython.com/\">Effective Python</a>)<br></li>\n<li>Tell a story about a mistake you made and why it caused problems (here’s one of mine: <a href=\"https://jvns.ca/blog/2015/11/27/why-rubys-timeout-is-dangerous-and-thread-dot-raise-is-terrifying/\">Why Ruby’s Timeout is dangerous (and Thread.raise is terrifying)</a>)</li>\n</ol>\n\n<p>Talking about mistakes is very important, just say up front that the thing is a\nmistake!</p>\n\n<h3 id=\"pattern-13-what-without-why\">pattern 13: “what” without “why”</h3>\n\n<p>I very often see people introduce new technologies with <strong>a list of features</strong>\ninstead of <strong>explaining why people choose the technology</strong>.</p>\n\n<p>For example, the <a href=\"https://kubernetes.io/\">kubernetes homepage</a> lists a bunch of\nKubernetes’ features: automated rollouts and rollbacks, service discovery and\nload balancing, storage orchestration, secret and configuration management,\nautomatic bin packing, etc. This kind of feature list is pretty common on a\nproject homepage, but by itself it doesn’t help someone understand whether\nKubernetes is right for them.</p>\n\n<p>I think one reason writers leave out the “why” is that it’s hard to write\na simple universal answer to “why do people use Kubernetes?”. There are a lot of reasons!\nAnd if you get the “why” wrong, it’s very noticeable and it feels embarrassing.\nSo it feels safer to just list some features and move on.</p>\n\n<p>But as a reader, I find that <strong>a weak “why” is much better than no “why”</strong>. I’d\nrather read “well, we use Kubernetes because it provides a decent basic\ndeployment system and GKE means we don’t have to think about servers” than an\nattempt at covering every single company’s business reasons for using Kubernetes.</p>\n\n<h4 id=\"instead-talk-about-your-reasons-for-using-the-technology\">instead: talk about your reasons for using the technology</h4>\n\n<p>Of course, if you have a clear universal explanation of the problems a\ntechnology solves, that’s great. But I think a lot of the time authors\n(including me!!) just don’t have a great grasp of why other people are choosing\na given technology. That’s okay!</p>\n\n<p>If you don’t feel you can give a universal “why”, I think it’s better to just\nbe open about that and give an example from your personal experience.</p>\n\n<p>For example, I might say about Kubernetes:</p>\n\n<blockquote class=\"julia\">\nThe only problem I've solved with Kubernetes was: we had a distributed cron job\nsystem (Chronos) that wasn't working reliably (cron jobs would sometimes just not run), and we <a href=\"https://stripe.com/blog/operating-kubernetes\">replaced the system with\nKubernetes</a>. Kubernetes' distributed cron was a lot more reliable.\n</blockquote>\n\n<p>This isn’t a good explanation of why people in general use Kubernetes! But\nI find reading many specific personal stories like this WAY more helpful than\nan attempt at cramming “here’s what’s Kubernetes is for” into a few paragraphs.</p>\n\n<p>I want to be clear here that even just explaining your own personal experience\nisn’t that easy. Technology projects can be messy, and sometimes their goals\nchange in the middle. I started out\ntrying to give an example of why I’ve used <a href=\"https://www.envoyproxy.io/\">Envoy</a>\nand I realized I would need to think about it for several hours and have a few\nconversations with old coworkers to explain it coherently so I decided to use a\ndifferent example.</p>\n\n<h3 id=\"that-s-all-for-now\">that’s all for now!</h3>\n\n<p>Originally I thought it would be simple to put together these patterns (“there\nare so many confusing explanations!“) but it was surprisingly hard to\narticulate exactly what was confusing to me about each explanation in a\nconvincing way.</p>\n\n<p>It’s definitely incomplete, but I’ve already spent two weeks and 3000 words on\nit so I’ll stop here and I’d love to hear what I’ve missed :)</p>\n\n<p><small> thanks to Laura, Dan, Kamal, Alyssa, Lindsey, Paul, Ivan, Edith, Hazem,\nAnton, and John for helping improve this post </small></p>\n\n\n\n\n\n<h3 id=\"translations\">translations</h3>\n\n<p>here is a translation:</p>\n\n<ul>\n<li><a href=\"https://velog.io/@roeniss/%EC%9E%98-%EC%84%A4%EB%AA%85%ED%95%98%EA%B3%A0-%EA%B3%84%EC%8B%A0%EA%B0%80%EC%9A%94-%EB%82%98%EC%81%9C-%EC%84%A4%EB%AA%85%EC%9D%98-%ED%8C%A8%ED%84%B4%EB%93%A4\">Korean</a></li>\n</ul>\n"
}