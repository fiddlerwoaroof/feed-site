<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Julia Evans]]></title>
  <link href="http://jvns.ca/atom.xml" rel="self">
  <link href="http://jvns.ca">
  <updated>2021-08-19T02:13:26+00:00</updated>
  <id>http://jvns.ca</id>
  <author>
    <name><![CDATA[Julia Evans]]></name>
  </author>
  <generator uri="http://gohugo.io/">Hugo</generator>

  
  <entry>
    <title type="html"><![CDATA[Patterns in confusing explanations]]></title>
    <link href="https://jvns.ca/blog/confusing-explanations/">
    <updated>2021-08-19T02:13:26+00:00</updated>
    <id>https://jvns.ca/blog/confusing-explanations/</id>
    <content type="html"><![CDATA[

<p>Hello! Recently I&rsquo;ve been thinking about why I explain things the way I do. The
usual way I write is:</p>

<ol>
<li>Try to learn a topic</li>
<li>Read a bunch of explanations that I find confusing</li>
<li>Eventually understand the topic</li>
<li>Write an explanation that makes sense to me, to help others</li>
</ol>

<p>So why do I find all these explanations so confusing? I decided to try and find
out! I came up with a list of 13 patterns that make explanations hard for me to
understand. For each pattern I&rsquo;ll also explain what I like to do instead to
avoid the issue.</p>

<h3 id="these-patterns-are-very-normal">these patterns are very normal</h3>

<p>This list isn&rsquo;t meant to make you feel bad about your writing. I&rsquo;ve probably
done all of these things! I&rsquo;m certainly going to do them again! I even did at
least one of them <strong>while writing this post</strong>!</p>

<p>But knowing that I&rsquo;m likely to accidentally do these things makes it easier for
me to avoid them, and it makes me more receptive to critique when people point
out issues with my writing (&ldquo;Julia, this is assuming a lot of knowledge that I
don&rsquo;t have!&ldquo;).</p>

<p>Being aware of these patterns also helps me when <em>reading</em> a confusing
explanation: &ldquo;oh, I&rsquo;m not confused by this explanation because I&rsquo;m stupid, I&rsquo;m
confused because it&rsquo;s introduced 6 new-to-me concepts and it hasn&rsquo;t explained
what any of them is yet!&ldquo;.</p>

<h3 id="why-this-post-is-framed-in-a-negative-way">why this post is framed in a negative way</h3>

<p>I practically always write in a positive way (&ldquo;X is a good practice!&rdquo;) instead of in
a negative way (&ldquo;Y is a bad practice!&rdquo;). So why am I writing about confusing
patterns instead of writing about positive patterns?</p>

<p>Writing clearly is a LOT of work. A big part of what motivates me to put in the
work to write clearly is my frustration with confusing technical explanations (&ldquo;ugh,
everything I read about Linux containers was SO confusing, I wish someone had
just told me X Y Z&hellip;&ldquo;).</p>

<p>But, if I&rsquo;m not careful, it&rsquo;s easy to reproduce the exact same confusing
patterns in my own writing!  And the problem with positive patterns (like
&ldquo;avoid introducing unnecessary jargon&rdquo;) is that they seem so obvious that I
trick myself into thinking I&rsquo;m following them, even when I&rsquo;m not! So I&rsquo;m
writing these down to try to keep myself honest and hopefully help you avoid
some of these patterns as well.</p>

<h3 id="now-for-the-patterns">now for the patterns!</h3>

<p>Now that I&rsquo;ve explained my motivation, let&rsquo;s explain the patterns! Here&rsquo;s a
quick index of all of them. They&rsquo;re not in any particular order.</p>

<ol>
<li><a href="#pattern-1-making-outdated-assumptions-about-the-audience-s-knowledge">pattern 1: making outdated assumptions about the audience’s knowledge</a></li>
<li><a href="#pattern-2-having-inconsistent-expectations-of-the-reader-s-knowledge">pattern 2: having inconsistent expectations of the reader’s knowledge</a></li>
<li><a href="#pattern-3-strained-analogies">pattern 3: strained analogies</a></li>
<li><a href="#pattern-4-fun-illustrations-on-dry-explanations">pattern 4: fun illustrations on dry explanations</a></li>
<li><a href="#pattern-5-unrealistic-examples">pattern 5: unrealistic examples</a></li>
<li><a href="#pattern-6-jargon-that-doesn-t-mean-anything">pattern 6: jargon that doesn’t mean anything</a></li>
<li><a href="#pattern-7-missing-key-information">pattern 7: missing key information</a></li>
<li><a href="#pattern-8-introducing-too-many-concepts-at-a-time">pattern 8: introducing too many concepts at a time</a></li>
<li><a href="#pattern-9-starting-out-abstract">pattern 9: starting out abstract</a></li>
<li><a href="#pattern-10-unsupported-statements">pattern 10: unsupported statements</a></li>
<li><a href="#pattern-11-no-examples">pattern 11: no examples</a></li>
<li><a href="#pattern-12-explaining-the-wrong-way-to-do-something-without-saying-it-s-wrong">pattern 12: explaining the “wrong” way to do something without saying it’s wrong</a></li>
<li><a href="#pattern-13-what-without-why">pattern 13: “what” without “why”</a></li>
</ol>

<h3 id="pattern-1-making-outdated-assumptions-about-the-audience-s-knowledge">pattern 1: making outdated assumptions about the audience&rsquo;s knowledge</h3>

<p>I see a lot of writing, especially systems writing, that makes outdated
assumptions about what the reader knows. For example, here&rsquo;s a paragraph from
<a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">this Git book</a> comparing Git&rsquo;s implementation of branching to other version control tools.</p>

<blockquote>
<p>Nearly every VCS has some form of branching support. [&hellip;] In many VCS tools, this is a somewhat expensive
process, often requiring you to create a new copy of your source code
directory, which can take a long time for large projects.</p>
</blockquote>

<p>The outdated assumption here is that you (the reader) know how other version
control systems implement branching, and that comparing other tools&rsquo;
implementation of branching to Git&rsquo;s implementation will help you understand
branching.</p>

<p>But if you&rsquo;re reading this and you&rsquo;ve never used another version control system
and never plan to, this explanation is useless! Who cares about how other
version control systems implement branching? You just want to understand how
Git works!</p>

<p>The reason this explanation is written this way is probably that the first
edition of the book was published in 2009, and this assumption was probably true
in 2009! Many people learning Git shortly after it was released were switching from
Subversion or CVS or something and found comparisons like this helpful.</p>

<p>But in 2021 Git has been the dominant version control system for a long time,
and most people learning Git for the first time won&rsquo;t have <em>any</em> experience
with version control other than Git.</p>

<p>I also sometimes see this &ldquo;outdated assumptions about the audience&rsquo;s knowledge&rdquo;
problem with newer writing. It generally happens when the writer learned the
concept many years ago, but doesn&rsquo;t have a lot of experience explaining it in
the present. So they give the type of explanation that assumes that the reader
knows approximately the same things they and their friends knew in 2005 and
don&rsquo;t realize that most people learning it today have a different set of
knowledge.</p>

<h4 id="instead-test-your-explanations">instead: test your explanations!</h4>

<p>Usually if I learned a concept a long time ago, it means that I&rsquo;ve lost touch
with what it&rsquo;s like to learn it for the first time today. So running an
explanation by a few people who <strong>don&rsquo;t already know the concept</strong> helps to
catch incorrect assumptions I&rsquo;ve made.</p>

<p>(I bolded &ldquo;don&rsquo;t already know the concept&rdquo; because it&rsquo;s tempting to ask someone
who already understands the concept for a review. But they might have the exact
same blind spots as you!)</p>

<h3 id="pattern-2-having-inconsistent-expectations-of-the-reader-s-knowledge">pattern 2: having inconsistent expectations of the reader&rsquo;s knowledge</h3>

<p>For example, a new language tutorial might explain a concept that almost all
programmers would know, like how a for loop is used for iteration, while the
writing that immediately follows implicitly assumes knowledge that many people
don&rsquo;t have, like how the stack works, how malloc works, etc. (thanks to Dan
Luu for this example!)</p>

<p>The problem with this is that are probably zero people who understand malloc but
don&rsquo;t understand how a for loop works! And even though it sounds silly, it&rsquo;s
easy to accidentally write like this if you don&rsquo;t have a clear idea of who
you&rsquo;re writing for.</p>

<h4 id="instead-pick-1-specific-person-and-write-for-them">instead: pick 1 specific person and write for them!</h4>

<p>You can pick a friend, a coworker, or just a past version of yourself. Writing
for just 1 person might feel insufficiently general (&ldquo;what about all the other
people??&ldquo;) but writing that&rsquo;s easy to understand for 1 person (other than you!)
has a good chance of being easy to understand for many other people as well.</p>

<h3 id="pattern-3-strained-analogies">pattern 3: strained analogies</h3>

<p>Sometimes when trying to explain a complex technical concept, an author will
start with a real-world concept that the reader definitely understands and use
a very involved analogy to compare them.</p>

<p>Here&rsquo;s an example I made up:</p>

<blockquote>
<p>Imagine our event system is like the Mississippi River. It travels through
many different ecosystems, and some rain particles don&rsquo;t make it all the way.
Sometimes it flows at different speeds depending on environmental conditions.
The Mississippi River ends in many different tributaries.</p>

<p>Many different kinds of fish live in the event system. Different fish have
different destinations.  Humans decide to live along the river and use it for
different purposes. They construct dams to control the flow.</p>
</blockquote>

<p>This example is a parody, but I always find this type of analogy confusing
because I end up wasting a lot of time trying to analyze exactly how an
event stream is different / the same as the Mississippi river instead of just
learning technical facts about event streams:</p>

<p>I think authors do this because.. it&rsquo;s kind of fun to write these Big Weird
Analogies! Like, is there something in a stream processing system that&rsquo;s like a
dam? Maybe! It&rsquo;s kind of fun to think about! But even though these can be fun
to write, they&rsquo;re not as fun to read – it&rsquo;s a struggle to extract the actual
technical facts you want to know.</p>

<h4 id="instead-keep-analogies-to-a-single-idea">instead: keep analogies to a single idea</h4>

<p>Instead of using &ldquo;big&rdquo; analogies where I explain in depth exactly how an event
processing system is like a river, I prefer to explain the analogy in one or
two sentences to make a specific point and then leave the analogy behind.</p>

<p>Here are 2 ways to do that.</p>

<p><strong>option 1: use &ldquo;implicit&rdquo; metaphors</strong></p>

<p>For example, if we&rsquo;re talking about streams, I might write:</p>

<blockquote class="julia">
Every event in a stream flows from a producer to a consumer.
</blockquote>

<p>Here I&rsquo;m using the word &ldquo;flow&rdquo;, which is definitely a water metaphor. I think
this is great &ndash; it&rsquo;s an efficient way to evoke an idea of directionality and
the idea that there are potentially a large number of events.</p>

<p>I put together a bunch more metaphors in this style in <a href="https://jvns.ca/blog/2020/05/08/metaphors-in-man-pages/">Metaphors in man pages</a>.</p>

<p><strong>option 2: use a very limited analogy</strong></p>

<p>For example, here&rsquo;s a nice explanation from <a href="https://jessitron.com/2021/01/18/when-costs-are-nonlinear-keep-it-small/">When costs are nonlinear, keep it small</a> by Jessica Kerr
that explains batching using an analogy to doing your laundry in a batch.</p>

<blockquote class="julia">
We like batching. Batching is more efficient: doing ten at once is faster than
doing one, one, two, one, one, etc. I don't wash my socks as soon as I take
them off, because lumping them in with the next load is free.
</blockquote>

<p>This analogy is very clear! I think it works well because batching in laundry
works for the same reasons as batching in computing &ndash; batching your laundry
works because there&rsquo;s a low incremental cost to adding another pair of socks to
the load. And it&rsquo;s only used to illustrate one idea &ndash; that batching is a good
choice when there&rsquo;s a low incremental cost for adding a new item.</p>

<h3 id="pattern-4-fun-illustrations-on-dry-explanations">pattern 4: fun illustrations on dry explanations</h3>

<p>Sometimes I see authors put fun illustrations with a very dry explanation to
make the explanation seem more appealing and approachable.</p>

<p>The goal isn&rsquo;t generally to trick the reader into expecting a more friendly
explanation &ndash; I think the logic is usually more like &ldquo;people like fun
illustrations! let&rsquo;s add some!&ldquo;. But no matter what the intent, the problem is
that the reader can end up feeling misled.</p>

<h4 id="instead-make-the-design-reflect-the-style-of-the-explanation">instead: make the design reflect the style of the explanation</h4>

<p>There are lots of great examples of illustrated explanations where the writing
is in a clear and friendly style:</p>

<ul>
<li><a href="https://howdns.works/ep1/">how dns works</a></li>
<li><a href="https://poignant.guide/">why&rsquo;s (poignant) guide to ruby</a></li>
<li><a href="https://shop.bubblesort.io/products/how-do-calculators-even-zine">how do calculators even</a></li>
</ul>

<p>On the other hand, dry explanations are useful too! Nobody expects the
<a href="https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html">Intel instruction-set reference</a>
to be light reading! The writing is dry and technical, and the design is very
utilitarian, which matches the style of the writing.</p>

<h3 id="pattern-5-unrealistic-examples">pattern 5: unrealistic examples</h3>

<p>Here&rsquo;s an unrealistic example of how to use <code>lambda</code> in Python:</p>

<blockquote><pre>
numbers = [1, 2, 3, 4]
squares = map(lambda x: x * x, numbers)
</pre></blockquote>

<p>This example is unrealistic because most people don&rsquo;t use <code>map</code> in Python &ndash; you&rsquo;d use list comprehensions to do this instead.</p>

<p>Here&rsquo;s another unrealistic example: an interface example from <a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html">the Oracle docs on interfaces</a>.</p>

<blockquote><pre>
interface Bicycle {
    //  wheel revolutions per minute
    void changeCadence(int newValue);
    void changeGear(int newValue);
    void speedUp(int increment);
    void applyBrakes(int decrement);
}
</pre></blockquote>

<p>This kind of &ldquo;real world example&rdquo; is super common in object oriented
programming explanations but I find it quite confusing &ndash; I&rsquo;ve never
implemented a bicycle or car in my code! It doesn&rsquo;t tell me anything about what
interfaces are useful for!</p>

<h4 id="instead-write-realistic-examples">instead: write realistic examples!</h4>

<p>Here&rsquo;s a more realistic example of Python lambdas, which sorts a list of children by their age. (from my post <a href="https://jvns.ca/blog/2021/07/08/writing-great-examples/">Write good examples by starting with real code</a>)
This is how I use Python lambdas the most in practice.</p>

<blockquote class="julia"><pre>
children = [
    {"name": "ashwin", "age": 12},
    {"name": "radhika", "age": 3},
]
sorted_children = sorted(children, key=lambda x: x['age'])
</pre></blockquote>

<p>Here&rsquo;s a more realistic example of Java interfaces.</p>

<blockquote class="julia"> 
<p>
The <code>Comparable</code> interface (from <a
href="https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/java.base/share/classes/java/lang/Comparable.java">the JDK source</a>)
just has one method -- here's its full implementation.
</p>

<pre>
public interface Comparable&lt;T&gt; {
    int compareTo(T o);
}
</pre>

<p>
To implement this interface, you just need to implement the
<code>compareTo</code> method. And if you write a class that implements this
interface (like a <code>Money</code> class for example), then you get all sorts
of useful things for free! You can sort an array of <code>Money</code> objects with
<code>Arrays.sort</code>! You can put them in a <code>SortedSet</code>!
</p>
</blockquote>

<p>In this Java example, of course it&rsquo;s not enough to explain built-in Java
interfaces &ndash; you also need realistic examples of how to create and use your own
interfaces. But this post isn&rsquo;t about Java interfaces so let&rsquo;s move on.</p>

<h3 id="pattern-6-jargon-that-doesn-t-mean-anything">pattern 6: jargon that doesn&rsquo;t mean anything</h3>

<p>Let&rsquo;s talk about this sentence from this <a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work">chapter on commit signing</a>:</p>

<blockquote>
<p>Git is cryptographically secure, but it&rsquo;s not foolproof.</p>
</blockquote>

<p>&ldquo;Cryptographically secure&rdquo; is unclear here because it <em>sounds</em>
like it should have a specific technical meaning, but it&rsquo;s not explained
anywhere what&rsquo;s actualy meant. Is it saying that Git uses SHA-1 to hash
commits and it&rsquo;s difficult to generate SHA-1 hash collisions? I don&rsquo;t know!</p>

<p>Using jargon in a meaningless way like this is confusing because it can trick
the reader into thinking something specific is being said, when the information
they need is not actually there. (the chapter doesn&rsquo;t explain anywhere what&rsquo;s
meant by &ldquo;cryptographically secure&rdquo; in this context)</p>

<h4 id="instead-avoid-jargon-where-it-s-not-needed">instead: Avoid jargon where it&rsquo;s not needed</h4>

<p>A lot of the time I find I can communicate what I need to without using any
jargon at all!  For example, I&rsquo;d explain why commit signing is important like
this:</p>

<blockquote class="julia">

When making a Git commit, you can set any name and email you want! For example, I can make a commit right now saying I'm Linus Torvalds like this:

<pre>
git commit -m"Very Serious Kernel Update" \
 --author='Linus Torvalds &lt;torvalds@linux-foundation.org&gt;'
 </pre>

</blockquote>

<h3 id="pattern-7-missing-key-information">pattern 7: missing key information</h3>

<p>Sometimes explanations of a concept are missing the most important idea to
understand the concept. For example, take this explanation from <a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects">this chapter
on the Git object model</a> (which by the way has a nice concrete example of how to explore Git&rsquo;s object model):</p>

<blockquote>
<p>Git is a <strong>content-addressable filesystem</strong>. Great. What does that mean? It means
that at the core of Git is a simple key-value data store. What this means is
that you can insert any kind of content into a Git repository, for which Git
will hand you back a unique key you can use later to retrieve that content.</p>
</blockquote>

<p>This paragraph is missing what to me is the main idea of content-addressable
storage &ndash; that the key for a piece of content is a deterministic function of
the content, usually a hash (though the page does later say that Git uses a
SHA-1 hash). It&rsquo;s important that the key is a function of the content and not
just any random unique key because the idea is that the content is addressed by
<em>itself</em> &ndash; if the content changes, then its key also has to change.</p>

<p>This pattern is hard to recognize as a reader because &ndash; how are you supposed
to recognize that there&rsquo;s a key idea missing when you don&rsquo;t know what the key
ideas <em>are</em>? So this is a case where a reviewer who understands the subject
well can be really helpful.</p>

<h3 id="pattern-8-introducing-too-many-concepts-at-a-time">pattern 8: introducing too many concepts at a time</h3>

<p>Here&rsquo;s an explanation of linkers from <a href="https://riptutorial.com/c/example/4360/the-linker">this page</a> that I find confusing:</p>

<blockquote>
<p>During the link process, the linker will pick up all the object modules
specified on the command line, add some system-specific startup code in front
and try to resolve all external references in the object module with external
definitions in other object files (object files can be specified directly on
the command line or may implicitly be added through libraries). It will then
assign load addresses for the object files, that is, it specifies where the
code and data will end up in the address space of the finished program. Once
it&rsquo;s got the load addresses, it can replace all the symbolic addresses in the
object code with &ldquo;real&rdquo;, numerical addresses in the target&rsquo;s address space. The
program is ready to be executed now.</p>
</blockquote>

<p>Here are the concepts in this paragraph:</p>

<ul>
<li>object modules (<code>.o</code> files)</li>
<li>external references</li>
<li>symbolic addresses</li>
<li>load addresses</li>
<li>system-specific startup code</li>
</ul>

<p>It&rsquo;s too much!</p>

<h4 id="instead-give-each-concept-some-space-to-breathe">instead: give each concept some space to breathe</h4>

<p>For example, I might explain &ldquo;external references&rdquo; like this:</p>

<blockquote class="julia">

<p>
if you run <code>objdump -d myfile.o</code> on an object file you can see
that the <code>call</code> function calls are missing a target address, so that's why the
linker needs to fill that in. 
</p>

<pre>
  33:   e8 00 00 00 00          call   38 <remove_from_list+0x38>
           ^^^^^^^^^^^
             this address is all 0s -- it needs to be filled in by the linker!
             with the actual function that's going to be called!
  38:   84 c0                   test   %al,%al
  3a:   74 3b                   je     77 <remove_from_list+0x77>
  3c:   48 83 7d f8 00          cmpq   $0x0,-0x8(%rbp)
  </pre>
  </blockquote>

<p>There&rsquo;s still a lot of missing information here (how does the linker know what
address to fill in?), but it&rsquo;s a clear starting point and gives you questions
to ask.</p>

<h3 id="pattern-9-starting-out-abstract">pattern 9: starting out abstract</h3>

<p>Imagine I try to explain to you what a Unix signal using the <a href="https://en.wikipedia.org/wiki/Signal_(IPC)">definition from Wikipedia</a>.</p>

<blockquote>
<p>Signals are a limited form of inter-process communication (IPC), typically
used in Unix, Unix-like, and other POSIX-compliant operating systems. A signal
is an asynchronous notification sent to a process or to a specific thread
within the same process to notify it of an event. Signals originated in 1970s
Bell Labs Unix and were later specified in the POSIX standard.</p>
</blockquote>

<p>By itself, this probably isn&rsquo;t going to help you understand signals if you&rsquo;ve
never heard of them before! It&rsquo;s very abstract and jargon-heavy (&ldquo;asynchonous
notification&rdquo;, &ldquo;inter-process communication&rdquo;) and doesn&rsquo;t have any information
about what Unix signals are used for in practice.</p>

<p>Of course, the Wikipedia explanation isn&rsquo;t &ldquo;bad&rdquo; exactly &ndash; it&rsquo;s probably
written like that because teaching people about signals for the first time isn&rsquo;t really the
goal of the Wikipedia article on signals.</p>

<h4 id="instead-start-out-concrete">instead: start out concrete</h4>

<p>For example, I wrote this page explaining signals a few years ago.</p>

<p><a href="https://wizardzines.com/comics/signals/"><img src="https://wizardzines.com/comics/signals/signals.png"></a></p>

<p>I start out by relating signals to the reader&rsquo;s experience (&ldquo;have you used
<code>kill</code>? you&rsquo;ve used signals!&ldquo;) before explaining how they work.</p>

<h3 id="pattern-10-unsupported-statements">pattern 10: unsupported statements</h3>

<p>Here&rsquo;s an explanation of C header files, from <a href="https://riptutorial.com/c/topic/6257/create-and-include-header-files">this page</a>.</p>

<blockquote>
<p>In modern C, <strong>header files are crucial tools</strong> that must be designed and used
correctly. They allow the compiler to cross-check independently compiled parts
of a program.</p>

<p>Headers declare types, functions, macros etc that are needed by the consumers
of a set of facilities. All the code that uses any of those facilities includes
the header. All the code that defines those facilities includes the header.
This allows the compiler to check that the uses and definitions match.</p>
</blockquote>

<p>This says &ldquo;In modern C, header files are crucial tools&hellip;&rdquo; (which is true), but
it doesn&rsquo;t explain <strong>why</strong> header files are crucial. This of course wouldn&rsquo;t be
a problem if the audience already understood why header files in C are
important (it&rsquo;s a very fundamental concept!). But the whole point here is to explain
header files, so it needs to be explained.</p>

<h4 id="instead-prove-that-your-statements-are-true">instead: Prove that your statements are true!</h4>

<p>For example, I might write:</p>

<blockquote class="julia">

<p>
Almost every C program includes header files. For example, if you've ever
written <code>#include &lt;stdio.h&gt;</code> at the beginning of a C program, <code>stdio.h</code> is a
header file. <code>#include</code> basically tells the C preprocessor to paste
the contents of <code>stdio.h</code> at the beginning of the program.
</p>

<p>
One reason header files are important is that <strong>they define types and
constants you need in your programs</strong>.  For example, this code by itself
will fail to compile with the error <code>error: unknown type name
'FILE'</code>, because the <code>FILE</code> type is undefined.
</p>

<pre>
int main() {
    FILE *fp;
    fp  = fopen("data.txt", "w");
}
</pre>
<p>
<code>FILE</code> is defined in <code>stdio.h</code> and if you add a
<code>#include &lt;stdio.h&gt;</code>, at the top, then the program will
compile.
</p>

</blockquote>

<p>This example program lets the reader actually run that program themselves and
verify that it doesn&rsquo;t compile if they want &ndash; they don&rsquo;t have to take my word
for it!</p>

<h3 id="pattern-11-no-examples">pattern 11: no examples</h3>

<p>Another problem with the previous explanation of header files is &ndash; there
aren&rsquo;t any examples! Leaving out examples makes it harder for the reader to
relate the new terminology to their own experiences.</p>

<p>Almost anyone who&rsquo;s ever written a C program has definitely used header files,
so a simple example (like mentioning <code>stdio.h</code>) can really help.</p>

<p>In that header files example, I replaced</p>

<blockquote>
<p>In modern C, header files are crucial tools&hellip;</p>
</blockquote>

<p>with an explanation that includes a simple example:</p>

<blockquote class="julia">
Almost every C program includes header files -- if you've ever seen something
like <code>#include <stdio.h></code> at the beginning of a C program, <code>stdio.h</code> is a
header file.
</blockquote>

<h3 id="pattern-12-explaining-the-wrong-way-to-do-something-without-saying-it-s-wrong">pattern 12: explaining the &ldquo;wrong&rdquo; way to do something without saying it&rsquo;s wrong</h3>

<p>Here&rsquo;s a pattern I see sometimes in tutorials (though unfortunately I don&rsquo;t have an example):</p>

<ol>
<li>Explain the &ldquo;wrong&rdquo; way of doing something without saying up front that it&rsquo;s wrong</li>
<li>Later on, show the consequences of doing the &ldquo;wrong&rdquo; thing</li>
<li>Explain the &ldquo;right&rdquo; way</li>
</ol>

<p>I think the intention of this is to imitate the real-life experience of making
mistakes. Usually when you make a mistake, you don&rsquo;t know that it&rsquo;s wrong at
the time!</p>

<p>But often the reader will end up feeling misled or confused about which way is
actually &ldquo;correct&rdquo;. And it&rsquo;s possible that they would never even have made that
particular mistake on their own!</p>

<h4 id="instead-here-are-four-options-for-presenting-mistakes">instead: here are four options for presenting mistakes</h4>

<p>Here are a few ways of accomplishing the same thing without misleading the
reader:</p>

<ol>
<li>Frame the &ldquo;wrong&rdquo; thing as an experiment (&ldquo;what if we try doing it X way?&rdquo;)</li>
<li>State an incorrect belief the reader might have: (&ldquo;You might think that the
command line tool would need to run as root (because it&rsquo;s talking to the
kernel, but&hellip;&ldquo;)</li>
<li>Explain a common mistake (for example &ldquo;Avoid Striding and Slicing in a Single Expression&rdquo; in <a href="https://effectivepython.com/">Effective Python</a>)<br /></li>
<li>Tell a story about a mistake you made and why it caused problems (here&rsquo;s one of mine: <a href="https://jvns.ca/blog/2015/11/27/why-rubys-timeout-is-dangerous-and-thread-dot-raise-is-terrifying/">Why Ruby&rsquo;s Timeout is dangerous (and Thread.raise is terrifying)</a>)</li>
</ol>

<p>Talking about mistakes is very important, just say up front that the thing is a
mistake!</p>

<h3 id="pattern-13-what-without-why">pattern 13: &ldquo;what&rdquo; without &ldquo;why&rdquo;</h3>

<p>I very often see people introduce new technologies with <strong>a list of features</strong>
instead of <strong>explaining why people choose the technology</strong>.</p>

<p>For example, the <a href="https://kubernetes.io/">kubernetes homepage</a> lists a bunch of
Kubernetes&rsquo; features: automated rollouts and rollbacks, service discovery and
load balancing, storage orchestration, secret and configuration management,
automatic bin packing, etc. This kind of feature list is pretty common on a
project homepage, but by itself it doesn&rsquo;t help someone understand whether
Kubernetes is right for them.</p>

<p>I think one reason writers leave out the &ldquo;why&rdquo; is that it&rsquo;s hard to write
a simple universal answer to &ldquo;why do people use Kubernetes?&rdquo;. There are a lot of reasons!
And if you get the &ldquo;why&rdquo; wrong, it&rsquo;s very noticeable and it feels embarrassing.
So it feels safer to just list some features and move on.</p>

<p>But as a reader, I find that <strong>a weak &ldquo;why&rdquo; is much better than no &ldquo;why&rdquo;</strong>. I&rsquo;d
rather read &ldquo;well, we use Kubernetes because it provides a decent basic
deployment system and GKE means we don&rsquo;t have to think about servers&rdquo; than an
attempt at covering every single company&rsquo;s business reasons for using Kubernetes.</p>

<h4 id="instead-talk-about-your-reasons-for-using-the-technology">instead: talk about your reasons for using the technology</h4>

<p>Of course, if you have a clear universal explanation of the problems a
technology solves, that&rsquo;s great. But I think a lot of the time authors
(including me!!) just don&rsquo;t have a great grasp of why other people are choosing
a given technology. That&rsquo;s okay!</p>

<p>If you don&rsquo;t feel you can give a universal &ldquo;why&rdquo;, I think it&rsquo;s better to just
be open about that and give an example from your personal experience.</p>

<p>For example, I might say about Kubernetes:</p>

<blockquote class="julia">
The only problem I've solved with Kubernetes was: we had a distributed cron job
system (Chronos) that wasn't working reliably (cron jobs would sometimes just not run), and we <a href="https://stripe.com/blog/operating-kubernetes">replaced the system with
Kubernetes</a>. Kubernetes' distributed cron was a lot more reliable.
</blockquote>

<p>This isn&rsquo;t a good explanation of why people in general use Kubernetes! But
I find reading many specific personal stories like this WAY more helpful than
an attempt at cramming &ldquo;here&rsquo;s what&rsquo;s Kubernetes is for&rdquo; into a few paragraphs.</p>

<p>I want to be clear here that even just explaining your own personal experience
isn&rsquo;t that easy. Technology projects can be messy, and sometimes their goals
change in the middle. I started out
trying to give an example of why I&rsquo;ve used <a href="https://www.envoyproxy.io/">Envoy</a>
and I realized I would need to think about it for several hours and have a few
conversations with old coworkers to explain it coherently so I decided to use a
different example.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>Originally I thought it would be simple to put together these patterns (&ldquo;there
are so many confusing explanations!&ldquo;) but it was surprisingly hard to
articulate exactly what was confusing to me about each explanation in a
convincing way.</p>

<p>It&rsquo;s definitely incomplete, but I&rsquo;ve already spent two weeks and 3000 words on
it so I&rsquo;ll stop here and I&rsquo;d love to hear what I&rsquo;ve missed :)</p>

<p><small> thanks to Laura, Dan, Kamal, Alyssa, Lindsey, Paul, Ivan, Edith, Hazem,
Anton, and John for helping improve this post </small></p>

<!-- css -->

<style>
.julia {
    border-left: 6px solid green;
}

article blockquote {
    border-left: 6px solid #e22;
}

blockquote code {
    display: inline-block;
    white-space: no-wrap;
    background-color: #f7f7f7;
    font-size: 0.8em;
    line-height: 1.5em;
    border: 1px solid #cccccc;
    padding: 0 2px;
    margin: -1px 0px;
}
</style>

<h3 id="translations">translations</h3>

<p>here is a translation:</p>

<ul>
<li><a href="https://velog.io/@roeniss/%EC%9E%98-%EC%84%A4%EB%AA%85%ED%95%98%EA%B3%A0-%EA%B3%84%EC%8B%A0%EA%B0%80%EC%9A%94-%EB%82%98%EC%81%9C-%EC%84%A4%EB%AA%85%EC%9D%98-%ED%8C%A8%ED%84%B4%EB%93%A4">Korean</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write good examples by starting with real code]]></title>
    <link href="https://jvns.ca/blog/2021/07/08/writing-great-examples/">
    <updated>2021-07-08T11:00:46+00:00</updated>
    <id>https://jvns.ca/blog/2021/07/08/writing-great-examples/</id>
    <content type="html"><![CDATA[

<p>When I write about programming, I spend a lot of time trying to come up with
good examples. I haven&rsquo;t seen a lot written about how to make examples, so
here&rsquo;s a little bit about my approach to writing examples!</p>

<p>The basic idea here is to start with real code that you wrote and then remove
irrelevant details to make it into a self-contained example instead of coming
up with examples out of thin air.</p>

<p>I&rsquo;ll talk about two kinds of examples: realistic examples and suprising
examples.</p>

<h3 id="good-examples-are-realistic">good examples are realistic</h3>

<p>To see why examples should be realistic, let&rsquo;s first talk about an unrealistic
example! Let&rsquo;s say we&rsquo;re trying to explain Python lambdas (which is just the
first concept I thought of). You could give this example, of using <code>map</code> and a
lambda to double a set of numbers.</p>

<pre><code>numbers = [1, 2, 3, 4]
squares = map(lambda x: x * x, numbers)
</code></pre>

<p>I think this example is unrealistic for a couple of reasons:</p>

<ul>
<li>squaring a set of numbers isn&rsquo;t something you&rsquo;re super likely to do in a real
program unless it&rsquo;s for Project Euler or something (there are LOTS of
operations on lists that are a lot more likely)</li>
<li>This usage of <code>map</code> is not idiomatic Python, even if you were doing this I
would write <code>[x*x for x in numbers]</code> instead</li>
</ul>

<p>A more realistic example of Python lambdas is using them with <code>sort</code>, like this;</p>

<pre><code>children = [{&quot;name&quot;: &quot;ashwin&quot;, &quot;age&quot;: 12}, {&quot;name&quot;: &quot;radhika&quot;, &quot;age&quot;: 3}]
sorted_children = sorted(children, key=lambda x: x['age'])
</code></pre>

<p>But this example is still pretty contrived (why exactly do we need to sort
these children by age?). So how do we actually make realistic examples?</p>

<h3 id="how-to-make-your-examples-realistic-look-at-actual-code-you-wrote">how to make your examples realistic: look at actual code you wrote</h3>

<p>I think the easiest way to make realistic examples is, instead of pulling an
example out of thin air (like I did with that <code>children</code> example), instead just
start by looking at real code!</p>

<p>For example, if I grep a bunch of Python code I wrote for <code>sort.+key</code>, I find
LOTS of real examples of me sorting a list by some criterion, like:</p>

<ul>
<li><code>tasks.sort(key=lambda task: task['completed_time'])</code></li>
<li><code>emails = reversed(sorted(emails, key=lambda x:x['receivedAt']))</code></li>
<li><code>sorted_keysizes = sorted(scores.keys(), key=scores.get)</code></li>
<li><code>shows = sorted(dates[date], key=lambda x: x['time']['performanceTime'])</code></li>
</ul>

<p>It&rsquo;s pretty easy to see a pattern here &ndash; a lot of these are sorting by time!
So now we can make a simple realistic example of sorting some objects (emails,
events, etc) by time, like sorting some calendar events by their unix timestamp:</p>

<pre><code>events = [
    { 'date': 1625837042, 'name': 'birthday party'},
    { 'date': 1620581136, 'name': 'dinner with Yifei'},
    { 'date': 1589045136, 'name': 'dentist appointment'},
]
sorted_events = sorted(events, key=lambda x: x['date'])
</code></pre>

<p>I think this is more realistic than the &ldquo;sort children by age&rdquo; example, and
it&rsquo;s just as simple!</p>

<h3 id="realistic-examples-help-sell-the-concept-you-re-trying-to-explain">realistic examples help &ldquo;sell&rdquo; the concept you&rsquo;re trying to explain</h3>

<p>When I&rsquo;m trying to explain an idea (like Python lambdas), I&rsquo;m usually also trying
to convince the reader that it&rsquo;s worth learning! Python lambdas are super
useful! And to convince someone that lambdas are useful, it really helps to
show someone how lambdas could help them do a task that they could actually
imagine themselves doing, and ideally a task that they&rsquo;ve done before.</p>

<h3 id="distilling-down-examples-from-real-code-can-take-a-long-time">distilling down examples from real code can take a long time</h3>

<p>The example I just gave of explaining how to use <code>sort</code> with <code>lambda</code> is
pretty simple and it didn&rsquo;t take me a long time to come up with, but turning
real code into a standalone example can take a really long time!</p>

<p>For example, I was thinking of including an example of some weird CSS behaviour
in this post to illustrate how it&rsquo;s fun to create examples with weird or
surprising behaviour. I spent 2 hours taking a real problem I had this week,
making sure I understood what was actually happening with the CSS, and making
it into a minimal example.</p>

<p>In the end it &ldquo;just&rdquo; took <a href="https://codepen.io/wizardzines/pen/0eda7725a46c919dcfdd3fa80aff3d41">5 lines of HTML and a tiny bit of CSS</a> to
demonstrate the problem and it doesn&rsquo;t really look like it took hours to write.
But originally it was hundreds of lines of JS/CSS/JavaScript, and it takes time
to untangle all that and come up with something small that gets at the heart of
the issue!</p>

<p>But I think it&rsquo;s worth it to take the time to make examples really clear and
minimal &ndash; if hundreds of people are reading your example, you&rsquo;re saving them
all so much time!</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>I think there&rsquo;s a lot more to say about examples &ndash; for instance I think there
are a few different types of useful examples, like:</p>

<ul>
<li>examples that are surprising to the reader, which are more about changing
someone&rsquo;s mental model than providing code to use directly</li>
<li>examples that are easy to copy and paste to use as a starting point</li>
</ul>

<p>but maybe I&rsquo;ll write about that another day. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons why bugs might feel "impossible"]]></title>
    <link href="https://jvns.ca/blog/2021/06/08/reasons-why-bugs-might-feel-impossible/">
    <updated>2021-06-08T09:28:08+00:00</updated>
    <id>https://jvns.ca/blog/2021/06/08/reasons-why-bugs-might-feel-impossible/</id>
    <content type="html"><![CDATA[

<p>Hello! I&rsquo;m <a href="https://jvns.ca/blog/2019/06/23/a-few-debugging-resources/">very slowly</a>
working on writing a zine about debugging, so I <a href="https://twitter.com/b0rk/status/1400169409277218821">asked on Twitter the other day</a>:</p>

<blockquote>
<p>If you&rsquo;ve run into a bug where it felt &ldquo;impossible&rdquo; to understand what was happening &ndash; what made it feel that way?</p>
</blockquote>

<p>Of course, bugs always happen for logical reasons, but I&rsquo;ve definitely run into
bugs that felt like they might be impossible for me to understand (until I
figured them out!)</p>

<p>I got about 400 responses, which I&rsquo;ll try to summarize here. I&rsquo;m not going to
talk about how to deal with these various kinds of &ldquo;impossible&rdquo; bugs in this
post, I&rsquo;ll just try to classify them.</p>

<p>Here are the categories I came up with for ways a bug might feel impossible
to understand. Each one of them has a bunch of sub variants which are bolded below.</p>

<ol>
<li>it&rsquo;s hard to reproduce</li>
<li>you don&rsquo;t understand the overall system well</li>
<li>it&rsquo;s hard to get data about the bug</li>
<li>one of your assumptions is wrong</li>
<li>the bug is really complex</li>
</ol>

<h3 id="1-the-bug-is-hard-to-reproduce-locally">1. the bug is hard to reproduce locally</h3>

<p>I thought <a href="https://twitter.com/BFormations/status/1400180379051597824">this description</a> was really great:</p>

<blockquote>
<p>The ones that make me contemplate a career change are usually bugs that are
only happen to a few users, can’t be reproduced consistently by users or at all
in-house, and have slightly varying descriptions in each bug report (kinda like
Bigfoot sightings).</p>
</blockquote>

<p>Here are some specific ways a bug can be hard to reproduce:</p>

<p><strong>the bug is nondeterministic</strong></p>

<p>You run your program with the exact same inputs 1000 times, and it only fails
once. This happens a lot with race conditions in multithreaded programs.</p>

<p><strong>the bug only happens in production</strong></p>

<p>Lots of bugs are hard to reproduce in your dev environment, either because it&rsquo;s
hard to figure out exactly which inputs trigger the bug, or because they only
happen under certain conditions (like a lot of traffic) which are hard to
recreate.</p>

<p><strong>you don&rsquo;t have access to the machine where the bug is happening</strong></p>

<p>Three examples of this:</p>

<ul>
<li>you&rsquo;re shipping software (a binary or a website) that runs on your customer&rsquo;s
computer, they have a problem, and you don&rsquo;t have direct access to their
computer to see what&rsquo;s going on.</li>
<li>the problem involves a managed cloud service that you don&rsquo;t have a lot of
access to.</li>
<li>the problem only happens on an input of data that you don&rsquo;t have access to (perhaps because the data is classified/private)</li>
</ul>

<p><strong>you don&rsquo;t have access to the data you need to reproduce the bug</strong></p>

<p>One person mentioned a case where the bug was easy to reproduce, but the data
they needed to reproduce it was confidential, so they weren&rsquo;t allowed to have
access to it.</p>

<p><strong>it&rsquo;s very slow to reproduce</strong></p>

<p>There are bugs where you know exactly <em>how</em> to reproduce it, but it takes a long
time (like 20 minutes or way longer) to reproduce the bug. This is hard because
it&rsquo;s hard to maintain your focus: maybe you can only try 1 experiment per day!</p>

<h3 id="2-you-don-t-understand-the-overall-system-well">2. you don&rsquo;t understand the overall system well</h3>

<p>Even if you can reproduce the bug, if you don&rsquo;t understand how the part of
the program with the bug works, you can end up VERY stuck.</p>

<p>Some examples of this that came up:</p>

<p><strong>unknown unknowns: the bug involves a system or concept you&rsquo;ve didn&rsquo;t know about</strong></p>

<p>Sometimes bugs are caused by a part of the system that you didn&rsquo;t even know
existed. For example, when I was debugging <a href="https://jvns.ca/blog/2015/11/21/why-you-should-understand-a-little-about-tcp/">this TCP issue</a>,
I&rsquo;d never heard of Nagle&rsquo;s algorithm or delayed ACKs. So it was pretty
difficult to recognize that they were causing the problem!</p>

<p>The only reason I was able to diagnose that bug was that someone at work had
coincidentally posted a blog post about it and I remembered the symptoms were
similar.</p>

<p>Here&rsquo;s another example of this from the Twitter replies:</p>

<blockquote>
<p>I was sending strings containing null bytes (long story) between two systems
that support them, but in some cases, theres a step along the way that doesn&rsquo;t
support them</p>
</blockquote>

<p>Another example of &ldquo;the bug is in a surprising place&rdquo; is <a href="http://www.dkriesel.com/en/blog/2013/0802_xerox-workcentres_are_switching_written_numbers_when_scanning">this case of a bug in a scanner</a>.</p>

<p>The next few sections are more specific ways confusion about the program works
can make a bug difficult to solve.</p>

<p><strong>the bug is in an external library you don&rsquo;t understand</strong></p>

<p>Sometimes the bug is in a library or an open source program you&rsquo;re
completely unfamiliar with, but you have to fix it anyway. This makes debugging hrad because:</p>

<ol>
<li>you need to learn how the library works</li>
<li>it&rsquo;s not always easy to modify the library and get your program to use your
modified version of the library, so it&rsquo;s hard to experiment and make changes
or add extra instrumentation to the library</li>
</ol>

<p><strong>you don&rsquo;t understand the error message at all</strong></p>

<p>Some error messages initially seem totally incomprehensible. A couple of examples of this:</p>

<ul>
<li>&ldquo;values of β may give rise to dom!&rdquo;, from <a href="https://www.youtube.com/watch?v=FyLnF9U18rY">this talk by Mark Allen on that error message</a> or</li>
<li>&ldquo;Size must be between and 16793600(16MB) First element: oints&rdquo; from the talk <a href="https://youtu.be/QxtwVsHxvC4?t=471">The tales of the cursed operating systems textbook</a> by Kiran Bhattaram</li>
<li>Some compiler error messages can be very confusing if you don&rsquo;t know what they mean</li>
</ul>

<p>These are tricky because it&rsquo;s not clear where to start &ndash; what is β? What is this element oints doing here?</p>

<p>Another variant of this is debugging output that&rsquo;s formatted in a confusing way.</p>

<p><strong>you don&rsquo;t know what keywords to search to get more information</strong></p>

<p>One case that a lot of people mentioned is: you search for a keyword that you
think is related to your bug, you get 10 million results, and none of them are helpful.</p>

<p><strong>the bug is in a proprietary system</strong></p>

<p>Figuring out an unfamiliar system is already hard, and it&rsquo;s even worse when you
can&rsquo;t even read the source code!</p>

<p><strong>the system is poorly documented</strong></p>

<p>A few variants of this:</p>

<ul>
<li>there&rsquo;s no documentation, or very sparse documentation</li>
<li>the only information about the system is from someone you can&rsquo;t contact &ndash;
person who <em>does</em> understand it has left the company, or you don&rsquo;t know who
they are, or they work at a company you can&rsquo;t find any contact information
for</li>
<li>the information you need is in a 2000 page PDF and you don&rsquo;t know where to
start looking</li>
</ul>

<h3 id="3-it-s-hard-to-get-information-about-the-program-s-internal-state">3. it&rsquo;s hard to get information about the program&rsquo;s internal state</h3>

<p>Even if you generally understand the system you&rsquo;re working with and you can
reproduce the bug, debugging is almost impossible if you can&rsquo;t get enough
information about the program&rsquo;s internal state when the bug happens.</p>

<p>Here are a few specific reasons it can be hard to get data about the program&rsquo;s
internal state.</p>

<p><strong>there&rsquo;s no output at all</strong></p>

<p>Your program failed, but there&rsquo;s no output at all to read to tell you why it
failed. Not even an error message! It just didn&rsquo;t work.</p>

<p>This has happened to me before with operating systems bugs &ndash; my toy OS didn&rsquo;t
start and because it failed before I had any way of printing output, I had no
idea was wrong &ndash; it just didn&rsquo;t work!</p>

<p><strong>there&rsquo;s way too much output</strong></p>

<p>It&rsquo;s also easy to drown in <em>too much</em> output &ndash; I&rsquo;ve turned on debug output and
then been totally overwhelmed by how much information there is. It&rsquo;s very hard
to tell what&rsquo;s relevant and what&rsquo;s irrelevant in a million log lines!</p>

<p><strong>information about the bug is split across many places</strong></p>

<p>When investigating a distributed systems bug, the log lines related to the bug
are often spread across a bunch of different services. And sometimes there&rsquo;s no
request ID that you can use to easily figure out which log lines from service A
corresponded to the exception you saw in service B.</p>

<p>So you end up spending a long time manually staring at logs and trying to
correlate them. I&rsquo;ve spent more of my life doing this than I&rsquo;d prefer :)</p>

<p><strong>it&rsquo;s not possible to use a debugger/add print statements</strong></p>

<p>For example, if you want to know something about the state of your database
(like Postgres), you&rsquo;re definitely not going to attach a debugger to your
production database, and you probably don&rsquo;t want to recompile it to add extra
logging information. (though I have definitely recompiled programs just to add
extra logging information I needed!)</p>

<p>So you need to rely on the program&rsquo;s existing logging mechanisms and hope that
they have the information you need.</p>

<p><strong>the bug goes away when you use a debugger</strong></p>

<p>Here&rsquo;s a story from the Twitter replies about that:</p>

<blockquote>
<p>I had a bug in C++ code that would cause a seg fault. When I compiled with
the debug flag on, it worked fine. So really hard to find. Turned out I was
copying a string that was 2 bytes too big into a struct. The debug flag created
extra space for it!</p>
</blockquote>

<p>Another reason a debugger can cause a bug to go away is if it&rsquo;s a race
condition &ndash; debuggers often make the program run a little bit slower which can
cause the race not to happen.</p>

<p>A related story about how a print statement can make the bug disappear:</p>

<blockquote>
<p>In c or c++ printf can act as an ad-hoc synchronization point/cooperative MT
point so adding printf changes the execution order of the threads, making them
problem go away.</p>
</blockquote>

<h3 id="4-one-of-your-assumptions-is-wrong">4. one of your assumptions is wrong</h3>

<p>For example, in almost all cases it&rsquo;s fair to assume that the compiler does not
have a bug and that the bug is in your code. But as someone on Twitter pointed
out, very rarely it is a compiler bug! (<a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=38644">here&rsquo;s the compiler bug they
experienced</a>)</p>

<p>Other examples of (more mundane) assumptions that can be wrong:</p>

<ul>
<li>assuming your new code is being run when in fact something is being cached</li>
<li>assuming some environment variable is set when it isn&rsquo;t</li>
<li>assuming the bug is in the software when it&rsquo;s in the hardware (like a bad cable!)</li>
<li>assuming the documentation is correct</li>
</ul>

<p>Let&rsquo;s go over a few variants of &ldquo;one of your assumptions is wrong&rdquo;.</p>

<p><strong>the red herring</strong></p>

<p>Sometimes you see something early on when debugging that looks VERY suspicious
and spend a long time investigating it, but then it turns out to be totally
unrelated to the bug. This is pretty normal and it often doesn&rsquo;t mean you did
anything wrong (you can&rsquo;t take the perfect most efficient path to understanding
the bug every time!). But it can be really demoralizing.</p>

<p><strong>the case that works and the case that doesn&rsquo;t work look EXACTLY the same</strong></p>

<p>This one is SO frustrating when it happens &ndash; you&rsquo;re 100% sure nothing changed
but somehow the code is no longer working! (of course, the answer is that something did change, you just can&rsquo;t see it)</p>

<p>A few examples of this.</p>

<ol>
<li>one input causes your code to break, but it succeeds on a bunch of other
inputs and you can&rsquo;t figure out what&rsquo;s different about the input that makes
the code break</li>
<li>there&rsquo;s a typo that your brain is just refusing to notice</li>
<li>a very small code change has caused a bug and you really think it shouldn&rsquo;t
have made any difference</li>
<li>the exact same code is running on the same inputs, but there&rsquo;s some external
factor causing the bug that you haven&rsquo;t considered (like a file on disk or
an environment variable)</li>
</ol>

<p>The last type we&rsquo;ll talk about is bugs that are just really complex!</p>

<h3 id="5-the-bug-is-really-complicated">5. the bug is really complicated</h3>

<p>I wanted to separate this one out because a lot of bugs that are VERY DIFFICULT
to understand are actually pretty simple in the end! They&rsquo;re just difficult to
understand because of some of the above reasons (incorrect assumptions! you
don&rsquo;t understand the system! it&rsquo;s hard to observe the program&rsquo;s state!).</p>

<p>But some bugs are genuinely very complicated. A few variants of this one:</p>

<p><strong>the code is complicated</strong></p>

<p>One <a href="https://twitter.com/EllieOnSoftware/status/1400494936877846530">example from twitter</a>:</p>

<blockquote>
<p>too many, far-flung, and unknown influences on system behavior. e.g. multiple
inheritance run amok <em>across</em> libraries</p>
</blockquote>

<p><strong>the error message has 0 results when you Google it</strong></p>

<p>This doesn&rsquo;t always mean the bug is complicated, but it&rsquo;s alarming when there
are 0 results, or there&rsquo;s 1 result and it&rsquo;s&hellip; the library&rsquo;s source code, or 1
sad person on a forum posting about your exact bug but there are no replies.
(&ldquo;Oh no, has NOBODY ever run into this bug before?!?!&rdquo;)</p>

<p><strong>the bug is actually 3 bugs</strong></p>

<p>With most bugs, only one thing is going wrong &ndash; everything in the system is
working correctly except 1 thing and you just need to identify the 1 thing
that&rsquo;s causing the problem.</p>

<p>It&rsquo;s a lot harder when multiple things are broken at once &ndash; maybe there&rsquo;s
a bug in your program, and also a bug in a library you&rsquo;re using, and also some
unexpected behaviour on the part of your load balancer.</p>

<p>One common example of this is security vulnerabilities &ndash; they often involve
pretty complex bugs that take a long time to explain and understand even when
you figure out exactly what&rsquo;s going on.</p>

<h3 id="bonus-you-re-tired">bonus: you&rsquo;re tired</h3>

<p>This isn&rsquo;t really a technical reason, but tricky bugs are WAY harder to fix
when you&rsquo;re tired or stressed out after a long day.</p>

<h3 id="it-s-fun-to-see-that-many-people-have-the-same-types-of-impossible-bugs">it&rsquo;s fun to see that many people have the same types of impossible bugs</h3>

<p>I really enjoyed seeing how many people talked about the same reasons for
&ldquo;impossible&rdquo; bugs. Debugging sometimes feels like a really intense personal
struggle (WHY is this happening to ME?!?!) and I thought it was really cool to
see that even some of the weirdest reasons for bugs are shared by a lot of
people! More than one person mentioned &ldquo;the debugger stops the bug from
happening&rdquo;!</p>

<h3 id="many-of-these-can-happen-all-at-once">many of these can happen all at once</h3>

<p>I was chatting with my partner about a performance problem at work that took
them months to diagnose. It was challenging because:</p>

<ul>
<li>it was intermittent (only happened when there was a lot of traffic)</li>
<li>it only happened in production</li>
<li>they didn&rsquo;t have direct access to the system where it was happening (it was managed by a vendor)</li>
<li>it involved a Linux kernel system that they didn&rsquo;t previously know existed</li>
</ul>

<p>They figured it out, but because there were so many things that made it difficult, it took a lot of time!</p>

<p><small>
If you&rsquo;re interested in hearing about this debugging zine if/when I ever finish
it, you can subscribe to my <a href="https://wizardzines.com/zine-announcements/">zine announcements</a> mailing list. And
of course I&rsquo;ll post about it on this blog.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You can now buy print version of my zines!]]></title>
    <link href="https://jvns.ca/blog/2021/06/02/you-can-now-buy-print-version-of-my-zines-/">
    <updated>2021-06-02T10:48:15+00:00</updated>
    <id>https://jvns.ca/blog/2021/06/02/you-can-now-buy-print-version-of-my-zines-/</id>
    <content type="html"><![CDATA[

<p>Hello! Quick announcement: I opened a new <a href="https://store.wizardzines.com">print zine
store</a> last week, so now you can buy print
copies of my zines! To start I&rsquo;ve printed 350 copies of each of the &ldquo;Bite
Size&hellip;&rdquo; zines.</p>

<p>Here&rsquo;s a photo of the front of the zines and some stickers:</p>

<div align="center">
<img src="https://jvns.ca/images/print-front.jpg">
</div>

<p>and the back covers:
<div align="center">
<img src="https://jvns.ca/images/print-back.jpg">
</div></p>

<p>Here are some notes about how the store works:</p>

<h3 id="great-print-quality">great print quality!</h3>

<p>I worked with a really good print company (<a href="https://www.girliepress.com/">Girlie Press</a>) and printed the zines on some nice paper,
so they look WAY nicer than they do when printed on a home printer :). I&rsquo;m
delighted with how they turned out.</p>

<p>When I originally started working on this project I thought about using a
print-on-demand company briefly (it sounds so convenient!) but I ordered test
prints from all the ones I could find and it turns out that none of them could
produce the print quality I wanted.</p>

<h3 id="free-shipping">free shipping!</h3>

<p>I never like paying for shipping, so I&rsquo;ve set up free shipping for US orders
over $30, and international orders over $50.</p>

<p>All of the shipping is being managed by a delightful small company called
<a href="https://www.whitesquirrel.com/">White Squirrel</a> near Seattle, who specialize in
shipping for artists. (I&rsquo;m not handling it myself because I am extremely
forgetful and I would just get distracted and forget to ship your order,
everybody would suffer)</p>

<h3 id="stickers">stickers!</h3>

<p>I&rsquo;ve also added also some stickers on the store as a bonus &ndash; there&rsquo;s an strace
sticker because of my great love for strace, a TCP witch (from the cover of
<a href="https://wizardzines.com/zines/tcpdump">let&rsquo;s learn tcpdump</a>), and a REALLY CUTE space penguin who I&rsquo;m personally obsessed with from the cover of
<a href="https://wizardzines.com/zines/containers">how containers work</a>.</p>

<p>If you order the pack of all 4 zines, you&rsquo;ll get all of the stickers as well as
a sticker sheet of the cover of Bite Size Command Line, so you can have awk and
grep stickers :)</p>

<h3 id="a-discount-if-you-already-bought-the-pdf-version">a discount if you already bought the PDF version!</h3>

<p>If you already bought the PDF version of these zines &ndash; thank you so much!! You
can use the PASTBUYER discount code for 40% off. You&rsquo;ll need to use the same
email address you used when you bought the PDF. If you run into any problems
with that, email me at julia@wizardzines.com.</p>

<h3 id="all-print-zines-include-the-pdf-version-too">all print zines include the PDF version too!</h3>

<p>If you order the print version and you don&rsquo;t already have the PDF version &ndash;
it&rsquo;s included! You&rsquo;ll get a link with your confirmation email that&rsquo;ll let you
download the PDF right away.</p>

<h3 id="more-zines-coming-soon">more zines coming soon!</h3>

<p>Right now only 4 zines (the &ldquo;Bite Size&hellip;&rdquo;  zines) are available on this store
because I wasn&rsquo;t sure how many to order and didn&rsquo;t want to end up with
thousands of zines in a warehouse by accident (think of the trees!).</p>

<p>But I&rsquo;ll definitely be adding more zines relatively soon!</p>

<h3 id="hopefully-also-bulk-rates-and-posters">hopefully also bulk rates and posters</h3>

<p>I&rsquo;m hoping to add bulk rates soon &ndash; like if you want to buy 10 copies of a
zine for everyone on team, 30 copies for a class, or 100 copies as swag for a
conference.</p>

<p>I&rsquo;d also like to add some posters to the store at some point, like a
<a href="https://wizardzines.com/comics/wizard-programmer/">how to be a wizard programmer</a> poster.</p>

<p>All of that is coming later though! Sales have been going pretty well so far
(we&rsquo;ve sold almost half of the initial print run!), so thank you ❤.</p>

<h3 id="the-link-again">the link again</h3>

<p>The print zines ore at <a href="https://store.wizardzines.com">https://store.wizardzines.com</a>, or you can find it linked from each zine&rsquo;s page at <a href="https://wizardzines.com/zines/bite-size-bash">https://wizardzines.com/zines/bite-size-bash</a> (click on &ldquo;print version&rdquo;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog about what you've struggled with]]></title>
    <link href="https://jvns.ca/blog/2021/05/24/blog-about-what-you-ve-struggled-with/">
    <updated>2021-05-24T13:59:07+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/24/blog-about-what-you-ve-struggled-with/</id>
    <content type="html"><![CDATA[

<p>I was talking to <a href="https://jemma.dev/">Jemma</a> recently about what stops people
from blogging. One barrier that stood out to me was: it&rsquo;s hard to identify
which things you know will be useful to other people!</p>

<p>The process I use for a lot of my blog posts is:</p>

<ol>
<li>Struggle with something (usually computer-related)</li>
<li>Eventually (days or months or years later), figure out how to solve some of
the problems I had</li>
<li>Write a blog post about what helped me</li>
</ol>

<p>I think this approach is effective because if I struggled with something,
there&rsquo;s a pretty good chance that other people are struggling with it too, and
what I learned is likely to be useful to at least some of them!</p>

<p>Obviously this isn&rsquo;t the only approach to blogging, but it&rsquo;s my approach, so
that&rsquo;s what I&rsquo;m going to write about here :). I&rsquo;ll give a few examples of
specific blog posts that came out of something I struggled with.</p>

<h3 id="it-s-not-about-the-struggle-it-s-about-what-you-learned">it&rsquo;s not about the struggle, it&rsquo;s about what you learned</h3>

<p>The first important thing here is that the blog posts aren&rsquo;t about the
struggle, exactly. I&rsquo;m still not that great at writing Rust, but I wouldn&rsquo;t
write a blog post called &ldquo;I find Rust hard&rdquo; &ndash; that wouldn&rsquo;t help anyone!</p>

<p>Instead, when I learn something that helps me, I write about it so that it can
help other people too. For example, one specific thing I struggled with in Rust
was understanding references, and so I wrote <a href="https://jvns.ca/blog/2017/11/27/rust-ref/">what&rsquo;s a reference in
Rust?</a> about what I learned.</p>

<h3 id="what-you-struggled-with-shows-you-what-to-focus-on">what you struggled with shows you what to focus on</h3>

<p>Okay, Julia, you might be thinking &ndash; if it&rsquo;s about what you learned, why isn&rsquo;t
this blog post called &ldquo;Blog about what you learned&rdquo; then? Well, we&rsquo;ve all
learned lots of things! For example at some point in the last 8 years I learned
Go. But what&rsquo;s worth talking about with Go? Should I explain the syntax? Talk
about <code>net/http</code>? Explain Go modules?</p>

<p>If I instead think about what I&rsquo;ve struggled with Go, it suddenly gets MUCH
clearer &ndash; one thing I&rsquo;ve had trouble with is deadlocks! That&rsquo;s way more
specific, and a lot more likely to be useful to other people than an intro
to Go modules &ndash; it&rsquo;s not obvious how to use Go&rsquo;s concurrency features well!</p>

<h3 id="it-can-take-years-to-figure-out-what-you-learned">it can take years to figure out what you learned</h3>

<p>When I started my first job at a &ldquo;big&rdquo; company 7 years ago (&ldquo;big&rdquo; being more
than 5 people), I really didn&rsquo;t understand how to work with my manager
effectively and it sometimes caused misunderstandings. It wasn&rsquo;t great!</p>

<p>But when I was first having problems with this, I didn&rsquo;t have anything that
useful to say about this other than &ldquo;oh no, um, this is hard&rdquo;. This was because
I hadn&rsquo;t solved my problems for myself yet, so I definitely could not tell
anyone else what I learned! It took me a few years to figure out how to work
with a manager well.</p>

<p>And I&rsquo;m still figuring out new ways to explain what I learned &ndash; for example just a few
months ago I realized (while talking to my old manager) that there are a lot of
concrete facts that managers don&rsquo;t know, and if you think your manager <strong>does</strong>
know those facts, you&rsquo;ll end up with a lot of miscommunications and problems.</p>

<p>So I wrote <a href="https://jvns.ca/blog/things-your-manager-might-not-know/">Things your manager might not
know</a> as another
attempt at helping people who are learning to work with their manager
effectively. I wrote that post a year and a half after I left my job, so I
didn&rsquo;t even have a manager at the time!</p>

<h3 id="write-it-down-while-you-still-remember-what-was-hard">write it down while you still remember what was hard</h3>

<p>It&rsquo;s very easy to misidentify what you learned if you don&rsquo;t remember what it
was like to struggle with the topic.</p>

<p>When I first started using git at work, it was confusing and I made
a lot of mistakes. But that was in 2011 and I can&rsquo;t remember what was hard
about it anymore! So I could say that the most important thing to learn to
solve your git issues is git&rsquo;s object model (like how branches / commits work),
but I don&rsquo;t exactly know if that&rsquo;s true! I know that I used to struggle with
git, and now I don&rsquo;t, and now I have a pretty good model of how git&rsquo;s object
works, but I don&rsquo;t really remember exactly what got me from there to here.</p>

<h3 id="advanced-mode-write-about-other-people-s-struggles">advanced mode: write about other people&rsquo;s struggles</h3>

<p>But if you don&rsquo;t remember what was hard about something, not all is lost! It&rsquo;s
definitely possible to write about a topic that somebody else is struggling
with. I find that the easiest way to do this is to first teach the topic, so
here&rsquo;s a quick story about that.</p>

<p>In 2019, I wrote a zine about SQL. When I started, I thought it would be easy
because I was pretty comfortable with SQL &ndash; I&rsquo;d done a LOT of data analysis in
SQL and so I thought I could explain it.</p>

<p>But I couldn&rsquo;t have been more wrong. It turned out that when I started I had no
idea what was actually challenging about learning SQL.</p>

<p>I spent a lot of time talking to a friend who was new to SQL about how it
worked, and we realized that one of the blockers was that it wasn&rsquo;t obvious to
them in what order a given SQL query was running. So I wrote <a href="https://jvns.ca/blog/2019/10/03/sql-queries-don-t-start-with-select/">SQL queries don&rsquo;t
start with
SELECT</a>,
and a bunch of related examples and that helped a lot of people understand SQL
queries better!</p>

<p>The cool thing about this is that when I dig into something that I think is
easy but someone else is struggling with, often I learn something new too. For
example I did sort of know in what order SQL queries ran but I&rsquo;d never really
thought about it explicitly. And being more explicit about how it worked helped
me understand window functions better, which was something I was a bit shaky
on!</p>

<h3 id="sometimes-you-just-haven-t-learned-enough-about-a-topic-yet-and-that-s-ok">sometimes you just haven&rsquo;t learned enough about a topic yet (and that&rsquo;s ok)</h3>

<p>There are still a lot of programming and career things that I&rsquo;ve struggled with
in the past where  I still don&rsquo;t have a concrete lesson that I can write about.
For example, I&rsquo;ve struggled a lot with Kubernetes and Envoy and I&rsquo;ve written
about that a bit on this blog, but I&rsquo;m still not sure what I learned from some
of the problems I had. And I don&rsquo;t work with either of them anymore so it&rsquo;s
possible I&rsquo;ll never really be able to say! This kind of feels bad, but it&rsquo;s
okay.</p>

<p>Every so often I&rsquo;ll think about a topic I&rsquo;ve struggled with in the past and
reflect on whether I&rsquo;ve learned anything I can write about. Usually the answer
is no, but sometimes the answer is yes!</p>

<h3 id="it-s-a-bit-weird-to-be-vulnerable-on-the-internet">it&rsquo;s a bit weird to be vulnerable on the internet</h3>

<p>Talking about things I struggled with on the internet is kind of scary
sometimes! Here are a few things I do to make it less scary:</p>

<ul>
<li>Mostly talk about technical problems! Talking about computer problems I had
(<a href="https://jvns.ca/blog/2017/11/20/groups/">&ldquo;I didn&rsquo;t understand how groups worked on
Linux&rdquo;</a>) feels very neutral to me.
We&rsquo;re not born learning how groups work on Linux and everyone has to learn it
at some point.</li>
<li>Be a little vague when talking about people problems! For example, <a href="https://jvns.ca/blog/brag-documents/">get your
work recognized: write a brag document</a>
comes out of some stress I had around getting promoted. I&rsquo;m not very specific
about my problems because everyone&rsquo;s experience with getting promoted is
super different and I think focusing too much on my specific issues would
distract from the lesson (&ldquo;track your accomplishments!&rdquo;).</li>
<li>Spend a lot of time processing things! In general the more I struggled with
something, the more time I need to spend processing it before I can figure
out how to talk about what I learned from it in public.</li>
<li>Don&rsquo;t talk about everything! There are obviously lots of things I never talk
about on my blog at all :)</li>
</ul>

<p>I wrote another blog post about <a href="https://jvns.ca/blog/2017/03/20/blogging-principles/">blogging principles I use</a> a few years ago that talks about some more tactics I use here.</p>

<h3 id="you-can-practice-identifying-what-you-learned">you can practice identifying what you learned</h3>

<p>Going from &ldquo;I have a problem!&rdquo; to &ldquo;I don&rsquo;t have that problem anymore!&rdquo; to &ldquo;here
are the specific things I learned!&rdquo; is not actually that easy! But it is
something you can practice. It&rsquo;s easy to skip that last step &ndash; you can
learn things on an intuitive level but never actually identify what exactly it
was that you learned.</p>

<p>For example, I&rsquo;m definitely better at testing than I used to be but I haven&rsquo;t
taken the time to identify exactly what I&rsquo;ve learned about testing over the
years! I think I&rsquo;d write better tests if I explicitly wrote down what I&rsquo;ve
learned about testing so that I could more consistently do those things in the
future.</p>

<h3 id="talk-to-a-friend-or-coworker-to-figure-out-what-you-ve-learned">talk to a friend or coworker to figure out what you&rsquo;ve learned</h3>

<p>It can be really hard to notice things you&rsquo;ve learned on your own. Like we just
talked about, I don&rsquo;t really konw what I&rsquo;ve learned about testing!</p>

<p>I find that having conversations with friends or coworkers makes it MUCH easier
to figure out what I want to write about a topic. A few reasons talking to
others is great:</p>

<ul>
<li>It can help clarify your thoughts!</li>
<li>They probably have different ideas from you!</li>
<li>They can tell you if what you&rsquo;re saying resonates with them or not!</li>
</ul>

<h3 id="why-i-like-writing-about-what-i-learned-in-public">why I like writing about what I learned in public</h3>

<p>I think that whether or not you write about what you learned in public, it&rsquo;s
super valuable to keep track of what you learned from doing hard things. It
helps you remember what you&rsquo;ve learned so that you can do better work in the
future!</p>

<p>Here are a few things I like about writing about what I&rsquo;ve learned in public,
though:</p>

<ul>
<li>It helps other people! It feels way better to have struggled with a super
confusing situation and come out of it with something concrete that can help
others navigate a similar situation</li>
<li>Putting the writing on the internet really forces me to think about whether
the lessons I think I learned actually make sense (&ldquo;wait, is this REALLY
true?&ldquo;)</li>
<li>When I&rsquo;m writing I often come up with additional questions and do a little
bit of extra research, so I learn even more!</li>
<li>Seeing other people&rsquo;s reactions often helps me learn something new</li>
<li>If I want to remember what I learned about something in the past, I can just
look it up on my blog!</li>
</ul>

<p><small>Thanks to Jemma, Kamal, Shae, Matthieu, and Travis for feedback on a
draft of this. </small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to look at the stack with gdb]]></title>
    <link href="https://jvns.ca/blog/2021/05/17/how-to-look-at-the-stack-in-gdb/">
    <updated>2021-05-17T09:14:37+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/17/how-to-look-at-the-stack-in-gdb/</id>
    <content type="html"><![CDATA[

<p>I was chatting with someone yesterday and they mentioned that they don&rsquo;t really
understand exactly how the stack works or how to look at it.</p>

<p>So here&rsquo;s a quick walkthrough of how you can use gdb to look at the stack of a C
program. I think this would be similar for a Rust program, but I&rsquo;m going to use
C because I find it a little simpler for a toy example and also you can do Terrible
Things in C more easily.</p>

<h3 id="our-test-program">our test program</h3>

<p>Here&rsquo;s a simple C program that declares a few variables and reads two strings
from standard input. One of the strings is on the heap, and one is on the
stack.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main() {
    char stack_string[10] = &quot;stack&quot;;
    int x = 10;
    char *heap_string;

    heap_string = malloc(50);

    printf(&quot;Enter a string for the stack: &quot;);
    gets(stack_string);
    printf(&quot;Enter a string for the heap: &quot;);
    gets(heap_string);
    printf(&quot;Stack string is: %s\n&quot;, stack_string);
    printf(&quot;Heap string is: %s\n&quot;, heap_string);
    printf(&quot;x is: %d\n&quot;, x);
}
</code></pre>

<p>This program uses the extremely unsafe function <code>gets</code> which you should never
use, but that&rsquo;s on purpose &ndash; we learn more when things go wrong.</p>

<h3 id="step-0-compile-the-program">step 0: compile the program.</h3>

<p>We can compile it with <code>gcc -g -O0 test.c -o test</code>.</p>

<p>The <code>-g</code> flag compiles the program with debugging symbols, which is going to
make it a lot easier to look at our variables.</p>

<p><code>-O0</code> tells gcc to turn off optimizations which I did just to make sure our <code>x</code>
variable didn&rsquo;t get optimized out.</p>

<h3 id="step-1-start-gdb">step 1: start gdb</h3>

<p>We can start gdb like this:</p>

<pre><code>$ gdb ./test
</code></pre>

<p>It prints out some stuff about the GPL and then gives a prompt. Let&rsquo;s create a breakpoint on the <code>main</code> function.</p>

<pre><code>(gdb) b main
Breakpoint 1 at 0x1171: file test.c, line 4.
</code></pre>

<p>Then we can run the program:</p>

<pre><code>(gdb) run
Starting program: /home/bork/work/homepage/test 

Breakpoint 1, main () at test.c:4
4	int main() {
</code></pre>

<p>Okay, great! The program is running and we can start looking at the stack</p>

<h3 id="step-2-look-at-our-variables-addresses">step 2: look at our variables&rsquo; addresses</h3>

<p>Let&rsquo;s start out by learning about our variables. Each of them has an address in
memory, which we can print out like this:</p>

<pre><code>(gdb) p &amp;x
$3 = (int *) 0x7fffffffe27c
(gdb) p &amp;heap_string
$2 = (char **) 0x7fffffffe280
(gdb) p &amp;stack_string
$4 = (char (*)[10]) 0x7fffffffe28e
</code></pre>

<p>So if we look at the stack at those addresses, we should be able to see all of
these variables!</p>

<h3 id="concept-the-stack-pointer">concept: the stack pointer</h3>

<p>We&rsquo;re going to need to use the stack pointer so I&rsquo;ll try to explain it really
quickly.</p>

<p>There&rsquo;s an x86 register called ESP called the &ldquo;stack pointer&rdquo;. Basically
it&rsquo;s the address of the start of the stack for the current function. In gdb you can access it
with <code>$sp</code>. When you call a new function or return from a function, the value
of the stack pointer changes.</p>

<h3 id="step-3-look-at-our-variables-on-the-stack-at-the-beginning-of-main">step 3: look at our variables on the stack at the beginning of <code>main</code></h3>

<p>First, let&rsquo;s look at the stack at the start of the <code>main</code> function. Here&rsquo;s
the value of our stack pointer right now:</p>

<pre>
(gdb) p $sp
$7 = (void *) 0x7fffffffe270
</pre>

<p>So the stack for our current function starts at <code>0x7fffffffe270</code>. Cool.</p>

<p>Now let&rsquo;s use gdb to print out the first 40 words (aka 160 bytes) of memory
after the start of the current function&rsquo;s stack. It&rsquo;s possible that some of
this memory isn&rsquo;t part of the stack because I&rsquo;m not totally sure how big the
stack is here. But at least the beginning of this is part of the stack.</p>

<pre>
(gdb) x/40x $sp
0x7fffffffe270: 0x00000000  0x00000000  0x55555250  <strong style="color: red">0x00005555</strong>
0x7fffffffe280: <strong style="color: blue">0x00000000  0x00000000</strong>  0x55555070  0x000055<strong style="color: purple">55</strong>
0x7fffffffe290: <strong style="color: purple">0xffffe390  0x00007fff</strong>  0x00000000  0x00000000
0x7fffffffe2a0: 0x00000000  0x00000000  0xf7df4b25  0x00007fff
0x7fffffffe2b0: 0xffffe398  0x00007fff  0xf7fca000  0x00000001
0x7fffffffe2c0: 0x55555169  0x00005555  0xffffe6f9  0x00007fff
0x7fffffffe2d0: 0x55555250  0x00005555  0x3cae816d  0x8acc2837
0x7fffffffe2e0: 0x55555070  0x00005555  0x00000000  0x00000000
0x7fffffffe2f0: 0x00000000  0x00000000  0x00000000  0x00000000
0x7fffffffe300: 0xf9ce816d  0x7533d7c8  0xa91a816d  0x7533c789
</pre>

<p>I&rsquo;ve bolded approximately where the <code>stack_string</code>, <code>heap_string</code>, and <code>x</code>
variables are and colour coded them:</p>

<ul>
<li><code>x</code> is red and starts at <code>0x7fffffffe27c</code></li>
<li><code>heap_string</code> is blue and starts at <code>0x7fffffffe280</code></li>
<li><code>stack_string</code> is purple and starts at <code>0x7fffffffe28e</code></li>
</ul>

<p>I think I might have bolded the location of some of those variables a bit wrong
here but that&rsquo;s approximately where they are.</p>

<p>One weird thing you might notice here is that <code>x</code> is the number <code>0x5555</code>, but
we set <code>x</code> to 10! That because <code>x</code> doesn&rsquo;t actually get set until after our
<code>main</code> function starts, and we&rsquo;re at the very beginning of <code>main</code>.</p>

<h3 id="step-3-look-at-the-stack-again-on-line-10">step 3: look at the stack again on line 10</h3>

<p>Let&rsquo;s skip a few lines and wait for our variables to actually get set to the
values we initialized them to. By the time we get to line 10, <code>x</code> should be set to 10.</p>

<p>First, we need to set another breakpoint:</p>

<pre><code>(gdb) b test.c:10
Breakpoint 2 at 0x5555555551a9: file test.c, line 11.
</code></pre>

<p>and continue the program running:</p>

<pre><code>(gdb) continue
Continuing.

Breakpoint 2, main () at test.c:11
11	    printf(&quot;Enter a string for the stack: &quot;);
</code></pre>

<p>Okay! Let&rsquo;s look at all the same things again! <code>gdb</code> is formatting the bytes in
a slightly different way here and I don&rsquo;t actually know why. Here&rsquo;s a reminder of where to find our variables on the stack:</p>

<ul>
<li><code>x</code> is red and starts at <code>0x7fffffffe27c</code></li>
<li><code>heap_string</code> is blue and starts at <code>0x7fffffffe280</code></li>
<li><code>stack_string</code> is purple and starts at <code>0x7fffffffe28e</code></li>
</ul>

<pre>
(gdb) x/80x $sp
0x7fffffffe270:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe278:  0x50  0x52  0x55  0x55  <strong style="color: red">0x0a  0x00  0x00  0x00</strong>
0x7fffffffe280:  <strong style="color: blue">0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00</strong>
0x7fffffffe288:  0x70  0x50  0x55  0x55  0x55  0x55  <strong style="color: purple">0x73  0x74</strong>
0x7fffffffe290:  <strong style="color: purple">0x61  0x63  0x6b  0x00  0x00  0x00  0x00  0x00</strong>
0x7fffffffe298:  0x00  0x80  0xf7  0x8a  0x8a  0xbb  0x58  0xb6
0x7fffffffe2a0:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe2a8:  0x25  0x4b  0xdf  0xf7  0xff  0x7f  0x00  0x00
0x7fffffffe2b0:  0x98  0xe3  0xff  0xff  0xff  0x7f  0x00  0x00
0x7fffffffe2b8:  0x00  0xa0  0xfc  0xf7  0x01  0x00  0x00  0x00
</pre>

<p>There are a couple of interesting things to discuss here before we go further in the program.</p>

<h3 id="how-stack-string-is-represented-in-memory">how <code>stack_string</code> is represented in memory</h3>

<p>Right now (on line 10) <code>stack_string</code> is set to &ldquo;stack&rdquo;. Let&rsquo;s take a look at
how that&rsquo;s represented in memory.</p>

<p>We can print out the bytes in the string like this:</p>

<pre><code>(gdb) x/10x stack_string
0x7fffffffe28e:	0x73	0x74	0x61	0x63	0x6b	0x00	0x00	0x00
0x7fffffffe296:	0x00	0x00
</code></pre>

<p>The string &ldquo;stack&rdquo; is 5 characters which corresponds to 5 ASCII bytes &ndash;
<code>0x73</code>, <code>0x74</code>, <code>0x61</code>, <code>0x63</code>, and <code>0x6b</code>. <code>0x73</code> is <code>s</code> in ASCII, <code>0x74</code> is
<code>t</code>, etc.</p>

<p>We can also get gdb to show us the string  with <code>x/1s</code>:</p>

<pre><code>(gdb) x/1s stack_string
0x7fffffffe28e:	&quot;stack&quot;
</code></pre>

<h3 id="how-heap-string-and-stack-string-are-different">how <code>heap_string</code> and <code>stack_string</code> are different</h3>

<p>You&rsquo;ll notice that <code>stack_string</code> and <code>heap_string</code> are represented in very
different ways on the stack:</p>

<ul>
<li><code>stack_string</code> has the contents of the string (&ldquo;stack&rdquo;)</li>
<li><code>heap_string</code> is a pointer to an address somewhere else in memory</li>
</ul>

<p>Here are the bytes on the stack for the <code>heap_string</code> variable:</p>

<pre><code>0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00
</code></pre>

<p>These bytes actually get read backwards because x86 is little-endian, so the
memory address of <code>heap_string</code> is <code>0x5555555592a0</code></p>

<p>Another way to see the address of <code>heap_string</code> in gdb is just to print it out
with <code>p</code>:</p>

<pre><code>(gdb) p heap_string
$6 = 0x5555555592a0 &quot;&quot;
</code></pre>

<h3 id="the-bytes-that-represent-the-integer-x">the bytes that represent the integer <code>x</code></h3>

<p><code>x</code> is a 32-bit integer, and the bytes that represent it are <code>0x0a  0x00    0x00    0x00</code>.</p>

<p>We need to read these bytes backwards again (the same way reason we read the
bytes for <code>heap_string</code> address backwards), so this corresponds to the number
<code>0x000000000a</code>, or <code>0xa</code>, which is 10.</p>

<p>That makes sense! We set <code>int x = 10;</code>!</p>

<h3 id="step-4-read-input-from-standard-input">step 4: read input from standard input</h3>

<p>Okay, we&rsquo;ve initialized the variables, now let&rsquo;s see how the stack changes when
this part of the C program runs:</p>

<pre><code>printf(&quot;Enter a string for the stack: &quot;);
gets(stack_string);
printf(&quot;Enter a string for the heap: &quot;);
gets(heap_string);
</code></pre>

<p>We need to set another breakpoint:</p>

<pre><code>(gdb) b test.c:16
Breakpoint 3 at 0x555555555205: file test.c, line 16.
</code></pre>

<p>and continue running the program</p>

<pre><code>(gdb) continue
Continuing.
</code></pre>

<p>We&rsquo;re prompted for 2 strings, and I entered <code>123456789012</code> for the stack string
and <code>bananas</code> for the heap.</p>

<h3 id="let-s-look-at-stack-string-first-there-s-a-buffer-overflow">let&rsquo;s look at <code>stack_string</code> first (there&rsquo;s a buffer overflow!)</h3>

<pre><code>(gdb) x/1s stack_string
0x7fffffffe28e:	&quot;123456789012&quot;
</code></pre>

<p>That seems pretty normal, right? We entered <code>123456789012</code> and now it&rsquo;s set to <code>123456789012</code>.</p>

<p>But there&rsquo;s something weird about this. Here&rsquo;s what those bytes look like on
the stack. They&rsquo;re highlighted in purple again.</p>

<pre>
0x7fffffffe270:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe278:  0x50  0x52  0x55  0x55  0x0a  0x00  0x00  0x00
0x7fffffffe280:  0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00
0x7fffffffe288:  0x70  0x50  0x55  0x55  0x55  0x55  <strong style="color: purple">0x31  0x32</strong>
0x7fffffffe290:  <strong style="color: purple">0x33  0x34  0x35  0x36  0x37  0x38  0x39  0x30</strong>
0x7fffffffe298:  <strong style="color: purple">0x31  0x32  0x00</strong>  0x8a  0x8a  0xbb  0x58  0xb6
0x7fffffffe2a0:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe2a8:  0x25  0x4b  0xdf  0xf7  0xff  0x7f  0x00  0x00
0x7fffffffe2b0:  0x98  0xe3  0xff  0xff  0xff  0x7f  0x00  0x00
0x7fffffffe2b8:  0x00  0xa0  0xfc  0xf7  0x01  0x00  0x00  0x00
</pre>

<p>The weird thing about this is that <strong>stack_string was only supposed to be 10
bytes</strong>. But now suddenly we&rsquo;ve put 13 bytes in it? What&rsquo;s happening?</p>

<p>This is a classic buffer overflow, and what&rsquo;s happening is that <code>stack_string</code>
wrote over other data from the program. This hasn&rsquo;t caused a problem yet in our
case, but it can crash your program or, worse, open you up to Very Bad Security
Problems.</p>

<p>For example, if <code>stack_string</code> were before <code>heap_string</code> in memory, then we
could overwrite the address that <code>heap_string</code> points to. I&rsquo;m not sure exactly
what&rsquo;s in memory after <code>stack_string</code> here but we could probably use this to do
some kind of shenanigans.</p>

<h3 id="something-actually-detects-the-buffer-overflow">something actually detects the buffer overflow</h3>

<p>When I cause this buffer overflow problem, here&rsquo;s</p>

<pre>
 ./test
Enter a string for the stack: 01234567891324143
Enter a string for the heap: adsf
Stack string is: 01234567891324143
Heap string is: adsf
x is: 10
*** stack smashing detected ***: terminated
fish: Job 1, './test' terminated by signal SIGABRT (Abort)
</pre>

<p>My guess about what&rsquo;s happening here is that the <code>stack_string</code> variable is
actually at the end of this function&rsquo;s stack, and so the extra bytes are going into a
different region of memory.</p>

<p>When you do this intentionally as a security exploit it&rsquo;s called &ldquo;stack
smashing&rdquo;, and somehow something is detecting that this is happening.
Originally I wasn&rsquo;t sure how this was being detected, but a couple of people
emailed me to say that it&rsquo;s a compiler feature called &ldquo;stack protection&rdquo;.
Basically it adds a &ldquo;canary&rdquo; value to the end of the stack and when the
function returns it checks to see if that value has been changed. Here&rsquo;s an
<a href="https://wiki.osdev.org/Stack_Smashing_Protector">article about the stack smashing protector on the OSDev wiki</a>.</p>

<p>That&rsquo;s all I have to say about buffer overflows.</p>

<h3 id="now-let-s-look-at-heap-string">now let&rsquo;s look at <code>heap_string</code></h3>

<p>We also read a value (<code>bananas</code>) into the <code>heap_string</code> variable. Let&rsquo;s see what that
looks like in memory.</p>

<p>Here&rsquo;s what <code>heap_string</code> looks on the stack after we read the variable in.</p>

<pre>
(gdb) x/40x $sp
0x7fffffffe270:  0x00  0x00  0x00  0x00  0x00  0x00  0x00  0x00
0x7fffffffe278:  0x50  0x52  0x55  0x55  0x0a  0x00  0x00  0x00
0x7fffffffe280:  <strong style="color: blue">0xa0  0x92  0x55  0x55  0x55  0x55  0x00  0x00</strong>
0x7fffffffe288:  0x70  0x50  0x55  0x55  0x55  0x55  0x31  0x32
0x7fffffffe290:  0x33  0x34  0x35  0x36  0x37  0x38  0x39  0x30
</pre>

<p>The thing to notice here is that it looks exactly the same! It&rsquo;s an address,
and the address hasn&rsquo;t changed. But let&rsquo;s look at what&rsquo;s at that address.</p>

<pre><code>(gdb) x/10x 0x5555555592a0
0x5555555592a0:	0x62	0x61	0x6e	0x61	0x6e	0x61	0x73	0x00
0x5555555592a8:	0x00	0x00
</code></pre>

<p>Those are the bytes for <code>bananas</code>! Those bytes aren&rsquo;t in the stack at all,
they&rsquo;re somewhere else in memory (on the heap)</p>

<h3 id="where-are-the-stack-and-the-heap">where are the stack and the heap?</h3>

<p>We&rsquo;ve talked about how the stack and the heap are different regions of memory,
but how can you tell where they are in memory?</p>

<p>There&rsquo;s a file for each process called <code>/proc/$PID/maps</code> that shows you the
memory maps for each process. Here&rsquo;s where you can see the stack and the heap
in there.</p>

<pre><code>$ cat /proc/24963/maps
... lots of stuff omitted ... 
555555559000-55555557a000 rw-p 00000000 00:00 0                          [heap]
... lots of stuff omitted ... 
7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
</code></pre>

<p>One thing to notice is that here the heap addresses start with <code>0x5555</code> and
the stack addresses start with <code>0x7fffff</code>. So it&rsquo;s pretty easy to tell the
difference between an address on the stack and an address on the heap.</p>

<h3 id="playing-about-with-gdb-like-this-is-really-helpful">playing about with gdb like this is really helpful</h3>

<p>This was kind of a whirlwind tour and I didn&rsquo;t explain everything, but
hopefully seeing what the data actually looks like in memory makes it a little
more clear what the stack actually is.</p>

<p>I really recommend playing around with gdb like this &ndash; even if you don&rsquo;t
understand every single thing that you see in memory, I find that actually
seeing the data in my program&rsquo;s memory like this makes these abstract concepts
like &ldquo;the stack&rdquo; and &ldquo;the heap&rdquo; and &ldquo;pointers&rdquo; a lot easier to understand.</p>

<h3 id="maybe-lldb-is-easier-to-use">maybe lldb is easier to use</h3>

<p>A couple of people suggested that lldb is easier to use than gdb. I haven&rsquo;t
used it yet but I looked at it quickly, and it does seem like it might be
simpler!  As far as I can tell from a quick inspection everything in this
walkthrough also works in lldb, except that you need to do <code>p/s</code> instead of
<code>p/1s</code>.</p>

<h3 id="ideas-for-more-exercises">ideas for more exercises</h3>

<p>A few ideas (in no particular order) for followup exercises to think about the
stack:</p>

<ul>
<li>try adding another function to <code>test.c</code> and make a breakpoint at the
beginning of that function and see if you can find the stack from <code>main</code>!
They say that &ldquo;the stack grows down&rdquo; when you call a function, can you see
that happening in gdb?</li>
<li>return a pointer from a function to a string on the stack and see what goes
wrong. Why is it bad to return a pointer to a string on the stack?</li>
<li>try causing a stack overflow in C and try to understand exactly what happens
when the stack overflows by looking at it in gdb!</li>
<li>look at the stack in a Rust program and try to find the variables!</li>
<li>try some of the buffer overflow challenges in the <a href="https://github.com/guyinatuxedo/nightmare">nightmare
course</a>. The README for each
challenge is the solution so avoid reading it if you don&rsquo;t want to be spoiled.
The idea with all of those challenges is that you&rsquo;re given a binary and you need to figure out how to
cause a buffer overflow to get it to print out the &ldquo;flag&rdquo; string.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The OSI model doesn't map well to TCP/IP]]></title>
    <link href="https://jvns.ca/blog/2021/05/11/what-s-the-osi-model-/">
    <updated>2021-05-11T14:58:41+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/11/what-s-the-osi-model-/</id>
    <content type="html"><![CDATA[

<p><a href="https://en.wikipedia.org/wiki/Internet_protocol_suite">TCP/IP</a> is the set of networking protocols that we use on the modern internet &ndash;
TCP, UDP, IP, ARP, ICMP, DNS, etc. When I talk about &ldquo;networking&rdquo;, I&rsquo;m
basically always talking about TCP/IP.</p>

<p>Many explanations of TCP/IP start with something called the &ldquo;OSI model&rdquo;. I
don&rsquo;t use the OSI model when explaining networking because when I first
started learning about internet networking I found all of the OSI model
explanations really confusing &ndash; it wasn&rsquo;t clear to me at all how the OSI
model corresponded to TCP/IP.</p>

<p>So if you&rsquo;re just starting to learn about networking and you&rsquo;re confused about
the OSI model, here&rsquo;s an explanation of how it corresponds to TCP/IP, how
it doesn&rsquo;t, and why it&rsquo;s safe to mostly just ignore it if you don&rsquo;t find it helpful.</p>

<h3 id="the-osi-model-has-7-layers">the OSI model has 7 layers</h3>

<p>Let&rsquo;s very briefly discuss what the OSI model is: it&rsquo;s an abstract model for
how networking works with 7 numbered layers:</p>

<ul>
<li>Layer 1: physical layer</li>
<li>Layer 2: data link</li>
<li>Layer 3: network</li>
<li>Layer 4: transport</li>
<li>Layer 5: session</li>
<li>Layer 6: presentation</li>
<li>Layer 7: application</li>
</ul>

<p>I won&rsquo;t say more about what each of those is supposed to mean, there are a
thousand explanations of it online.</p>

<h3 id="how-the-osi-model-corresponds-to-tcp-ip">how the OSI model corresponds to TCP/IP</h3>

<p>Some parts of the OSI model do correspond to TCP/IP. Basically for any TCP or
UDP packet you can split up the packet into different sections and give each
section a layer number.</p>

<ul>
<li>Layer 2 corresponds to Ethernet</li>
<li>Layer 3 corresponds to IP</li>
<li>Layer 4 corresponds to TCP or UDP (or ICMP etc)</li>
<li>Layer 7 corresponds to whatever is inside the TCP or UDP packet (for example a DNS query)</li>
</ul>

<p>Here&rsquo;s a diagram from my <a href="https://wizardzines.com/zines/networking/">Networking! ACK!</a> zine showing how you can
assign layers to different parts of a packet.</p>

<p><small>
I just noticed that for some reason this is a UDP packet containing the start
of a HTTP request which is unrealistic, but let&rsquo;s go with it, you could make a
UDP packet like that if you wanted :). I think I did that to save space.
</small></p>

<p><img src="/images/networking-layers.png"></p>

<p>Now that we&rsquo;ve talked about how the OSI model does correspond to TCP/IP, let&rsquo;s
talk about how it doesn&rsquo;t!</p>

<h3 id="people-refer-to-layers-2-3-4-and-7-all-the-time">people refer to layers 2, 3, 4, and 7 all the time</h3>

<p>It&rsquo;s important to know about the OSI model because the terms &ldquo;layer 2&rdquo;, &ldquo;layer
3&rdquo;, &ldquo;layer 4&rdquo; and &ldquo;layer 7&rdquo; are used a LOT. You&rsquo;ll hear about &ldquo;layer 2
routing&rdquo;, &ldquo;layer 7 load balancers&rdquo;, &ldquo;layer 4 load balancers&rdquo;, etc.</p>

<p>So even thought I don&rsquo;t really use those terms myself when talking about
networking, I need to understand them to be able to read documentation and
understand what people are saying.</p>

<h3 id="there-s-no-layer-5-or-6-in-tcp-ip">there&rsquo;s no layer 5 or 6 in TCP/IP</h3>

<p>I&rsquo;ve heard a few different interpretations of what layers 5 or 6 could mean in
TCP/IP, including:</p>

<ul>
<li>TLS is layer 6</li>
<li>TCP is actually layers 5 + 6 + 7 smushed together</li>
</ul>

<p>But layers 5 and 6 definitely don&rsquo;t have a clear correspondence like &ldquo;every
layer has a corresponding header in the TCP packet&rdquo; the way layers 2, 3, and 4
do.</p>

<p>And I&rsquo;ve never seen anyone actually refer to layer 5 or 6 in practice when
talking about TCP/IP, even though people talk about layers 2, 3, 4, and 7 all
the time.</p>

<h3 id="what-layer-is-an-arp-packet">what layer is an ARP packet?</h3>

<p>Also, some parts of TCP/IP don&rsquo;t fit well into the OSI model even around
layers 2-4 &ndash; for example, what layer is an ARP packet?</p>

<p>ARP is a protocol for discovering what MAC address corresponds to an IP
address: when a machine wants to know who has a certain IP address, it sends
out an ARP message saying &ldquo;help! who is 192.168.1.1?&rdquo; and it&rsquo;ll get a response
from the owner of the IP saying &ldquo;it&rsquo;s me! I&rsquo;m 192.168.1.1&rdquo;</p>

<p>ARP packets contain IP addresses and IP addresses are layer 3, but when people
talk about &ldquo;layer 3&rdquo; packets they usually mean a packet which have an IP header, and
ARP packets don&rsquo;t have an IP header, they just have an Ethernet header and
then some data on top of that which contains an IP.</p>

<h3 id="the-osi-model-is-a-literal-description-of-some-obsolete-protocols">the OSI model is a literal description of some obsolete protocols</h3>

<p>So, if the OSI model doesn&rsquo;t literally describe TCP/IP, where did it come
from?</p>

<p>Some very brief research on Wikipedia says that in addition to an abstract
description of 7 layers, the OSI model also contained a <a href="https://en.wikipedia.org/wiki/OSI_protocols">bunch of specific
protocols implementing those
layers</a>. Apparently this happened
during the <a href="https://en.wikipedia.org/wiki/Protocol_Wars">Protocol Wars</a> in the
70s and 80s, where the OSI model lost and TCP/IP won.</p>

<p>This explains why the OSI model doesn&rsquo;t really correspond that well to TCP/IP,
since if the OSI protocols had &ldquo;won&rdquo; then the OSI model <em>would</em> correspond
exactly to how internet networking actually works.</p>

<h3 id="you-can-talk-about-specific-network-protocols-instead-of-using-layer-numbers">you can talk about specific network protocols instead of using layer numbers</h3>

<p>When talking about networking, instead of using numbered layers I like to
instead just talk about specific networking protocols I mean. Like
instead of &ldquo;layer 2&rdquo; I&rsquo;ll use something like &ldquo;Ethernet&rdquo; or &ldquo;MAC address&rdquo;. I&rsquo;ve
written many blog posts talking about MAC addresses and zero posts talking
about &ldquo;layer 2&rdquo;.</p>

<p>As another example, when talking about load balancers usually I say &ldquo;HTTP load
balancer&rdquo; instead of &ldquo;layer 7 load balancer&rdquo;. Basically every layer 7 load
balancer I&rsquo;ve used has been a HTTP load balancer, and if it&rsquo;s not using HTTP
then I&rsquo;d rather know which other protocol it&rsquo;s using!</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Hopefully this will help clear things up for somebody!  I wish someone had
told me when I started learning networking that I could just learn
approximately how layers 2, 3, 4, and 7 of the OSI model relate to TCP/IP and
then ignore everything else about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I put all of my comics online!]]></title>
    <link href="https://jvns.ca/blog/2021/05/02/publishing-comics/">
    <updated>2021-05-02T11:41:59+00:00</updated>
    <id>https://jvns.ca/blog/2021/05/02/publishing-comics/</id>
    <content type="html"><![CDATA[

<p>Hello! As you probably know, I write a lot of comics about programming, and I publish collections of them as zines you can buy at <a href="https://wizardzines.com">https://wizardzines.com</a>.</p>

<p>I also usually post the comics on Twitter as I write them. But there are a lot of problems with just posting them to Twitter, like:</p>

<ul>
<li><strong>the pages are hard to find</strong>. For example, if you want to find the one on
<code>socat</code>, you can <a href="https://twitter.com/search?q=socat%20from%3Ab0rk&amp;src=typed_query&amp;f=live">search twitter</a>
and you&rsquo;ll find it, but then you have to somehow magically guess what words I
used in the tweet, and also sort through a bunch of other tweets.</li>
<li><strong>they&rsquo;re annoying to link to</strong>. Twitter isn&rsquo;t really the best user interface for this sort of thing.</li>
<li><strong>I can&rsquo;t make updates</strong>. Twitter doesn&rsquo;t have an edit button!</li>
<li><strong>work that never made it into a zine is basically impossible to find</strong>. For example I
wrote 12 pages of a sequel to &ldquo;bite size linux&rdquo; but never quite finished it,
and it&rsquo;s basically impossible for anyone to find those pages. Or I have a
couple of <a href="https://wizardzines.com/comics/kubernetes-components/">pages</a> about <a href="https://wizardzines.com/comics/scenes-from-kubernetes/">Kubernetes</a> I wrote one time that will probably never
make it into a zine either.</li>
</ul>

<p>If someone wants to see the page on socat, I&rsquo;d really like them to just be able to find it at <a href="https://wizardzines.com/comics/socat">https://wizardzines.com/comics/socat</a></p>

<h3 id="now-they-re-all-online-in-one-place">now they&rsquo;re all online in one place!</h3>

<p>the tl;dr is that (almost) all of my comics are now online in one place at <a href="https://wizardzines.com/comics">https://wizardzines.com/comics</a>. Hooray!</p>

<h3 id="you-can-search">you can search!</h3>

<p>There are 273 comics right now which is a lot, so I&rsquo;ve added a very simple
search using <a href="https://listjs.com/">list.js</a>. Here&rsquo;s what it looks like.</p>

<p><img src="https://jvns.ca/images/dns-search.png"></p>

<p>It searches based on the title and also a few keywords I manually added, which
is why &ldquo;authoritative nameservers&rdquo; matches the search &ldquo;dns&rdquo;.</p>

<p>I wrote a small custom search function that only matches starting at the
beginning of the word, so that the search &ldquo;tar&rdquo; doesn&rsquo;t give you &ldquo;start&rdquo;. It
feels pretty good to use.</p>

<p>If you want to read the pages from the Bite Size Linux sequel I mentioned that
I started writing 2 years ago and never finished, you can search for &ldquo;linux2&rdquo;.</p>

<h3 id="what-s-not-there">what&rsquo;s not there</h3>

<p>Some parts of the zines aren&rsquo;t there just because it wouldn&rsquo;t make sense &ndash; for
example most of the zines have an introduction and a conclusion page, and those
pages don&rsquo;t really work as a standalone comic.</p>

<p>Also a lot of the pages from my free zines aren&rsquo;t there yet because a lot of
them don&rsquo;t work as well as standalone pages. I might add them in the future
though, we&rsquo;ll see.</p>

<p>Other things that are missing that I think I will add:</p>

<ul>
<li>the comics from <a href="https://drawings.jvns.ca">https://drawings.jvns.ca</a></li>
<li>any other pages I&rsquo;ve posted over the years on Twitter that aren&rsquo;t in a zine,
assuming that I can find them (for example <a href="https://twitter.com/b0rk/status/1056560207562711041">scenes from distributed systems</a>)</li>
</ul>

<h3 id="why-i-didn-t-do-this-earlier">why I didn&rsquo;t do this earlier</h3>

<p>This isn&rsquo;t actually that hard of a change to make technically &ndash; I just needed
to write some Python scripts and write a little search function.</p>

<p>But I felt a bit worried about making all the comics more easily available
online because &ndash; what if I put them online and then nobody wants to buy the
zines anymore?</p>

<p>I decided this week not to worry about that and just do it because I&rsquo;m really
excited about being able to easily link any comic that I want.</p>

<p>The zine business is going really well in general so I think it&rsquo;s a lot nicer
to operate with a spirit of abundance instead of a spirit of scarcity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on building debugging puzzles]]></title>
    <link href="https://jvns.ca/blog/2021/04/16/notes-on-debugging-puzzles/">
    <updated>2021-04-16T09:02:55+00:00</updated>
    <id>https://jvns.ca/blog/2021/04/16/notes-on-debugging-puzzles/</id>
    <content type="html"><![CDATA[

<p>Hello! This week I started building some choose-your-own-adventure-style puzzles about
debugging networking problems. I&rsquo;m pretty excited about it and I&rsquo;m trying to organize my thoughts so here&rsquo;s a blog post!</p>

<p>The two I&rsquo;ve made so far are:</p>

<ul>
<li><a href="https://mysteries.wizardzines.com/connection-timeout.html">The Case of the Connection Timeout</a></li>
<li><a href="https://mysteries.wizardzines.com/slow-website.html">The Case of the Slow Website</a></li>
</ul>

<p>I&rsquo;ll talk about how I came to this idea, design decisions I made, how it works,
what I think is hard about making these puzzles, and some feedback I&rsquo;ve gotten so far.</p>

<h3 id="why-this-choose-your-own-adventure-format">why this choose-your-own-adventure format?</h3>

<p>I&rsquo;ve been thinking a lot about DNS recently, and how to help people
troubleshoot their DNS issues. So on Tuesday I was sitting in a park with a
couple of friends chatting about this.</p>

<p>We started out by talking about the idea of flowcharts (&ldquo;here&rsquo;s a flowchart
that will help you debug any DNS problem&rdquo;). I&rsquo;ve don&rsquo;t think I&rsquo;ve ever seen a
flowchart that I found helpful in solving a problem, so I found it really hard
to imagine creating one &ndash; there are so many possibilities! It&rsquo;s hard to be
exhaustive! It would be disappointing if the flowchart failed and didn&rsquo;t give
you your answer!</p>

<p>But then someone mentioned choose-your-own-adventure games, and I thought about
something I <strong>could</strong> relate to &ndash; debugging a problem together with someone
who knows things that I don&rsquo;t!</p>

<p>So I thought &ndash; what if I made a choose-your-own-adventure game where you&rsquo;re
given the symptoms of a specific networking bug, and you have to figure out how
to diagnose it?</p>

<p>I got really excited about this and immediately went home and started putting
something together in Twine.</p>

<p>Here are some design decisions I&rsquo;ve made so far. Some of them might change.</p>

<h3 id="design-decision-the-mystery-has-1-specific-bug">design decision: the mystery has 1 specific bug</h3>

<p>Each mystery has one very specific bug, ideally a bug that I&rsquo;ve actually run
into in the past. Your mission is to figure out the cause of the bug and fix
it.</p>

<h3 id="design-decision-show-people-the-actual-output-of-the-tools-they-re-using">design decision: show people the actual output of the tools they&rsquo;re using</h3>

<p>All of the bugs I&rsquo;m starting with are networking issues, and the way you solve
them is to use various tools (like dig, curl, tcpdump, ping, etc) to get more
information.</p>

<p>Originally I thought of writing the game like this:</p>

<ol>
<li>You choose &ldquo;Use curl&rdquo;</li>
<li>It says &ldquo;You run <code>&lt;command&gt;</code>. You see that the output tells you <code>&lt;interpretation&gt;</code>&ldquo;</li>
</ol>

<p>But I realized that immediately interpreting the output of a command for
someone is extremely unrealistic &ndash; one of the biggest problems with using some
of these command line networking tools is that their output is hard to interpret!</p>

<p>So instead, the puzzle:</p>

<ol>
<li>Asks what tool you want to use</li>
<li>Tells you what command they ran, and shows you the output of the command</li>
<li>Asks you to interpret the output (you type it in in a freeform text box)</li>
<li>Tells you the &ldquo;correct&rdquo; interpretation of the output and shows you how you
could have figured it out (by highlighting the relevant parts of the output)</li>
</ol>

<p>This really lines up with how I&rsquo;ve learned about these tools in real life &ndash; I
don&rsquo;t learn about how to read all of the output all at once, I learn it in bits
and pieces by debugging real problems.</p>

<h3 id="design-decision-make-the-output-realistic">design decision: make the output realistic</h3>

<p>This is sort of obvious, but in order to give someone output to help them
diagnose a bug, the output needs to be a realistic representation of what would
actually happen.</p>

<p>I&rsquo;ve been doing this by reproducing the bug in a virtual machine (or on my
laptop), and then running the commands in the same way I would to fix the bug
in real life and paste their output.</p>

<p>Reproducing the bug isn&rsquo;t always easy, but once I&rsquo;ve reproduced it it
makes building the puzzle much more straightforward than trying to imagine what
tcpdump would theoretically output in a given situation.</p>

<h3 id="design-decision-let-people-collect-knowledge-throughout-the-mystery">design decision: let people collect &ldquo;knowledge&rdquo; throughout the mystery</h3>

<p>When I debug, I think about it as slowly collecting new pieces of information
as I go. So in this mystery, every time you figure out a new piece of
information, you get a little box that looks like this:</p>

<p><img src="https://jvns.ca/images/newinfo.png"></p>

<p>And in the sidebar, you have a sort of &ldquo;inventory&rdquo; that lists all of the
knowledge you&rsquo;ve collected so far. It looks like this:</p>

<p><img src="https://jvns.ca/images/sidebar-mystery.png"></p>

<h3 id="design-decision-you-always-figure-out-the-bug">design decision: you always figure out the bug</h3>

<p>My friend Sumana pointed out an interesting difference between this and normal
choose-your-own-adventure games: in the choose-your-own-adventure games I grew
up reading, you lose a lot! You make the wrong choice, and you fall into a pit
and die.</p>

<p>But that&rsquo;s not how debugging works in my experience. When debugging, if you
make a &ldquo;wrong&rdquo; choice (for example by making a guess about the bug that isn&rsquo;t
correct), there&rsquo;s no cost except your time! So you can always go back, keep
trying, and eventually figure out what&rsquo;s going on.</p>

<p>I think that &ldquo;you always win&rdquo; is sort of realistic in the sense that with any bug you can always figure out what the bug is, given:</p>

<ol>
<li>enough time</li>
<li>enough understanding of how the systems you&rsquo;re debugging work</li>
<li>tools that can give you information about what&rsquo;s happening</li>
</ol>

<p>I&rsquo;m still not sure if I want all bugs to result in &ldquo;you fix the bug!&rdquo; &ndash;
sometimes bugs are impossible to fix if they&rsquo;re caused by a system that&rsquo;s
outside of your control! One really interesting idea Sumana had was to have the
resolution sometimes be to tell someone else (like your ISP) about the issue,
which made me think about how it&rsquo;s a useful skill to be able to write a really
clear and convincing bug report so that the people with the ability to fix the
bug will be able to easily recognize that you&rsquo;ve accurately diagnosed the
issue.</p>

<h3 id="design-decision-include-red-herrings-sometimes">design decision: include red herrings sometimes</h3>

<p>In debugging in real life, there are a lot of red herrings! Sometimes you see
something that looks weird, and you spend three hours looking into it, and then
you realize that wasn&rsquo;t it at all.</p>

<p>One of the mysteries right now has a red herring, and the way I came up with it was
that I ran a command and I thought &ldquo;wait, the output of that is pretty
confusing, it&rsquo;s not clear how to interpret that&rdquo;. So I just included the
confusing output in the mystery and said &ldquo;hey, what do you think it means?&rdquo;.</p>

<p>One thing I like about including red herrings is that it lets me show how you
can prove what the cause of the bug <strong>isn&rsquo;t</strong> which is even harder than proving
what the cause of the bug is.</p>

<h3 id="design-decision-use-free-form-text-boxes">design decision: use free form text boxes</h3>

<p>Here&rsquo;s an example of what it looks like to be asked to interpret some output.
You&rsquo;re asked a question and you fill in the answer in a text box.</p>

<p><img src="https://jvns.ca/images/textboxes.png"></p>

<p>I think I like using free form text boxes instead of multiple choice because it
feels a little more realistic to me &ndash; in real life, when you see some output
like this, you don&rsquo;t get a list of choices!</p>

<h3 id="design-decision-don-t-do-anything-with-what-you-enter-in-the-text-box">design decision: don&rsquo;t do anything with what you enter in the text box</h3>

<p>No matter what you enter in the text box (or if you say &ldquo;I don&rsquo;t know&rdquo;),
exactly the same thing happens. It&rsquo;ll send you to a page that tells you the
answer and explains the reasoning. So you have to think about what you
think the answer might be, but if you get it &ldquo;wrong&rdquo;, it&rsquo;s no big deal.</p>

<p>The reason I&rsquo;m doing this is basically &ldquo;it&rsquo;s very easy to implement&rdquo;, but I
think there&rsquo;s maybe also something nice about it for the person using it &ndash; if
you don&rsquo;t know, it&rsquo;s totally okay! You can learn something new and keep moving!
You don&rsquo;t get penalized for your &ldquo;wrong&rdquo; answers in any way.</p>

<h3 id="design-decision-the-epilogue">design decision: the epilogue</h3>

<p>At the end of the game, there&rsquo;s a very short epilogue where it talks about how
likely you are to run into this bug in real life / how realistic this is. I
think I need to expand on this to answer other questions people might have had
while going through it, but I think it&rsquo;s going to be a nice place to wrap up
loose ends.</p>

<h3 id="how-long-each-one-takes-to-play-5-minutes">how long each one takes to play: 5 minutes</h3>

<p>People seem to report so far that each mystery takes about 5 minutes to play,
which feels reasonable to me. I think I&rsquo;m most likely to extend this by making
lots of different 5-minute mysteries rather than making one really long
mystery, but we&rsquo;ll see.</p>

<h3 id="what-s-hard-reproducing-the-bug">what&rsquo;s hard: reproducing the bug</h3>

<p>Figuring out how to reproduce a given bug is actually not that easy &ndash; I think
I want to include some pretty weird bugs, and setting up a computer where that
bug is happening in a realistic way isn&rsquo;t actually that easy. I think this just
takes some work and creativity though.</p>

<h3 id="what-s-hard-giving-realistic-options">what&rsquo;s hard: giving realistic options</h3>

<p>The most common critique I got was of the form &ldquo;In this situation I would
have done X but you didn&rsquo;t include X as an option&rdquo;. Some examples of X: &ldquo;ping the
problem host&rdquo;, &ldquo;ssh to the problem host and run tcpdump there&rdquo;, &ldquo;look at the
log file&rdquo;, &ldquo;use netstat&rdquo;, etc.</p>

<p>I think it&rsquo;s possible to make a lot of progress on this with
playtesting &ndash; if I playtest a mystery with a bunch of people and ask them to
tell me when there was an option they wish they had, I can add that option
pretty easily!</p>

<p>Because I can actually reproduce the bug, providing an option like &ldquo;run
netstat&rdquo; is pretty straightforward &ndash; all I have to do is go to the VM where
I&rsquo;ve reproduced the bug, run <code>netstat</code>, and put the output into the game.</p>

<p>A couple of people also said that the game felt too &ldquo;linear&rdquo; or didn&rsquo;t branch
enough. I&rsquo;m curious about whether that will naturally come out of having more
realistic options.</p>

<h3 id="how-it-works-it-s-a-twine-game">how it works: it&rsquo;s a Twine game!</h3>

<p>I felt like Twine was the obvious choice for this even though I&rsquo;d never used it
before &ndash; I&rsquo;d heard so many good things about it over the years.</p>

<p>You can see all of the source code for The Case of the Connection Timeout in <a href="https://github.com/jvns/twine-stories/blob/2914c4326e3ff760a0187b2cfb15161928d6335b/connection-timeout.twee">connection-timeout.twee</a> and <a href="https://github.com/jvns/twine-stories/blob/2914c4326e3ff760a0187b2cfb15161928d6335b/common.twee">common.twee</a>, which has some shared code between all the games.</p>

<p>A few notes about using Twine:</p>

<ul>
<li>I&rsquo;m using SugarCube, the <a href="https://www.motoslave.net/sugarcube/2/docs/">sugarcube docs are very good</a></li>
<li>I&rsquo;m using <a href="https://www.motoslave.net/tweego/">tweego</a> to translate the <code>.twee</code> files in to a HTML page. I started out using the visual Twine editor to do my editing but switched to <code>tweego</code> pretty quickly because I wanted to use version control and have a more text-based workflow.</li>
<li>The final output is one big HTML file that includes all the images and CSS and Javascript inline. The final HTML files are about 800K which seems reasonable to me.</li>
<li>I base64-encode all the images in the game and include them inline in the file</li>
<li>The <a href="https://twinery.org/wiki/">Twine wiki</a> and forums have a lot of great information and between the Twine wiki, the forums, and the Sugarcube docs I could pretty easily find answers to all my questions.</li>
</ul>

<p>I used pretty much the exact Twine workflow from Em Lazerwalker&rsquo;s great post <a href="https://dev.to/lazerwalker/a-modern-developer-s-workflow-for-twine-4imp">A Modern Developer&rsquo;s Workflow For Twine</a>.</p>

<p>I won&rsquo;t explain how Twine works because it has great documentation and it would make this post way too long.</p>

<h3 id="some-feedback-so-far">some feedback so far</h3>

<p>I posted this on Twitter and asked for feedback. Some common pieces of feedback I got:</p>

<p>things people liked:</p>

<ul>
<li>maybe 180 &ldquo;I love this, this was so fun, I learned something new&rdquo;</li>
<li>A bunch of people specifically said that they liked learning how to interpret tcpdump&rsquo;s output format</li>
<li>A few people specifically mentioned that they liked the &ldquo;what you know&rdquo; list and the mechanic of hunting for clues and how it breaks down the debugging process.</li>
</ul>

<p>some suggestions for improvements:</p>

<ul>
<li>Like I mentioned before, lots of people said &ldquo;I wanted to try X but it wasn&rsquo;t an option&rdquo;</li>
<li>One of the puzzles had a resolution to the bug that some people found unsatisfying (they felt it was more of a workaround than a fix, which I agreed with). I updated it to add a different resolution that was more satisfying.</li>
<li>There were some technical issues (it could be more mobile-friendly, one of the images was hard to read, I needed to add a &ldquo;Submit&rdquo; button to one of the forms)</li>
<li>Right now the way the text boxes work is that no matter what you type, the exact same thing happens. Some people found this a bit confusing, like  &ldquo;why did it act like I answered correctly if my answer was wrong&rdquo;. This definitely needs some work.</li>
</ul>

<h3 id="some-goals-of-this-project">some goals of this project</h3>

<p>Here&rsquo;s what I think the goals of this project are:</p>

<ol>
<li>help people learn about <strong>tools</strong> (like tcpcdump, dig, and curl). How do you use each tool? What questions can they be used to answer? How do you interpret their output?</li>
<li>help people learn about <strong>bugs</strong>. There are some super common bugs that we run into over and over, and once you see a bug once it&rsquo;s easier to recognize the same bug in the future.</li>
<li>help people get better at the <strong>debugging process</strong> (gathering data, asking questions)</li>
</ol>

<h3 id="what-experience-is-this-trying-to-imitate">what experience is this trying to imitate?</h3>

<p>Something I try to keep in mind with all my projects is &ndash; what real-life
experience does this reproduce? For example, I kind of think of my zines as
being the experience &ldquo;your coworker explains something to you in a really clear
way&rdquo;.</p>

<p>I think the experience here might be &ldquo;you&rsquo;re debugging a problem together with
your coworker and they&rsquo;re really knowledgeable about the tools you&rsquo;re using&rdquo;.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I&rsquo;m pretty excited about this project right now &ndash; I&rsquo;m going to build at least
a couple more of these and see how it goes! If things go well I might make this
into my first non-zine thing for sale &ndash; maybe it&rsquo;ll be a collection of 12
small debugging mysteries! We&rsquo;ll see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What problems do people solve with strace?]]></title>
    <link href="https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/">
    <updated>2021-04-03T09:06:28+00:00</updated>
    <id>https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/</id>
    <content type="html"><![CDATA[

<p>Yesterday I <a href="https://twitter.com/b0rk/status/1378014888405168132">asked on Twitter about what problems people are solving with strace</a> and
as usual everyone really delivered! I got 200 answers and then spent a bunch of
time manually categorizing them into 9 categories of problems.</p>

<p>All of the problems are about either finding files a program depends on,
figuring out why a program is stuck or slow, or finding out why a program is
failing. These generally matched up with what I use strace for myself, but
there were some things I hadn&rsquo;t thought of too!</p>

<p>I&rsquo;m not going to explain what strace is in this post but I have a <a href="https://wizardzines.com/zines/strace">free zine about it</a> and <a href="https://www.youtube.com/watch?v=4pEHfGKB-OE">a talk</a> and <a href="https://jvns.ca/categories/strace">lots of blog posts</a>.</p>

<h3 id="problem-1-where-s-the-config-file">problem 1: where&rsquo;s the config file?</h3>

<p>The #1 most popular problem was &ldquo;this program has a configuration file and I don&rsquo;t
know where it is&rdquo;. This is probably my most common use for strace too, because it&rsquo;s such a simple question.</p>

<p>This is great because there are a million ways for a program to document where
its config file is (in a man page, on its website, in <code>--help</code>, etc), but
there&rsquo;s only one way for it to actually open it (with a system call!)</p>

<h3 id="problem-2-what-other-files-does-this-program-depend-on">problem 2: what other files does this program depend on?</h3>

<p>You can also use strace to find other types of files a program depends on, like:</p>

<ul>
<li>dynamically linked libraries (&ldquo;why is my program loading the wrong version of this <code>.so</code> file?&ldquo;) like <a href="https://jvns.ca/blog/2014/03/10/debugging-shared-library-problems-with-strace/">this ruby problem I debugged in 2014</a></li>
<li>where it&rsquo;s looking for its Ruby gems (Ruby specifically came up a few times!)</li>
<li>SSL root certificates</li>
<li>a game&rsquo;s save files</li>
<li>a closed-source program&rsquo;s data files</li>
<li><a href="https://indexandmain.com/post/shrink-node-modules-with-refining">which node_modules files aren&rsquo;t being used</a></li>
</ul>

<h3 id="problem-3-why-is-this-program-hanging">problem 3: why is this program hanging?</h3>

<p>You have a program, it&rsquo;s just sitting there doing nothing, what&rsquo;s going
on? This one is especially easy to answer because a lot of the time you just
need to run <code>strace -p PID</code> and look at what system call is currently running.
You don&rsquo;t even have to look through hundreds of lines of output!</p>

<p>The answer is usually &lsquo;waiting for some kind of I/O&rsquo;. Some possible answers for &ldquo;why is this stuck&rdquo; (though there are a lot more!):</p>

<ul>
<li>it&rsquo;s polling forever on a <code>select()</code></li>
<li>it&rsquo;s <code>wait()</code>ing for a subprocess to finish</li>
<li>it&rsquo;s making a network request to something that isn&rsquo;t responding</li>
<li>it&rsquo;s doing <code>write()</code> but it&rsquo;s blocked because the buffer is full</li>
<li>it&rsquo;s doing a <code>read()</code> on stdin and it&rsquo;s waiting for input</li>
</ul>

<p>Someone also gave a nice example of using strace to debug a stuck <code>df</code>: &lsquo;with strace df -h you can find the stuck mount and unmount it&rdquo;.</p>

<h3 id="problem-4-is-this-program-stuck">problem 4: is this program stuck?</h3>

<p>A variation on the previous one: sometimes a program has been running for
longer than you expected, and you just want to know if it&rsquo;s stuck or of it&rsquo;s
still making progress.</p>

<p>As long as the program makes system calls while it&rsquo;s running, this is super
easy to answer with strace &ndash; just strace it and see if it&rsquo;s making new
system calls!</p>

<h3 id="problem-5-why-is-this-program-slow">problem 5: why is this program slow?</h3>

<p>You can use strace as a sort of coarse profiling tool &ndash; <code>strace -t</code> will show
the timestamp of each system call, so you can look for big gaps and find the culprit.</p>

<p>Here are 9 short stories from Twitter of people using strace to debug &ldquo;why is this program slow?&rdquo;.</p>

<ul>
<li>Back in 2000, a Java-based web site that I helped support was dying under
modest load: pages loaded slowly, if at all. We straced the J2EE application
server and found that it was reading class files one. byte. at. a. time. Devs
weren&rsquo;t using BufferedReader, classic Java mistake.</li>
<li>Optimizing app startup times&hellip; running strace can be an eye-opening
experience, in terms of the amount of unnecessary file system interaction
going on (e.g. open/read/close on the same config file over and over again;
loading gobs of font files over a slow NFS mount, etc)</li>
<li>Asked myself why reading from session files in PHP (usually &lt;100 bytes)
was incredibly slow. Turned out some <code>flock</code>-syscalls took ~60s</li>
<li>A program was behaving abnormally slow. Used strace to figure out it was
re-initializing its internal pseudo-random number generator on every request
by reading from /dev/random and exhausting entropy</li>
<li>Last thing I remember was attaching to a job worker and seeing just how many network calls it was making (which was unexpected).</li>
<li>Why is this program so slow to start?  strace shows it opening/reading the same config file thousands of times.</li>
<li>Server using 100% CPU time randomly with low actual traffic. Turns out it&rsquo;s hitting the number of open files limit accepting a socket, and retrying forever after getting EMFILE and not reporting it.</li>
<li>A workflow was running super slow but no logs, ends up it was trying to do a post request that was taking 30s before timing out and then retrying 5 times&hellip; ends up the backend service was overwhelmed but also had no visibility</li>
<li>using strace to notice that gethostbyname() is taking a long time to return (you can&rsquo;t see the <code>gethostbyname</code> directly but you can see the DNS packets in strace)</li>
</ul>

<h3 id="problem-6-hidden-permissions-errors">problem 6: hidden permissions errors</h3>

<p>Sometimes a program is failing for a mysterious reason, but the problem is just
that there&rsquo;s some file that it doesn&rsquo;t have permission to open. In an ideal
world programs would report those errors (&ldquo;Error opening file /dev/whatever:
permission denied&rdquo;), but of course the world is not perfect, so strace can
really help with this!</p>

<p>This is actually the most recent thing I used strace for: I was using an
AxiDraw pen plotter and it printed out an inscrutable error message when I
tried to start it. I <code>strace</code>d it and it turned out that my user just didn&rsquo;t
have permission to open the USB device.</p>

<h3 id="problem-7-what-command-line-arguments-are-being-used">problem 7: what command line arguments are being used?</h3>

<p>Sometimes a script is running another program, and you want to know what
command line flags it&rsquo;s passing!</p>

<p>A couple of examples from Twitter:</p>

<ul>
<li>find what compiler flags are actually being used to build some code</li>
<li>a command was failing due to having too long a command line</li>
</ul>

<h3 id="problem-8-why-is-this-network-connection-failing">problem 8: why is this network connection failing?</h3>

<p>Basically the goal here is just to find which domain / IP address the network
connection is being made to. You can look at the DNS request to find the domain
or the <code>connect</code> system call to find the IP.</p>

<p>In general there are a lot of stories about using strace to debug network
issues when <code>tcpdump</code> isn&rsquo;t available for some reason or just because it&rsquo;s what
the person is more familiar with.</p>

<h3 id="problem-9-why-does-this-program-succeed-when-run-one-way-and-fail-when-run-in-another-way">problem 9: why does this program succeed when run one way and fail when run in another way?</h3>

<p>For example:</p>

<ul>
<li>the same binary works on one machine, fails on another machine</li>
<li>works when you run it, fails when spawned by a systemd unit file</li>
<li>works when you run it, fails when you run it as “su - user /some/script”</li>
<li>works when you run it, fails when run as a cron job</li>
</ul>

<p>Being able to compare the strace output in both cases is very helpful. Though
my first step when debugging &ldquo;this works as my user and fails when run in a
different way on the same computer&rdquo; would be &ldquo;look at my environment
variables&rdquo;.</p>

<h3 id="problem-10-how-does-this-linux-kernel-api-work">problem 10: how does this Linux kernel API work?</h3>

<p>Another one quite a few people mentioned is figuring out how a Linux kernel
API (for example netlink, io_uring, hdparm, I2C, etc).</p>

<p>Even though these APIs are usually documented, sometimes the documentation is
confusing or there aren&rsquo;t very many examples, so often it&rsquo;s easier to just
strace an existing application and see how it interacts with the Linux kernel.</p>

<h3 id="problem-11-general-reverse-engineering">problem 11: general reverse engineering</h3>

<p>strace is also great for just generally figuring out &ldquo;how does this program
work?&ldquo;.  As a simple example of this, here&rsquo;s a blog post on <a href="https://jvns.ca/blog/2013/12/22/fun-with-strace/">figuring out how killall works using strace</a>.</p>

<h3 id="what-i-m-doing-with-this-slowly-building-some-challenges">what I&rsquo;m doing with this: slowly building some challenges</h3>

<p>The reason I&rsquo;m thinking about this is that I&rsquo;ve been slowly working on some
challenges to help people practice using strace and other command line tools.
The idea is that you&rsquo;re given a problem to solve, a terminal, and you&rsquo;re free
to solve it in any way you want.</p>

<p>So my goal is to use this to build some practice problems that you can solve
with strace that reflect the kinds of problems that people actually use it for
in real life.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>There are probably more problems that can be solved with strace that I haven&rsquo;t
covered here &ndash; I&rsquo;d love to hear what I&rsquo;ve missed!</p>

<p>I really loved seeing how many of the same uses came up over and over and over
again &ndash; at least 20 different people replied saying that they use strace to
find config files. And as always I think it&rsquo;s really delightful how such a
simple tool (&ldquo;trace system calls!&rdquo;) can be used to solve so many different
kinds of problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A tool to spy on your DNS queries: dnspeep]]></title>
    <link href="https://jvns.ca/blog/2021/03/31/dnspeep-tool/">
    <updated>2021-03-31T11:21:24+00:00</updated>
    <id>https://jvns.ca/blog/2021/03/31/dnspeep-tool/</id>
    <content type="html"><![CDATA[

<p>Hello! Over the last few days I made a little tool called <a href="https://github.com/jvns/dnspeep">dnspeep</a> that lets
you see what DNS queries your computer is making, and what responses it&rsquo;s getting. It&rsquo;s about <a href="https://github.com/jvns/dnspeep/blob/f5780dc822df5151f83703f05c767dad830bd3b2/src/main.rs">250 lines of Rust right now</a>.</p>

<p>I&rsquo;ll talk about how you can try it, what it&rsquo;s for, why I made it, and some problems I ran into while writing it.</p>

<h3 id="how-to-try-it">how to try it</h3>

<p>I built some binaries so you can quickly try it out.</p>

<p>For Linux (x86):</p>

<pre><code>wget https://github.com/jvns/dnspeep/releases/download/v0.1.0/dnspeep-linux.tar.gz
tar -xf dnspeep-linux.tar.gz
sudo ./dnspeep
</code></pre>

<p>For Mac:</p>

<pre><code>wget https://github.com/jvns/dnspeep/releases/download/v0.1.0/dnspeep-macos.tar.gz
tar -xf dnspeep-macos.tar.gz
sudo ./dnspeep
</code></pre>

<p>It needs to run as root because it needs access to all the DNS packets your computer is sending. This is the same reason <code>tcpdump</code> needs to run as root &ndash; it uses <code>libpcap</code> which is the same library that tcpdump uses.</p>

<p>You can also read the source and build it yourself at
<a href="https://github.com/jvns/dnspeep">https://github.com/jvns/dnspeep</a> if you don&rsquo;t want to just download binaries and
run them as root :).</p>

<h3 id="what-the-output-looks-like">what the output looks like</h3>

<p>Here&rsquo;s what the output looks like. Each line is a DNS query and the response.</p>

<pre><code>$ sudo dnspeep
query   name                 server IP      response
A       firefox.com          192.168.1.1    A: 44.235.246.155, A: 44.236.72.93, A: 44.236.48.31
AAAA    firefox.com          192.168.1.1    NOERROR
A       bolt.dropbox.com     192.168.1.1    CNAME: bolt.v.dropbox.com, A: 162.125.19.131
</code></pre>

<p>Those queries are from me going to <code>neopets.com</code> in my browser, and the
<code>bolt.dropbox.com</code> query is because I&rsquo;m running a Dropbox agent and I guess it phones
home behind the scenes from time to time because it needs to sync.</p>

<h3 id="why-make-another-dns-tool">why make another DNS tool?</h3>

<p>I made this because I think DNS can seem really mysterious when you don&rsquo;t know
a lot about it!</p>

<p>Your browser (and other software on your computer) is making DNS queries all
the time, and I think it makes it seem a lot more &ldquo;real&rdquo; when you can actually
see the queries and responses.</p>

<p>I also wrote this to be used as a debugging tool. I think the question &ldquo;is this a
DNS problem?&rdquo; is harder to answer than it should be &ndash; I get the impression that
when trying to check if a problem is caused by DNS people often use trial and
error or guess instead of just looking at the DNS responses that their
computer is getting.</p>

<h3 id="you-can-see-which-software-is-secretly-using-the-internet">you can see which software is &ldquo;secretly&rdquo; using the Internet</h3>

<p>One thing I like about this tool is that it gives me a sense for what programs
on my computer are using the Internet! For example, I found out that something
on my computer is making requests to <code>ping.manjaro.org</code> from time to time
for some reason, probably to check I&rsquo;m connected to the internet.</p>

<p>A friend of mine actually discovered using this tool that he had some corporate
monitoring software installed on his computer from an old job that he&rsquo;d
forgotten to uninstall, so you might even find something you want to remove.</p>

<h3 id="tcpdump-is-confusing-if-you-re-not-used-to-it">tcpdump is confusing if you&rsquo;re not used to it</h3>

<p>My first instinct when trying to show people the DNS queries their computer is
making was to say &ldquo;well, use tcpdump&rdquo;! And <code>tcpdump</code> does parse DNS packets!</p>

<p>For example, here&rsquo;s what a DNS query for <code>incoming.telemetry.mozilla.org.</code> looks like:</p>

<pre><code>11:36:38.973512 wlp3s0 Out IP 192.168.1.181.42281 &gt; 192.168.1.1.53: 56271+ A? incoming.telemetry.mozilla.org. (48)
11:36:38.996060 wlp3s0 In  IP 192.168.1.1.53 &gt; 192.168.1.181.42281: 56271 3/0/0 CNAME telemetry-incoming.r53-2.services.mozilla.com., CNAME prod.data-ingestion.prod.dataops.mozgcp.net., A 35.244.247.133 (180)
</code></pre>

<p>This is definitely possible to learn to read, for example let&rsquo;s break down the query:</p>

<p><code>192.168.1.181.42281 &gt; 192.168.1.1.53: 56271+ A? incoming.telemetry.mozilla.org. (48)</code></p>

<ul>
<li><code>A?</code> means it&rsquo;s a DNS <strong>query</strong> of type A</li>
<li><code>incoming.telemetry.mozilla.org.</code> is the name being qeried</li>
<li><code>56271</code> is the DNS query&rsquo;s ID</li>
<li><code>192.168.1.181.42281</code> is the source IP/port</li>
<li><code>192.168.1.1.53</code> is the destination IP/port</li>
<li><code>(48)</code> is the length of the DNS packet</li>
</ul>

<p>And in the response breaks down like this:</p>

<p><code>56271 3/0/0 CNAME telemetry-incoming.r53-2.services.mozilla.com., CNAME prod.data-ingestion.prod.dataops.mozgcp.net., A 35.244.247.133 (180)</code></p>

<ul>
<li><code>3/0/0</code> is the number of records in the response: 3 answers, 0 authority, 0 additional. I think tcpdump will only ever print out the answer responses though.</li>
<li><code>CNAME telemetry-incoming.r53-2.services.mozilla.com</code>,  <code>CNAME prod.data-ingestion.prod.dataops.mozgcp.net.</code>, and <code>A 35.244.247.133</code> are the three answers</li>
<li><code>56271</code> is the responses ID, which matches up with the query&rsquo;s ID. That&rsquo;s how you can tell it&rsquo;s a response to the request in the previous line.</li>
</ul>

<p>I think what makes this format the most difficult to deal with (as a human who
just wants to look at some DNS traffic) though is that you have to manually
match up the requests and responses, and they&rsquo;re not always on adjacent lines.
That&rsquo;s the kind of thing computers are good at!</p>

<p>So I decided to write a little program (<code>dnspeep</code>) which would do this matching
up and also remove some of the information I felt was extraneous.</p>

<h3 id="problems-i-ran-into-while-writing-it">problems I ran into while writing it</h3>

<p>When writing this I ran into a few problems.</p>

<ul>
<li>I had to patch the <code>pcap</code> crate to make it work properly with Tokio on Mac OS (<a href="https://github.com/ebfull/pcap/pull/168">this change</a>). This was one of those bugs which took many hours to figure out and 1 line to fix :)</li>
<li>Different Linux distros seem to have different versions of <code>libpcap.so</code>, so I couldn&rsquo;t easily distribute a binary that dynamically links libpcap
(you can see other people having the same problem <a href="https://github.com/google/gopacket/issues/734">here</a>). So I decided
to statically compile libpcap into the tool on Linux. I still don&rsquo;t really
know how to do this properly in Rust, but I got it to work by copying the
<code>libpcap.a</code> file into <code>target/release/deps</code> and then just running <code>cargo build</code>.</li>
<li>The <code>dns_parser</code> crate I&rsquo;m using doesn&rsquo;t support all DNS query types, only
the most common ones. I probably need to switch to a different crate for
parsing DNS packets but I haven&rsquo;t found the right one yet.</li>
<li>Becuase the <code>pcap</code> interface just gives you raw bytes (including the Ethernet frame), I needed to <a href="https://github.com/jvns/dnspeep/blob/f5780dc822df5151f83703f05c767dad830bd3b2/src/main.rs#L136">write code to figure out how many bytes to strip from the beginning to get the packet&rsquo;s IP header</a>. I&rsquo;m pretty sure there are some cases I&rsquo;m still missing there.</li>
</ul>

<p>I also had a hard time naming it because there are SO MANY DNS tools already
(dnsspy! dnssnoop! dnssniff! dnswatch!). I basically just looked at every
synonym for &ldquo;spy&rdquo; and then picked one that seemed fun and did not already have
a DNS tool attached to it.</p>

<p>One thing this program doesn&rsquo;t do is tell you which process made the DNS query,
there&rsquo;s a tool called <a href="https://github.com/lilydjwg/dnssnoop">dnssnoop</a> I found that does that.
It uses eBPF and it looks cool but I haven&rsquo;t tried it.</p>

<h3 id="there-are-probably-still-lots-of-bugs">there are probably still lots of bugs</h3>

<p>I&rsquo;ve only tested this briefly on Linux and Mac and I already know of at least
one bug (caused by not supporting enough DNS query types), so please report
problems you run into!</p>

<p>The bugs aren&rsquo;t dangerous though &ndash; because the libpcap interface is read-only
the worst thing that can happen is that it&rsquo;ll get some input it doesn&rsquo;t
understand and print out an error or crash.</p>

<h3 id="writing-small-educational-tools-is-fun">writing small educational tools is fun</h3>

<p>I&rsquo;ve been having a lot of fun writing small educational DNS tools recently.</p>

<p>So far I&rsquo;ve made:</p>

<ul>
<li><a href="https://dns-lookup.jvns.ca">https://dns-lookup.jvns.ca</a> (a simple way to make DNS queries)</li>
<li><a href="https://dns-lookup.jvns.ca/trace.html">https://dns-lookup.jvns.ca/trace.html</a> (shows you exactly what happens behind the scenes when you make a DNS query)</li>
<li>this tool (<code>dnspeep</code>)</li>
</ul>

<p>Historically I&rsquo;ve mostly tried to explain existing tools (like <code>dig</code> or
<code>tcpdump</code>) instead of writing my own tools, but often I find that the output of
those tools is confusing, so I&rsquo;m interested in making more friendly ways to see
the same information so that everyone can understand what DNS queries their
computer is making instead of just tcpdump wizards :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get better at programming by learning how things work]]></title>
    <link href="https://jvns.ca/blog/learn-how-things-work/">
    <updated>2021-03-24T15:33:37+00:00</updated>
    <id>https://jvns.ca/blog/learn-how-things-work/</id>
    <content type="html"><![CDATA[

<p>When we talk about getting better at programming, we often talk about testing,
writing reusable code, design patterns, and readability.</p>

<p>All of those things are important. But in this blog post, I want to talk about
a different way to get better at programming: learning how the systems you&rsquo;re
using work! This is the main way I approach getting better at programming.</p>

<h3 id="examples-of-how-things-work">examples of &ldquo;how things work&rdquo;</h3>

<p>To explain what I mean by &ldquo;how things work&rdquo;, here are some different types of
programming and examples of what you could learn about how they work.</p>

<p>Frontend JS:</p>

<ul>
<li>how the event loop works</li>
<li>HTTP methods like GET and POST</li>
<li>what the DOM is and what you can do with it</li>
<li>the same-origin policy and CORS</li>
</ul>

<p>CSS:</p>

<ul>
<li>how inline elements are rendered differently from block elements</li>
<li>what the &ldquo;default flow&rdquo; is</li>
<li>how flexbox works</li>
<li>how CSS decides which selector to apply to which element (the &ldquo;cascading&rdquo;
part of the cascading style sheets)</li>
</ul>

<p>Systems programming:</p>

<ul>
<li>the difference between the stack and the heap</li>
<li>how virtual memory works</li>
<li>how numbers are represented in binary</li>
<li>what a symbol table is</li>
<li>how code from external libraries gets loaded (e.g. dynamic/static linking)</li>
<li>Atomic instructions and how they&rsquo;re different from mutexes</li>
</ul>

<h3 id="you-can-use-something-without-understanding-how-it-works-and-that-can-be-ok">you can use something without understanding how it works (and that can be ok!)</h3>

<p>We work with a LOT of different systems, and it&rsquo;s unreasonable to expect that
every single person understands everything about all of them. For example, many
people write programs that send email, and most of those people probably don&rsquo;t
understand everything about how email works. Email is really complicated!
That&rsquo;s why we have abstractions.</p>

<p>But if you&rsquo;re working with something (like CSS, or HTTP, or goroutines, or
email) more seriously and you don&rsquo;t really understand how it works, sometimes
you&rsquo;ll start to run into problems.</p>

<h3 id="your-bugs-will-tell-you-when-you-need-to-improve-your-mental-model">your bugs will tell you when you need to improve your mental model</h3>

<p>When I&rsquo;m programming and I&rsquo;m missing a key concept about how something works,
it doesn&rsquo;t always show up in an obvious way. What will happen is:</p>

<ul>
<li>I&rsquo;ll have bugs in my programs because of an incorrect mental model</li>
<li>I&rsquo;ll struggle to fix those bugs quickly and I won&rsquo;t be able to find the right questions to ask to diagnose them</li>
<li>I feel really frustrated</li>
</ul>

<p>I think it&rsquo;s actually an important skill <strong>just to be able to recognize that
this is happening</strong>: I&rsquo;ve slowly learned to recognize the feeling of &ldquo;wait, I&rsquo;m
really confused, I think there&rsquo;s something I don&rsquo;t understand about how this
system works, what is it?&rdquo;</p>

<p>Being a senior developer is less about knowing absolutely everything and more
about quickly being able to recognize when you <strong>don&rsquo;t</strong> know something and
learn it. Speaking of being a senior developer&hellip;</p>

<h3 id="even-senior-developers-need-to-learn-how-their-systems-work">even senior developers need to learn how their systems work</h3>

<p>So far I&rsquo;ve never stopped learning how things work, because there are so many
different types of systems we work with!</p>

<p>For example, I know a lot of the fundamentals of how C programs work and web
programming (like the examples at the top of this post), but when it comes to
graphics programming/OpenGL/GPUs, I know very few of the fundamental ideas. And
sometimes I&rsquo;ll discover a new fact that I&rsquo;m missing about a system I thought I
knew, like last year I <a href="https://jvns.ca/blog/debugging-attitude-matters/">discovered</a> that I was
missing a LOT of information about how CSS works.</p>

<p>It can feel bad to realise that you really don&rsquo;t understand how a system you&rsquo;ve
been using works when you have 10 years of experience (&ldquo;ugh, shouldn&rsquo;t I know
this already? I&rsquo;ve been using this for so long!&ldquo;), but it&rsquo;s normal! There&rsquo;s a
lot to know about computers and we are constantly inventing new things to know,
so nobody can keep up with every single thing.</p>

<h3 id="how-i-go-from-i-m-confused-to-ok-i-get-it">how I go from &ldquo;I&rsquo;m confused&rdquo; to &ldquo;ok, I get it!&rdquo;</h3>

<p>When I notice I&rsquo;m confused, I like to approach it like this:</p>

<ol>
<li>Notice I&rsquo;m confused about a topic (&ldquo;hey, when I write <code>await</code> in my
Javascript program, what is actually happening?&ldquo;)</li>
<li>Break down my confusion into specific factual questions, like &ldquo;when there&rsquo;s
an <code>await</code> and it&rsquo;s waiting, how does it decide which part of my code runs
next? Where is that information stored?&rdquo;</li>
<li>Find out the answers to those questions (by writing a program, reading
something on the internet, or asking someone)</li>
<li>Test my understanding by writing a program (&ldquo;hey, that&rsquo;s why I was having
that async bug! And I can fix it like this!&ldquo;)</li>
</ol>

<p>The last &ldquo;test my understanding&rdquo; step is really important. The whole point of
understanding how computers work is to actually write code to make them do
things!</p>

<p>I find that if I can use my newfound understanding to do something concrete
like implement a new feature or fix a bug or even just write a test program
that demonstrates how the thing works, it feels a LOT more real than if I just
read about it. And then it&rsquo;s much more likely that I&rsquo;ll be able to use it in
practice later.</p>

<h3 id="just-learning-a-few-facts-can-help-a-lot">just learning a few facts can help a lot</h3>

<p>Learning how things work doesn&rsquo;t need to be a big huge thing. For example, I
used to not really know how floating point numbers worked, and I felt nervous
that something weird would happen that I didn&rsquo;t understand.</p>

<p>And then one day in 2013 I went to a talk by Stefan Karpinski explaining how
floating point numbers worked (containing roughly the information in <a href="https://wizardzines.com/comics/floating-point/">this comic</a>, but with more weird
details). And now I feel totally confident using floating point numbers! I know
what their basic limitations are, and when not to use them (to represent
integers larger than 2^53). And I know what I <em>don&rsquo;t</em> know &ndash; I know it&rsquo;s hard
to write numerically stable linear algebra algorithms and I have no idea how to
do that.</p>

<h3 id="connect-new-facts-to-information-you-already-know">connect new facts to information you already know</h3>

<p>When learning a new fact, it&rsquo;s easy to be able to recite a sentence like &ldquo;ok,
there are 8 bits in a byte&rdquo;. That&rsquo;s true, but so what? What&rsquo;s harder (and much
more useful!) is to be able to connect that information to what you already
know about programming.</p>

<p>For example, let&rsquo;s take this &ldquo;8 bits in a byte thing&rdquo;. In your program you
probably have strings, like &ldquo;Hello&rdquo;. You can already start asking lots of
questions about this, like:</p>

<ul>
<li>How many bytes in memory are used to represent the string &ldquo;Hello&rdquo;? (it&rsquo;s 6 &ndash; 5 characters plus a null byte at the end)</li>
<li>What bits exactly does the letter &ldquo;H&rdquo; correspond to? (the encoding for
&ldquo;Hello&rdquo; is going to be using ASCII, so you can look it up in an ASCII table!)</li>
<li>If you have a running program that&rsquo;s printing out the string &ldquo;Hello&rdquo;, can you
go look at its memory and find out where those bytes are in its memory? How
do you do that?</li>
</ul>

<p>The important thing here is to ask the questions and explore the connections
that <strong>you&rsquo;re</strong> curious about &ndash; maybe you&rsquo;re not so interested in how the
strings are represented in memory, but you really want to know how many bytes a
heart emoji is in Unicode! Or maybe you want to learn about how floating point
numbers work!</p>

<p>I find that when I connect new facts to things I&rsquo;m already familiar with (like
emoji or floating point numbers or strings), then the information sticks a lot
better.</p>

<p>Next up, I want to talk about 2 ways to get information: asking a person yes/no questions, and asking the computer.</p>

<h3 id="how-to-get-information-ask-yes-no-questions">how to get information: ask yes/no questions</h3>

<p>When I&rsquo;m talking to someone who knows more about the concept than me, I find it
helps to start by asking really simple questions, where the answer is just
&ldquo;yes&rdquo; or &ldquo;no&rdquo;. I&rsquo;ve written about yes/no questions before in <a href="https://jvns.ca/blog/good-questions/">how to ask good
questions</a>, but I love it a lot so let&rsquo;s
talk about it again!</p>

<p>I do this because it forces me to articulate exactly what my current mental
model <em>is</em>, and because I think yes/no questions are often easier for the
person I&rsquo;m asking to answer.</p>

<p>For example, here are some different types of questions:</p>

<ul>
<li>Check if your current understanding is correct<br />

<ul>
<li>Example: &ldquo;Is a pixel shader the same thing as a fragment shader?&rdquo;</li>
</ul></li>
<li>How concepts you&rsquo;ve heard of are related to each other

<ul>
<li>Example: &ldquo;Does shadertoy use OpenGL?&rdquo;</li>
<li>Example: &ldquo;Do graphics cards know about triangles?&rdquo;</li>
</ul></li>
<li>High-level questions about what the main purpose of something is

<ul>
<li>Example: &ldquo;Does mysql orchestrator proxy database queries?&rdquo;</li>
<li>Example: &ldquo;Does OpenGL give you more control or less control over the graphics card than Vulkan?&rdquo;</li>
</ul></li>
</ul>

<h3 id="yes-no-questions-put-you-in-control">yes/no questions put you in control</h3>

<p>When I ask very open-ended questions like &ldquo;how does X work?&rdquo;, I find that it often goes wrong in one of 2 ways:</p>

<ol>
<li>The person starts telling me a bunch of things that I already knew</li>
<li>The person starts telling me a bunch of things that I don&rsquo;t know, but which
aren&rsquo;t really what I was interested in understanding</li>
</ol>

<p>Both of these are frustrating, but of course neither of these things are their
fault! They can&rsquo;t know exactly what information I wanted about X,
because I didn&rsquo;t tell them. But it still always feels bad to have to interrupt
someone with &ldquo;oh no, sorry, that&rsquo;s not what I wanted to know at all!&rdquo;</p>

<p>I love yes/no questions because, even though they&rsquo;re harder to formulate, I&rsquo;m
WAY more likely to get the exact answers I want and less likely to waste the
time of the person I&rsquo;m asking by having them explain a bunch of things that I&rsquo;m
not interested in.</p>

<h3 id="asking-yes-no-questions-isn-t-always-easy">asking yes/no questions isn&rsquo;t always easy</h3>

<p>When I&rsquo;m asking someone questions to try to learn about something new,
sometimes this happens:</p>

<p><strong>me:</strong> so, just to check my understanding, it works like this, right?<br>
<strong>them:</strong> actually, no, it&rsquo;s &lt;completely different thing&gt;<br>
<strong>me (internally)</strong>: (brief moment of panic) <br>
<strong>me:</strong> ok, let me think for a minute about my next question</p>

<p>It never quite feels <em>good</em> to learn that my mental model was totally wrong,
even though it&rsquo;s incredibly helpful information. Asking this kind of
really specific question (even though it&rsquo;s more effective!) puts you in a more
vulnerable position than asking a broader question, because sometimes you have
to reveal specific things that you were totally wrong about!</p>

<p>When this happens, I like to just say that I&rsquo;m going to take a minute to
incorporate the new fact into my mental model and think about my next question.</p>

<p>Okay, that&rsquo;s the end of this digression into my love for yes/no questions :)</p>

<h3 id="how-to-get-information-ask-the-computer">how to get information: ask the computer</h3>

<p>Sometimes when I&rsquo;m trying to answer a question I have, there won&rsquo;t be anybody
to ask, and I&rsquo;ll Google it or search the documentation and won&rsquo;t find anything.</p>

<p>But the delightful thing about computers is that you can often get answers to
questions about computers by&hellip; asking your computer!</p>

<p>Here are a few examples (from past blog posts) of questions I&rsquo;ve had and computer experiments I ran to
answer them for myself:</p>

<ul>
<li>Are atomics faster or slower than mutexes? (blog post: <a href="https://jvns.ca/blog/2014/12/14/fun-with-threads/">trying out mutexes and atomics</a>)</li>
<li>If I add a user to a group, will existing processes running as that user have the new group? (blog post: <a href="https://jvns.ca/blog/2017/11/20/groups/">How do groups work on Linux?</a>)</li>
<li>On Linux, if you have a server listening on 0.0.0.0 but you don&rsquo;t have any network interfaces, can you connect to that server? (blog post: <a href="https://jvns.ca/blog/2017/09/03/network-interfaces/">what&rsquo;s a network interface?</a>)</li>
<li>How is the data in a SQLite database actually organized on disk? (blog post: <a href="https://jvns.ca/blog/2014/09/27/how-does-sqlite-work-part-1-pages/">How does SQLite work? Part 1: pages!</a>)</li>
</ul>

<h3 id="asking-the-computer-is-a-skill">asking the computer is a skill</h3>

<p>It definitely takes time to learn how to turn &ldquo;I&rsquo;m confused about X&rdquo; into
specific questions, and then to turn that question into an experiment you can
run on your computer to definitively answer it.</p>

<p>But it&rsquo;s a really powerful tool to have! If you&rsquo;re not limited to just the
things that you can Google / what&rsquo;s in the documentation / what the people
around you know, then you can do a LOT more.</p>

<h3 id="be-aware-of-what-you-still-don-t-understand">be aware of what you still don&rsquo;t understand</h3>

<p>Like I said earlier, the point here isn&rsquo;t to understand every single thing. But
especially as you get more senior, it&rsquo;s important to be aware of what you don&rsquo;t
know! For example, here are five things I don&rsquo;t know (out of a VERY large
list):</p>

<ul>
<li>How database transactions / isolation levels work</li>
<li>How vertex shaders work (in graphics)</li>
<li>How font rendering works</li>
<li>How BGP / peering work</li>
<li>How multiple inheritance works in Python</li>
</ul>

<p>And I don&rsquo;t really need to know how those things work right now! But one day
I&rsquo;m pretty sure I&rsquo;m going to need to know how database transactions work, and I
know it&rsquo;s something I can learn when that day comes :)</p>

<p>Someone who read this post asked me &ldquo;how do you figure out what you don&rsquo;t know?&rdquo;
and I didn&rsquo;t have a good answer, so I&rsquo;d love to hear your thoughts!</p>

<p><small>
Thanks to
Haider Al-Mosawi,
Ivan Savov,
Jake Donham,
John Hergenroeder,
Kamal Marhubi,
Matthew Parker,
Matthieu Cneude,
Ori Bernstein,
Peter Lyons,
Sebastian Gutierrez,
Shae Matijs Erisson,
Vaibhav Sagar,
and Zell Liew for reading a draft of this.
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things your manager might not know]]></title>
    <link href="https://jvns.ca/blog/things-your-manager-might-not-know/">
    <updated>2021-03-02T10:40:18+00:00</updated>
    <id>https://jvns.ca/blog/things-your-manager-might-not-know/</id>
    <content type="html"><![CDATA[

<p>When people talk about “managing up”, sometimes it’s framed as a bad thing &ndash;
massaging the ego of people in charge so that they treat you well.</p>

<p>In my experience, managing up is usually a lot more practical. Your manager
doesn’t (and can’t!) know every single detail about what you do in your job,
and being aware of what they might not know and giving them the information
they need to do their job well makes everyone’s job a lot easier.</p>

<p>Here are the facts your manager might not know about you and your team that
we’ll cover in this post:</p>

<ul>
<li>What’s slowing the team down</li>
<li>Exactly what individual people on the team are working on</li>
<li>Where the technical debt is</li>
<li>How to help you get better at your job</li>
<li>What your goals are</li>
<li>What issues they should be escalating</li>
<li>What extra work you’re doing</li>
<li>How compensation/promotions work at the company</li>
</ul>

<p>For each one, I’ll give specific ways you can help get them the information
they need. All of these ways you can help them will also help you &ndash; it’s not
just an altruistic endeavor :)</p>

<p>This post (like all my writing about working with a manager) assumes that you
generally have a good relationship with your manager.</p>

<h3 id="your-manager-can-t-know-every-detail-about-your-job">your manager can’t know every detail about your job</h3>

<p>I said this already, but I want to reiterate it: the reason your manager
doesn’t know all these things isn’t because they’re not doing their job. It’s
literally impossible for them to keep track of every detail about every
person’s on their team&rsquo;s job. It’s normal for managers to rely on their team to keep them
informed about important facts they need to know, especially with more senior
engineers.</p>

<p>Keeping them informed helps them do their job better, and it makes your job a
lot easier too. Let&rsquo;s talk about how that works!</p>

<h3 id="they-might-not-know-what-s-slowing-the-team-down">they might not know: what’s slowing the team down</h3>

<p>Sometimes, you’re working on a project and the project is going more slowly
than you hoped. There are always reasons for this &ndash; maybe there have been a
lot more bugs than you expected, maybe you’re using a new technology nobody on
the team has ever used before, maybe you’re waiting for another team to do
something. The reasons things are hard change a lot! Even if your manager knew
what was slowing you down 2 weeks ago, maybe that issue has been totally
resolved and you’re onto a totally different problem.</p>

<p>It’s a problem if your manager doesn’t know this mostly because if they know
why you’re stuck, they might be able to help.</p>

<h3 id="what-you-can-do-to-help-tell-them-what-s-hard-about-your-job">what you can do to help: tell them what’s hard about your job</h3>

<p>It can feel bad to admit that you’re having trouble with something, but tasks
usually aren’t hard because you’re “slow” or “bad at your job”. Usually it’s
because there’s something concrete that’s making it hard. Identifying what that
thing is and telling your manager about it helps them a lot!</p>

<p>For example, maybe you’re working on a feature and it’s turning out to be MUCH
more complicated than you expected because there are a lot of edge cases that
nobody had thought about. It’s useful for your manager to know that because
sometimes they can help address it! They might:</p>

<ul>
<li>Encourage you to take the time you need to figure it out (“it’s really
important to get all these edge cases right, I’m happy you’re doing this!”)</li>
<li>Suggest someone who could help you (“Ankita  was dealing with those exact
issues last year, you should talk to her!”)</li>
<li>Factor it into their planning (“Sounds like that won’t get done this week
then, good to know”)</li>
<li>Deprioritize the feature (“Oh, I thought this was going to be a quick fix, if
this is really complicated we should focus our energy on something else
instead”)</li>
</ul>

<h3 id="they-might-not-know-exactly-what-individual-people-on-the-team-are-working-on">they might not know: exactly what individual people on the team are working on</h3>

<p>Your manager almost certainly knows what the team as a whole is working on
(maybe you’re working on releasing some new site), but do they know that today
you’re working on getting a TLS certificate issued for the site and learning
how CAs work? Maybe not!</p>

<p>The reason this is a problem for them is that someone might ask them “hey
Manager, did your team get that TLS certificate yet?”, and it looks bad for
them to not know the answer, or not be able to easily find out.</p>

<h3 id="what-you-can-do-to-help-keep-them-informed-about-your-progress">what you can do to help: keep them informed about your progress</h3>

<p>You can ask your manager how they like to stay updated about what the team is
doing: maybe they want to track everything through the issue tracker, maybe
they want folks to write weekly digest, or maybe they have a different system.</p>

<p>If your team uses an issue tracker, taking a few minutes to keep it up to date
can really help your manager keep a handle on what’s going on! If they can
quickly look at the TLS ticket and see that you’re still working on it, that
saves them a lot of time and means that you can spend your 1:1s discussing more
important and interesting things than “hey, are you done with that TLS
ticket?”.</p>

<h3 id="they-might-not-know-where-the-technical-debt-is">they might not know: where the technical debt is</h3>

<p>Your manager probably broadly understands what technology your team is using.
But, especially if they’ve never worked as a software engineer on your specific
team, they probably don’t know that much about the details! They may not
completely understand the problems you’re having with your current
architecture, or which systems are going to fail soon. They rely on you for
that.</p>

<p>And it’s important for them to know about things like technical debt: if you
have a system that isn’t going to meet your current scaling needs soon and is
going to need a lot of work, that needs to get factored into planning!</p>

<h3 id="what-you-can-do-to-help-tell-them-about-technical-risks">what you can do to help: tell them about technical risks!</h3>

<p>A couple of examples of things you can tell them about:</p>

<ul>
<li>technical debt that’s slowing you down when building new features</li>
<li>systems that are causing a lot of disruption because they’re unreliable</li>
</ul>

<h3 id="they-might-not-know-how-to-help-you-get-better-at-your-job">they might not know: how to help you get better at your job</h3>

<p>When I started out, I often felt like there were things I could be doing
differently to do my job better. And that was definitely true! So I was
sometimes confused about why my manager wasn’t giving me feedback about how I
could be doing things better.</p>

<p>The reality is that in most cases, you probably know how to do your job better
than your manager does! You’ve spent a lot more time thinking about the
projects you’re working on, and they definitely can’t just parachute in and
tell you how to improve. Of course, there are lots of times when your manager
does have useful advice for you, but it’s not easy for them to figure out how
to give it to you! Here are a few reasons why:</p>

<ol>
<li>They don’t necessarily even know what you’re struggling with in the first
place (like we talked about in the last article)</li>
<li>Even if they do know, it might not be obvious to them what they can do to
improve the situation. Some managers are of course better at figuring this
out than others &ndash; it’s not easy!</li>
</ol>

<h3 id="what-you-can-do-to-help-identify-what-you-need-and-ask-for-it">what you can do to help: identify what you need and ask for it!</h3>

<p>Managers often LOVE it when you ask them for something that they can do that
will help you. Here are a few examples of things you could ask for:</p>

<ul>
<li><strong>less work</strong>: maybe you’re doing 3 projects and it’s too much and it’s
making all of 3 projects go slowly, and you need to only be working on 2
things.</li>
<li><strong>harder work</strong>: maybe you don’t feel like you’re learning anything with your
current work and you want to work on something that’s more of a challenge</li>
<li><strong>a learning budget</strong>: you’re learning about some new technology, and you
think going to a conference will really help you, and you want a couple of
days off and the budget to buy a ticket.</li>
<li><strong>help with an interpersonal situation</strong>: maybe you’re having a little bit of
trouble working with someone else on the team, and you need some advice to
understand what’s going on with that person and how to work with them more
effectively.</li>
<li><strong>specific feedback on work you did</strong>: asking for feedback on a specific
piece of work you did (“hey, do you have any feedback on that migration we
did?“) is MUCH more effective than just asking “do you have any feedback for
me?”.</li>
</ul>

<p>Learning how to do this well takes a lot of practice &ndash; if you want to improve
something about your job, it can be hard to break that down into “ok, the
problem is X” and it’s even harder to identify something specific somebody else
could do to address the problem. But if you can do it it’s WAY easier to get
what you want and good managers will be delighted to help you!</p>

<p>It’s also <strong>definitely</strong> okay to bring up problems when you don’t specifically
know what you need &ndash; if you’re not sure how to solve the problem you can
explore possible solutions together!</p>

<h3 id="more-you-can-do-to-help-tell-them-your-goals">more you can do to help: tell them your goals!</h3>

<p>“Get better at your job” also means different things to different people. So if
you have a specific career goal, it’s important to tell it to your manager! For
example if you want to become an architect / team lead / manager one day, tell
them that! Ask them what skills they think you’ll need to build to get there!
Good managers will be delighted to talk to you about this, figure out what you
need to do, and <a href="https://larahogan.me/blog/what-sponsorship-looks-like/">sponsor</a> your work to
help you get opportunities.</p>

<h3 id="they-might-not-know-what-issues-they-should-be-escalating">they might not know: what issues they should be escalating</h3>

<p>Sometimes issues come up on the team that should actually be dealt with by
someone higher up and that you can’t easily fix on your own. A few examples:</p>

<ul>
<li>You’re in a negotiation with a vendor and it’s not going well (vendor
negotiations happen infrequently and they can be really tricky to handle for
anyone!)</li>
<li>You’re stuck because of a conflict in priorities between teams (your team
needs another team to be doing X, but the other team thinks that the priority
is Y).</li>
</ul>

<p>It’s bad to try to handle issues you don’t have the power to fix on your own
because it’ll take forever, it’ll be frustrating for you, and you won’t be able
to make progress.</p>

<h3 id="what-you-can-do-practice-escalating-issues">what you can do: practice escalating issues!</h3>

<p>It’s usually not totally clear which things are part of your job and which
things you should be escalating to your manager. The best way to get better at
identifying what should be escalated is to ask your manager about it when you
notice an issue you’re really struggling with! Eventually you’ll learn what
kinds of issues should be escalated and which ones you should tackle on your
own.</p>

<p>Identifying which things you should be escalating to your manager (“hey, I
think you should know about this&hellip;”) isn’t easy, but it’s really a win/win
when you can do it &ndash; if you escalate it to them, you’re no longer stuck trying
to deal with an issue that’s impossible for you to fix, and they can make sure
it gets done by people who actually have the power to do it.</p>

<h3 id="they-might-not-know-what-extra-work-you-re-doing">they might not know: what extra work you’re doing</h3>

<p>If you’re doing a bunch of extra work outside your normal job description, your
manager might not realize that! It’s important to bring it up with your manager
so that they can give you credit for that work (put it in your <a href="https://jvns.ca/blog/brag-documents/">brag
document</a>!).</p>

<p>Sometimes there’s also extra work you’re doing that you shouldn’t be doing
(like in the previous section, maybe it’s something that should be escalated!),
and in those cases telling them can help you stop doing the work.</p>

<h3 id="they-might-not-know-how-the-company-s-compensation-and-promotions-systems-work">they might not know: how the company’s compensation and promotions systems work</h3>

<p>This one is a little different from the others because you’re not going
to be giving your manager information about this in the same way, but it’s important to be aware of.</p>

<p>I used to think that managers knew everything about compensation / promotions.
Then one day I had a really enlightening conversation with my old manager Jay
where I was asking a question about how compensation worked, and he said “yeah,
I don’t know!”.</p>

<p>I really appreciated how honest he was about it, and it made me realise that
there are a LOT of things a manager might not know about how these systems
work, like:</p>

<ul>
<li>what the system for issuing stock refreshes is</li>
<li>how raises are calculated when someone gets promoted</li>
<li>what’s actually expected for a promotion to a given level, and whether or not
it’s the same as what’s written down</li>
<li>whether / why exceptions are made to the rules</li>
<li>the basic facts about your compensation (I’ve had jobs where managers knew my
salary but not what my stock grants were. Apparently this is pretty common!)</li>
</ul>

<h3 id="what-you-can-do-to-help-ask-about-how-compensation-works">what you can do to help: ask about how compensation works!</h3>

<p>I’ve found it really valuable to start out conversations about compensation /
promotions in a fact-finding way &ndash; instead of saying ”hello, i want a raise”,
it’s a lot easier for everyone to start with “hey, how does this work? can you
explain it to me?”.</p>

<p>This can be especially helpful to new managers because even if they don’t know
the answers right away, they can often find out! So if you ask, it’s an
opportunity for them to go figure out how these systems work.</p>

<p>You can also get general information about how compensation and promotions work from other
managers who are not your manager, if there’s a different manager you have a
good relationship who you’d rather have that conversation with.</p>

<h3 id="some-other-sources-of-uncertainty">Some other sources of uncertainty</h3>

<p>There are also a lot of other things your manager might be uncertain about:</p>

<ul>
<li>They don’t know how priorities are going to change in the future &ndash; if
there’s a surprise change in priorities, often it’s a surprise to them too!</li>
<li>They might not know if they’re going to get headcount / how to get headcount:
if you’re stressed because your team is overloaded and you’d love to hire
someone, they might need to figure out how to get permission to do that themselves</li>
<li>They may not know how <em>they’re</em> performing. If they’re uncertain about how
their next performance review is going to come back or if they just got a bad
review, sometimes that uncertainty/stress can trickle down in weird ways.
People are human! I think this is good to be aware of as a possible
explanation for weird behaviour even if usually they won’t tell you that this
is happening.</li>
</ul>

<h3 id="if-you-get-good-at-this-it-s-a-superpower">If you get good at this, it’s a superpower</h3>

<p>Being good at telling your manager the right information at the right time and
asking for what you need is a superpower. It makes you way more valuable to
have on a team (because your manager knows they can trust you to give them the
information they need), and it’s more likely that you’ll get what you want
(because you’re making it easy for them to do that!).</p>

<p>This skill takes a lot of time to learn but it’s pretty easy to practice. You
can take a few minutes to reflect before your 1:1 with your manager and think
about what might be important to bring up with them.</p>

<p>The great thing about all of this is that you don’t have to guess: if you’re
curious about what your manager knows about a given topic or how you can help
get them the information they need, you can just ask them!</p>

<p>If you want to read more about how to build a good relationship with your manager,
I wrote a zine called <a href="https://wizardzines.com/zines/manager/">Help! I Have a Manager!</a> about it.</p>

<p><small>
Thanks to Jay Shirley for coming up with the idea for this post with me, and to
Akiva Leffert, Allison Kaptur, Camille Fournier, Chirag Davé, Duretti Hirpa,
Evy Kassirer, Jay Shirley, Juan Pablo Buriticá, Kamal Marhubi, Marc Hedlund,
Marco Rogers, and Ronnie Chen for their comments which made it a lot better.
All the problems with it are mine of course :)
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little tool to make DNS queries]]></title>
    <link href="https://jvns.ca/blog/2021/02/24/a-little-tool-to-make-dns-queries/">
    <updated>2021-02-24T08:52:52+00:00</updated>
    <id>https://jvns.ca/blog/2021/02/24/a-little-tool-to-make-dns-queries/</id>
    <content type="html"><![CDATA[

<p>Hello! I made a small tool to make DNS queries
over the last couple of days, and you can try it at <a href="https://dns-lookup.jvns.ca/">https://dns-lookup.jvns.ca/</a>.</p>

<p>I started thinking about this because I&rsquo;m working on writing a zine about
owning a domain name, and I wanted to encourage people to make a bunch of DNS
queries to understand what the responses look like.</p>

<p>So I tried to find other tools are available to make DNS queries.</p>

<h3 id="dig-is-kind-of-complicated">dig is kind of complicated</h3>

<p>I usually make DNS queries using <code>dig</code>, like this.</p>

<pre><code>$ dig jvns.ca

; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; a jvns.ca
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 8447
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 512
;; QUESTION SECTION:
;jvns.ca.			IN	A

;; ANSWER SECTION:
jvns.ca.		216	IN	A	104.21.5.215
jvns.ca.		216	IN	A	172.67.133.222

;; Query time: 40 msec
;; SERVER: fdaa:0:bff::3#53(fdaa:0:bff::3)
;; WHEN: Wed Feb 24 08:53:22 EST 2021
;; MSG SIZE  rcvd: 68
</code></pre>

<p>This is great if you&rsquo;re used to reading it and if you know which parts to
ignore and which parts to pay attention to, but for many people this is too
much information.</p>

<p>Like, what does <code>flags: qr rd ra</code> mean? Why does it say <code>QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</code>? What is the point of <code>MSG SIZE  rcvd: 68</code>? What does <code>IN</code> mean?
I mostly know the answers to these questions because I implemented a toy DNS server one time, but it&rsquo;s kinda confusing!</p>

<h3 id="google-webmaster-tools-has-a-nice-interface-for-making-dns-queries">google webmaster tools has a nice interface for making DNS queries</h3>

<p>Google has a <a href="https://toolbox.googleapps.com/apps/dig/#A/">DNS lookup tool</a> with a simple web
interface that lets you type in a domain name, click the kind of record you
want (<code>A</code>, <code>AAAA</code>, etc), and get the response. I was really excited about this
and I thought, &ldquo;ok,  great, this is what I can tell people to use!&rdquo;.</p>

<p>But then I looked at the output of the tool, which you can see in this screenshot:</p>

<p><img src="https://jvns.ca/images/google-tool.png"></p>

<p>This is just as bad as dig! (the tool is called &ldquo;dig&rdquo;, so it&rsquo;s not a big
surprise, but still :)). So I thought it would be a fun project to make a DNS
lookup tool with output that&rsquo;s more comprehensible by humans</p>

<p>I also wanted to add an option for people to query all the record types at once.</p>

<h3 id="what-my-lookup-tool-looks-like">what my lookup tool looks like</h3>

<p>I copied the query design from the Google tool because I thought it was nice,
but I put the answers in a table and left out a lot of information I thought
wasn&rsquo;t necessary for most people like the flags, and the <code>IN</code> (we&rsquo;re all on the
internet!)</p>

<p>It has a GET ME ALL THE RECORDS button which will make a query for each record type.</p>

<p><a href="https://dns-lookup.jvns.ca">
<img src="https://jvns.ca/images/my-tool.png">
</a></p>

<p>I also made a responsive version of the table because it got too wide for a phone:</p>

<p><a href="https://dns-lookup.jvns.ca">
<img src="https://jvns.ca/images/responsive.png" style="max-width: 300px">
</a></p>

<h3 id="to-get-all-the-record-types-you-need-to-make-multiple-queries">to get all the record types, you need to make multiple queries</h3>

<p>The Google tool has an <code>ANY</code> option which makes an <code>ANY</code> DNS query for the domain. Some DNS
servers support getting all the DNS records with an ANY query, but not all do
&ndash; Cloudflare has a good blog post explaining <a href="https://blog.cloudflare.com/deprecating-dns-any-meta-query-type/">why they removed support for ANY</a>.</p>

<p>So instead of making an <code>ANY</code> query (which usually doesn&rsquo;t work), the tool I
made just kicks off a query for each record type it wants to know about.</p>

<h3 id="the-record-type-isn-t-redundant">the record type isn&rsquo;t redundant</h3>

<p>At first when I was removing redundant information I thought the record type
was redundant too (if you&rsquo;re making an A query, the responses you get back will
be A records, right?), but then I remembered that this actually isn&rsquo;t true &ndash; you can see in <a href="https://dns-lookup.jvns.ca/#www.twitter.com|A">this
query for A records on www.twitter.com</a> that it replies
with a CNAME record because www.twitter.com is CNAMEd to twitter.com.</p>

<h3 id="how-it-works">how it works</h3>

<p>The source is on GitHub at <a href="https://github.com/jvns/dns-lookup">https://github.com/jvns/dns-lookup</a>.</p>

<p>It&rsquo;s basically just 3 files right now:</p>

<ul>
<li><a href="https://github.com/jvns/dns-lookup/blob/4be37ca3681480ed0f15a670fbd854ca427329de/site/dns.js">dns.js</a> (some Javascript using vue.js)</li>
<li><a href="https://github.com/jvns/dns-lookup/blob/4be37ca3681480ed0f15a670fbd854ca427329de/site/index.html">index.html</a></li>
<li><a href="https://github.com/jvns/dns-lookup/blob/4be37ca3681480ed0f15a670fbd854ca427329de/dns.go">dns.go</a> is the backend, it&rsquo;s a Go HTTP handler running on Netlify functions</li>
</ul>

<p>Using an AWS Lambda-style function was really nice and made this project super easy to deploy. It&rsquo;s fun not to have worry about servers!</p>

<p>Originally I thought I was going to use the DNS code in the Go standard
library, but I ended up using <a href="https://github.com/miekg/dns">https://github.com/miekg/dns</a> to make the DNS
queries because it seemed simpler.</p>

<p>I also tried to use Node&rsquo;s DNS library to write the backend in Javascript before
I switched to Go, but I couldn&rsquo;t figure out how to get that library to return a
TTL for my DNS queries. I think this kind of systems-y thing is generally
simpler in Go anyway.</p>

<h3 id="other-dns-lookup-tools">other DNS lookup tools</h3>

<p>As always, after I made this, people told me about some other useful tools in
the space. Here they are:</p>

<ul>
<li><a href="https://zone.vision/#/twitter.com">zone.vision</a>, which is nice because it queries the authoritative nameservers for a domain directly</li>
<li><a href="https://mxtoolbox.com/SuperTool.aspx">mxtoolbox.com</a>, which seems a bit more oriented towards MX/SPF queries but does lots more</li>
<li>the <a href="https://toolbox.googleapps.com/apps/dig/#A/">Google DNS lookup tool</a> again</li>
</ul>

<p>If you know of others I&rsquo;d love to add them here!</p>

<h3 id="things-i-might-add">things I might add</h3>

<p>some things on my list are:</p>

<ul>
<li>maybe reverse DNS queries (technically they&rsquo;re supported right now if you know how to type in 4.3.2.1.in-addr.arpa, but who has time for that)</li>
<li>support for more DNS query types (I want to figure how to support all query types without cluttering up the UI too much)</li>
<li>tooltips explaining what a TTL is</li>
<li>maybe make the design less of a copy of that Google tool, it has kind of a material design vibe and I don&rsquo;t know if I love it :)</li>
</ul>

<h3 id="a-link-to-the-tool-again">a link to the tool again</h3>

<p>Here&rsquo;s it is! <a href="https://dns-lookup.jvns.ca/">https://dns-lookup.jvns.ca/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firecracker: start a VM in less than a second]]></title>
    <link href="https://jvns.ca/blog/2021/01/23/firecracker--start-a-vm-in-less-than-a-second/">
    <updated>2021-01-23T07:43:49+00:00</updated>
    <id>https://jvns.ca/blog/2021/01/23/firecracker--start-a-vm-in-less-than-a-second/</id>
    <content type="html"><![CDATA[

<p>Hello! I spent this whole past week figuring out how to use <a href="https://github.com/firecracker-microvm/firecracker/">Firecracker</a> and
I really like it so far.</p>

<p>Initially when I read about Firecracker being released, I thought it was just a
tool for cloud providers to use &ndash; I knew that AWS Fargate and <a href="https://fly.io">https://fly.io</a>
used it, but I didn&rsquo;t think that it was something that I could directly use
myself.</p>

<p>But it turns out that Firecracker is relatively straightforward to use (or at
least as straightforward as anything else that&rsquo;s for running VMs), the
documentation and examples are pretty clear, you definitely don&rsquo;t need to be a
cloud provider to use it, and as advertised, it starts VMs really fast!</p>

<p>So I wanted to write about using Firecracker from a more DIY &ldquo;I just want to
run some VMs&rdquo; perspective.</p>

<p>I&rsquo;ll start out by talking about what I&rsquo;m using it for, and then I&rsquo;ll explain a
few things I learned about it along the way.</p>

<h3 id="my-goal-a-game-where-every-player-gets-their-own-virtual-machine">my goal: a game where every player gets their own virtual machine</h3>

<p>I&rsquo;m working on a sort of game to help people learn command line tools by giving
them a problem to solve and a virtual machine to solve it in, a little like a
CTF. It still basically exists only on my computer, but I&rsquo;ve been working on it
for a while.</p>

<p>Here&rsquo;s a screenshot of one of the puzzles I&rsquo;m working on right now. This one is about setting
file extended attributes with <code>setfacl</code>.</p>

<p><a href="https://jvns.ca/images/read-me.png"><img src="https://jvns.ca/images/read-me.png"></a></p>

<h3 id="why-not-use-containers">why not use containers?</h3>

<p>I wanted to use virtual machines and not containers for this project basically
because I wanted to mimic a real production machine that the user has root
access to &ndash; I wanted folks to be able to set sysctls, use <code>nsenter</code>, make
<code>iptables</code> rules, configure networking with <code>ip</code>, run <code>perf</code>, basically
literally anything.</p>

<h3 id="the-problem-starting-a-virtual-machine-is-slow">the problem: starting a virtual machine is slow</h3>

<p>I wanted people to be able to click &ldquo;Start&rdquo; on a puzzle and instantly launch a
virtual machine. Originally I was launching a DigitalOcean VM every time,
but they took about a minute to boot, I was getting really impatient waiting
for them every time, and I didn&rsquo;t think it was an acceptable user experience
for people to have to wait a minute.</p>

<p>I also tried using qemu, but for reasons I don&rsquo;t totally understand, starting a
VM with qemu was also kind of slow &ndash; it seemed to take at least maybe 20
seconds.</p>

<h3 id="firecracker-can-start-a-vm-in-less-than-a-second">Firecracker can start a VM in less than a second!</h3>

<p>Firecracker says this about performance in their <a href="https://github.com/firecracker-microvm/firecracker/blob/fea3897ccfab0387ce5cd4fa2dd49d869729d612/SPECIFICATION.md">specification</a>:</p>

<blockquote>
<p>It takes &lt;= 125 ms to go from receiving the Firecracker InstanceStart API
call to the start of the Linux guest user-space /sbin/init process.</p>
</blockquote>

<p>So far I&rsquo;ve been using Firecracker to start relatively large VMs &ndash; Ubuntu VMs
running systemd as an init system &ndash; and it takes maybe 2-3 seconds for them to
boot. I haven&rsquo;t been measuring that closely because honestly 5 seconds is fast
enough and I don&rsquo;t mind too much about an extra 200ms either way.</p>

<p>But enough background, let&rsquo;s talk about how to actually use Firecracker.</p>

<h3 id="here-s-a-hello-world-script-to-start-a-firecracker-vm">here&rsquo;s a &ldquo;hello world&rdquo; script to start a Firecracker VM</h3>

<p>I said at the beginning of this post that Firecracker is pretty straightforward to get started with. Here&rsquo;s how.</p>

<p>Firecracker&rsquo;s <a href="https://github.com/firecracker-microvm/firecracker/blob/fea3897ccfab0387ce5cd4fa2dd49d869729d612/docs/getting-started.md#getting-the-firecracker-binary">getting started</a> instructions
are really good (they just work!) but it was separated into a bunch of steps
and I wanted to see everything you have to do together in 1 shell script. So
I wrote a short shell script you can use to start a Firecracker VM, and some
quick instructions for how to use it.</p>

<p>Running a script like this was the first thing I did when trying to wrap my
head around Firecracker. There&rsquo;s basically 3 steps:</p>

<p><strong>step 1</strong>: Download Firecracker from their <a href="https://github.com/firecracker-microvm/firecracker/releases">releases page</a> and put it somewhere</p>

<p><strong>step 2</strong>: Run this script as root (you might have to edit the last line with the path to the <code>firecracker</code> binary if it&rsquo;s not in root&rsquo;s PATH)</p>

<p>I also put this script in a gist: <a href="https://gist.github.com/jvns/c8470e75af67deec2e91ff1bd9883e53">firecracker-hello-world.sh</a>.
The IP addresses here are chosen pretty arbitrarily. Most the script is just writing a JSON file.</p>

<pre><code>set -eu

# download a kernel and filesystem image
[ -e hello-vmlinux.bin ] || wget https://s3.amazonaws.com/spec.ccfc.min/img/hello/kernel/hello-vmlinux.bin
[ -e hello-rootfs.ext4 ] || wget -O hello-rootfs.ext4 https://github.com/firecracker-microvm/firecracker-demo/raw/fea3897ccfab0387ce5cd4fa2dd49d869729d612/xenial.rootfs.ext4
[ -e hello-id_rsa ] || wget -O hello-id_rsa https://raw.githubusercontent.com/firecracker-microvm/firecracker-demo/ec271b1e5ffc55bd0bf0632d5260e96ed54b5c0c/xenial.rootfs.id_rsa

TAP_DEV=&quot;fc-88-tap0&quot;

# set up the kernel boot args
MASK_LONG=&quot;255.255.255.252&quot;
MASK_SHORT=&quot;/30&quot;
FC_IP=&quot;169.254.0.21&quot;
TAP_IP=&quot;169.254.0.22&quot;
FC_MAC=&quot;02:FC:00:00:00:05&quot;

KERNEL_BOOT_ARGS=&quot;ro console=ttyS0 noapic reboot=k panic=1 pci=off nomodules random.trust_cpu=on&quot;
KERNEL_BOOT_ARGS=&quot;${KERNEL_BOOT_ARGS} ip=${FC_IP}::${TAP_IP}:${MASK_LONG}::eth0:off&quot;

# set up a tap network interface for the Firecracker VM to user
ip link del &quot;$TAP_DEV&quot; 2&gt; /dev/null || true
ip tuntap add dev &quot;$TAP_DEV&quot; mode tap
sysctl -w net.ipv4.conf.${TAP_DEV}.proxy_arp=1 &gt; /dev/null
sysctl -w net.ipv6.conf.${TAP_DEV}.disable_ipv6=1 &gt; /dev/null
ip addr add &quot;${TAP_IP}${MASK_SHORT}&quot; dev &quot;$TAP_DEV&quot;
ip link set dev &quot;$TAP_DEV&quot; up

# make a configuration file
cat &lt;&lt;EOF &gt; vmconfig.json
{
  &quot;boot-source&quot;: {
    &quot;kernel_image_path&quot;: &quot;hello-vmlinux.bin&quot;,
    &quot;boot_args&quot;: &quot;$KERNEL_BOOT_ARGS&quot;
  },
  &quot;drives&quot;: [
    {
      &quot;drive_id&quot;: &quot;rootfs&quot;,
      &quot;path_on_host&quot;: &quot;hello-rootfs.ext4&quot;,
      &quot;is_root_device&quot;: true,
      &quot;is_read_only&quot;: false
    }
  ],
  &quot;network-interfaces&quot;: [
      {
          &quot;iface_id&quot;: &quot;eth0&quot;,
          &quot;guest_mac&quot;: &quot;$FC_MAC&quot;,
          &quot;host_dev_name&quot;: &quot;$TAP_DEV&quot;
      }
  ],
  &quot;machine-config&quot;: {
    &quot;vcpu_count&quot;: 2,
    &quot;mem_size_mib&quot;: 1024,
    &quot;ht_enabled&quot;: false
  }
}
EOF
# start firecracker
firecracker --no-api --config-file vmconfig.json
</code></pre>

<p><strong>step 3</strong>: You have a VM running!</p>

<p>You can also SSH into the VM like this, with the SSH key that the script downloaded:</p>

<pre><code>ssh -o StrictHostKeyChecking=false  root@169.254.0.21 -i hello-id_rsa
</code></pre>

<p>You might notice that if you run <code>ping 8.8.8.8</code> inside this VM, it doesn&rsquo;t
work: it&rsquo;s not able to connect to the outside internet. I think I&rsquo;m actually
going to use a setup like this for my puzzles where people don&rsquo;t need to
connect to the internet.</p>

<p>The networking commands and the rootfs image in this script are from the
<a href="https://github.com/firecracker-microvm/firecracker-demo/">firecracker-demo</a> repository which I found really helpful.</p>

<h3 id="how-i-put-a-firecracker-vm-on-the-docker-bridge">how I put a Firecracker VM on the Docker bridge</h3>

<p>I had a couple of problems with this &ldquo;hello world&rdquo; setup though:</p>

<ul>
<li>I wanted to be able to SSH to them from a Docker container (because I was running my game&rsquo;s webserver in <code>docker-compose</code>)</li>
<li>I wanted them to be able to connect to the outside internet</li>
</ul>

<p>I struggled with trying to understand what a Linux bridge was and how it worked
for about a day before figuring out how to get this to work. Here&rsquo;s a slight modification of the previous script
<a href="https://gist.github.com/jvns/e13e6f498d26b584d8ab66651cdb04e0">firecracker-hello-world-docker-bridge.sh </a>
which runs a Firecracker VM on the Docker bridge</p>

<p>You can run it as root and SSH to the resulting VM like this (the IP is
different because it has to be in the Docker subnet).</p>

<pre><code>ssh -o StrictHostKeyChecking=false  root@172.17.0.21 -i hello-id_rsa
</code></pre>

<p>It basically just changes 2 things:</p>

<ol>
<li>There&rsquo;s an extra <code>sudo brctl addif docker0 $TAP_DEV</code> to add the VM&rsquo;s network interface to the Docker bridge</li>
<li>It changes the gateway in the kernel boot args to the Docker bridge network interface&rsquo;s IP (172.17.0.1)</li>
</ol>

<p>My guess is that most people probably won&rsquo;t want to use the Docker bridge, if
you just want the VM to be able to connect to the outside internet I think the
best way is to create a new bridge.</p>

<p>In my application I&rsquo;m actually using a bridge called <code>firecracker0</code> which is a
docker-compose network I made. It feels a little sketchy to be using a bridge
managed by Docker in this way but for now it works so I&rsquo;ll keep doing that
unless I find a better way.</p>

<h3 id="how-i-built-my-own-firecracker-images">how I built my own Firecracker images</h3>

<p>This &ldquo;hello world&rdquo; example is all very well and good, but you might say &ndash; ok,
how do I build my own images?</p>

<p>Basically you have to do 2 things:</p>

<ol>
<li>Make a Linux kernel. I wanted a 5.8 kernel so I used the instructions in the
<a href="https://github.com/firecracker-microvm/firecracker/blob/fea3897ccfab0387ce5cd4fa2dd49d869729d612/docs/rootfs-and-kernel-setup.md">firecracker docs on creating your own image</a>
for compiling a Linux kernel and they worked. I was kind of intimidated by
this because I&rsquo;d somehow never compiled a Linux kernel before, but I
followed the instructions and it just worked the first time. I thought it
would be super slow but it actually took less than 10 minutes to compile
from scratch.<br /></li>
<li>Make an <code>ext4</code> filesystem image with all the files you want in your VM&rsquo;s filesystem.</li>
</ol>

<p>Here&rsquo;s how I put together my filesystem. Initially I tried downloading Ubuntu&rsquo;s
focal cloud image and extracting the root partition with <code>dd</code>, but I couldn&rsquo;t
get it work.</p>

<p>Instead, I did what the Firecracker docs suggested and I built a Docker
container and copied the contents of the container into a filesystem image.</p>

<p>Here&rsquo;s what the <code>Dockerfile</code> I used looked like approximately: (I haven&rsquo;t
tested this exact Dockerfile but I think it should work). The main things are
that you have to install some kind of init system because the default <code>ubuntu:20.04</code> image
doesn&rsquo;t come with one because you don&rsquo;t need one in a container. I also ran
<code>unminimize</code> to restore some man pages because the container is for interactive
use.</p>

<pre><code>FROM ubuntu:20.04
RUN apt-get update
RUN apt-get install -y init openssh-server
RUN yes | unminimize
# copy over some SSH keys and install other programs I wanted
</code></pre>

<p>And here&rsquo;s the basic shell script I&rsquo;ve been using to create a filesystem image
from the Docker container. I ran the whole thing as root, but technically you
only have to run <code>mount</code> as root.</p>

<pre><code>IMG_ID=$(docker build -q .)
CONTAINER_ID=$(docker run -td $IMG_ID /bin/bash)

MOUNTDIR=mnt
FS=mycontainer.ext4

mkdir $MOUNTDIR
qemu-img create -f raw $FS 800M
mkfs.ext4 $FS
mount $FS $MOUNTDIR
docker cp $CONTAINER_ID:/ $MOUNTDIR
umount $MOUNTDIR
</code></pre>

<p>I&rsquo;m still not quite sure how much I&rsquo;m going to like this approach of using
Docker containers to create VM images &ndash; it feels a bit weird to me but it&rsquo;s
been working fine so far.</p>

<p>I think most people who use Firecracker use a more lightweight init system than
systemd and it&rsquo;s definitely not necessary to use systemd but I think I&rsquo;m going
to stick with systemd for now because I want it to feel mostly like a normal
production Linux system and a lot of the production servers I&rsquo;ve used have used
systemd.</p>

<p>Okay, that&rsquo;s all I have to say about creating images. Let&rsquo;s talk a bit more
about configuring Firecracker.</p>

<h3 id="firecracker-supports-either-a-socket-interface-or-a-configuration-file">Firecracker supports either a socket interface or a configuration file</h3>

<p>You can start a Firecracker VM 2 ways:</p>

<ol>
<li>create a configuration file and run <code>firecracker --no-api --config-file vmconfig.json</code></li>
<li>create an API socket and write instructions to the API socket (like they explain in their <a href="https://github.com/firecracker-microvm/firecracker/blob/fea3897ccfab0387ce5cd4fa2dd49d869729d612/docs/getting-started.md#getting-the-firecracker-binary">getting started</a> instructions)</li>
</ol>

<p>I really liked the configuration file approach for doing some initial
experimentation because I found it easier to be able to see everything all in
one place. But when integrating Firecracker with my actual application in real
life, I found it easier to use the API.</p>

<h3 id="how-i-wrote-a-http-service-that-starts-firecracker-vms-use-the-go-sdk">how I wrote a HTTP service that starts Firecracker VMs: use the Go SDK!</h3>

<p>I wanted to have a little HTTP service that I could call from my Ruby on Rails
server to start new VMs and stop them when I was done with them.</p>

<p>Here&rsquo;s what the interface looks like &ndash; you give it a root image and a kernel
and it returns an ID an the VM&rsquo;s IP address. All of the files paths are just local paths on my machine.</p>

<pre><code>$ http post localhost:8080/create root_image_path=/images/base.ext4 kernel_path=/images/vmlinux-5.8
HTTP/1.1 200 OK
{
    &quot;id&quot;: &quot;D248122A-1CCA-475C-856E-E3003A913F32&quot;,
    &quot;ip_address&quot;: &quot;172.102.0.4&quot;
}
</code></pre>

<p>and then here&rsquo;s what deleting a VM looks like (I might make this use the <code>DELETE</code> method later to make it more REST-y :) )</p>

<pre><code>$ http post localhost:8080/delete id=D248122A-1CCA-475C-856E-E3003A913F32
HTTP/1.1 200 OK
</code></pre>

<p>At first I wasn&rsquo;t sure how I was going to use the Firecracker socket API to implement this interface, but then I
discovered that there&rsquo;s a <a href="https://github.com/firecracker-microvm/firecracker-go-sdk">Go SDK</a>! This made it
way easier to generate the correct JSON, because there were a bunch of structs
and the compiler would tell me if I made a typo in a field name.</p>

<p>I basically wrote all of my code so far by copying and modifying code from <a href="https://github.com/firecracker-microvm/firectl/">firectl</a>, a Go command line
tool. The reason I wrote my own tool insted of just using <code>firectl</code> directly was that I
wanted to have a HTTP API that could launch and stop lots of different VMs.</p>

<p>I found the <code>firectl</code> code and the Go SDK pretty easy to understand so I won&rsquo;t
say too much more about it here.</p>

<p>If you&rsquo;re interested you can see <a href="https://gist.github.com/jvns/9b274f24cfa1db7abecd0d32483666a3">a gist with my current HTTP service for managing Firecracker VMs</a> which is a
huge mess and pretty buggy and not intended for anyone but me to use. It does start VMs successfully though which is an important first step!!!</p>

<h3 id="digitalocean-supports-nested-virtualization">DigitalOcean supports nested virtualization</h3>

<p>Another question I had was: &ldquo;ok, where am I going to run these
Firecracker VMs in production?&ldquo;. The funny thing about running a VM in the cloud is that cloud
instances are <em>already</em> VMs. Running a VM inside a VM is called &ldquo;nested
virtualization&rdquo; and not all cloud providers support it &ndash; for example AWS
doesn&rsquo;t.</p>

<p>Right now I&rsquo;m using DigitalOcean and I was delighted to see that DigitalOcean
does support nested virtualization even on their smallest droplets &ndash; I tried
running the &ldquo;hello world&rdquo; Firecracker script from above and it just worked!</p>

<p>I think GCP supports nested virtualization too but I haven&rsquo;t tried it. The
official Firecracker documentation suggests using a <code>metal</code> instance on AWS,
probably because Firecracker is made by AWS.</p>

<p>I don&rsquo;t know what the performance implications of using nested virtualization
are yet but I guess I&rsquo;ll find out!</p>

<h3 id="firecracker-only-runs-on-linux">Firecracker only runs on Linux</h3>

<p>I should say that Firecracker uses KVM so it only runs on Linux. I don&rsquo;t know
if there&rsquo;s a way to start VMs in a similarly fast way on a Mac, maybe there is?
Or maybe there&rsquo;s something special about KVM? I don&rsquo;t understand how KVM works.</p>

<h3 id="some-open-questions">some open questions</h3>

<p>A few things I still haven&rsquo;t figured out:</p>

<ul>
<li>Right now I&rsquo;m not using <code>jailer</code>, another part of Firecracker that helps
further isolate the Firecracker VM by adding some <code>seccomp-BPF</code> rules and
other things. Maybe I should be! <code>firectl</code> uses <code>jailer</code> so it would be
pretty easy to copy the code that does that.</li>
<li>I still don&rsquo;t totally understand <em>why</em> Firecracker is fast (or
alternatively, why qemu is slow). This <a href="https://lwn.net/Articles/775736/">LWN
article</a> says that it&rsquo;s because Firecracker
emulates less devices than qemu does, but I don&rsquo;t know exactly which devices
are the ones that are making qemu slow to start.</li>
<li>will it be slow to use nested virtualization?</li>
<li>I don&rsquo;t know if it&rsquo;s possible to run graphical applications in Firecracker,
it seems like it might not because it&rsquo;s intended for servers, but maybe it is
possible?</li>
<li>I&rsquo;m not sure how many Firecracker VMs I can run at a time on my little
$5/month DigitalOcean droplet, I need to do some of experiments.</li>
</ul>

<h3 id="links">links</h3>

<p>A few people gave me useful links answering some of the above questions.</p>

<p>about why qemu is slower than Firecracker (thanks @tptacek for these):</p>

<ul>
<li><a href="http://oirase.annexia.org/tmp/paper.pdf">Optimizing QEMU boot time (PDF)</a> is really interesting and extremely clearly written</li>
<li><a href="http://events17.linuxfoundation.org/sites/events/files/slides/Light%20weight%20virtualization%20with%20QEMU%26KVM_0.pdf">some slides about qemu-lite, a version of qemu that boots faster and uses less memory</a></li>
</ul>

<p>about how Firecracker works:</p>

<ul>
<li>Shuveb Hussain&rsquo;s great post <a href="https://unixism.net/2019/10/how-aws-firecracker-works-a-deep-dive/">How AWS Firecracker works: a deep dive</a>
explains how Firecracker works and demonstrates some of the concepts with a
tiny version of Firecracker called . (<a href="https://unixism.net/2019/10/sparkler-kvm-based-virtual-machine-manager/">blog post on Sparkler</a>, <a href="https://github.com/shuveb/sparkler">Sparkler github repo</a>). Really cool.</li>
<li>the Firecracker authors&rsquo; paper: <a href="https://www.usenix.org/conference/nsdi20/presentation/agache">Firecracker: Lightweight Virtualization for Serverless Applications</a> (there&rsquo;s a video, slides, and a talk)</li>
</ul>

<p>on building Firecracker images:</p>

<ul>
<li>Álvaro Hernández has a <a href="https://ongres.com/blog/automation-to-run-vms-based-on-vanilla-cloud-images-on-firecracker/">blog post with example code of how he got cloud-init to work with Firecracker</a>. I haven&rsquo;t tried it yet but it looks really helpful</li>
<li>@jeromegn mentioned in the HN comments that fly.io uses the devmapper
snapshotter. I don&rsquo;t know what that is yet but here&rsquo;s the <a href="https://www.kernel.org/doc/Documentation/device-mapper/snapshot.txt">kernel
documentation on device-mapper snapshot support</a></li>
<li>the &ldquo;How AWS Firecracker works&rdquo; post mentions &ldquo;virtio-fs, which allows
efficient sharing of files and directories between hosts and guest. This way,
a directory containing the guests’ file system can be on the host, much like
how Docker works.&rdquo; the <a href="https://www.kernel.org/doc/html/latest/filesystems/virtiofs.html">kernel docs on virtio-fs</a></li>
</ul>

<p>software:</p>

<ul>
<li><a href="https://github.com/weaveworks/ignite">ignite</a> lets you take a container image and run it as a Firecracker VM</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server-sent events: a simple way to stream events from a server]]></title>
    <link href="https://jvns.ca/blog/2021/01/12/day-36--server-sent-events-are-cool--and-a-fun-bug/">
    <updated>2021-01-12T08:00:28+00:00</updated>
    <id>https://jvns.ca/blog/2021/01/12/day-36--server-sent-events-are-cool--and-a-fun-bug/</id>
    <content type="html"><![CDATA[

<p>hello! Yesterday I learned about a cool new way of streaming events from a
server I hadn&rsquo;t heard of before: <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html">server-sent events</a>! They
seem like a simpler alternative to websockets if you only need to have the server
send events.</p>

<p>I&rsquo;m going to talk about what they&rsquo;re for, how they work, and a couple of bugs I
ran into while using them yesterday.</p>

<h3 id="the-problem-streaming-updates-from-a-server">the problem: streaming updates from a server</h3>

<p>Right now I have a web service that starts virtual machines, and the client
polls the server until the virtual machine is up. But I didn&rsquo;t want to be doing
polling.</p>

<p>Instead, I wanted to stream updates from the server. I told Kamal I was going
to implement websockets to do this, and he suggested that server-sent events
might be a simpler alternative!</p>

<p>I was like WHAT IS THAT??? It sounded like some weird fancy thing, and I&rsquo;d
never heard of it before. So I looked it up.</p>

<h3 id="server-sent-events-are-just-http-requests">server-sent events are just HTTP requests</h3>

<p>Here&rsquo;s how server-sent events work. I was SO DELIGHTED to learn that they&rsquo;re just HTTP requests.</p>

<ol>
<li>The client makes a GET request to (for example) <code>https://yoursite.com/events</code></li>
<li>The client sets <code>Connection: keep-alive</code> so that we can have a long-lived connection</li>
<li>The server sets a <code>Content-Type: text/event-stream</code> header</li>
<li>The server starts sending events that look like this:</li>
</ol>

<pre><code>event: status
data: one
</code></pre>

<p>For example, here&rsquo;s what some server-sent events look like when I make a request with curl:</p>

<pre><code>$ curl -N 'http://localhost:3000/sessions/15/stream'
event: panda
data: one

event: panda
data: two

event: panda
data: three

event: elephant
data: four
</code></pre>

<p>The server can send the events slowly over time, and the client can read them as they arrive. You can also put JSON or whatever you want in the events, like <code>data: {'name': 'ahmed'}</code></p>

<p>The wire protocol is really simple (just set <code>event:</code> and <code>data:</code> and maybe <code>id:</code> and <code>retry:</code> if you want), so you don&rsquo;t
need any fancy server libraries to implement server-sent events.</p>

<h3 id="the-javascript-code-is-also-super-simple-just-use-eventsource">the Javascript code is also super simple (just use <code>EventSource</code>)</h3>

<p>Here&rsquo;s what the browser Javascript code to stream server-sent events looks like. (I got this example from the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">MDN page on server-sent events</a>)</p>

<p>You can either subscribe to all events, or have different handlers for
different types of events. Here I have a handler that just receives events with
type <code>panda</code>  (like our server was sending in the previous section).</p>

<pre><code>const evtSource = new EventSource(&quot;/sessions/15/stream&quot;, { withCredentials: true })
evtSource.addEventListener(&quot;panda&quot;, function(event) {
  console.log(&quot;status&quot;, event)
});
</code></pre>

<h3 id="the-client-can-t-send-updates-in-the-middle">the client can&rsquo;t send updates in the middle</h3>

<p>Unlike websockets, server-sent events don&rsquo;t allow a lot of back-and-forth
communication. (it&rsquo;s in the name &ndash; the <strong>server</strong> sends all the events). The
client makes one request at the beginning, and then the server sends a bunch of responses.</p>

<h3 id="if-the-http-connection-ends-it-s-automatically-restarted">if the HTTP connection ends, it&rsquo;s automatically restarted</h3>

<p>One big difference between making an HTTP request with <code>EventSource</code> and a regular HTTP request is this note from the
MDN docs:</p>

<blockquote>
<p>By default, if the connection between the client and server closes, the connection is restarted. The connection is terminated with the .close() method.</p>
</blockquote>

<p>This is pretty weird, and I was really thrown off it by it at first: I opened a
connection, I closed it on the server side, and a couple of seconds later the
client made another request to my streaming endpoint!</p>

<p>I think the idea here is that maybe the connection might get accidentally
disconnected before it&rsquo;s done, so the client automatically reopens it to
prevent that.</p>

<p>So you have to explicitly close the connection by calling <code>.close()</code> if you don&rsquo;t want the client
to keep retrying.</p>

<h3 id="there-are-a-few-other-features">there are a few other features</h3>

<p>You can also set <code>id:</code> and <code>retry:</code> fields in server-sent events. It looks like
if you set <code>id</code>s on the events the server sends then when reconnecting, the
client will send a <code>Last-Event-ID</code> header with the last ID it received. Cool!</p>

<p>I found the <a href="https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation">W3C page on server-sent events</a> to be surprisingly readable.</p>

<h3 id="two-bugs-i-ran-into-while-setting-up-server-sent-events">two bugs I ran into while setting up server-sent events</h3>

<p>I ran into a couple of problems using server-sent events with Rails that I
thought were kinda interesting. One of them was actually caused by nginx, and
the other one was caused by rails.</p>

<p><strong>problem 1: I couldn&rsquo;t pause in between sending events</strong></p>

<p>I had this weird bug where if I did:</p>

<pre><code>def handler
    # SSE is Rails' built in server-sent events thing
    sse = SSE.new(response.stream, event: &quot;status&quot;)
    sse.write('event')
    sleep 1
    sse.write('another event')
end
</code></pre>

<p>It would write the first event, but not the second event. I was SO MYSTIFIED by
this and went on a whole digression trying to understand how <code>sleep</code> in Ruby
works. But Cass (another Recurser) pointed me to a <a href="https://stackoverflow.com/questions/25660399/sse-eventsource-closes-after-first-chunk-of-data-rails-4-puma-nginx">Stack Overflow question</a>
where someone else had the same problem, which contained a surprising-to-me
answer!</p>

<p>It turned out that the problem was that my Rails server was behind nginx, and
that nginx seemingly by default uses HTTP/1.0 to make requests to upstreams by default (why? in 2021? really? I&rsquo;m sure there&rsquo;s a good reason, probably backwards compatibility or something).</p>

<p>So the client (nginx) would just close the connection
after the first event sent by the server. I think the reason why it worked if I <em>didn&rsquo;t</em> pause
between sending the 2 events  was basically that the server was racing with the
client to send the second part of the response before the connection closed,
and if I sent it fast enough then the server won the race.</p>

<p>I&rsquo;m not sure exactly why using HTTP/1.0 made the client close the connection
(maybe because the server writes 2 newlines at the end of each event?), but
because server-sent events are a pretty new thing it&rsquo;s not that surprising that
they&rsquo;re not supported by HTTP/1.0 (which is Very Old).</p>

<p>Setting <code>proxy_http_version 1.1</code> fixed that problem. Hooray!</p>

<p><strong>problem 2: events were being buffered</strong></p>

<p>Once I sorted that out, I had a second problem. This one was actually super
easy to debug because Cass had already suggested <a href="https://stackoverflow.com/questions/63432012/server-sent-events-in-rails-not-delivered-asynchronously/65127528#65127528">this other stackoverflow answer</a>
as a solution to the previous problem, and while that wasn&rsquo;t what was causing
Problem 1, it DID explain Problem 2.</p>

<p>The problem was with this example code:</p>

<pre><code>def handler
    response.headers['Content-Type'] = 'text/event-stream'
    # Turn off buffering in nginx
    response.headers['X-Accel-Buffering'] = 'no'
    sse = SSE.new(response.stream, event: &quot;status&quot;)
    10.times do 
        sse.write('event')
        sleep 1
    end
end
</code></pre>

<p>I expected it to return 1 event per second for 10 seconds, but instead it
waited 10 seconds and returned 10 events all at once. That&rsquo;s not how we want streaming
to work!</p>

<p>This turned out to because the Rack ETag middleware wanted to calculate an ETag
(a hash of the response), and to do that it needed to have the whole response.
So I needed to disable ETag generation.</p>

<p>The Stack Overflow answer recommended disabling the Rack ETag middleware
entirely, but I didn&rsquo;t want to do that so I went and looked at the <a href="https://github.com/rack/rack/issues/1619">linked github issue</a>.</p>

<p>That github issue suggested a workaround I could apply to just the streaming endpoint, which was to set the <code>Last-Modified</code> header, which apparently bypasses the ETag middleware for some reason.</p>

<p>So I set</p>

<pre><code>headers['Last-Modified'] = Time.now.httpdate
</code></pre>

<p>and it worked!!!</p>

<p>I also turned off buffering in nginx by setting the header <code>X-Accel-Buffering: no</code>.
I&rsquo;m not 100% sure I needed to do that but it seems safer.</p>

<h3 id="stack-overflow-is-amazing">stack overflow is amazing</h3>

<p>At first I was really 100% committed to debugging both of those bugs from first
principles. Cass (another Recurser) pointed me to those two Stack Overflow
threads and at first I was skeptical of the solutions those threads were suggesting
(I thought &ldquo;I&rsquo;m not using HTTP/1.0! And what does the ETag header have to do with
anything??&ldquo;).</p>

<p>But it turned out that I <em>was</em> accidentally using HTTP/1.0, and that the Rack
ETag middleware <em>was</em> causing me problems.</p>

<p>So maybe the moral of that story is that sometimes computers interact in weird
ways, other people have experienced computers interacting in the exact same
weird ways in the past, and Stack Overflow sometimes has answers about why :)</p>

<p>I do think it&rsquo;s important to not just randomly try things from Stack Overflow
(which nobody was suggesting in this case of course!). For both of these I
really had to think about them to understand what was happening and why
changing those settings made sense.</p>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>Today I&rsquo;m going to keep working on implementing server-sent events, because I
spent a lot of yesterday being distracted by the above bugs. It&rsquo;s always such a
delight to learn about a new easy-to-use web technology that I&rsquo;d never heard
of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily blog posts about my time at RC]]></title>
    <link href="https://jvns.ca/blog/2021/01/08/some-extra-daily-blog-posts/">
    <updated>2021-01-08T08:28:52+00:00</updated>
    <id>https://jvns.ca/blog/2021/01/08/some-extra-daily-blog-posts/</id>
    <content type="html"><![CDATA[<p>A quick note: I&rsquo;ve been writing some daily-ish blog posts about what I&rsquo;ve been
doing in my time at the Recurse Center, but I took them out of this RSS feed
because I think they&rsquo;re a bit more stream of consciousness than my usual posts.
Here&rsquo;s where to find them if you&rsquo;re interested:</p>

<ul>
<li>You can find them all in the <a href="https://jvns.ca/categories/rc-2020/">Recurse Center 2020</a> category</li>
<li>If you want to subscribe to my daily RC posts, here&rsquo;s an <a href="https://jvns.ca/categories/rc-2020/atom.xml">RSS link</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Compose: a nice way to set up a dev environment]]></title>
    <link href="https://jvns.ca/blog/2021/01/04/docker-compose-is-nice/">
    <updated>2021-01-04T19:22:41+00:00</updated>
    <id>https://jvns.ca/blog/2021/01/04/docker-compose-is-nice/</id>
    <content type="html"><![CDATA[

<p>Hello! Here is another post about <a href="https://jvns.ca/#cool-computer-tools---features---ideas">computer tools that I&rsquo;ve appreciated</a>. This one is about Docker Compose!</p>

<p>This post is mostly just about how delighted I was that it does what it&rsquo;s
supposed to do and it seems to work and to be pretty straightforward to use.
I&rsquo;m also only talking about using Docker Compose for a dev environment here, not using it in production.</p>

<p>I&rsquo;ve been thinking about this kind of personal dev environment setup more
recently because I now do all my computing with a personal cloud budget of like
$20/month instead of spending my time at work thinking about how to manage
thousands of AWS servers.</p>

<p>I&rsquo;m very happy about this because previous to trying Docker Compose I spent
two days getting frustrated with trying to set up a dev environment with other
tools and Docker Compose was a lot easier and simpler. And then I told my
sister about my docker-compose experiences and she was like &ldquo;I KNOW, DOCKER
COMPOSE IS GREAT RIGHT?!?!&rdquo; So I thought I&rsquo;d write a blog post about it, and
here we are.</p>

<h3 id="the-problem-setting-up-a-dev-environment">the problem: setting up a dev environment</h3>

<p>Right now I&rsquo;m working on a Ruby on Rails service (the backend for a sort of
computer debugging game). On my production server, I have:</p>

<ul>
<li>a nginx proxy</li>
<li>a Rails server</li>
<li>a Go server (which proxies some SSH connections with <a href="https://github.com/yudai/gotty/">gotty</a>)</li>
<li>a Postgres database</li>
</ul>

<p>Setting up the Rails server locally was pretty straightforward without
resorting to containers (I just had to install Postgres and Ruby, fine, no big deal), but then
I wanted send <code>/proxy/*</code> to the Go server and everything else to the Rails
server, so I needed nginx too. And installing nginx on my laptop felt too messy
to me.</p>

<p>So enter <code>docker-compose</code>!</p>

<h3 id="docker-compose-lets-you-run-a-bunch-of-docker-containers">docker-compose lets you run a bunch of Docker containers</h3>

<p>Docker Compose basically lets you run a bunch of Docker containers that can communicate with each other.</p>

<p>You configure all your containers in one file called <code>docker-compose.yml</code>. I&rsquo;ve
pasted my entire <code>docker-compose.yml</code> file here for my server because I found
it to be really short and straightforward.</p>

<pre><code>version: &quot;3.3&quot;
services:
  db:
    image: postgres
    volumes:
      - ./tmp/db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password # yes I set the password to 'password'
  go_server:
    # todo: use a smaller image at some point, we don't need all of ubuntu to run a static go binary
    image: ubuntu
    command: /app/go_proxy/server
    volumes:
      - .:/app
  rails_server:
    build: docker/rails
    command: bash -c &quot;rm -f tmp/pids/server.pid &amp;&amp; source secrets.sh &amp;&amp; bundle exec rails s -p 3000 -b '0.0.0.0'&quot;
    volumes:
      - .:/app
  web:
    build: docker/nginx
    ports:
      - &quot;8777:80&quot; # this exposes port 8777 on my laptop
</code></pre>

<p>There are two kinds of containers here: for some of them I&rsquo;m just
using an existing image (<code>image: postgres</code> and <code>image: ubuntu</code>) without
modifying it at all. And for some I needed to build a custom container image &ndash;
<code>build: docker/rails</code> says to use <code>docker/rails/Dockerfile</code> to build a custom
container.</p>

<p>I needed to give my Rails server access to some API keys and things, so <code>source secrets.sh</code> puts a bunch of secrets in environment variables.  Maybe there&rsquo;s a
better way to manage secrets but it&rsquo;s just me so this seemed fine.</p>

<h3 id="how-to-start-everything-docker-compose-build-then-docker-compose-up">how to start everything: <code>docker-compose build</code> then <code>docker-compose up</code></h3>

<p>I&rsquo;ve been starting my containers just by running <code>docker-compose build</code> to
build the containers, then  <code>docker-compose up</code> to run everything.</p>

<p>You can set <code>depends_on</code> in the yaml file to get a little more control over
when things start in, but for my set of services the start order
doesn&rsquo;t matter, so I haven&rsquo;t.</p>

<h3 id="the-networking-is-easy-to-use">the networking is easy to use</h3>

<p>It&rsquo;s important here that the containers be able to connect to each other.
Docker Compose makes that super simple! If I have a Rails server running in my
<code>rails_server</code> container on port 3000, then I can access that with
<code>http://rails_server:3000</code>. So simple!</p>

<p>Here&rsquo;s a snippet from my nginx configuration file with how I&rsquo;m using that in
practice (I removed a bunch of <code>proxy_set_header</code> lines to make it more clear)</p>

<pre><code>location ~ /proxy.* {
    proxy_pass http://go_server:8080;
}
location @app {
    proxy_pass http://rails_server:3000;
}
</code></pre>

<p>Or here&rsquo;s a snippet from my Rails project&rsquo;s database configuration, where I use the name of the database container (<code>db</code>):</p>

<pre><code>development:
  &lt;&lt;: *default
  database: myproject_development
  host: db # &lt;-------- this &quot;magically&quot; resolves to the database container's IP address
  username: postgres
  password: password
</code></pre>

<p>I got a bit curious about how <code>rails_server</code> was actually getting resolved to
an IP address. It seems like Docker is running a DNS server somewhere on my
computer to resolve these names. Here are some DNS queries where we can see that each container has its own IP address:</p>

<pre><code>$ dig +short @127.0.0.11 rails_server
172.18.0.2
$ dig +short @127.0.0.11 db
172.18.0.3
$ dig +short @127.0.0.11 web
172.18.0.4
$ dig +short @127.0.0.11 go_server
172.18.0.5
</code></pre>

<h3 id="who-s-running-this-dns-server">who&rsquo;s running this DNS server?</h3>

<p>I dug into how this DNS server is set up a very tiny bit.</p>

<p>I ran all these commands outside the container, because I didn&rsquo;t have a lot of
networking tools installed in the container.</p>

<p><strong>step 1</strong>: find the PID of my Rails server with <code>ps aux | grep puma</code></p>

<p>It&rsquo;s 1837916. Cool.</p>

<p><strong>step 2</strong>: find a UDP server running in the same network namespace as PID <code>1837916</code></p>

<p>I did this by using <code>nsenter</code> to run <code>netstat</code> in the same network namespace as
the <code>puma</code> process. (technically I guess you could run <code>netstat -tupn</code> to just
show UDP servers, but my fingers only know how to type <code>netstat -tulpn</code> at this
point)</p>

<pre><code>$ sudo nsenter -n -t 1837916 netstat -tulpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.11:32847        0.0.0.0:*               LISTEN      1333/dockerd        
tcp        0      0 0.0.0.0:3000            0.0.0.0:*               LISTEN      1837916/puma 4.3.7  
udp        0      0 127.0.0.11:59426        0.0.0.0:*                           1333/dockerd  
</code></pre>

<p>So there&rsquo;s a UDP server running on port <code>59426</code>, run by <code>dockerd</code>! Maybe that&rsquo;s the DNS server?</p>

<p><strong>step 3</strong>: check that it&rsquo;s a DNS server</p>

<p>We can use <code>dig</code> to make a DNS query to it:</p>

<pre><code>$ sudo nsenter -n -t 1837916 dig +short @127.0.0.11 59426 rails_server
172.18.0.2
</code></pre>

<p>But &ndash; when we ran <code>dig</code> earlier, we weren&rsquo;t making a DNS query to port 59426,
we were querying port 53! What&rsquo;s going on?</p>

<p><strong>step 4</strong>: iptables</p>

<p>My first guess for &ldquo;this server seems to be running on port X but I&rsquo;m accessing it on port Y, what&rsquo;s going on?&rdquo; was &ldquo;iptables&rdquo;.</p>

<p>So I ran iptables-save in the container&rsquo;s network namespace, and there we go:</p>

<pre><code>$ sudo nsenter -n -t 1837916 iptables-save
.... redacted a bunch of output ....
-A DOCKER_POSTROUTING -s 127.0.0.11/32 -p udp -m udp --sport 59426 -j SNAT --to-source :53
COMMIT
</code></pre>

<p>There&rsquo;s an iptables rule that sends traffic on port 53 to 59426. Fun!</p>

<h3 id="it-stores-the-database-files-in-a-temp-directory">it stores the database files in a temp directory</h3>

<p>One nice thing about this is: instead of managing a Postgres installation on my
laptop, I can just mount the Postgres container&rsquo;s data directory at <code>./tmp/db</code>.</p>

<p>I like this because I really do not want to administer a Postgres installation
on my laptop (I don&rsquo;t really know how to configure Postgres), and conceptually
I like having my dev database literally be in the same directory as the rest of my code.</p>

<h3 id="i-can-access-the-rails-console-with-docker-compose-exec-rails-server-rails-console">I can access the Rails console with <code>docker-compose exec rails_server rails console</code></h3>

<p>Managing Ruby versions is always a little tricky and even when I have it
working, I always kind of worry I&rsquo;m going to screw up my Ruby installation and
have to spend like ten years fixing it.</p>

<p>With this setup, if I need access to the Rails console (a REPL with all my Rails code loaded), I can just run:</p>

<pre><code>$ docker-compose exec rails_server rails console
Running via Spring preloader in process 597
Loading development environment (Rails 6.0.3.4)
irb(main):001:0&gt; 
</code></pre>

<p>Nice!</p>

<h3 id="small-problem-no-history-in-my-rails-console">small problem: no history in my Rails console</h3>

<p>I ran into a problem though: I didn&rsquo;t have any history in my Rails console
anymore, because I was restarting the container all the time.</p>

<p>I figured out a pretty simple solution to this though:  I added a
<code>/root/.irbrc</code> to my container that changed the IRB history file&rsquo;s location to
be something that would persist between container restarts. It&rsquo;s just one line:</p>

<pre><code>IRB.conf[:HISTORY_FILE] = &quot;/app/tmp/irb_history&quot;
</code></pre>

<h3 id="i-still-don-t-know-how-well-it-works-in-production">I still don&rsquo;t know how well it works in production</h3>

<p>Right now my production setup for this project is still &ldquo;I made a digitalocean
droplet and edited a lot of files by hand&rdquo;.</p>

<p>I think I&rsquo;ll try to use docker-compose to run this thing in production.
My guess is that it should work fine because this service is probably going to
have at most like 2 users at a time and I can easily afford to have 60 seconds
of downtime during a deploy if I want, but usually something goes wrong that I
haven&rsquo;t thought of.</p>

<p>A few notes from folks on Twitter about docker-compose in production:</p>

<ul>
<li><code>docker-compose up</code> will only restart the containers that need restarting, which makes restarts faster</li>
<li>there&rsquo;s a small bash script <a href="https://github.com/vishnubob/wait-for-it">wait-for-it</a> that you can use to make a container wait for another service to be available</li>
<li>You can have 2 docker-compose.yaml files: <code>docker-compose.yaml</code> for DEV, and <code>docker-compose-prod.yaml</code> for prod. I think I&rsquo;ll use this to expose different nginx ports: 8999 in dev and 80 in prod.</li>
<li>folks seemed to agree that docker-compose is fine in production if you have a small website running on 1 computer</li>
<li>one person suggested that Docker Swarm might be better for a slightly more complicated production setup, but I haven&rsquo;t tried that (or of course Kubernetes, but the whole point of Docker Compose is that it&rsquo;s super simple and Kubernetes is certainly not simple :) )</li>
</ul>

<p>Docker also seems to have a feature to <a href="https://docs.docker.com/cloud/ecs-integration/">automatically deploy your docker-compose setup to ECS</a>,
which sounds cool in theory but I haven&rsquo;t tried it.</p>

<h3 id="when-doesn-t-docker-compose-work-well">when doesn&rsquo;t docker-compose work well?</h3>

<p>I&rsquo;ve heard that docker-compose doesn&rsquo;t work well:</p>

<ul>
<li>when you have a very large number of microservices (a simple setup is
best)</li>
<li>when you&rsquo;re trying to include data from a very large database (like putting
hundreds of gigabytes of data on everyone&rsquo;s laptop)</li>
<li>on Mac computers, I&rsquo;ve heard that Docker can be a lot slower than on Linux
(presumably because of the extra VM). I don&rsquo;t have a Mac so I haven&rsquo;t run
into this.</li>
</ul>

<h3 id="that-s-all">that&rsquo;s all!</h3>

<p>I spent an entire day before this trying to configure a dev environment by
using Puppet to provision a Vagrant virtual machine only to realize that VMs
are kind of slow to start and that I don&rsquo;t really like writing Puppet
configuration (I know, huge surprise :)).</p>

<p>So it was nice to try Docker Compose and find that it was straightforward to
get to work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2020: Year in review]]></title>
    <link href="https://jvns.ca/blog/2020/12/31/2020--year-in-review/">
    <updated>2020-12-31T13:32:42+00:00</updated>
    <id>https://jvns.ca/blog/2020/12/31/2020--year-in-review/</id>
    <content type="html"><![CDATA[

<p>I write these <a href="https://jvns.ca/#year-in-review">every year</a>, so here&rsquo;s 2020!
I&rsquo;m not going to really go into the disaster that was 2020, I&rsquo;m just going to
talk about some things I worked on. So here are some things I did this year and
a few reflections, as usual. I&rsquo;m much more grateful than usual that my family and friends are generally healthy.</p>

<h3 id="zines">zines!</h3>

<p>I published 4 zines:</p>

<ul>
<li><a href="https://wizardzines.com/zines/css">Hell Yes! CSS!</a></li>
<li><a href="https://wizardzines.com/zines/bite-size-bash">Bite Size Bash</a></li>
<li><a href="https://wizardzines.com/zines/sql">Become a SELECT Star</a></li>
<li><a href="https://wizardzines.com/zines/containers">How Containers Work</a></li>
</ul>

<p>This year definitely had an accidental &ldquo;weird programming languages&rdquo; theme
(bash, CSS, and SQL) which I kind of love. I&rsquo;m also really delighted I finally
managed to publish that containers zine, because I&rsquo;d wanted to write it for a
long time and I&rsquo;m really happy with how it turned out.</p>

<p>For two of these zines, I also made companion websites with examples:</p>

<ul>
<li>Become a SELECT Star: <a href="https://sql-playground.wizardzines.com/">SQL playground</a></li>
<li>Hell Yes! CSS!: <a href="https://css-examples.wizardzines.com/">CSS examples</a></li>
</ul>

<p>Both of those sites are trying to get at a tension that I always feel with my
zines which is &ndash; you can&rsquo;t really learn about computers without trying things!
So they both give you a way to quickly try things out and experiment.</p>

<p>I&rsquo;m still honestly not sure how well these are working because I haven&rsquo;t gotten
a lot of feedback on them (positive or negative), but I still feel that this is
important so I&rsquo;m going to keep working on this.</p>

<h3 id="a-redesign-of-wizardzines-com">a redesign of wizardzines.com</h3>

<p>I redesigned <a href="https://wizardzines.com">https://wizardzines.com</a> this year! As with any website
redesign, I think this is like 50x more exciting to me than literally anyone
else in the universe so I won&rsquo;t say too much about it, but it has a fun
animations, I think the information is a better organized, and I really love
it.</p>

<p>You can see what it looked like
<a href="https://web.archive.org/web/20190808061555/https://wizardzines.com/">before</a> and <a href="https://wizardzines.com">after</a>. <a href="https://melody.dev">Melody Starling</a> did
all the design and CSS work.</p>

<p>I basically wrote the CSS zine because we did this project and I was so amazed
and delighted by what Melody could do with CSS that I had to write a zine about
CSS.</p>

<h3 id="i-shipped-some-zines">I shipped some zines!</h3>

<p>I wanted to print and ship some zines in 2020, and I did! I had kind of Grand Ambitions for this and in reality what happened was:</p>

<ol>
<li>I got 400 copies of &ldquo;Help! I have a Manager!&rdquo; printed in February</li>
<li>there was a pandemic and I got distracted so I left them in a box in my
house for 6 months</li>
<li>I finally got around to announcing them in August and shipped the zines to
people in September</li>
</ol>

<p>I wanted the whole thing to feel special, so I designed &amp; printed custom
envelopes and got a local stamp maker to design a stamp to stamp the envelope
seal with. Here&rsquo;s what it looked like:</p>

<p><img style="max-height: 300px" src="https://jvns.ca/images/shipping-1.jpeg">
<img style="max-height: 300px" src="https://jvns.ca/images/shipping-2.jpeg"></p>

<p>I got a lot of excited tweets from people receiving their zines, which was
really nice.</p>

<p>The main problems I ran into were:</p>

<ul>
<li>shipping is a lot of work, it took me maybe 2-3 days to get all 400 zines
packaged and shipped</li>
<li>in order for me to charge a reasonable price ($16 USD/zine), I had to ship
everything with letter mail, which mostly worked but some people didn&rsquo;t get
their zines or it took many weeks for the zines to arrive. And there was no
tracking so it was hard/impossible for me to find out about problems.</li>
</ul>

<p>I definitely want to ship more zines, but I think I might have to do it in a
less fun and artisanal way. We&rsquo;ll see!</p>

<h3 id="learning-experiment-questions">learning experiment: questions</h3>

<p>One of my experiments in helping pepole learn this year was a site called &ldquo;questions!&rdquo;, which you can try at
<a href="https://questions.wizardzines.com/">https://questions.wizardzines.com/</a> (for example here are some <a href="https://questions.wizardzines.com/cors.html">questions about CORS</a>.</p>

<p>The idea is that it asks you questions about a topic as a way for you to find
out what you don&rsquo;t know and learn something.</p>

<p>I spent a lot of time figuring out how to make this not feel like a quiz. The
first version of this I built was called
<a href="https://flashcards.wizardzines.com">flashcards</a>, and while people seemed to
like those, I found that too many people were reacting to it with &ldquo;I got <sup>9</sup>&frasl;<sub>10</sub>!&rdquo;
as if the goal was to get as many questions right as possible.</p>

<p>To make it clearer that the point was to learn, we made the primary
interaction on the site clicking on &ldquo;I learned something!&rdquo; (which triggers an
animation and a lightbulb). So you don&rsquo;t get rewarded for already knowing the
thing, you get rewarded for learning something new.</p>

<p>I also published an open source version of the site, if you want to make your own:
<a href="https://github.com/questions-template/questions-template.github.io">https://github.com/questions-template/questions-template.github.io</a>. I&rsquo;d be really interested to hear if anyone does.</p>

<p><a href="https://melody.dev/">Melody</a> designed this site too.</p>

<p>I still feel a bit unsure about the future of this project, but I&rsquo;m happy with
where I got with it this year.</p>

<h3 id="learning-experiment-domain-name-saturday">learning experiment: domain name saturday</h3>

<p>With my friend <a href="http://akaptur.com/">Allison Kaptur</a>, I ran an event called
&ldquo;Domain Name Saturday&rdquo; at the <a href="https://www.recurse.com/">Recurse Center</a> where
you write a DNS server in 1 day.</p>

<p>It turns out it&rsquo;s impossible to write a DNS server in 1 day (literally nobody
succeeded, but I think it might be possible in 2 days). But it was a really fun
exercise and a lot of people made very significant progress. At the end we did
a &ldquo;bug presentations&rdquo; event where people presented their favourite bug they ran into
while writing their DNS server. I really liked this structure because it&rsquo;s easy
for everyone to participate no matter how far they got (everyone has bugs!),
and people&rsquo;s bugs were really interesting!</p>

<p>I think it&rsquo;s a super fun exercise for learning about networking and parsing
binary data and I&rsquo;m excited to try to run it again someday.</p>

<h3 id="we-ran-con-remotely">we ran !!Con remotely!</h3>

<p>!!Con West was the last thing I did before the pandemic, back on March 1 in the
very last days of in-person conferences.</p>

<p>We ran !!Con NYC remotely this year (you can watch <a href="http://bangbangcon.com/recordings.html">the
recordings</a>!). It was a delightful
bright spot this year. I think it really worked well as a remote conference
because !!Con (unlike a lot of conferences) really is largely about the talks
and about the joy of watching a lot of delightful talks together.</p>

<p>I think we managed to reproduce the experience of sitting in a big room and
clapping and being excited about a fun shared experience pretty well (through
discord and a lot of clapping emojis). It was definitely much harder to actually
talk to individual people.</p>

<p>We charged $64 for tickets (pay-what-you-can), which included a conference tshirt mailed to your
house in the ticket price. So I wrote a Python script to mail a few hundred
conferences tshirts / sweaters to people with Printful. It was fun but next
time I&rsquo;d probably just make a Shopify/Squarespace store and give everyone a
code to order a free shirt though, it involved a little too much customer
support caused by bugs in my script :)</p>

<h3 id="running-a-business-is-going-well">running a business is going well!</h3>

<p>Last year at this time, I said I was going to take until August 2020 and
reevaluate how I felt about this whole &ldquo;running a business&rdquo; thing. When
August came around I felt like I was generally having fun and the business is
doing well. So &ldquo;reevaluate how I felt&rdquo; turned into &ldquo;shrug and keep doing what
I&rsquo;m doing&rdquo;.</p>

<p>Revenue is up 2.3x over last year, which is incredible and probably very
related to the fact that I published twice as many zines.</p>

<p>I continue to enjoy being able to easily understand what value the work I&rsquo;m
doing brings to the world and having a lot of control over my time. I still
miss having coworkers though :)</p>

<h3 id="what-went-well">what went well</h3>

<ul>
<li><strong>working with other people</strong>. I&rsquo;m not going to list everyone here but I
wrote a personal 2020 retro and a lot of my high points were like &ldquo;I got
to work with X person and it was SO GREAT and I couldn&rsquo;t have done any of
these things without them&rdquo;</li>
<li><strong>beta readers</strong>. I started asking beta readers to read my zines and tell me
which parts are confusing and it was AMAZING. If you were one of these 50-ish
people, thank you so much!</li>
<li><strong>new tools</strong>. I started using Trello to track what needs to be done for my
zines instead of literally no organizational system at all and it really
helped a lot. I also started using <a href="https://www.focusmate.com/">focusmate</a>
to, well, focus, and that helped a lot too. I wrote probably 80% of the bash
zine in Focusmate sessions and it was a lot faster and less stressful.</li>
<li><strong>royalties</strong>. I got to pay out more royalties this year and that was
really cool.</li>
<li>I kept learning about running a business and wrote my first blog post about what I&rsquo;ve learned:
<a href="https://jvns.ca/blog/2020/10/28/a-few-things-i-ve-learned-about-email-marketing/">A few things I&rsquo;ve learned about email marketing</a>.
I don&rsquo;t want to get too much into giving business advice, but I think I want to write a couple more posts about what I&rsquo;ve learned next year.</li>
</ul>

<h3 id="some-questions-about-2021">some questions about 2021</h3>

<p>I don&rsquo;t think anyone can answer these except me, but here are a few work things
that are on my mind:</p>

<ul>
<li>For some reason I feel compelled to make more educational things that aren&rsquo;t
zines, like these little websites I talked about earlier that ask you
questions or let you run SQL queries / try out CSS ideas. I have another
project that I&rsquo;ve started here that I&rsquo;ll write about later.</li>
<li>I&rsquo;m not sure what I&rsquo;m going to do about printing/shipping, I really
liked the artisanal way I did it this year, but it was a lot of work.</li>
<li>As always, I have very few ideas about what I&rsquo;m going to write a zine about
next. It&rsquo;s always like this but it always feels hard to come up with ideas. I
do have 1 idea for my next zine though which is a lot more than usual! Maybe
it&rsquo;ll work out!</li>
</ul>

<h3 id="here-s-to-2021-being-a-better-year">here&rsquo;s to 2021 being a better year</h3>

<p>Stay safe everyone. Happy new year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I write useful programming comics]]></title>
    <link href="https://jvns.ca/blog/2020/12/05/how-i-write-useful-programming-comics/">
    <updated>2020-12-05T09:54:37+00:00</updated>
    <id>https://jvns.ca/blog/2020/12/05/how-i-write-useful-programming-comics/</id>
    <content type="html"><![CDATA[

<h2 id="how-i-write-useful-programming-comics">How I write useful programming comics</h2>

<p>The other day a friend was asking me how I write <a href="https://wizardzines.com">programming comics</a>. I&rsquo;ve tried
to write about this at least 6 times
(<a href="https://jvns.ca/blog/2019/09/01/ways-to-write-zines-without-fancy-tools/">1</a>,
<a href="https://jvns.ca/blog/2018/12/09/how-do-you-document-a-tech-project-with-comics/">2</a>,
<a href="https://jvns.ca/blog/2018/10/28/when-does-teaching-with-comics-work-well/">3</a>,
<a href="https://jvns.ca/teach-tech-with-cartoons/">4</a>,
<a href="https://jvns.ca/blog/2016/11/14/why-cute-drawings/">5</a>,
<a href="https://jvns.ca/blog/2016/08/29/how-i-made-a-zine/">6</a>), but I felt like
there&rsquo;s still something missing so here&rsquo;s another attempt.</p>

<h3 id="drawing-isn-t-the-hard-part">drawing isn&rsquo;t the hard part</h3>

<p>The 2 common questions/comments I get about my comics are:</p>

<ol>
<li>&ldquo;what tools do you use?&rdquo; (an ipad + apple pencil + a drawing app).</li>
<li>I wish I were good at drawing so that I could do that</li>
</ol>

<p>But neither of these is what I actually find hard about comics: I&rsquo;m actually <a href="https://jvns.ca/teach-tech-with-cartoons/">very bad at drawing</a>, and I&rsquo;ve made comics that people love with very simple tools, like taking a <a href="https://twitter.com/b0rk/status/638365065926811648">low-quality picture of a notebook with my phone</a>.</p>

<p>So what&rsquo;s the secret?</p>

<h3 id="3-types-of-comics-i-draw">3 types of comics I draw</h3>

<p>I think a lot of my comics fall into 3 categories. I don&rsquo;t think that this
categorization is totally accurate, but I think it&rsquo;s a helpful way to start
talking about how to do it.</p>

<p><strong>Type 1: the Surprising/Hidden Fact</strong></p>

<p>Here are 10 examples of surprising ideas I&rsquo;ve written about:</p>

<ul>
<li><a href="https://wizardzines.com/comics/sql-query-order/">SELECT queries aren&rsquo;t executed in the order they&rsquo;re written in</a></li>
<li><a href="https://wizardzines.com/comics/position-absolute/">position: absolute isn&rsquo;t absolute</a></li>
<li><a href="https://twitter.com/b0rk/status/1158848054142873603">cookies let a server store information in your browser</a></li>
<li><a href="https://twitter.com/b0rk/status/981159808832286720">the /proc directory on linux lets you access information about processes</a></li>
<li><a href="https://twitter.com/b0rk/status/987727508241092608">linux uses copy on write for a new process&rsquo;s memory</a></li>
<li><a href="https://twitter.com/b0rk/status/1102027359874703360">ngrep is like &lsquo;grep&rsquo; for network packets</a></li>
<li><a href="https://twitter.com/b0rk/status/1044403728336310273">a git branch is a pointer to a commit</a></li>
<li><a href="https://wizardzines.com/comics/ask-for-specific-feedback/">if you ask about specific things you want feedback on, you&rsquo;re more likely to get the feedback you need</a></li>
<li><a href="https://wizardzines.com/comics/overlay-filesystems/">container layers are implemented using overlay filesystems</a></li>
</ul>

<p>Of course, a lot of these aren&rsquo;t that surprising when you already know about
them &ndash; &ldquo;cookies let a server store information in your browser&rdquo; is a basic
fact about how cookies work! But if you don&rsquo;t already know it, it&rsquo;s pretty
surprising and kind of exciting to learn.</p>

<p>I think there are at least two subtypes of surprising facts here:</p>

<ul>
<li>Facts that tell you about something you can <em>do</em> (like &ldquo;use ngrep to grep your network packets&rdquo;)</li>
<li>Facts that explain why something works the way it does (&ldquo;oh, I&rsquo;m always confused about SQL queries because they&rsquo;re not executed in the order they&rsquo;re written in! That explains a lot!&rdquo;)</li>
</ul>

<p><strong>Type 2: the List of Important Things about X</strong></p>

<p>This sounds pretty boring at first (&ldquo;uh, a list?&rdquo;), but most of the comics I&rsquo;ve
drawn where people tell me &ldquo;This is amazing, I printed this out and put it on
my wall&rdquo; are lists. Here are some examples of list comics:</p>

<ul>
<li><a href="https://wizardzines.com/networking-tools-poster.pdf">every linux networking tool I know</a></li>
<li><a href="https://wizardzines.com/comics/1-1s/">what to talk about in 1:1s with your manager</a></li>
<li><a href="https://wizardzines.com/comics/request-headers/">the most important HTTP request headers</a></li>
<li><a href="https://wizardzines.com/comics/status-codes/">HTTP status codes</a></li>
<li><a href="https://drawings.jvns.ca/team/">ways I want my team to be</a></li>
<li><a href="https://wizardzines.com/comics/grep/">grep&rsquo;s command line arguments</a></li>
<li><a href="https://wizardzines.com/comics/find/">find&rsquo;s command line arguments</a></li>
<li><a href="https://wizardzines.com/comics/dig/">dig&rsquo;s command line arguments</a></li>
<li>about 30 other &ldquo;X&rsquo;s most important command line arguments and what they do&rdquo;
(basically all of <a href="https://wizardzines.com/zines/bite-size-command-line">bite size command
line</a> and <a href="https://wizardzines.com/zines/bite-size-command-line">bite size
networking</a>)</li>
</ul>

<p>A key things about this is that it&rsquo;s not just &ldquo;a list of facts about X&rdquo; (anyone
can make a list!) but a list of <strong>the most important facts</strong> about X. For
example, grep has a lot of command line arguments. But it turns out that I
only ever use 9 of them even though I use a grep a LOT, and that each
of those 9 options can be explained in just a few words.</p>

<p>All of the topics are super specific, like &ldquo;HTTP request headers&rdquo;, &ldquo;HTTP
response headers&rdquo;, and &ldquo;topics for 1:1s&rdquo;.</p>

<p><strong>Type 3: the Relatable Story</strong></p>

<p>The last type (and the type I&rsquo;m the least certain how to categorize) is sort of
a story that resonates with people. I think that this one is really important
but I can&rsquo;t do it justice right now so I&rsquo;m going to stick to talking about the
other two types in this post.</p>

<ul>
<li><a href="https://wizardzines.com/comics/take-on-hard-projects/">take on hard projects</a></li>
<li><a href="https://wizardzines.com/comics/better-at-debugging/">how I got better at debugging</a></li>
<li><a href="https://wizardzines.com/comics/wizard-programmer/">how to be a wizard programmer</a></li>
<li><a href="https://twitter.com/b0rk/status/617003669561679872">data analysis is always more work than I think</a></li>
</ul>

<h3 id="source-1-of-surprising-facts-things-i-learned-somewhat-recently">source 1 of Surprising Facts: things I learned somewhat recently</h3>

<p>Okay, so how do you find surprising facts to share? The way I started out was
to just share things I learned that I was surprised by!</p>

<p>I started doing this on my blog, not in comics: I&rsquo;d learn something that I was
surprised by, and think &ldquo;oh, this is cool, I should write a blog post about it
so other people can learn it too!&ldquo;. And then I&rsquo;d write it up and often people
would be really happy to learn the thing too!</p>

<p>Obviously I don&rsquo;t think everyone needs to have a tech blog, but I <em>do</em> think
that noticing surprising computer facts as you learn them and explaining them
clearly is a skill that you need to practice if you want to get good at it!</p>

<h3 id="source-2-of-surprising-facts-things-other-people-find-surprising">source 2 of Surprising Facts: things other people find surprising</h3>

<p>Recently I&rsquo;ve moved a little more into what I feel is the Hard Mode of
surprising facts &ndash; things that I have not been personally surprised by
recently, but that a lot of people who don&rsquo;t know about the topic yet would be
really surprised by.</p>

<p>I think the main way to discover Surprising Facts like this is by talking to
people who do not know the thing already and observing what they find
surprising. For example I might have an interaction like this:</p>

<ol>
<li>me (showing someone to a coworker) so you can do TASK like this&hellip;</li>
<li>coworker: um wait you can do that?? That&rsquo;s so cool! I have a lot of questions!</li>
<li>me: oh yeah it&rsquo;s so useful!</li>
</ol>

<p>For me, HTTP cookies were an example this &ndash; I&rsquo;d forgotten that it could be
surprising / interesting to learn how they worked because I learned about them
a while ago, and then one day a friend asked me &ldquo;hey, how do cookies work?&rdquo;.
And I remembered that it&rsquo;s really cool and useful to know, so I wrote it down!</p>

<p>Another example of this is <a href="https://wizardzines.com/comics/sql-query-order/">SELECT queries start with FROM</a> &ndash; this was something
that I understood intuitively and hadn&rsquo;t thought about. But when walking through a SQL query&rsquo;s
execution with someone, I noticed that they were really surprised that you
didn&rsquo;t execute the query in the same order that it was written. And I realized
&ldquo;oh yeah, that IS weird actually, I bet a lot of other people are confused by
that too!&ldquo;. So I wrote it down and it helped a lot of people!</p>

<p>I think the skill of &ldquo;figuring out what people typically find surprising when
learning a topic and coming up with clear explanations&rdquo; is probably called
&ldquo;teaching&rdquo;.</p>

<h3 id="lists-of-important-things-are-a-little-bit-easier-to-write">Lists of Important Things are a little bit easier to write</h3>

<p>I find writing lists a little easier than writing Surprising Facts &ndash; it&rsquo;s hard
to come up with a useful topic for a list, but once I have the topic (like
&ldquo;every linux networking tool I know&rdquo;), it feels somewhat straightforward to list
them all and briefly explain the basics of each one.</p>

<h3 id="i-only-write-comics-about-things-i-know-relatively-well">I only write comics about things I know relatively well</h3>

<p>People also ask me pretty often if I write comics about topics I&rsquo;m learning as
I learn them. I don&rsquo;t do this basically because I find writing short things a
LOT harder than writing long things.</p>

<p>I do write blog posts about topics I&rsquo;m just learning &ndash; if there&rsquo;s a topic I&rsquo;m
still not super clear on, I can usually write a 1200-word blog post about it
with some basic facts and questions and examples.  But if I&rsquo;m still a little
bit confused about the topic, it&rsquo;s very hard to definitively list &ldquo;Here are the
3 most important surprising facts you need to know to understand TOPIC&rdquo;,
because very likely I actually don&rsquo;t know those 3 facts yet! Or maybe I kind of
know them, they&rsquo;re mixed in with a lot of other things that I&rsquo;m not sure about
and aren&rsquo;t as important.</p>

<h3 id="that-s-all-for-now">that&rsquo;s all for now!</h3>

<p>Hopefully this is helpful! Someone pointed out that this advice might also
apply to blog posts, which, maybe it does!</p>
]]></content>
  </entry>
  
</feed>
