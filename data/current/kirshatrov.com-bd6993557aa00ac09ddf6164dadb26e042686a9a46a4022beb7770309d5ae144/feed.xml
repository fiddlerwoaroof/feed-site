<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Kir Shatrov</title>
 <link href="http://kirshatrov.com/atom.xml" rel="self">
 <link href="http://kirshatrov.com/">
 <updated>2022-07-30T01:13:05+00:00</updated>
 <id>http://kirshatrov.com</id>
 <author>
   <name>Kir Shatrov</name>
   <email>kir@kirshatrov.com</email>
 </author>

 
 <entry>
   <title>DBaaS ecosystem and economics</title>
   <link href="http://kirshatrov.com/posts/dbaas-ecosystem/">
   <updated>2022-02-02T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/dbaas-ecosystem</id>
   <content type="html">&lt;p&gt;For the past six years I’ve been working on scaling Shopify, and a large part of that has been related to scaling databases. I’ve been  watching the databases space, and specifically &lt;em&gt;Database-as-a-Service&lt;/em&gt; (DBaaS) offerings, as we were &lt;a href=&quot;https://www.youtube.com/watch?v=Jz4VQqCrII4&quot; target=&quot;\_blank&quot;&gt;building one&lt;/a&gt; for internal use at Shopify.&lt;/p&gt;

&lt;p&gt;This post is a brief analysis of where the DBaaS ecosystem is moving, what have been some of the recent shifts, and why it’s a profitable business.&lt;/p&gt;

&lt;h2 id=&quot;the-beginning&quot;&gt;The beginning&lt;/h2&gt;

&lt;p&gt;The mass market of database as a service offering started with Heroku in 2007. They were the first to launch a PostgreSQL offering that could be configured for your app with a single click. It went off really well with the popularity of Rails and Heroku as the easiest hosting solution.&lt;/p&gt;

&lt;p&gt;Amazon’s RDS followed in 2009, first supporting only MySQL, and adding support for PostgreSQL in 2013.&lt;/p&gt;

&lt;p&gt;Around the same time, Heroku noticed demand for managed Postgres for apps that run outside Heroku, and released the standalone offering.&lt;/p&gt;

&lt;p&gt;Whether or not you used Heroku’s Postgres or RDS, having a URL like &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres://user3123:passkja83kd8@ec2-117-21-174-214.compute-1.amazonaws.com:6212/db982398&lt;/code&gt; felt incredible. It required no DBAs, it was highly available and automatically backed up, and the best minds at Heroku and AWS worked on providing the highest uptime for your databases.&lt;/p&gt;

&lt;h2 id=&quot;dbaas-and-margins&quot;&gt;DBaaS and margins&lt;/h2&gt;

&lt;p&gt;Let’s try to compare Heroku’s pricing to bare EC2 instances.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; Instance&lt;/th&gt;
      &lt;th&gt;&lt;nobr&gt;Monthly price &lt;sup&gt;1&lt;/sup&gt;&lt;/nobr&gt;&lt;/th&gt;
      &lt;th&gt;Price difference&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Heroku Premium 0&lt;br /&gt;4 Gb RAM / 64 Gb storage&lt;/td&gt;
      &lt;td&gt;$200&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EC2 t4g.medium &lt;br /&gt; 2 vCPUs / 4 Gb RAM / 64 Gb of io1 SSD&lt;/td&gt;
      &lt;td&gt;$69&lt;/td&gt;
      &lt;td&gt;2.9x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Heroku Premium 4&lt;br /&gt;32Gb RAM / 756 Gb Storage&lt;/td&gt;
      &lt;td&gt;$1,200&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EC2 r5.xlarge &lt;sup&gt;2&lt;/sup&gt;&lt;br /&gt;4 vCPUs / 32 Gb RAM / 756 Gb of io1 SSD&lt;/td&gt;
      &lt;td&gt;$630&lt;/td&gt;
      &lt;td&gt;1.9x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Heroku Premium 6&lt;br /&gt;122 Gb RAM / 1.5 Tb of storage&lt;/td&gt;
      &lt;td&gt;$3,500&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EC2 r5.4xlarge &lt;sup&gt;2&lt;/sup&gt;&lt;br /&gt;16 vCPU / 128 Gb RAM / 1.5 TB of io1 SSD&lt;/td&gt;
      &lt;td&gt;$1,965&lt;/td&gt;
      &lt;td&gt;1.8x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Cost of a single EC2 instance with a disk is multiplied by 3 to account for High Availability which Heroku provides&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; I chose the r5 instance type as it's memory-optimized and recommended for high-performance databases&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;To my calculations above, Heroku’s margin is about 2x — in other words, for a Postgres instance that costs you $1,200, Heroku’s infrastructure costs on AWS would be as low as $600. And doesn’t take into account any vendor discounts that AWS usually gives.&lt;/p&gt;

&lt;p&gt;RDS’ pricing is close to Heroku in the order of magnitude, which means that AWS has a similar (if not larger) margin because they own the hardware and the internal price of EC2 must be even lower. And if as a cloud provider you can estimate that a typical lifetime of a database is at least couple years, and get an instance reservation and pay upfront, then you can another 60% discount on AWS.&lt;/p&gt;

&lt;p&gt;In another words, this is a rough illustration of the actual cost of a database managed for you by Heroku or AWS. In most cases, that cost is well worth it because you save on not having to hire DBAs who’d manage, backup (!) and run your DBs. But on another side, you can see how money is made there.&lt;/p&gt;

&lt;p&gt;Like many cloud offerings built on top of Compute, &lt;strong&gt;DBaaS is a highly marginal business&lt;/strong&gt; that players are interested in getting into.&lt;/p&gt;

&lt;h2 id=&quot;demand-for-scalable-databases&quot;&gt;Demand for scalable databases&lt;/h2&gt;

&lt;p&gt;All these companies that launched on of Heroku’s and AWS’ database offerings have been growing, and many of them (surprisingly) no longer fit into a single database. For some of them the constraint is the &lt;strong&gt;data volume&lt;/strong&gt;, and for others it’s the &lt;strong&gt;write throughput&lt;/strong&gt;. There’s always a limit for what a single compute instance can do, even if it’s a well tuned database configuration running in 96 CPUs.&lt;/p&gt;

&lt;p&gt;It’s common to &lt;a href=&quot;https://shopify.engineering/a-pods-architecture-to-allow-shopify-to-scale&quot; target=&quot;\_blank&quot;&gt;implement application-level sharding&lt;/a&gt;, but that incurs higher complexity and (often) an open-heart surgery of production data. Sometimes, it’s much cheaper to do sharding on a layer below the application.&lt;/p&gt;

&lt;p&gt;This spawned the next generation of database offerings, such as &lt;a href=&quot;https://planetscale.com/&quot; target=&quot;\_blank&quot;&gt;PlanetScale&lt;/a&gt; (aka hosted Vitess), &lt;a href=&quot;https://aws.amazon.com/rds/aurora/&quot; target=&quot;\_blank&quot;&gt;Aurora&lt;/a&gt;, and &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/postgresql/hyperscale/overview&quot; target=&quot;\_blank&quot;&gt;Hyperscale&lt;/a&gt; (aka &lt;a href=&quot;https://www.citusdata.com/&quot; target=&quot;\_blank&quot;&gt;Citus&lt;/a&gt; managed by Microsoft). All of them give something that looks like the same relational MySQL or Postgres, but provides ‘automatic’ horizontal scaling behind.&lt;/p&gt;

&lt;p&gt;Same happened for non-relational databases like Redis. &lt;a href=&quot;https://redis.com/&quot; target=&quot;\_blank&quot;&gt;Redis Labs&lt;/a&gt; started from offering single Redis instances and moved to Redis Cluster that scales behind the scenes.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;This is a great time to run and sell value added infrastructure on compute, and the larger you get, the cheaper that infrastructure is for you to run due discounts and reservations from your cloud provider.&lt;/p&gt;

&lt;p&gt;Large companies would run things internally, but there’s a decent market for small and medium size companies who’re willing to pay for their databases to be hosted by someone, as hiring DBAs is even harder than hiring SREs.&lt;/p&gt;

&lt;p&gt;We’re starting to see the rise of managed, horizontally scalable databases as a service. Single instance databases would merely come as a thing for small apps, or as building block of orchestrated systems like &lt;a href=&quot;https://vitess.io/&quot; target=&quot;\_blank&quot;&gt;Vitess&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2021 in review</title>
   <link href="http://kirshatrov.com/posts/2021-in-review/">
   <updated>2021-12-31T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/2021-in-review</id>
   <content type="html">&lt;p&gt;It’s been &lt;a href=&quot;/posts/2017-in-review&quot; target=&quot;_blank&quot;&gt;a while&lt;/a&gt; since I published a year in review post! The last one was in 2018.&lt;/p&gt;

&lt;p&gt;2021 went so fast. For a big chunk of the year, I struggled with Covid restrictions and tried to moved away from them. I went from a poor mental health to being happier and surrounded by friends. I continued therapy which helped me to stay afloat.&lt;/p&gt;

&lt;h2 id=&quot;work&quot;&gt;Work&lt;/h2&gt;

&lt;p&gt;My team at Shopify and I continued working on the global infrastructure story, making it so the traffic is served world wide and the data is distributed in the best possible way for Shopify merchants. My team grew and I got really lucky getting some very bright minds on the project.&lt;/p&gt;

&lt;p&gt;5 years at Shopify came by, which meant it was time for me to take a 4 week sabbatical, paid by Shopify. I used that time to do some &lt;a href=&quot;/fabrication&quot; target=&quot;_blank&quot;&gt;woodworking and welding&lt;/a&gt; and to see my family. Crafting made me feel great about my skills and I can’t wait to do more carpenting projects.&lt;/p&gt;

&lt;p&gt;Towards September, I felt that I needed a bigger break to take care of myself. The last two years have been tough and I missed on so many opportunities to spend time outside of work because of Covid restrictions. That also led to my mental health not being in a great shape. I handed of my current work at Shopify and went on unpaid leave in October.&lt;/p&gt;

&lt;p&gt;Below are some points about my experience with long time off.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A work day defines your routines and habits: how you wake up and grab breakfast, how you go for lunch, how you disconnect from work in the evening and how you spend your time after work. Absence of a work day lets you completely rethink your habits and have them in any way you’d like.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You create the empty room in your mind by removing the activity that was the main source of your fulfilment. That empty room stays blank for a while, and after that you start having thoughts of the next thing that you might want to try. To me, that rarely came when my mind was busy with work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I always neglected exercising and sports, likely from the fact that my parents tried to enforce that when I was little. Now, that empty room I created had allowed me to start thinking about my body and self-care. I opened my mind and started investing into myself, with physiotherapy, gym and personal trainings.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I used to think in terms of my calendar and meeting slots, and I don’t anymore. I was able to untie myself from schedules and that’s kinda amazing. Sometimes I wake up at 8am and I feel energy, sometimes I don’t and I wake up at noon. It’s a completely blank space and I learned to enjoy it. And if you asked me 2 years ago if I’d take this sort of time off, I’d say never.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;travels&quot;&gt;Travels&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;525&quot; src=&quot;/assets/post-images/2021/IMG_1856.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I spent most of the year between London and Moscow. In total, I spent about a month in post-travel quarantining. In December, I got out to Georgia and enjoyed a stay and hike in mountains.&lt;/p&gt;

&lt;p&gt;In May, I’ve attempted a &lt;a href=&quot;https://www.sustrans.org.uk/find-other-routes/c2c-or-sea-to-sea&quot; target=&quot;_blank&quot;&gt;Coast to Coast&lt;/a&gt; cycling trip in the UK. I started feeling pain in my knee after the first 30km and I had to straight take a train back home. That was a bummer because I’ve done long distance bike trips in the past and I really enjoyed it.&lt;/p&gt;

&lt;p&gt;I’ve been doing physiotherapy since that, and attempted another - cancelled - bike trip in September. My knee still wasn’t in a great shape. The trip was supposed to be along Budapest, Vienna, Munich and Zurich.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;525&quot; src=&quot;/assets/post-images/2021/2021-09-20.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going on a plane with a bike is quite convinient though, and a lot easier than you might think.&lt;/p&gt;

&lt;p&gt;More physiotherapy and exercising and hopefully there will be a great cycling trip in summer 2022.&lt;/p&gt;

&lt;h2 id=&quot;body&quot;&gt;Body&lt;/h2&gt;

&lt;p&gt;The sabbatical and the knee situation pushed me to take better care of my body. I started exercising, in a gym doing power training with a coach, and in a studio with a stretching instructor. I’ve been going to massage every couple weeks.&lt;/p&gt;

&lt;p&gt;This year was the year of &lt;a href=&quot;https://en.wikipedia.org/wiki/Banya_(sauna)&quot; target=&quot;_blank&quot;&gt;banya&lt;/a&gt;. I tried to go at least once a week, and I managed to get a few friends into it too. I learned the art of making steam, including aroma steams. Garlic is my favourite so far!&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;256&quot; height=&quot;256&quot; src=&quot;/assets/post-images/2021/IMG_9770.jpg&quot; style=&quot;margin: 0 auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;It was a strange year. I had lots of personal changes, I moved, I had changes at work, and I started doing things that I haven’t done before.&lt;/p&gt;

&lt;p&gt;I’m looking forward to 2022, as it will bring new career challenges, healhier mental and physical shape, and some amazing time with loved ones.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fragmented prototyping</title>
   <link href="http://kirshatrov.com/posts/fragmented-prototyping/">
   <updated>2021-09-25T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/fragmented-prototyping</id>
   <content type="html">&lt;p&gt;You’re about to start a new project at work that has a large amount of uncertainty: you know that you want to achieve X, but you don’t necessarily know how, or maybe there’s three different ways to implement it and you don’t know what’s the best in your context.&lt;/p&gt;

&lt;p&gt;There comes throw-away prototyping (see Simon’s &lt;a href=&quot;https://sirupsen.com/drafts/&quot; target=&quot;\_blank&quot;&gt;Drafts&lt;/a&gt; as well). Prior to starting the project for real, you attempt to assemble a working prototype that you’d throw away later. The throw away part allows you to cut any corners you’d like, write quick and dirty code with no tests, all for the sake of learning how to build this right.&lt;/p&gt;

&lt;p&gt;Last year, when building a dirty prototype of Shopify’s Points of Presence (PoPs) project, we discovered an important detail of our integration point with CloudFlare that later significantly dictated the design when we were building it for real.&lt;/p&gt;

&lt;p&gt;You can think of prototyping as a &lt;a href=&quot;https://www.artlebedev.com/mandership/167/&quot; target=&quot;\_blank&quot;&gt;progressive JPEG method&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is a real simple time-management approach called Progressive JPEG. The method is characterized by every project being 100% complete at any given moment, although it might be only 4% detailed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But sometimes scope gets so big that it comes much harder to have the big picture and to prototype it a sensible amount of time.&lt;/p&gt;

&lt;p&gt;For those kinds of project, I suggest the model of &lt;strong&gt;Fragmented prototyping&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/progressive-jpeg-kirs.jpg&quot; class=&quot;px-5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of aiming for a full picture, you focus on the most challenging and unknown parts of the project.  Sometimes it’s the domain model. Sometimes it’s answering whether an existing open source framework or technology is the right choice. Sometimes it’s “would technology X fit 1000s of entities?”. I’ve seen many commercially advertised products not keep up with, say, the number of Kubernetes clusters or number of load balancers that we’d want to fit in there.&lt;/p&gt;

&lt;p&gt;This post was influenced by a recent example of project at work. It had to do a lot with infrastructure and databases, and streaming large quantities of data in a high level language like Go. The team and I focused on parts that were the most unknown and worked for two months playing with each of those components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/fragmented-prototyping.svg&quot; width=&quot;500&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In our exploration phase, we stayed away from the center piece. Instead, we focused on “fragments” that are in corners, and we finished the exploration being a lot more certain in those hard parts, having a good idea what technology and stack we could base this on. In other words, we worked out the riskiest things that could otherwise undermine the project later.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vitess: Scaling VReplication</title>
   <link href="http://kirshatrov.com/posts/scaling-vreplication/">
   <updated>2021-07-27T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/scaling-vreplication</id>
   <content type="html">&lt;p&gt;One of my projects at work has been involving Vitess and VReplication. I recently did a deep dive to figure out how VReplication works and where are its scalability bottlenecks. Below are my notes that I thought are worth sharing with the community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is VReplication?&lt;/strong&gt; To sum its &lt;a href=&quot;https://vitess.io/docs/reference/vreplication/vreplication/#exec&quot; target=&quot;\_blank&quot;&gt;docs&lt;/a&gt;, it’s a tool that lets you copy and maintain a live subset of data from one database to another – similar to Shopify’s &lt;a href=&quot;https://github.com/Shopify/ghostferry&quot; target=&quot;\_blank&quot;&gt;Ghostferry&lt;/a&gt;, but tailored for the Vitess’s world and with an orchestration layer on top of it.&lt;/p&gt;

&lt;p&gt;VReplication is a core component of Vitess that backs many of its features, but where does its code actually run?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Whenever you create a VReplication stream by executing a SQL statement like &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO _vt.vreplication (db_name, source, pos, ...)&lt;/code&gt;, VTTablet that is the &lt;strong&gt;destination&lt;/strong&gt; of the stream will create multiple goroutines per each stream:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A goroutine to manage the stream. This one will stop replication if you update the stream state to “Stopped” externally&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A goroutine to fetch binlog events from source over GRPC&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A goroutine to apply fetched binlog events&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A few goroutines to manage HTTP2/GRPC connection&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://gist.github.com/kirs/374acae18989ebf4e4a45fd7dff3b28f&quot; target=&quot;\_blank&quot;&gt;Full dump of goroutines&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With 152 streams running on a single VTTablet, I observed 11 goroutines running per a stream, making it 1672 goroutines to manage 152 streams.&lt;/p&gt;

&lt;p&gt;VTTablet’s Go process on the destination side of the stream will eventually become a &lt;strong&gt;bottleneck to run more streams than a single Go process can handle&lt;/strong&gt;. You might have to partition streams over multiple destinations to achieve a very high number of streams (in my case it has to be on the scale of tens of thousands streams).&lt;/p&gt;

&lt;h2 id=&quot;performance-of-initial-copy&quot;&gt;Performance of initial copy&lt;/h2&gt;

&lt;p&gt;Oversimplifying things, VReplication’s life cycle consists of two parts: &lt;strong&gt;initial copy&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT + INSERT&lt;/code&gt;) and the ongoing &lt;strong&gt;stream of data from a binlog&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s important that the initial copy of existing rows (as opposed to streaming from binlog) takes sensible time. To benchmark that, I have populated a table with 5M rows, each row of approximately 13Kb in size - making it 65Gb in total.&lt;/p&gt;

&lt;p&gt;I observed the table taking &lt;strong&gt;90 minutes to copy those 65 Gb&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[14:18:31 vcopier.go:201] Copying table orders, lastpk: &amp;lt;nil&amp;gt;
[15:49:11 vcopier.go:328] Copy of orders finished at lastpk: map[lastpk:type:VARBINARY value:&quot;fields:{name:\&quot;tenant_id\&quot; type:INT64} fields:{name:\&quot;id\&quot; type:INT64} rows:{lengths:3 lengths:7 values:\&quot;1004893000\&quot;}&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Tip: vttablet logs contain timestamps when a table started/finished to copy:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl logs production-vttablet-zone1-0428408676-c778c4e9 -f -c vttablet
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that VTTablet comes with the &lt;code class=&quot;highlighter-rouge&quot;&gt;vstream_packet_size&lt;/code&gt; setting that is advised to be adjusted to increase the throughput of the copy. The smaller it is, the more back-and-forth gRPC traffic we will see between vstreamer and vcopier: those will be more batches (smaller batches) of data sent from source to destination. I performed my test with &lt;code class=&quot;highlighter-rouge&quot;&gt;vstream_packet_size = 500’000&lt;/code&gt; which is double the default value. That significantly increased copy speed on smaller sets than 5M.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;90 minutes to copy 65 Gb is ~722 Mb/min, or 12 Mb/sec&lt;/strong&gt;, which is not even close to network or disk bandwidth limits. The bottleneck is likely still in between Vitess abstractions or in GRPC.&lt;/p&gt;

&lt;p&gt;It has to be noted that Vitess copies tables that are part of the same stream &lt;strong&gt;serially&lt;/strong&gt;, which means that two 65 Gb tables would take 180 minutes to copy, not 90 minutes. This seems really wasteful given that we’d want to copy a lot of tables and it could be done in &lt;strong&gt;parallel&lt;/strong&gt;. We’d likely have to change that part of VReplication’s behavior.&lt;/p&gt;

&lt;h2 id=&quot;performance-of-binlog-streaming&quot;&gt;Performance of binlog streaming&lt;/h2&gt;

&lt;p&gt;After VReplication is done copying existing rows, it will begin to stream the binlog to capture live changes. You can specify if you want VReplication to stream from a master or from a replica. Replicating from the master gives an advantage of no replication lag and that’s what I tried at first. I observed that (as expected) the data it copied was not lagged while the replica was lagged by hours. But above 50~ replication streams it seems like it’s too much load on the master, and changing VReplication to stream from a replica showed better scalability - largely because you can throw more replicas at it. However, the data in destination was as much lagged as the replica itself.&lt;/p&gt;

&lt;p&gt;Eventually I was able to push that to as many as &lt;strong&gt;400 streams&lt;/strong&gt; without breaking, processing &lt;strong&gt;a binlog that had throughput of 330 mb/s&lt;/strong&gt;. The data copied with VReplication wasn’t delayed more than the replica itself which is a sign that the Go stack was keeping up with those 330 mb/s of binlogs.&lt;/p&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;Controlling many VReplication streams as part of my experiments was tricky because the CLI tool to manage it mostly designed for machines, not for humans. Vitess docs even recommend a tiny &lt;a href=&quot;https://github.com/vitessio/contrib/blob/master/vreplgen/vreplgen.go&quot; target=&quot;\_blank&quot;&gt;Go program&lt;/a&gt; that would generate shell commands to start VReplication.&lt;/p&gt;

&lt;p&gt;To manage my experiments, I wrote a scrappy &lt;a href=&quot;https://gist.github.com/kirs/d169c1534320c9e5f16b14007effcf22&quot; target=&quot;\_blank&quot;&gt;ruby script&lt;/a&gt; that allowed me to list, create, and delete streams without having to craft and escape SQL statements. Feel free to use it for your projects!&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vitessio/vitess/issues/8056&quot; target=&quot;\_blank&quot;&gt;Analyzing VReplication behavior&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Quick way to run a Ruby script in Kubernetes</title>
   <link href="http://kirshatrov.com/posts/quick-ruby-script-in-k8s/">
   <updated>2021-07-21T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/quick-ruby-script-in-k8s</id>
   <content type="html">&lt;p&gt;Sometimes I find myself in need of running a Ruby script on a live Kubernetes cluster. In today’s example, it had to do with generating load on MySQL, which was tricker to do from my laptop. The script had to run close to the workload in the cluster.&lt;/p&gt;

&lt;p&gt;I’m lazy and having to build and push a Docker container with my script would be a lot of extra work.&lt;/p&gt;

&lt;p&gt;Luckily, thanks to K8S config maps and to Bundler &lt;a href=&quot;https://bundler.io/guides/bundler_in_a_single_file_ruby_script.html&quot; target=&quot;\_blank&quot;&gt;inline mode&lt;/a&gt;, this can be achieved without having to build a custom container.&lt;/p&gt;

&lt;p&gt;First, let’s create a config map with our code:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;writer.rb&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;require 'bundler/inline'&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;gemfile do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;source 'https://rubygems.org'&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;gem 'mysql2'&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;require 'mysql2'&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;client = Mysql2::Client.new(database: 'commerce')&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;loop { client.query(&quot;select * from orders&quot;) }&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;# more code follows...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then the deployment that pulls &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby:2.7&lt;/code&gt; image and runs the file from our config map.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby:2.7&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ruby&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/app/writer.rb&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app/writer.rb&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;subPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;writer.rb&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;configMap&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;load-generator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All you need is &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -f&lt;/code&gt; YAMLs above and you’ll have your script running.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Global infrastructure expansion</title>
   <link href="http://kirshatrov.com/posts/global-infra-expansion/">
   <updated>2021-05-11T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/global-infra-expansion</id>
   <content type="html">&lt;p&gt;Having been working on the global expansion of Shopify’s infrastructure footprint, I noticed there’s at least two patterns of you can follow when deploying a web service globally for both latency and reliability improvements.&lt;/p&gt;

&lt;h2 id=&quot;single-source-of-truth--edge-compute&quot;&gt;Single source of truth + edge compute&lt;/h2&gt;

&lt;p&gt;You leverage the edge compute (either with your own proxy deployment or with CloudFlare) to cache responses of your app that’s running in a single location.&lt;/p&gt;

&lt;p&gt;The challenge comes with expiring those edge-cached responses: once the data has changes in the source of truth, it has to tell &lt;em&gt;every&lt;/em&gt; edge that cache has to be expired.&lt;/p&gt;

&lt;p&gt;Having 200+ points of presence on the edge (the Cloudflare’s &lt;a href=&quot;https://www.cloudflare.com/en-gb/network/&quot; target=&quot;\_blank&quot;&gt;number&lt;/a&gt;) combined with frequent updates could make this multiplexing either wasteful (single update to source does a fan-out to &lt;em&gt;every&lt;/em&gt; edge), or you have to get really good at your cache keys. The &lt;a href=&quot;https://blog.cloudflare.com/introducing-a-powerful-way-to-purge-cache-on-cloudflare-purge-by-cache-tag&quot; target=&quot;\_blank&quot;&gt;Cache-Tag way by CloudFlare&lt;/a&gt; might be a great solution for this.&lt;/p&gt;

&lt;p&gt;For infrequently updated data, this solution could be simple and very cost effective, without having to replicate databases yourself like the other path below suggests.&lt;/p&gt;

&lt;h2 id=&quot;regional-compute--replication&quot;&gt;Regional compute + replication&lt;/h2&gt;

&lt;p&gt;In comparison with the previous way, we do not involve edge and instead deploy &lt;strong&gt;regional compute&lt;/strong&gt;. The difference is that regional compute assumes only having some presence on each continent. Something like 5-8 regions makes it enough to cover the most of the world. This is different from the edge approach where you may end up having &lt;a href=&quot;https://www.cloudflare.com/en-gb/network/&quot; target=&quot;\_blank&quot;&gt;hundreds&lt;/a&gt; of points of presence.&lt;/p&gt;

&lt;p&gt;Then you could either shard your workloads by a region, but something that’s not feasible. In that case you can choose to &lt;strong&gt;replicate data from your single source of truth into the regional compute&lt;/strong&gt;. It depends on your data store of choice, but normally this would be just another replica in your PostgreSQL/MySQL/ElasticSearch topology.&lt;/p&gt;

&lt;p&gt;This works quite well with dynamic but read-only workloads, say templated pages that might need to fetch arbitrary rows from the database - stuff that’s way harder to do on the edge.&lt;/p&gt;

&lt;p&gt;It’s worth mentioning that running regional compute can get more expensive because of storage costs that now multiple by the number of regions you use - unless you can somehow replicate selectively.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Every app and business is unique and the mental model I presented may not work for everyone. Please share your findings or alternative paths that you see.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Materializing tables with Vitess</title>
   <link href="http://kirshatrov.com/posts/vitess-materialize/">
   <updated>2021-05-10T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/vitess-materialize</id>
   <content type="html">&lt;p&gt;I wrote this post as I was playing with materializing tables in Vitess. I find that there’s not that many resources online that walk through Vitess features. I hope this post is useful for whoever is looking at Vitess capabilities.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s imagine an example of the following schema in an abstract ecommerce app:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`products`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`tenant_id`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`product_type`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the rendering layer of the ecommerce app, you may find the following query appear as a hot one:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DISTINCT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product_type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenant_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tenant_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem is, this query is O(N) complex and it might take significant I/O time to execute. Even if you cache it heavily, cache misses would be slow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s see how we can leverage &lt;a href=&quot;https://vitess.io/docs/reference/vreplication/materialize/&quot; target=&quot;\_blank&quot;&gt;materialize&lt;/a&gt; feature that comes with Vitess and build results of that table ahead of time.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;experiment&quot;&gt;Experiment&lt;/h2&gt;

&lt;p&gt;We’ll assume the &lt;code class=&quot;highlighter-rouge&quot;&gt;commerce&lt;/code&gt; schema has our &lt;code class=&quot;highlighter-rouge&quot;&gt;products&lt;/code&gt; table, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;storefront&lt;/code&gt; schema is where we want stuff to be materialized.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- create materialized table on storefront keyspace&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`product_types_by_tenant`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`tenant_id`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bigint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`product_type`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`index_tenant_id_and_product_type`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`tenant_id`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`product_type`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Creating a materialized view is as easy as:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vtctlclient Materialize &lt;span class=&quot;s1&quot;&gt;'{&quot;workflow&quot;: &quot;product_types_by_tenant&quot;, &quot;source_keyspace&quot;: &quot;commerce&quot;, &quot;target_keyspace&quot;: &quot;storefront&quot;,
    &quot;table_settings&quot;: [{&quot;target_table&quot;: &quot;product_types_by_tenant&quot;,
    &quot;source_expression&quot;: &quot;select tenant_id, product_type from products group by tenant_id, product_type&quot;}],
    &quot;cell&quot;: &quot;zone1&quot;, &quot;tablet_types&quot;: &quot;REPLICA&quot;}'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# to monitor&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vtctlclient  Workflow storefront.product_types_by_tenant show
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT tenant_id, product_type FROM products GROUP BY tenant_id, product_type&lt;/code&gt; is our query that is passed as an argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;Materialize&lt;/code&gt;. It will get us the same result as &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT DISTINCT product_type&lt;/code&gt; does for a single shop. Check &lt;a href=&quot;https://vitess.io/docs/reference/vreplication/materialize/&quot; target=&quot;\_blank&quot;&gt;materialize docs&lt;/a&gt; to see how the rest of arguments are built.&lt;/p&gt;

&lt;p&gt;If you’re curious how the status of the stream looks like:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Workflow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;product_types_by_tenant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;SourceLocation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Keyspace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commerce&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Shards&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TargetLocation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Keyspace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;storefront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Shards&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;MaxVReplicationLag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ShardStatuses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;-/zone1-0428408676&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;MasterReplicationStatuses&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Shard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Tablet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;zone1-0428408676&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Bls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keyspace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commerce&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;shard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;product_types_by_tenant&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select tenant_id, product_type from products group by tenant_id, product_type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Pos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MySQL56/53df5a9f-a5d0-11eb-a395-ce273039402d:1-282,549e34c6-a5d0-11eb-b33a-6a94ed0715c9:1-771072&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StopPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;State&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Running&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;DBName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vt_storefront&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TransactionTimestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1620643932&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TimeUpdated&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1620643933&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;CopyState&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;TabletControls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;MasterIsServing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# query from source&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mysql commerce -e &lt;span class=&quot;s1&quot;&gt;'SELECT DISTINCT product_type FROM products WHERE tenant_id = 1'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# query from materialized&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mysql storefront -e &lt;span class=&quot;s1&quot;&gt;'SELECT product_type FROM product_types_by_tenant WHERE tenant_id = 1'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Results of these two statements become identical – the only difference is that the latter is a lot more efficient.&lt;/p&gt;

&lt;h2 id=&quot;things-to-note&quot;&gt;Things to note&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Schema changes.&lt;/strong&gt; You can manage do perform a schema change that would break your materialize stream. I applied &lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE products ADD some_new_column VARCHAR(255)&lt;/code&gt; just to see if it breaks and the stream stayed healthy. That means it should work fine for new columns added, but I still think it would break if you do anything to materilized columns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Limited queries.&lt;/strong&gt; Unfortunately, the subset of &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; you can do in the materialized query is limited. It only supports simple &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clauses and it doesn’t support &lt;code class=&quot;highlighter-rouge&quot;&gt;JOINs&lt;/code&gt;. Browse &lt;a href=&quot;https://github.com/vitessio/vitess/blob/579bb705b7e39a0970f6c5b092ebc415e366cd60/go/vt/vttablet/tabletmanager/vreplication/replicator_plan_test.go&quot; target=&quot;\_blank&quot;&gt;replicator_plan_test.go&lt;/a&gt; to see what kind of queries are supported.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Performance.&lt;/strong&gt; There are concerns with VReplication’s performance that might become a problem on large tables with heavy write throughput. Hopefully those will be addressed soon.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/vitessio/vitess/issues/7997&quot; target=&quot;\_blank&quot;&gt;https://github.com/vitessio/vitess/issues/7997&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/vitessio/vitess/issues/8056&quot; target=&quot;\_blank&quot;&gt;https://github.com/vitessio/vitess/issues/8056&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Failure modes&lt;/strong&gt;. If something breaks and you restart &lt;code class=&quot;highlighter-rouge&quot;&gt;VReplicationExec&lt;/code&gt;, you’re the one responsible to keep the table clean. There’s nothing there that would verify that a half-copied table is correct.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m excited to see technologies like Vitess making complex stuff like replicating and denormalizing a subset of data so much easier, and I’m looking forward for more investments to come into the Vitess ecosystem.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Talking to Vitess over GRPC from Ruby</title>
   <link href="http://kirshatrov.com/posts/vitess-ruby-grpc/">
   <updated>2021-05-02T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/vitess-ruby-grpc</id>
   <content type="html">&lt;p&gt;After you’ve got to run a simple Vitess cluster with a few databases, you might want to automate some of the stuff, for instance if you’re doing lots of &lt;a href=&quot;https://vitess.io/docs/reference/vreplication/reshard/&quot; target=&quot;\_blank&quot;&gt;resharding&lt;/a&gt; or &lt;a href=&quot;https://vitess.io/docs/user-guides/migration/move-tables/&quot; target=&quot;\_blank&quot;&gt;vertical splits&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How do you &lt;strong&gt;script&lt;/strong&gt; interactions with Vitess? You could have a Bash script do all the &lt;code class=&quot;highlighter-rouge&quot;&gt;vtctlclient&lt;/code&gt; work, but at some point that would become fragile.&lt;/p&gt;

&lt;p&gt;Vitess provides world-class Go APIs, but for something that I wanted to experiment with, Ruby was be a better fit.&lt;/p&gt;

&lt;p&gt;In this post I wanted to share how I got to &lt;strong&gt;talk to Vitess through GRPC from Ruby&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;grpc-adventures&quot;&gt;GRPC adventures&lt;/h2&gt;

&lt;p&gt;GRPC relies on code generating. That’s a bit unusual if you come from the Ruby ecosystem but nevertheless.&lt;/p&gt;

&lt;p&gt;You have to install the &lt;code class=&quot;highlighter-rouge&quot;&gt;grpc-tools&lt;/code&gt; gem that ships codegenerating tools.&lt;/p&gt;

&lt;p&gt;Once you have it installed you should be able to run something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grpc_tools_ruby_protoc -I /Users/kirs/src/github.com/vitessio/vitess/proto --ruby_out=lib --grpc_out=lib /Users/kirs/src/github.com/vitessio/vitess/proto/*.proto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yes – you’re supposed to have the Vitess repo cloned (in my case, to &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/kirs/src/github.com/vitessio/vitess&lt;/code&gt;) to generate Ruby classes based on protobuf definitions that live in the &lt;code class=&quot;highlighter-rouge&quot;&gt;proto/&lt;/code&gt; dir in the Vitess repo. &lt;code class=&quot;highlighter-rouge&quot;&gt;--ruby_out=lib --grpc_out=lib&lt;/code&gt; tells it to output generated Ruby code into &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; of your local project.&lt;/p&gt;

&lt;p&gt;After generating the code from protobufs your &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt;/ would look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tree lib
lib
├── automation_pb.rb
├── automationservice_pb.rb
├── automationservice_services_pb.rb
├── binlogdata_pb.rb
├── binlogservice_pb.rb
...
├── vtrpc_pb.rb
├── vttest_pb.rb
├── vttime_pb.rb
├── vtworkerdata_pb.rb
├── vtworkerservice_pb.rb
├── vtworkerservice_services_pb.rb
└── workflow_pb.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you have enough code to call GRPC commands on Vitess.&lt;/p&gt;

&lt;h2 id=&quot;two-ways&quot;&gt;Two ways&lt;/h2&gt;

&lt;p&gt;Let’s imagine you want to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;VReplicationExec&lt;/code&gt; RPC. There’s at least two ways to do that.&lt;/p&gt;

&lt;p&gt;One way would be to talk to &lt;em&gt;vtctld&lt;/em&gt;, the top level topology service.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vtctlservice_pb'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vtctlservice_services_pb'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Vtctlservice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Vtctl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;address-of-vtctld&amp;gt;:15999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:this_channel_is_insecure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tablet_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;zone1-0428408676&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute_vtctl_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Vtctldata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExecuteVtctlCommandRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;args: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VReplicationExec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tablet_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select id from _vt.vreplication&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;execute_vtctl_command&lt;/code&gt; in a generic RPC call that takes a name of another RPC (&lt;code class=&quot;highlighter-rouge&quot;&gt;VReplicationExec&lt;/code&gt;) as the first argument, following the actual arguments. And at the end you have to parse result as JSON.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another way&lt;/strong&gt; that involves less manual actions is sending RPC to the actual &lt;em&gt;vttablet address&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tabletmanagerdata_pb'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tabletmanagerservice_services_pb'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Tabletmanagerservice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TabletManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Stub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;address-of-vttablet&amp;gt;:15999'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:this_channel_is_insecure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;v_replication_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tabletmanagerdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VReplicationExecRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select id from _vt.vreplication&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &amp;lt;Tabletmanagerdata::VReplicationExecResponse: result: &amp;lt;Query::QueryResult: fields: [&amp;lt;Query::Field: name: &quot;id&quot;, type: :INT32, table: &quot;vreplication&quot;, org_table: &quot;vreplication&quot;, database: &quot;_vt&quot;, org_name: &quot;id&quot;, column_length: 11, charset: 63, decimals: 0, flags: 49667, column_type: &quot;&quot;&amp;gt;], rows_affected: 0, insert_id: 0, rows: []&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can notice that the response comes already parsed.&lt;/p&gt;

&lt;p&gt;What took me a while to understand is that I have to be mindful about the GRPC endpoint address. It’s easy to send an RPC that’s meant for vttablet to vtctld instead, and get error message like &lt;code class=&quot;highlighter-rouge&quot;&gt;unknown service vtctlservice.Vtctl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I found myself looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;*.proto&lt;/code&gt; files, then referencing them to the generated Ruby code, then trying stuff in IRB session.&lt;/p&gt;

&lt;p&gt;Working with GRPC in Ruby is not ideal and feels unusual, but that’s the price to pay for strictly typed remote procedure calls that has its benefits.&lt;/p&gt;

&lt;p&gt;Enjoy your hacking with Vitess from Ruby.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Throttling database load with Vitess</title>
   <link href="http://kirshatrov.com/posts/vitess-throttling/">
   <updated>2021-05-02T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/vitess-throttling</id>
   <content type="html">&lt;p&gt;In his Percona Live 2020 &lt;a href=&quot;https://www.youtube.com/watch?v=iQYZ0dRe7O8&quot; target=&quot;\_blank&quot;&gt;talk&lt;/a&gt;, &lt;a href=&quot;https://github.com/shlomi-noach&quot; target=&quot;\_blank&quot;&gt;Shlomi Noach&lt;/a&gt; pointed out that he sees Vitess is an &lt;em&gt;infrastructure framework&lt;/em&gt; that would let everyone get database capabilities that you’d otherwise have to build yourself.&lt;/p&gt;

&lt;p&gt;At Shopify, we’ve built our own system that lets us keep track of database health and replication lag, to throttle clients (mostly, background jobs) accordingly. It took us quite a bit of efforts to build that and to make it work at scale to handle 1000s of MySQL hosts.&lt;/p&gt;

&lt;p&gt;I’m really excited about technologies like Vitess (and its direction as an infrastructure framework) that could bring capabilities like throttling database operations to everyone, not just to large companies like Shopify and Github that had resources &lt;a href=&quot;https://github.blog/2017-10-13-mitigating-replication-lag-and-reducing-read-load-with-freno/&quot; target=&quot;\_blank&quot;&gt;to invest&lt;/a&gt; into a custom solution.&lt;/p&gt;

&lt;p&gt;Not that long ago Vitess has got the &lt;a href=&quot;https://vitess.io/docs/reference/features/tablet-throttler/&quot; target=&quot;\_blank&quot;&gt;throttling capability available&lt;/a&gt; and as soon I found about that this weekend, I was eager to try it and to sum my impressions.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-cluster&quot;&gt;Setting up the cluster&lt;/h2&gt;

&lt;p&gt;We’ll follow &lt;a href=&quot;https://vitess.io/docs/get-started/operator/&quot; target=&quot;\_blank&quot;&gt;Get Started guide for the Vitess Operator&lt;/a&gt; to set up a dummy Vitess cluster.&lt;/p&gt;

&lt;p&gt;Side note: I found Vitess Operator to be very easy to use; it cover all my basic needs and &lt;a href=&quot;https://docs.planetscale.com/vitess-operator/api&quot; target=&quot;\_blank&quot;&gt;its documentation&lt;/a&gt; is good enough to not have to go to sources.&lt;/p&gt;

&lt;p&gt;I’m going to use a GKE cluster because that’s what I’m familliar the most, but you could as well use Minikube or another Kubernetes offering.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a tiny cluster&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud container clusters create sample-vitess-cluster --cluster-version 1.17 --zone us-east1-b --num-nodes 5

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone git@github.com:vitessio/vitess.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vitess/examples/operator

&lt;span class=&quot;c&quot;&gt;# before running kubectl, make sure to select the context with newly created cluster&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install vitess operator&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f operator.yaml

&lt;span class=&quot;c&quot;&gt;# provision VitessCluster&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f 101_initial_cluster.yaml

&lt;span class=&quot;c&quot;&gt;# port-forward to the cluster&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./pf.sh

&lt;span class=&quot;c&quot;&gt;# install vtctlclient if you haven't yet&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;go get vitess.io/vitess/go/cmd/vtctlclient

&lt;span class=&quot;c&quot;&gt;# setup the schema&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vtctlclient ApplySchema -sql&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat create_commerce_schema.sql&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; commerce
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vtctlclient ApplyVSchema -vschema&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat vschema_commerce_initial.json&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; commerce
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you have the cluster running! With &lt;code class=&quot;highlighter-rouge&quot;&gt;pf.sh&lt;/code&gt; running you have ports forwarded which should allow you to connect to it with &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -h 127.0.0.1 -P 15306 -u user&lt;/code&gt; and explore things a bit.&lt;/p&gt;

&lt;h2 id=&quot;enabling-throttler&quot;&gt;Enabling throttler&lt;/h2&gt;

&lt;p&gt;Following the &lt;a href=&quot;https://vitess.io/docs/reference/features/tablet-throttler/&quot; target=&quot;\_blank&quot;&gt;throttler docs&lt;/a&gt; we can find that the throttler is currently disabled by default. We have to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;-enable-lag-throttler&lt;/code&gt; to vttablet to enable it.&lt;/p&gt;

&lt;p&gt;The Vitess Operator makes that very easy:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;diff --git a/examples/operator/101_initial_cluster.yaml b/examples/operator/101_initial_cluster.yaml
index 8df5c19c8..f2e5de108 100644
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;--- a/examples/operator/101_initial_cluster.yaml
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+++ b/examples/operator/101_initial_cluster.yaml
&lt;/span&gt;&lt;span class=&quot;gu&quot;&gt;@@ -62,6 +62,7 @@ spec:
&lt;/span&gt;             vttablet:
               extraFlags:
                 db_charset: utf8mb4
&lt;span class=&quot;gi&quot;&gt;+                &quot;enable-lag-throttler&quot;: &quot;true&quot;
&lt;/span&gt;               resources:
                 requests:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can apply modified YAML with the same &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl apply -f 101_initial_cluster.yaml&lt;/code&gt; that we’ve used above.&lt;/p&gt;

&lt;p&gt;We will also need to somehow let the app talk to the throttler endpoint on vttablet over HTTP.&lt;/p&gt;

&lt;p&gt;By default the Vitess operator does not expose it, so we’ll create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; ourselves:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example-vttablet-commerce&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;planetscale.com/component&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vttablet&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;planetscale.com/keyspace&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;commerce&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;planetscale.com/cluster&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15000&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grpc&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;15999&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grpc&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metrics&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9104&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;metrics&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that our service points specifically to the &lt;em&gt;vttablet&lt;/em&gt; of the &lt;em&gt;commerce&lt;/em&gt; keyspace. That will allow our app to talk to the throttler endpoint on &lt;code class=&quot;highlighter-rouge&quot;&gt;http://example-vttablet-commerce.default.svc.cluster.local:15000/throttler/check&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’d like, you could run &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl port-forward service/example-vttablet-commerce 15000&lt;/code&gt; and browse &lt;a href=&quot;http://localhost:15000/&quot; target=&quot;\_blank&quot;&gt;http://localhost:15000/&lt;/a&gt; to see vttablet’s internal dashboard.&lt;/p&gt;

&lt;p&gt;And if you visit &lt;a href=&quot;http://localhost:15000/throttler/check&quot; target=&quot;\_blank&quot;&gt;http://localhost:15000/throttler/check&lt;/a&gt; via &lt;em&gt;curl&lt;/em&gt; or a browser, you could preview the throttler endpoint that we’re going to hit from the script. Here’s how it looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;StatusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.243247&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Threshold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;Message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;Value&lt;/code&gt; is greater than the &lt;code class=&quot;highlighter-rouge&quot;&gt;Threshold&lt;/code&gt;, you’ll see &lt;code class=&quot;highlighter-rouge&quot;&gt;StatusCode&lt;/code&gt; not equal 200. That means that the client should throttle.&lt;/p&gt;

&lt;h3 id=&quot;throttled-client&quot;&gt;Throttled client&lt;/h3&gt;

&lt;p&gt;We have everything ready – let’s create a sample script that heavily writes to the database and checks for throttling. I’m going to use Ruby as my language of choice.&lt;/p&gt;

&lt;p&gt;To stress the database even more we’ll employ multiple threads in the script.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/inline'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gemfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://rubygems.org'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'net/http'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;THROTTLER_URI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://example-vttablet-commerce.default.svc.cluster.local:15000/throttler/check'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;connecting...&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;db_healthy?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;THROTTLER_URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Unhealthy would return 429&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StatusCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;example-vtgate-ae7df4b6.default.svc.cluster.local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;port: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3306&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db_healthy?&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;throttling!&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, 'SKU-1001', &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;insert into corder(customer_id, sku, price) values &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The script creates a MySQL client per thread (that’s important because the connection cannot be shared by threads) and each thread does a batch insert of 1000 rows at once.&lt;/p&gt;

&lt;h2 id=&quot;running-the-experiment&quot;&gt;Running the experiment&lt;/h2&gt;

&lt;p&gt;You should find a way to run the script in the same Kubernetes cluster, either by putting it into an existing app or by building a new Docker image.&lt;/p&gt;

&lt;p&gt;As soon as the script is running, you can follow vttablet’s stats on &lt;a href=&quot;http://localhost:15000/&quot; target=&quot;\_blank&quot;&gt;http://localhost:15000/&lt;/a&gt;. There you’ll see the &lt;strong&gt;sawtooth-like QPS chart&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;715&quot; height=&quot;404&quot; src=&quot;/assets/post-images/vitess-throttle.png&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The sawtooth shows that clients perform writes and then backoff, and then write again as database health recovers. It works!&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;When doing the online schema migration, writing a backfill, or importing data into the database, it’s important that clients check the database health before writing. This little demo shows how that can be accomplished with what Vitess gives you. Make sure to read the &lt;a href=&quot;https://vitess.io/docs/reference/features/tablet-throttler/&quot; target=&quot;\_blank&quot;&gt;full guide&lt;/a&gt; that describes all features all the throttler.&lt;/p&gt;

&lt;p&gt;Here are some things that I’d keep in mind if I was to roll this into production:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vttablet runs next to the MySQL process. If the HTTP call to throttler would get on a hot or critical path, you would really not want all network bandwith of MySQL host to be eaten by calls to the throttler from a variety of clients. It’s important that clients use some sort of &lt;strong&gt;caching&lt;/strong&gt; when querying the throttler. For instance, freno &lt;a href=&quot;https://github.com/github/freno-client&quot; target=&quot;\_blank&quot;&gt;does&lt;/a&gt; suggests to use a read-trough cache.&lt;/li&gt;
  &lt;li&gt;Your application has to decide what &lt;em&gt;vttablet&lt;/em&gt; it needs to hit to check if it needs to throttle. That somewhat defeats the purpose of Vitess in the way of keeping clients dumb and unaware of the DB topology. I’d like to eventually put the throttle check into &lt;code class=&quot;highlighter-rouge&quot;&gt;vtgate&lt;/code&gt;, the SQL proxy in front of Vitess.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I’m super excited to see Vitess making things like throttling super easy from the infrastructure point of view.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vitess: scrappy notes</title>
   <link href="http://kirshatrov.com/posts/vitess-notes/">
   <updated>2021-02-09T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/vitess-notes</id>
   <content type="html">&lt;p&gt;I’ve been playing with &lt;a href=&quot;https://vitess.io/&quot; target=&quot;\_blank&quot;&gt;Vitess&lt;/a&gt; at work, and I’ve been finding it extremely hard to Google for common issues and error messages from Vitess. While the official docs are improving, there’s a general lack of stack overflow -like tips for fixing silly errors. I decided to keep my own log in this post, partially for myself.&lt;/p&gt;

&lt;h2 id=&quot;vitess-on-ci&quot;&gt;Vitess on CI&lt;/h2&gt;

&lt;p&gt;Vitess ships with a test server that gives you a quick way to run it on CI or for local development. I found it extremely easy to run and it worked really well.&lt;/p&gt;

&lt;p&gt;Here’s a docker-compose snippet that my collegue Hormoz and I have worked out:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose format&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;vttest&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vitess/vttestserver:mysql57&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/vt/bin/vttestserver&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-alsologtostderr&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-port=2222&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-mysql_bind_host=0.0.0.0&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-vschema_ddl_authorized_users=%&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# comma-separated list of keyspaces&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-keyspaces=unsharded,sharded,archive&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# number of shards per each keyspace&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-num_shards=1,2,1&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# in case you want to mount vschema definitions:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# - &quot;-schema_dir=/db/vitess/schema&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;populating-schemas&quot;&gt;Populating schemas&lt;/h2&gt;

&lt;p&gt;To run tests on CI you’d want to populate Vitess instance with a schema. There’s at least two ways to do that.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The easiest way: populating through &lt;code class=&quot;highlighter-rouge&quot;&gt;vschema.json&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;You can choose to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;-schema_dir&lt;/code&gt; and mount a directory that would have a matching hierarhy of keyspace name and &lt;code class=&quot;highlighter-rouge&quot;&gt;vschema.json&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Populating manually with DDLs
    &lt;ul&gt;
      &lt;li&gt;You can also choose to have your own script execuring &lt;code class=&quot;highlighter-rouge&quot;&gt;alter vschema&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;create table&lt;/code&gt; on the test server&lt;/li&gt;
      &lt;li&gt;This is a bit more complex but provides flexibility if you want the set of tables to be dynamic&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Through CLI with &lt;code class=&quot;highlighter-rouge&quot;&gt;vtctl ApplyVSchema&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;This will require &lt;code class=&quot;highlighter-rouge&quot;&gt;vtctl&lt;/code&gt; to be available which is generally not the case in your app’s CI container&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vschema-ddls&quot;&gt;VSchema DDLs&lt;/h2&gt;

&lt;p&gt;If you try to run &lt;code class=&quot;highlighter-rouge&quot;&gt;alter vschema&lt;/code&gt; on the test server, you’ll likely run into:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alter vschema add table sharded.products;
ERROR 1045 (HY000): vtgate: http://a90e850de0ed:2222/: not authorized to perform vschema operations
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’ll want to run the test server with this flag to allow any users to manipulate vschema:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-vschema_ddl_authorized_users=%
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;errors-in-vschemajson&quot;&gt;Errors in vschema.json&lt;/h2&gt;

&lt;p&gt;If you decide to populate VSchema through mounting a &lt;code class=&quot;highlighter-rouge&quot;&gt;vschema.json&lt;/code&gt; file, on a malformed JSON schema you’ll see the process crash with an error like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main.go:162] initTabletMapProto failed: cannot load vschema file /schema/sharded/vschema.json for keyspace sharded: json: cannot unmarshal object into Go value of type []json.RawMessage
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While something there gives you a pointer that JSON cannot be matched into Go value, I found this error quite confusing and I had to navigate into Vitess sources to look up what schema/protobuf the JSON is expected to be. That let me find out that what had to be an array was a map in my case.&lt;/p&gt;

&lt;h2 id=&quot;making-application-ready-for-sharding&quot;&gt;Making application ready for sharding&lt;/h2&gt;

&lt;p&gt;If you’re onboarding existing app to Vitess, you’ll likely have some queries fail because they’re not ready to be sharded or not compatible with Vitess.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Minitest::UnexpectedError: ActiveRecord::StatementInvalid: Mysql2::Error: vtgate: unsupported: You can't update primary vindex columns. Invalid update on vindex: hash
    app/models/product.rb:253:in `publish'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What makes it harder to debug is that you don’t see the full SQL query that failed. As I was making it work in a Rails app, I’ve added the following CI-only patch to Rails to log all queries that failed on vtgate.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ConnectionAdapters&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractAdapter&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;VitessErrorLogger&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vtgate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[VITESS] &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[VITESS] Full sql:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AbstractAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VitessErrorLogger&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I might refresh this post with more things that I run into.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Five years at Shopify</title>
   <link href="http://kirshatrov.com/posts/five-years-at-shop/">
   <updated>2021-01-20T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/five-years-at-shop</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/post-images/five-years-at-shop.png&quot; width=&quot;250&quot; alt=&quot;&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This week I have celebrated a five year anniversary working at Shopify, one of the world’s biggest ecommerce platforms. It’s been an incredible journey and I’d like to use this anniversary as a chance to reflect about my time at Shopify.&lt;/p&gt;

&lt;h2 id=&quot;where-i-was-coming-from&quot;&gt;Where I was coming from&lt;/h2&gt;

&lt;p&gt;Prior to Shopify I was at &lt;a href=&quot;https://evilmartians.com/&quot; target=&quot;\_blank&quot;&gt;Evil Martians&lt;/a&gt;, a product development consultancy. That’s probably the best smaller size company that I could have ever worked at. Martian’s culture has allowed me to work on open source, speak at conferences like RailsConf, and work with high profile clients from Y Combinator and the &lt;em&gt;Fortune 500&lt;/em&gt; list.&lt;/p&gt;

&lt;p&gt;As much as I enjoyed staying there, at certain point I’ve been curious to explore the next challenge. As one of the oldest tech companies that was using Rails from the day one (and where the CEO used to be a Rails committer), Shopify seemed like a really exciting place to join.&lt;/p&gt;

&lt;h2 id=&quot;my-path-at-shopify&quot;&gt;My path at Shopify&lt;/h2&gt;

&lt;p&gt;Back in &lt;strong&gt;2016&lt;/strong&gt; I’ve started on the Developer Acceleration team at Shopify. My job there was to make developers more productive working on Shopify’s codebase. For a year, I’ve worked on our &lt;a href=&quot;https://www.youtube.com/watch?v=bnwrkVXu-cw&quot; target=&quot;\_blank&quot;&gt;chat ops solution&lt;/a&gt;, on our CI pipeline that runs 150k unit tests for a monolith in just 20 minutes, and on upgrading the monolith to the latest Rails version at that time. I spent most of my time on Rails upgrade which turned out to be tricky as the number of breaking changes from Rails 4.2 to 5.0 was quite high. Nevertheless, that project has allowed me to contribute to a bunch of major libraries in the Rails ecosystem as we found bugs when running on Rails 5.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;2017&lt;/strong&gt;, I switched teams to work on the production infrastructure rather than developer tooling. That was the year of moving from bare metal datacenters to the cloud ⛅️, and I worked on adopting our datacenter tooling to be Kubernetes and cloud friendly.&lt;/p&gt;

&lt;p&gt;On of the key constraints brought by Cloud was ephemeral compute so I had to somehow make Rails processes like Resque/Sidekiq workers interruptible. That’s how &lt;a href=&quot;https://github.com/shopify/job-iteration&quot;&gt;job-iteration&lt;/a&gt; was born. I slowly dived into our background job infrastructure and spent the most of 2018 working on that as well.&lt;/p&gt;

&lt;p&gt;By the late &lt;strong&gt;2018&lt;/strong&gt; we’ve been running in Cloud but we weren’t fully leveraging it - for instance we’ve had a static number of application servers, much like we used to have back in the datacenter. I shifted my work towards capacity planning and autoscaling, and by &lt;strong&gt;2019&lt;/strong&gt;, my team has shipped an autoscaler that matched capacity to business needs of the platform, saving the company a few $M every month.&lt;/p&gt;

&lt;p&gt;Thanks to horizontal sharding, we could always scale the platform by adding more shards - but by &lt;strong&gt;2020&lt;/strong&gt;, we’ve started to see more limits being hit &lt;em&gt;within&lt;/em&gt; a shard. I moved towards working with OLTP systems and MySQL, specifically researching data access patterns and caching.&lt;/p&gt;

&lt;p&gt;Later in &lt;strong&gt;2020&lt;/strong&gt;, we’ve assembled a team to deploy Shopify around the globe - and successfully shipped that and reduced latencies by 200ms for regions like Australia that are the furthest away from North America.&lt;/p&gt;

&lt;p&gt;I learned a ton and I found areas that I enjoy the most, such as growing engineers and project management. I’ve got to specifically like focusing on delivery of larger projects, where I can focus on building a roadmap, aligning teams and communicating the plan to the rest of the company.&lt;/p&gt;

&lt;h2 id=&quot;my-challenges&quot;&gt;My challenges&lt;/h2&gt;

&lt;p&gt;It wouldn’t be fair to highlight only the exciting parts. Through my five years here, I’ve got to work with managers with whom I wasn’t very much agreable because of our differences. I struggled close to the point when I’ve considered quitting, and I’m glad that I didn’t. One of the perks of working in a larger place is internal mobility, and an opportunity to make a career within the same company by changing organizations and managers. My advice here is not to let the uncomfortable situation run for too long. In my case that struggle with a manager was going for 1.5 years, all because we tried to “work out” the relationship for way too long. It only got clear that the change is required when it got to the peak of discomfort.&lt;/p&gt;

&lt;p&gt;Shopify is also a different company now compared to the place that I’ve joined five years ago. It grew to be 10 times bigger, and you can imagine the culture adjusting to the size. The processes have been adjusting too, and what used to be scrappy and easy (or YOLO) back in the days is now documented and has rules.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;Working at a large company has its perks of allowing you to try yourself in different roles and projects, and building a career within that company. To me that’s been the biggest reason to stick around. And as you stay at once place for longer, you get more and more trust from people from all around the company, which unlocks even more opportunities to try.&lt;/p&gt;

&lt;p&gt;Being based in the UK and having the majority of collegues in Canada made me travel to our offices quite often, and that’s the biggest thing that I miss since the pandemic. I can’t wait for a chance to reconnect and see all the faces again.&lt;/p&gt;

&lt;p&gt;I look forward for the next half-decade here, for more partnerships with excellent peers at work, and for more challenging projects that are always a joy to write about in my blog.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby 3, concurrency and the ecosystem</title>
   <link href="http://kirshatrov.com/posts/ruby-concurrency-and-ecosystem/">
   <updated>2021-01-06T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/ruby-concurrency-and-ecosystem</id>
   <content type="html">&lt;p&gt;With the &lt;a href=&quot;http://www.ruby-lang.org/en/news/2020/12/25/ruby-3-0-0-released/&quot; target=&quot;\_blank&quot;&gt;Ruby 3.0 release&lt;/a&gt;, there’s been a lot of chatter about concurrency, parallelism, and async IO.&lt;/p&gt;

&lt;p&gt;For my own reflection, I wanted to write down what that means for performance and capacity/costs of apps, and what would be the impact on the Ruby ecosystem.&lt;/p&gt;

&lt;p&gt;I will assume that the audience already knows the difference between &lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_(computing)#Threads_vs._processes_pros_and_cons&quot; target=&quot;\_blank&quot;&gt;threads vs processes model in UNIX&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Little%27s_law&quot; target=&quot;\_blank&quot;&gt;Little’s law&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;upd&quot;&gt;
Updated on Jan 9, 2021: thanks to the feedback from &lt;a href=&quot;https://github.com/ioquatix&quot; target=&quot;_blank&quot;&gt;Samuel Williams&lt;/a&gt;, I’ve revised the post with findings from &lt;a href=&quot;https://github.com/socketry/falcon&quot; target=&quot;_blank&quot;&gt;Falcon&lt;/a&gt;, the async web server written in Ruby.&lt;/p&gt;

&lt;h2 id=&quot;learning-from-python&quot;&gt;Learning from Python&lt;/h2&gt;

&lt;p&gt;It’s always good to take learnings from other languages. There’s an excellent &lt;a href=&quot;http://calpaterson.com/async-python-is-not-faster.html&quot; target=&quot;\_blank&quot;&gt;write-up “Async Python is not faster” by Cal Paterson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It argues that process-based (aka forking) web servers &lt;strong&gt;show better latencies for web requests&lt;/strong&gt; when they are compared to async IO-powered servers.&lt;/p&gt;

&lt;p&gt;But why? That’s because async IO brings co-operative scheduling, which means that the execution is only yielded upon language keywords like &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quoting the author, this means that execution time is not distributed “fairly” and one thread can inadvertently starve another of CPU time while it is working. This is why latency is more erratic.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In contrast, traditional sync webservers use the pre-emptive multi-processing of the kernel scheduler, which works to ensure fairness by periodically swapping processes out from execution. This means that time is divided more fairly and that latency variance is lower.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;learning-from-falcon&quot;&gt;Learning from Falcon&lt;/h2&gt;

&lt;p class=&quot;upd&quot;&gt;
(added on Jan 9, 2021)
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/socketry/falcon&quot;&gt;Falcon&lt;/a&gt; is a multi-process, multi-fiber HTTP server written in Ruby that is already utilizing async IO.&lt;/p&gt;

&lt;p&gt;It has a great &lt;a href=&quot;https://github.com/socketry/falcon-benchmark&quot;&gt;set of benchmarks&lt;/a&gt; that let us compare Falcon’s async IO with other non-async web servers like Passenger, Puma and Unicorn. Those benchmarks have been showing that &lt;strong&gt;async IO-powered server like Falcon&lt;/strong&gt; provides better latencies on web requests.&lt;/p&gt;

&lt;p&gt;Interestingly, that’s a very different story than Python! Looking at Python, I’ve expected that the thread driven server should be more “balanced” but it turns out the opposite.&lt;/p&gt;

&lt;p&gt;Falcon’s authors explain that the fiber scheduler naturally scales according to load much better than the worker pool implementation in Puma. When fibers are busy handling requests, they don’t call &lt;code class=&quot;highlighter-rouge&quot;&gt;accept&lt;/code&gt; so the requests are naturally picked up by other workers who are less busy.&lt;/p&gt;

&lt;h3 id=&quot;what-does-that-mean-for-us-ruby-developers&quot;&gt;What does that mean for us Ruby developers?&lt;/h3&gt;

&lt;p&gt;Scheduling threads and fibers is nuanced, and you can see that similar approaches demonstrate different results on Python and Ruby/Falcon examples.&lt;/p&gt;

&lt;p&gt;In the first revision of this post, I’ve argued that async IO may often increase the latency. Thanks to the data &lt;a href=&quot;https://github.com/socketry/falcon-benchmark&quot;&gt;shown&lt;/a&gt; by Samuel Williams, we can see that’s not the case.&lt;/p&gt;

&lt;p&gt;One of the benefits of async IO is that concurrency is archived by the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; instruction, not by the constant interrupt of threads. Every interrupt causes the context switch - and it’s nice to reduce context switching where we can because scheduler switching from one task to another always adds a little overhead. Since that happens thousands of times every second, &lt;strong&gt;less context switching would mean fewer CPU cycles wasted&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;where-does-ractor-fit-in&quot;&gt;Where does Ractor fit in?&lt;/h2&gt;

&lt;p&gt;The Ractor pattern allows parallel execution (which wasn’t possible in Ruby before) of more than one Ruby thread by limiting the shared state of a block of code that you want to execute in parallel. Those “blocks of code” (aka “actors”) can also talk to each other through messages. This is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model&quot;&gt;Actor model&lt;/a&gt; used in other languages.&lt;/p&gt;

&lt;p&gt;There are two ways we could leverage Ractors for modern apps: from the top (wrap every worker into a Ractor) and from the bottom (selectively use Ractors within existing code to parallelize CPU-intensive work).&lt;/p&gt;

&lt;p&gt;While I see more to be gained from the top way, it seems like there’s so much shared and mutable state in Ruby libraries that it’s going to be quite tricky, although not impossible. It will likely take some efforts and at least a year of work from the community to push libraries towards less shared state. For the next year, we’ll mostly see Ractor maturing and getting adopted in the “bottom” use cases.&lt;/p&gt;

&lt;h2 id=&quot;impact-on-the-ruby-ecosystem&quot;&gt;Impact on the Ruby ecosystem&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;By itself, async IO will help to use CPU more efficiently by reducing context switching.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Better support for async IO in Ruby 3.0 will increase community’s adoption of async web servers like Falcon, and will hopefully give birth to async background job systems.&lt;/p&gt;

&lt;p&gt;Having Sidekiq execute jobs concurrently through the async IO and event loop instead of threads could increase the throughput and save CPU work, especially for IO-bound workloads like webhook delivery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll need to push the Ruby ecosystem to have less shared state to fully leverage the Ractor pattern.&lt;/strong&gt; That will take us some time.&lt;/p&gt;

&lt;p&gt;If you’ve enjoyed reading this, I highly recommend to read &lt;em&gt;&lt;a href=&quot;http://wjwh.eu/posts/2020-12-28-ruby-fiber-scheduler-c-extension.html&quot; target=&quot;\_blank&quot;&gt;Ruby 3.0 and the new FiberScheduler interface&lt;/a&gt;&lt;/em&gt; by Wander Hillen.&lt;/p&gt;

&lt;p&gt;Thanks to Samiel Williams and to Julik Tarkhanov for providing early feedback on this post.&lt;/p&gt;

&lt;p&gt;I’m looking forward to hearing your thoughts on this in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing a Ractor-based web server: part II</title>
   <link href="http://kirshatrov.com/posts/ractor-web-server-part-two/">
   <updated>2020-12-27T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/ractor-web-server-part-two</id>
   <content type="html">&lt;p&gt;A few months ago I published a &lt;a href=&quot;/2020/09/08/ruby-ractor-web-server/&quot; target=&quot;\_blank&quot;&gt;post&lt;/a&gt; about writing a simple web server in Ruby using Ractors. That took only 20 lines of code and it was able to leverage multiple CPUs with Ruby without having to go through the Global Interpreter Lock (&lt;a href=&quot;https://en.wikipedia.org/wiki/Global_interpreter_lock&quot; target=&quot;\_blank&quot;&gt;GIL&lt;/a&gt;). That was a good preview to what the Ractor primitive is going to provide.&lt;/p&gt;

&lt;p&gt;Since then Ruby 3.0 was released and the Ractor implementation has got more mature. In this post, we’ll make our Ractor-based web server do more things.&lt;/p&gt;

&lt;p&gt;By the end of the post, you’ll learn the constraints of Ractors and get familiar with three PRs to MRI that I had to open to make it work.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Here’s what we ended up with in the &lt;a href=&quot;/2020/09/08/ruby-ractor-web-server/&quot; target=&quot;\_blank&quot;&gt;previous post&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'socket'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;taken from pipe by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# if the line above returned, one of the workers or the listener has crashed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our web server does not parse the incoming request and responds with the hardcoded &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello world!&lt;/code&gt; string. Let’s make it more dynamic.&lt;/p&gt;

&lt;p&gt;We’ll leverage WEBrick, a simple web server that ships with Ruby, to parse HTTP requests. That should be as simple as:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# req is the HTTPRequest object with all attributes populated by `parse`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s try it out:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'webrick'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RequestTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll see it fail with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ractor_v0.rb:28:in `block (3 levels) in &amp;lt;main&amp;gt;': can not access non-shareable objects in constant WEBrick::Config::HTTP by non-main Ractor. (Ractor::IsolationError)
	from ractor_v0.rb:25:in `loop'
	from ractor_v0.rb:25:in `block (2 levels) in &amp;lt;main&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Thankfully this is an easy fix: since &lt;code class=&quot;highlighter-rouge&quot;&gt;WEBrick::Config::HTTP&lt;/code&gt; is not a frozen object, we need to explicitly freeze it and it make it shareable across Ractors.&lt;/p&gt;

&lt;p&gt;We’ll have to prepend our server’s code with something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CRLF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BODY_CONTAINABLE_METHODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StatusMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I opened a &lt;a href=&quot;https://github.com/ruby/webrick/pull/65&quot; target=&quot;\_blank&quot;&gt;fix&lt;/a&gt; upstream to make that work by default. On the way making the rest of the code work I’ve had to do the &lt;a href=&quot;https://github.com/ruby/ruby/pull/4008&quot; target=&quot;\_blank&quot;&gt;same thing&lt;/a&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; class too.&lt;/p&gt;

&lt;h2 id=&quot;the-story-of-uri-parsing&quot;&gt;The story of URI parsing&lt;/h2&gt;

&lt;p&gt;Once we declared those objects shareable, we’ll see it fail with exceptions like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/opt/rubies/3.0.0/lib/ruby/3.0.0/uri/common.rb:77:in `for': can not access class variables from non-main Ractors (Ractor::IsolationError)
	from /opt/rubies/3.0.0/lib/ruby/3.0.0/uri/rfc3986_parser.rb:72:in `parse'
	from /opt/rubies/3.0.0/lib/ruby/3.0.0/uri/common.rb:171:in `parse'
	from /Users/kir/.gem/ruby/3.0.0/gems/webrick-1.7.0/lib/webrick/httprequest.rb:504:in `parse_uri'
	from /Users/kir/.gem/ruby/3.0.0/gems/webrick-1.7.0/lib/webrick/httprequest.rb:218:in `parse'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We must remember that Ractors are &lt;a href=&quot;https://github.com/ruby/ruby/blob/master/doc/ractor.md&quot; target=&quot;\_blank&quot;&gt;strict&lt;/a&gt; about the concurrent data access and class variables are not safe to read concurrently.&lt;/p&gt;

&lt;p&gt;We could boil that error down to:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://ruby-lang.org/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we look up &lt;code class=&quot;highlighter-rouge&quot;&gt;URI&lt;/code&gt; implementation we’ll notice it &lt;a href=&quot;https://github.com/ruby/ruby/blob/master/lib/uri/common.rb#L77&quot; target=&quot;\_blank&quot;&gt;uses&lt;/a&gt; a class instance variable:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;URI&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# @@schemes is the class instance variable&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uri_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vc&quot;&gt;@@schemes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uri_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s nothing we can do to make that safe to access across multiple Ractors without changing the URI module’s code. Here’s &lt;a href=&quot;https://github.com/ruby/ruby/pull/4007&quot; target=&quot;\_blank&quot;&gt;my PR&lt;/a&gt; with the attempted fix.&lt;/p&gt;

&lt;h2 id=&quot;making-it-work&quot;&gt;Making it work&lt;/h2&gt;

&lt;p&gt;After those three changes from above we have the following code working:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'webrick'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Fix: https://github.com/ruby/webrick/pull/65&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CRLF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BODY_CONTAINABLE_METHODS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make_shareable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;StatusMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# To pick up changes from https://github.com/ruby/ruby/pull/4007&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:remove_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/Users/kir/src/github.com/ruby/ruby/lib/uri.rb'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RequestTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yay! Now our server can parse HTTP protocol thanks to the parser from WEBrick.&lt;/p&gt;

&lt;h2 id=&quot;serving-rack-apps&quot;&gt;Serving Rack apps&lt;/h2&gt;

&lt;p&gt;All web apps in Ruby are using &lt;a href=&quot;https://github.com/rack/rack/&quot; target=&quot;\_blank&quot;&gt;Rack&lt;/a&gt; as a modular interface to web servers. Let’s make our server compatible with the Rack interface.&lt;/p&gt;

&lt;p&gt;We can &lt;a href=&quot;https://github.com/rack/rack/blob/5791ef617717d568dc3387cfd5db1c97f08455ca/lib/rack/handler/webrick.rb#L66&quot; target=&quot;\_blank&quot;&gt;peek&lt;/a&gt; into how Rack integrates with WEBrick and follow the same pattern. The &lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; method is what we’re interested in. It does three things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rack/rack/blob/5791ef617717d568dc3387cfd5db1c97f08455ca/lib/rack/handler/webrick.rb#L68&quot; target=&quot;\_blank&quot;&gt;Take&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;WEBrick::HTTPRequest&lt;/code&gt; as the input and transform it into Rack env&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rack/rack/blob/5791ef617717d568dc3387cfd5db1c97f08455ca/lib/rack/handler/webrick.rb#L94&quot; target=&quot;\_blank&quot;&gt;Call&lt;/a&gt; the Rack app with that env&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rack/rack/blob/5791ef617717d568dc3387cfd5db1c97f08455ca/lib/rack/handler/webrick.rb#L96-L116&quot; target=&quot;\_blank&quot;&gt;Put&lt;/a&gt; the response to &lt;code class=&quot;highlighter-rouge&quot;&gt;WEBrick::HTTPResponse&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We could borrow some of that code and make it work with something like this (see the &lt;a href=&quot;https://gist.github.com/kirs/2dd4fcae9983df8b7b5b6c335b97f8e3&quot; target=&quot;\_blank&quot;&gt;full version&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# has to be explicitly required from the main thread:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# https://bugs.ruby-lang.org/issues/17477&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pp'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;env_from_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;meta_vars&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rack_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rack_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BINARY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_VERSION&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_INPUT&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rack_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_ERRORS&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_MULTITHREAD&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_MULTIPROCESS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_RUNONCE&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RACK_URL_SCHEME&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;QUERY_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SCRIPT_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REQUEST_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SCRIPT_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Content-Type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'text/html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RequestTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env_from_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;io_lambda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set-cookie&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# Since WEBrick won't accept repeated headers,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# merge the values per RFC 1945 section 4.2.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:close&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have a tiny Rack app running on multiple CPUs powered by the Ractor primitive! This is huge because Ractor was nowhere there when I wrote the &lt;a href=&quot;/2020/09/08/ruby-ractor-web-server/&quot; target=&quot;\_blank&quot;&gt;first post&lt;/a&gt;. By the Ruby 3.0 release it has matured to the point that we are able to integrate it with Rack with only a few patches.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;I hope this post gave some overview about the current state of the Ractor pattern in Ruby, to both developers and Ruby contributors.&lt;/p&gt;

&lt;p&gt;If you are skimming over the post and are just curious about the internals, you can see the final version of the code &lt;a href=&quot;https://gist.github.com/kirs/2dd4fcae9983df8b7b5b6c335b97f8e3&quot; target=&quot;\_blank&quot;&gt;here&lt;/a&gt;. Below is the list of all bugs/patches that I reported to the upstream as the result of the writing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/17477&quot; target=&quot;\_blank&quot;&gt;https://bugs.ruby-lang.org/issues/17477&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ruby/webrick/pull/65&quot; target=&quot;\_blank&quot;&gt;https://github.com/ruby/webrick/pull/65&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ruby/ruby/pull/4007&quot; target=&quot;\_blank&quot;&gt;https://github.com/ruby/ruby/pull/4007&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ruby/ruby/pull/4008&quot; target=&quot;\_blank&quot;&gt;https://github.com/ruby/ruby/pull/4008&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/rack/rack/pull/1726&quot; target=&quot;\_blank&quot;&gt;https://github.com/rack/rack/pull/1726&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need a general refresher about Ractor, you should check out &lt;a href=&quot;https://github.com/ruby/ruby/blob/master/doc/ractor.md&quot; target=&quot;\_blank&quot;&gt;ractor.md&lt;/a&gt; in the Ruby repo.&lt;/p&gt;

&lt;p&gt;The next step would be to try making our server run Sinatra apps. In theory, Sinatra app is the same Rack app, but there’s some global state in Sinatra and Rack that might make it more tricky.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Organizations and layers of abstraction</title>
   <link href="http://kirshatrov.com/posts/org-layers-of-abstraction/">
   <updated>2020-11-15T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/org-layers-of-abstraction</id>
   <content type="html">&lt;p&gt;This post is a reflection on being part of making a maturing infrastructure organization for nearly five years.&lt;/p&gt;

&lt;p&gt;When I joined Production Engineering at Shopify, it was barely 30 people. We went for a team dinner around that time and I remember how my manager paid for it with his credit card because points. Now we are at &amp;gt;200 people, and at the last pre-pandemic offsite we had a huge ballroom booked for the dinner. Clearly it wasn’t billed to an individual’s credit card.&lt;/p&gt;

&lt;p&gt;Through my there years there, I’ve seen how we’ve solved scalability and growth by introducing boundaries and new levels of abstraction.&lt;/p&gt;

&lt;p&gt;Now that I’m noticing this pattern at other companies too, I believe that managing layers of abstraction is the key tool to solving scalability problems.&lt;/p&gt;

&lt;h2 id=&quot;the-story-of-scaling-redis&quot;&gt;The story of scaling Redis&lt;/h2&gt;

&lt;p&gt;As the most of other Ruby on Rails shops, we’ve been running job queues on Redis with the &lt;a href=&quot;https://github.com/resque/resque&quot; target=&quot;_blank&quot;&gt;Resque&lt;/a&gt; gem (you might have also worked with Sidekiq which is Resque’s successor). Both of those libraries are built on top of Redis, a key-value database written in C that also provides primitives like List and Hash. As a database, Redis keeps those lists/queues in memory for you, and dumps them to the disk every once in a while if you have persistence enabled.&lt;/p&gt;

&lt;p&gt;The way how Resque (or Sidekiq) API is designed, you can grab Redis client by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt; and query that Redis directly for any other operations. This is convenient, and having hundreds of developers at Shopify at that point, it was easy for everyone to start dumping non-jobs data to Redis, thanks to the ease of access to &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt; in the Rails app.&lt;/p&gt;

&lt;p&gt;The side effect of this easy-to-use API was that Redis became overloaded not only by the throughput of background jobs, but also by all arbitrary features where people have plugged &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt; to store ephemeral keys like throttles or inventory data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson #1&lt;/strong&gt;: easy to access APIs can get harmful, especially when it’s designed for a smaller scale and misused at a larger scale.&lt;/p&gt;

&lt;p&gt;We introduced separate Redis instances for all non-jobs features, and for a while &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt; was only used for jobs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/org-layers/v1.png&quot; width=&quot;474&quot; alt=&quot;VS Code devcontainer feature&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But because &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt; didn’t go away as a public API (even though its use was verbally discouraged), a new pile of features have developed that were writing to &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt;, mostly because that was a developer habit.&lt;/p&gt;

&lt;p&gt;It took us significant amount of efforts to completely remove &lt;code class=&quot;highlighter-rouge&quot;&gt;Resque.redis&lt;/code&gt; as a public accessor (see &lt;a href=&quot;https://sirupsen.com/shitlists/&quot; target=&quot;_blank&quot;&gt;shitlist driven development&lt;/a&gt;) and move to not exposing Redis clients directly anywhere. Instead of giving Redis access directly, we provide a few Ruby classes that wrap Redis access, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveJob&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Throttle&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;DisposableCounter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson #2:&lt;/strong&gt; it’s going to be much easier to scale a data store when the subset of operations is limited and its clients are not exposed directly to developers.&lt;/p&gt;

&lt;h2 id=&quot;proxies-and-connection&quot;&gt;Proxies and connection&lt;/h2&gt;

&lt;p&gt;It’s important to say that &lt;a href=&quot;https://redis.io/topics/benchmarks#:~:text=Redis%20is%2C%20mostly%2C%20a%20single,on%20several%20cores%20if%20needed&quot; target=&quot;_blank&quot;&gt;Redis is single-threaded&lt;/a&gt;, which means that it doesn’t employ more than a single CPU. Its authors recommend scaling by introducing more Redis instances running on other CPUs and making your app somehow shard the data across multiple Redis instances - or by using &lt;a href=&quot;https://redis.io/topics/cluster-spec&quot; target=&quot;_blank&quot;&gt;Redis Cluster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, the more client connections are open to Redis, the busier will be that single CPU. We started to notice that connection limits and CPU load were coming to be the two biggest bottlenecks in keeping the platform up.&lt;/p&gt;

&lt;p&gt;As we &lt;a href=&quot;https://kirshatrov.com/2020/04/27/scaling-mysql-stack-part-4-proxy/&quot; target=&quot;_blank&quot;&gt;did for the rest of stores&lt;/a&gt; like MySQL and memcached, we went with introducing a TCP proxy in front of Redis that would &lt;a href=&quot;https://www.percona.com/blog/2019/09/27/multiplexing-mux-in-proxysql/&quot; target=&quot;_blank&quot;&gt;multiplex&lt;/a&gt; client &amp;lt;-&amp;gt; backend connections and reduce the pressure on Redis’ CPU. It’s incredible how much  room you can buy for scalability by putting a proxy in front of Redis/MySQL/memcached.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/org-layers/v2.png&quot; width=&quot;458&quot; alt=&quot;VS Code devcontainer feature&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;proxies-and-scalability&quot;&gt;Proxies and scalability&lt;/h2&gt;

&lt;p&gt;Now all operations to Redis went through a proxy and every feature like jobs or throttles had its own Redis. But every Redis was still single-threaded, and once we had extra load on jobs or on throttles, that Redis would max out on CPU and some operations would get queued and time out. We had to horizontally scale Redis for each feature.&lt;/p&gt;

&lt;p&gt;The beauty of having a proxy in front of a database is that you now you can make changes to the backend without having to change clients. Thanks to &lt;a href=&quot;https://www.envoyproxy.io/&quot; target=&quot;_blank&quot;&gt;Envoy proxy&lt;/a&gt;, we’ve been able to swap a single Redis behind the proxy with a pool of multiple Redis instances, and partitioning operations by a key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/org-layers/v3.png&quot; width=&quot;516&quot; alt=&quot;VS Code devcontainer feature&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;layers-of-abstraction&quot;&gt;Layers of abstraction&lt;/h2&gt;

&lt;p&gt;We’ve had no abstractions at first and developers used to call the Redis client directly for any operations. &lt;strong&gt;We went away from giving the Redis client to providing primitives that work with Redis underneath.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Later we &lt;strong&gt;moved away from making the application connect to Redis directly to giving them something that looks like Redis&lt;/strong&gt;, but is actually a proxy that forwards commands to multiple Redis instances managed by infrastructure teams. That abstraction will also allow us to swap those backends on the proxy with another database like &lt;a href=&quot;https://keydb.dev/&quot; target=&quot;_blank&quot;&gt;KeyDB&lt;/a&gt; in we wanted to.&lt;/p&gt;

&lt;p&gt;These two steps have abstracted Redis access from the application code and decoupled code from the infrastructure, which was the key to making something scale for both the load and the number of developers.&lt;/p&gt;

&lt;p&gt;You can see the similar pattern with &lt;a href=&quot;https://vitess.io/&quot;&gt;Vitess&lt;/a&gt;, which makes the client believe that it’s speaking to MySQL while it’s actually speaking to a Go service that applies certain logic and forwards those MySQL queries elsewhere. Used by YouTube, Github and Slack, Vitess is gaining its popularity as a way to horizontally scaling database access without increasing the complexity on the client.&lt;/p&gt;

&lt;p&gt;I believe that the increasing amount of abstractions is the reasonable price to pay for scalability. &lt;strong&gt;It works the other way around too&lt;/strong&gt;: if some parts of your stack are abstracted and some are not, those that are not abstracted will be the first to become a scalability bottleneck.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>bpftrace, uprobe and containers</title>
   <link href="http://kirshatrov.com/posts/bpf-docker-uprobe/">
   <updated>2020-10-06T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/bpf-docker-uprobe</id>
   <content type="html">&lt;p&gt;Couple days ago at work I found myself needing to trace &lt;a href=&quot;https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md#4-uprobes&quot; target=&quot;_blank&quot;&gt;BPF’s &lt;em&gt;uprobes&lt;/em&gt;&lt;/a&gt; while investigating an issue with &lt;code class=&quot;highlighter-rouge&quot;&gt;libzookeeper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Normally, running a &lt;code class=&quot;highlighter-rouge&quot;&gt;uprobe&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;uretprobe&lt;/code&gt; is as easy as passing the path to the library and the function name:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bpftrace -e 'uretprobe:/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0:zoo_set2 { printf(&quot;%d\n&quot;, retval); }'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my case, Zookeeper client was running in a container. How do I figure out the path to the library if the process is in Docker?&lt;/p&gt;

&lt;p&gt;Turns out it’s not too hard, but I tend to forget things, so I decided to write this post for myself in the future in case I need to do this again.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPD (2020/11/25): there’s an easier way to do this! Scroll down the post to see it.&lt;/strong&gt; I left the original steps in the post for a historical reference.&lt;/p&gt;

&lt;p&gt;First, let’s get container’s ID:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps | grep zookeeper
7c029e58e434        zookeeper           &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   2181/tcp, 2888/tcp, 3888/tcp, 8080/tcp   relaxed_dewdney
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;7c029e58e434&lt;/code&gt; is the container ID. Now let’s inspect it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker inspect 7c029e58e434 | grep overlay
  &quot;Driver&quot;: &quot;overlay2&quot;,
    &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5-init/diff:/var/lib/docker/overlay2/14b0cf5b7bd1d4b8663ba15b1fe6fa56cf53ce8c5e86cc1e69f9bb029df26d24/diff:/var/lib/docker/overlay2/fe8d13983650f04e8c399eb68b570777e48d1d7f05357563430e416350159aad/diff:/var/lib/docker/overlay2/92fff12f8e25a5d463888e9f60b6a3972875f9d7a05156d84e999f6b16d523a5/diff:/var/lib/docker/overlay2/dba58c50dcf82bcf10b3ee9875dc341c48f422d54c4c9dd13a5d8d3383c35c52/diff:/var/lib/docker/overlay2/be196b7d95ad1adcb165cfff35bb5fde8f4e713dcb3bee51cc1bb226e94d39b1/diff:/var/lib/docker/overlay2/ae7d7d5ae29516fffcd80a39b64365356904e90fd2bf49e005c31418cb196126/diff:/var/lib/docker/overlay2/e241bfd12dcaadf4bb927cdfd0a34da11d9972b8fa12860a0588bd51287173f8/diff:/var/lib/docker/overlay2/0f7ec7ebb8f524c16c9cfa687daee058c955c34c7f26ded530f3644c6f7520e3/diff&quot;,
    &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/merged&quot;,
    &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/diff&quot;,
    &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/work&quot;
  &quot;Name&quot;: &quot;overlay2&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt&quot; target=&quot;_blank&quot;&gt;Overlay&lt;/a&gt; is the magical layer-based filesystem that backs Docker layers. &lt;code class=&quot;highlighter-rouge&quot;&gt;MergedDir&lt;/code&gt; (== &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/merged&lt;/code&gt;) is what we’re interested in. That’s the directory with the container’s filesystem.&lt;/p&gt;

&lt;p&gt;If we know that the library is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0&lt;/code&gt; inside the container, we can combine that with &lt;code class=&quot;highlighter-rouge&quot;&gt;MergedDir&lt;/code&gt; and check if that path exists:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ stat /var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/merged/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0
  File: /var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/merged/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0
  Size: 109680    	Blocks: 216        IO Block: 4096   regular file
Device: 300016h/3145750d	Inode: 15295626    Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2019-06-05 04:22:04.000000000 +0000
Modify: 2019-06-05 04:22:04.000000000 +0000
Change: 2020-10-03 21:28:44.754400357 +0000
 Birth: -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It exists! Now we can pass that as a path to &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bpftrace -e 'uretprobe:/var/lib/docker/overlay2/a40fd6684803e3cc28c9f69bf948433a12b791916fca3b5c50914e8afb712ef5/merged/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0:zoo_set2 { printf(&quot;%d\n&quot;, retval); }'
Attaching 1 probe...
0
-4
-4
^C
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;UPD (2020/11/25): as suggested by Dale Hamel, there’s an easier way to do all of this!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We still need to grab container’s PID with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ab31c58d2d03 is container ID from docker ps&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker inspect ab31c58d2d03 | grep -m1 Pid
            &lt;span class=&quot;s2&quot;&gt;&quot;Pid&quot;&lt;/span&gt;: 1922,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then we point &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt; to the filesystem of that PID, which &lt;a href=&quot;https://man7.org/linux/man-pages/man5/proc.5.html&quot;&gt;maps&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;PID&amp;gt;/root&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bpftrace -e 'uretprobe:/proc/&amp;lt;CONTAINER-PID&amp;gt;/root/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0:zoo_set2 { printf(&quot;%d\n&quot;, retval); }'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you access the filesystem through this path though, it should be the view of the mount namespace as seen by that given process.&lt;/p&gt;

&lt;p&gt;An alternative to the way above would be passing &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bpftrace -p &amp;lt;CONTAINER-PID&amp;gt; -e 'uretprobe:/usr/lib/x86_64-linux-gnu/libzookeeper_mt.so.2.0.0:zoo_set2 { printf(&quot;%d\n&quot;, retval); }'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Much cleaner than having to overlay path around.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In my case, uprobes me helped to find out that from time to time, &lt;code class=&quot;highlighter-rouge&quot;&gt;zoo_set2&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;-4&lt;/code&gt; which is an error code.&lt;/p&gt;

&lt;p&gt;Note that I was running &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt; from the host – thanks to the &lt;a href=&quot;https://cloud.google.com/container-optimized-os/docs/how-to/toolbox&quot; target=&quot;_blank&quot;&gt;COS toolbox&lt;/a&gt;, BPF tools were pre-installed there. Another option would be to install &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt; right into my container. In that case I wouldn’t need to lookup overlay paths and &lt;code class=&quot;highlighter-rouge&quot;&gt;MergedDir&lt;/code&gt;. But from my experience, installing &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt; into a container would take more time than these extra steps required to run it from the host, which is why I prefered this approach.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing a Ractor-based web server</title>
   <link href="http://kirshatrov.com/posts/ruby-ractor-web-server/">
   <updated>2020-09-08T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/ruby-ractor-web-server</id>
   <content type="html">&lt;p&gt;Ractor, the new concurrency primitive in Ruby, &lt;a href=&quot;https://github.com/ruby/ruby/pull/3365&quot; target=&quot;_blank&quot;&gt;has been merged&lt;/a&gt; to the upstream few days ago. I’ve been following that PR and watching the author’s &lt;a href=&quot;https://www.youtube.com/watch?v=40t8EPpnujg&amp;amp;list=PLbFmgWm555yZeLpdOLhYwORIF9UjBAFHw&amp;amp;index=17&quot; target=&quot;_blank&quot;&gt;talk at RubyKaigi&lt;/a&gt; (in Japanese, I wasn’t able to find the translated version but it should be available &lt;em&gt;somewhere&lt;/em&gt;), which got me excited to try Ractor myself.&lt;/p&gt;

&lt;p&gt;A web application server is the first thing that comes to mind when playing with concurrency. On top of that, not too long ago I’ve implemented TCP servers in Rust and Go, so I got curious to write a &lt;strong&gt;simple web server using Ractor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s dive in!&lt;/p&gt;

&lt;h2 id=&quot;whats-in-a-web-server&quot;&gt;What’s in a web server?&lt;/h2&gt;

&lt;p&gt;A web server is something that accepts a TCP socket, reads from it, parses HTTP headers and responds with HTTP body. It’s a text-based protocol that is easy to implement.&lt;/p&gt;

&lt;p&gt;Here’s a sample request (what you’d read from the socket):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Host: localhost:10000
User-Agent: curl/7.64.1
Accept: */*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And a sample response (what you’d write):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200
Content-Type: text/html

Hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We will start by grabbing a gist from the &lt;a href=&quot;https://blog.appsignal.com/2016/11/23/ruby-magic-building-a-30-line-http-server-in-ruby.html&quot; target=&quot;_blank&quot;&gt;Building a 30 line HTTP server in Ruby&lt;/a&gt; post by AppSignal.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'socket'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world! The time is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;starting-with-ractor&quot;&gt;Starting with Ractor&lt;/h2&gt;

&lt;p&gt;To get started with Ractor, I recommend to read the &lt;a href=&quot;https://github.com/ko1/ruby/blob/dc7f421bbb129a7288fade62afe581279f4d06cd/doc/ractor.md&quot; target=&quot;_blank&quot;&gt;doc&lt;/a&gt; in the ruby repo.&lt;/p&gt;

&lt;p&gt;Now, let’s wrap the example from above into Ractors.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'socket'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# receive TCPSocket&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gets&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world! The time is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# pass TCPSocket to one of the workers&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We start the number of workers that equals the number of CPUs and have the main thread to listen to connections on the socket and send accepted connection to a random Ractor. We can validate that it works as expect by making a request with &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, distributing requests among workers using &lt;code class=&quot;highlighter-rouge&quot;&gt;workers.sample&lt;/code&gt; is not very efficient. That random worker might still be busy serving the previous request. We’d rather have workers pull from a shared queue where we’d send all requests.&lt;/p&gt;

&lt;p&gt;I wanted to make that part better but I didn’t find any Ractor-friendly queue implementation. However, the &lt;a href=&quot;https://github.com/ko1/ruby/blob/dc7f421bbb129a7288fade62afe581279f4d06cd/doc/ractor.md&quot; target=&quot;_blank&quot;&gt;doc&lt;/a&gt; suggesting using a pipe like a queue. Let’s try that!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'socket'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# pipe aka a queue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It worked! By using the pipe I was able to make all workers to pull for sockets which improved the load balancing part.&lt;/p&gt;

&lt;p&gt;What’s still not great is that there’s nothing that monitors workers in case one of them unexpectedly dies. And similar to &lt;a href=&quot;https://github.com/puma/puma/blob/master/docs/architecture.md&quot; target=&quot;_blank&quot;&gt;Puma’s architecture&lt;/a&gt;, it would be more efficient to have a separate thread to wait for sockets to become ready to read before passing them to actual workers.&lt;/p&gt;

&lt;p&gt;I was able to move listener into its own Ractor and to make the main thread to watch all Ractors:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'socket'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;taken from pipe by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TCPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# if the line above returned, one of the workers or the listener has crashed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Again, it worked!&lt;/p&gt;

&lt;p&gt;The next step of implementing a web server would be to bake a HTTP parser to read request headers. There’s a &lt;a href=&quot;https://github.com/cotag/http-parser&quot; target=&quot;_blank&quot;&gt;http-parser&lt;/a&gt; gem that is using a C extension, and I’ve heard that is not supported by Ractor yet.&lt;/p&gt;

&lt;p&gt;I found an HTTP parser that comes as a part of WEBrick which is a built into Ruby’s standard library.&lt;/p&gt;

&lt;p&gt;I tried the following snippet:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'webrick'&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;workers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CPU_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Ractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# raises &quot;can not access non-sharable objects in constant HTTP by non-main Ractors (NameError)&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WEBrick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1 200&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: text/html&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WEBrick::Config::HTTP&lt;/code&gt; turned to be a mutable hash with some configuration objects. Since that constant and a hash were initialized in the main thread, it wasn’t allowed to be safely used from ractors. I worked around by inlining the hash definition but then I hit another non-shareable constant referenced from the WEBrick code that wasn’t too easy to inline.&lt;/p&gt;

&lt;p&gt;This is probably the part that will improve on the upstream very soon. After all, this is the earliest Ractor implementation.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;

&lt;p&gt;I’m really excited about new concurrency primitives like Ractor getting pushed into Ruby’s upstream.&lt;/p&gt;

&lt;p&gt;The Ractor model seems powerful and ready for experimental use. Within the next 6 months (Ruby 3.0 release is scheduled for December), I foresee a Ractor-based web server to come out to leverage this feature and get the most out of server CPUs. This is a great opportunity to learn concurrent programming and to contribute to the Ruby community.&lt;/p&gt;

&lt;p&gt;For those curious to try Ractor, I’d suggest to try implementing other things that benefit from parallel execution, for instance a background job processor.&lt;/p&gt;

&lt;p&gt;To try Ractor, you’ll need to build Ruby from the upstream. Read my previous posts (&lt;a href=&quot;https://kirshatrov.com/2020/01/11/contributing-to-mri/&quot; target=&quot;_blank&quot;&gt;Contributing to Ruby MRI&lt;/a&gt;) to learn about how to do that.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling MySQL stack, ep. 4: Proxies</title>
   <link href="http://kirshatrov.com/posts/scaling-mysql-stack-part-4-proxy/">
   <updated>2020-04-27T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/scaling-mysql-stack-part-4-proxy</id>
   <content type="html">&lt;p&gt;I’ve spent a good part of last year collaborating with different people at work on the theme of scaling our MySQL stack to the next level. For background, like many other companies founded in the mid-2000s (Facebook, YouTube, GitHub, Basecamp), Shopify is a MySQL shop. We’ve invested a lot into our tooling to manage and scale MySQL, and lately, it’s been time to invest in improving ways how applications interact with MySQL.&lt;/p&gt;

&lt;p&gt;Accounting for all my learnings, I decided to commit not just for a single post about it, but to a &lt;strong&gt;series of at least three posts about scaling MySQL stack.&lt;/strong&gt; As always, &lt;a href=&quot;https://twitter.com/kirshatrov&quot; target=&quot;_blank&quot;&gt;follow me on Twitter&lt;/a&gt; to be the first to read them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;a href=&quot;/2020/04/16/scaling-mysql-stack-part-3-observability/&quot;&gt;previous post&lt;/a&gt; in the series talked about observability of live SQL queries and annotating those queries with useful metadata.&lt;/p&gt;

&lt;p&gt;In today’s post, we will learn about scaleing out DB connections and how proxies help with that.&lt;/p&gt;

&lt;p&gt;Imagine that your service has been growing in terms of the traffic, so is the number of application servers that is needed to serve that traffic. You may use Heroku and bump the number of dynos, or run it in Kubernetes and increase the number of web server replicas, or add more bare metal servers to your data center.&lt;/p&gt;

&lt;p&gt;Regardless of your deployment choice, &lt;strong&gt;more application servers means more connections&lt;/strong&gt; to all downstream resources that your app may be using: Memcache, Redis, MongoDB, MySQL etc.&lt;/p&gt;

&lt;p&gt;Why does the number of connections matter? Just like the number of queries per second or IOPS, number of open connections is a &lt;strong&gt;key metric that causes load on the database&lt;/strong&gt;. For instance, Oracle’s MySQL edition keeps a system thread per connection – which means that for 1000 open connections to MySQL, there will be 1000 Linux threads, all saturating the CPU (which in the best case would have 64 or 128 cores to handle that 1k of threads).&lt;/p&gt;

&lt;p&gt;This gets even worse with horizontal sharding: each application server may want to keep a connection to each shard (in case a request for a data from that shard comes in), which makes the number of connections to grow even higher.&lt;/p&gt;

&lt;h2 id=&quot;proxies-come-to-the-rescue&quot;&gt;Proxies come to the rescue&lt;/h2&gt;

&lt;p&gt;To address this problem and reduce the number of open connections to the database, it’s common to introduce a proxy in between the app and the database that would &lt;strong&gt;multiplex&lt;/strong&gt; connections.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/2020-multiplexing-1.svg&quot; alt=&quot;Multiplexing&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the diagram above clients are connecting directly to the database.&lt;/p&gt;

&lt;p&gt;The purpose of connection multiplexing is to convert a large number of short connections into a few warmed up connections needing more throughput. Here’s how it looks like with a proxy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/2020-multiplexing-2.svg&quot; alt=&quot;Multiplexing&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, having a proxy in the middle allows us to reduce the number of actual connections, - and moreover, terminate things that don’t necessarily need to go to MySQL Server. For instance, it could be &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql_ping&lt;/code&gt; that many ORMs like to send to verify that the connection is alive. I’ve seen significant reductions of QPS on MySQL Server just from terminating &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql_ping&lt;/code&gt; early.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SaaS applications&lt;/strong&gt; often keep a large number of database connections open to ensure quick user response times, although only a fraction of these open connections may get actively used at a given moment. These open but idle connections still consume database memory and compute resources. Instead of over-provisioning your database to support mostly idling connections, you can leverage the proxy to hold idling connections from your application while only establishing database connections as required to optimally serve active requests.&lt;/p&gt;

&lt;p&gt;For MySQL, that multiplexing proxy is &lt;a href=&quot;https://github.com/sysown/proxysql/&quot; target=&quot;_blank&quot;&gt;ProxySQL&lt;/a&gt;. For PostgreSQL, it’s the &lt;a href=&quot;https://github.com/pgbouncer/pgbouncer&quot; target=&quot;_blank&quot;&gt;pgbouncer&lt;/a&gt;. Having been exposed quite a lot to ProxySQL at work, I’d like to highlight some cool features of it.&lt;/p&gt;

&lt;h2 id=&quot;things-to-do-with-proxysql&quot;&gt;Things to do with ProxySQL&lt;/h2&gt;

&lt;p&gt;By default, all ProxySQL brings is multiplexing connections. I’ve seen 20x reductions on DB load after introducing ProxySQL, so just multiplexing is already huge. However, there are a lot more things you can do with it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Instead of making your application to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;primary&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;replica&lt;/code&gt; connections, keep a single connection to ProxySQL and configure ProxySQL query rules to send the connection to either the primary or a replica based on a query annotation like &lt;code class=&quot;highlighter-rouge&quot;&gt;/* readonly=true|false */&lt;/code&gt;. This will help to avoid connection switching in the app and to save the number of outgoing connections from the client.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Implement &lt;a href=&quot;https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/#xref_cascading-failure_load-shed-graceful-degredation&quot; target=&quot;_blank&quot;&gt;load shedding&lt;/a&gt; by having a dynamic ProxySQL query rule that would be on/off depending on the DB load. How to determine what queries are OK to reject? Again, with &lt;a href=&quot;/2020/04/16/scaling-mysql-stack-part-3-observability/&quot; target=&quot;_blank&quot;&gt;annotations&lt;/a&gt; – for instance, anything that matches &lt;code class=&quot;highlighter-rouge&quot;&gt;/* controller=SitemapController */&lt;/code&gt; is likely the low priority traffic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Identify expensive queries using the stats table in ProxySQL and pin those queries to a replica database without having to make changes to the app. This one is dangerous because it may increase the debt in the app, but super handy during incidents.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Perform a zero-downtime HA failovers between MySQL instances since all your clients are connected to a proxy and you can point them to differnet backends.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you been using ProxySQL or another proxy in your project? Let me know!&lt;/p&gt;

&lt;p&gt;Further reading about multiplexing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/postgres-connection-pooling&quot; target=&quot;_blank&quot;&gt;Connection pooling on PostgreSQL&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.percona.com/blog/2019/09/27/multiplexing-mux-in-proxysql/&quot; target=&quot;_blank&quot;&gt;Multiplexing with ProxySQL&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=19H2PiHGvkBxtbiCrzU6kc7kmF5geCGOY&quot; target=&quot;_blank&quot;&gt;ProxySQL at Shopify&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/rds/proxy/&quot; target=&quot;_blank&quot;&gt;Database proxy as the new AWS offer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;When&lt;/strong&gt; is the right moment to introduce a proxy like ProxySQL or PgBouncer? Watch for the number of open connections on your database and its growth. If you see a surge in traffic that pushes the number of open connections above 1k, and the DB is struggling on the CPU, having a proxy should help.&lt;/p&gt;

&lt;p&gt;What would you like me to write about in the next post of the &lt;strong&gt;Scaling MySQL stack series&lt;/strong&gt;? Please let me know by replying in comments or by sending me a tweet.&lt;/p&gt;

&lt;p&gt;Other posts in the series: &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-1-timeouts/&quot;&gt;Episode 1: Timeouts&lt;/a&gt; • &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-2-deadlines/&quot;&gt;Episode 2: Deadlines&lt;/a&gt; • &lt;a href=&quot;/2020/04/16/scaling-mysql-stack-part-3-observability/&quot;&gt;Episode 3: Observability&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling MySQL stack, ep. 3: Observability</title>
   <link href="http://kirshatrov.com/posts/scaling-mysql-stack-part-3-observability/">
   <updated>2020-04-16T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/scaling-mysql-stack-part-3-observability</id>
   <content type="html">&lt;p&gt;I’ve spent a good part of last year collaborating with different people at work on the theme of scaling our MySQL stack to the next level. For background, like many other companies founded in the mid-2000s (Facebook, YouTube, GitHub, Basecamp), Shopify is a MySQL shop. We’ve invested a lot into our tooling to manage and scale MySQL, and lately, it’s been time to invest in improving ways how applications interact with MySQL.&lt;/p&gt;

&lt;p&gt;Accounting for all my learnings, I decided to commit not just for a single post about it, but to a &lt;strong&gt;series of at least three posts about scaling MySQL stack.&lt;/strong&gt; As always, &lt;a href=&quot;https://twitter.com/kirshatrov&quot; target=&quot;_blank&quot;&gt;follow me on Twitter&lt;/a&gt; to be the first to read them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-2-deadlines/&quot;&gt;previous post&lt;/a&gt; in the series talked about the concept of Deadlines and how to introduce them to a mature codebase.&lt;/p&gt;

&lt;p&gt;In today’s post, we will talk about observability of live queries to the database.&lt;/p&gt;

&lt;p&gt;Imagine that your app is online and it’s receiving some traffic. The database is slightly under pressure and you want to investigate what part of the code is giving it the most stress.&lt;/p&gt;

&lt;p&gt;Before leveraging tools like &lt;a href=&quot;https://newrelic.com/&quot; target=&quot;_blank&quot;&gt;New Relic&lt;/a&gt; or &lt;a href=&quot;https://www.vividcortex.com/&quot; target=&quot;_blank&quot;&gt;SolarWinds DPM&lt;/a&gt; (formerly known as VividCortex), you can query the &lt;code class=&quot;highlighter-rouge&quot;&gt;information_schema.processlist&lt;/code&gt; meta table on the MySQL Server and see what queries are flowing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; SELECT id, user, info_binary FROM information_schema.processlist;
+----+------+------------------------------------------------------------------+
| id | user | info_binary                                                      |
+----+------+------------------------------------------------------------------+
| 75 | app | SELECT c FROM users WHERE id=7111                              |
| 74 | app | SELECT c FROM users WHERE id=4275                              |
| 73 | app | SELECT c FROM users WHERE id=5014                              |
| 71 | app | SELECT c FROM users WHERE id=5038                              |
| 70 | app | SELECT c FROM users WHERE id=4729                              |
| 69 | app | SELECT c FROM users WHERE id=6761                              |
| 67 | app | SELECT c FROM users WHERE id=4983                              |
| 68 | app | SELECT c FROM users WHERE id=4982                              |
| 66 | app | SELECT c FROM users WHERE id=4977                                                         |
| 12 | root | SELECT id, user, info_binary FROM information_schema.processlist |
+----+------+------------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This data comes very usefully to find out unusually heavy queries that take too much DB capacity. You might get lucky, and when seeing the query, recognize the code path that’s making that query.&lt;/p&gt;

&lt;p&gt;Unless you have a solid tracing infrastructure (for instance with &lt;a href=&quot;https://www.datadoghq.com/apm/&quot; target=&quot;_blank&quot;&gt;Datadog APM&lt;/a&gt;), it can be hard to determine what code path triggers a common query like &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM users WHERE id=?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It would be great if we could append some kind of metadata to each query about the codepath where it’s executing from, to make the processlist even more useful.&lt;/p&gt;

&lt;p&gt;Luckily, SQL allows arbitrary comments inside queries, and processlist preserves them.&lt;/p&gt;

&lt;p&gt;If instead of executing &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM users WHERE id=?&lt;/code&gt; we could make the app execute something like &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM users WHERE id=? /* controller:users,action:show,method:find_user,api_client_id:42 */&lt;/code&gt;, it would be much easier to navigate and identify where the load comes from.&lt;/p&gt;

&lt;p&gt;This is not a novel idea - in fact, there’s existing libraries that can do that automatically in your app. For the Rails ecosystem, that library is &lt;a href=&quot;https://github.com/basecamp/marginalia&quot; target=&quot;_blank&quot;&gt;Marginalia&lt;/a&gt;. All you need is to plug it into the app, and every query will come annotated with their origin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT `accounts`.* FROM `accounts`
WHERE `accounts`.`queenbee_id` = 1234567890
LIMIT 1
/*application:BCX,controller:project_imports,action:show*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Plugging a library like Marginalia makes the MySQL processlist 10x more informative and makes it so much easier to identify where bottlenecks come from.&lt;/p&gt;

&lt;p&gt;This comes especially useful for &lt;strong&gt;multi-tenant applications&lt;/strong&gt; where you can end up with some tenants being more noisy than others. Extending those SQL annotation with a field like &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;account_id&lt;/code&gt; will allow you to see what tenant is creating the most load.&lt;/p&gt;

&lt;p&gt;You can think of all sorts of automation for this: imagine running a script in a loop that takes a peek at processlist, groups queries by &lt;code class=&quot;highlighter-rouge&quot;&gt;tenant_id&lt;/code&gt; and makes a live dashboard with top tenants by resource usage.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Observability is a hot topic in 2020 and there’s many SaaS services (Datadog, SolarWinds DPM, NewRelic etc) that you can connect with your production stack and get insights about what’s going on.&lt;/p&gt;

&lt;p&gt;In addition to that, the trick with query annotations that I described lets you add observability within your stack and help to build your own automation around monitoring where the load comes from, and what customer/tenant is causing that load.&lt;/p&gt;

&lt;p&gt;In the next post in the series, we will talk about &lt;strong&gt;SQL proxies&lt;/strong&gt; and how they can buy you a 100x performance on the same hardware.&lt;/p&gt;

&lt;p&gt;Other posts in the series: &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-1-timeouts/&quot;&gt;Episode 1: Timeouts&lt;/a&gt; • &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-2-deadlines/&quot;&gt;Episode 2: Deadlines&lt;/a&gt; • &lt;a href=&quot;/2020/04/27/scaling-mysql-stack-part-4-proxy/&quot;&gt;Episode 4: Proxies&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling MySQL stack, ep. 2: Deadlines</title>
   <link href="http://kirshatrov.com/posts/scaling-mysql-stack-part-2-deadlines/">
   <updated>2020-04-06T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/scaling-mysql-stack-part-2-deadlines</id>
   <content type="html">&lt;p&gt;I’ve spent a good part of last year collaborating with different people at work on the theme of scaling our MySQL stack to the next level. For background, like many other companies founded in the mid-2000s (Facebook, YouTube, GitHub, Basecamp), Shopify is a MySQL shop. We’ve invested a lot into our tooling to manage and scale MySQL, and lately, it’s been time to invest in improving ways how applications interact with MySQL.&lt;/p&gt;

&lt;p&gt;Accounting for all my learnings, I decided to commit not just for a single post about it, but to a &lt;strong&gt;series of at least three posts about scaling MySQL stack.&lt;/strong&gt; As always, &lt;a href=&quot;https://twitter.com/kirshatrov&quot; target=&quot;_blank&quot;&gt;follow me on Twitter&lt;/a&gt; to be the first to read them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;a href=&quot;/2020/03/23/scaling-mysql-stack-part-1-timeouts/&quot;&gt;previous post&lt;/a&gt; in the series talked about timeouts and how to configure them elastically in a large app.&lt;/p&gt;

&lt;p&gt;In this post, we’ll cover something not too far from timeouts: the &lt;strong&gt;deadline&lt;/strong&gt; concept that can help to enforce boundaries around how slow an entrypoint path can be.&lt;/p&gt;

&lt;p&gt;Imagine that you’ve tuned query timeouts well, and no query takes longer than 3 seconds. However, it’s still possible that some poorly designed controller action would produce 20 slow queries to the DB, allowing the max total response time of 60 seconds. That’s a very long time for a page to load, and it’s unlikely that the human on the otherwise will wait for that long. Most likely, all of that data would be queried and rendered and then served into nowhere because the client gave up on waiting for it and closed the socket.&lt;/p&gt;

&lt;p&gt;To save the resources that are used to serve slow paths and to free the capacity (imagine that all the internet starts hitting that slow path), it’s common to enforce a global request timeout on the app itself.&lt;/p&gt;

&lt;p&gt;In the Rails world, &lt;a href=&quot;https://github.com/sharpstone/rack-timeout&quot; target=&quot;_blank&quot;&gt;rack-timeout&lt;/a&gt; is a common solution to enforce that, although it has &lt;a href=&quot;https://github.com/sharpstone/rack-timeout/blob/master/doc/risks.md&quot; target=&quot;_blank&quot;&gt;major known issues&lt;/a&gt; with cleaning up resources that were used at the time of the interrupt.&lt;/p&gt;

&lt;p&gt;If we look around for similar concepts in the world of RPC (Remote Procedure Call), there’s a whole &lt;strong&gt;Deadline&lt;/strong&gt; concept &lt;a href=&quot;https://grpc.io/blog/deadlines/&quot; target=&quot;_blank&quot;&gt;there&lt;/a&gt;, where each call gets annotated with a deadline announcing when the operation should either complete or abort. And if you’ve ever written code in Go, you remember the &lt;code class=&quot;highlighter-rouge&quot;&gt;context&lt;/code&gt; feature that allows setting &lt;code class=&quot;highlighter-rouge&quot;&gt;WithDeadline&lt;/code&gt; on the current context.&lt;/p&gt;

&lt;p&gt;If at the beginning of the request we set the deadline to a timestamp in 30 seconds from now, and make every dependency like the MySQL adapter respect that, we could solve the problem with request timeouts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/2020-deadlines.svg&quot; alt=&quot;Request deadlines&quot; class=&quot;bordered&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h2&gt;

&lt;p&gt;The most common long-taking operation in web apps is SQL queries.&lt;/p&gt;

&lt;p&gt;We will use Rails’ ActiveRecord as an example of the ORM, but this concept is applicable to any stack.&lt;/p&gt;

&lt;p&gt;The idea of the deadline approach is to hook into the entrypoint of &lt;em&gt;yet another slow operation&lt;/em&gt;, and fail with an exception there if the deadline has exceeded. For ActiveRecord, that entrypoint is the &lt;code class=&quot;highlighter-rouge&quot;&gt;execute&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecord&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadlineExceededError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordError&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The query was cancelled because the request or a job timeout has been hit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;DeadlinePatch&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exceeded?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DeadlineExceededError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnectionAdapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Mysql2Adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DeadlinePatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s set the deadline in the middleware to make it initialized on every new request:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeadlineMiddleware&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;DEADLINE_SECONDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEADLINE_SECONDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'deadline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'deadline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve omitted the implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Deadline&lt;/code&gt; class, which is a plain Ruby object that acts as a store for the timestamp.&lt;/p&gt;

&lt;p&gt;The API like &lt;code class=&quot;highlighter-rouge&quot;&gt;Deadline.current.exceeded?&lt;/code&gt; allows developers to shape their code around it, if they are implementing any long-running flows.&lt;/p&gt;

&lt;p&gt;If you’ve got support for dynamic &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; from &lt;a href=&quot;/2020/03/23/scaling-mysql-stack-part-1-timeouts/&quot;&gt;previous post&lt;/a&gt;, you could hook into there and make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; on any query is no longer than the time left in the deadline. &lt;code class=&quot;highlighter-rouge&quot;&gt;Deadline.current.time_left_seconds&lt;/code&gt; returns that time.&lt;/p&gt;

&lt;p&gt;Someone might ask, “what about other remote calls, like Redis or Memcache, or HTTP clients? Unlike slow MySQL queries, both Redis and Memcache are supposed to complete within milliseconds. And for HTTP clients, it’s about doing the same as we did with MySQL adapter.&lt;/p&gt;

&lt;p&gt;It’s also a lot nicer internally and &lt;em&gt;much&lt;/em&gt; more reliable for MySQL to clean up due to a &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; timeout than to detect the broken connection and clean up after that.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is not a silver bullet – to make deadlines cover 100% of cases, you’ll need to verify that all network calls in your app respect the deadline. Thankfully, for most web apps, it’s the MySQL adapter and possibly HTTP clients to external APIs.&lt;/p&gt;

&lt;p&gt;We’ve had deadlines enabled in production at Shopify for months now, and it’s been excellent at helping to clean up and save resources on slow code paths. And I’d love to contribute the Deadlines work in &lt;strong&gt;Ruby on Rails upstream&lt;/strong&gt; - hit me up if you want to help me to do that!&lt;/p&gt;

&lt;p&gt;In the next post of &lt;strong&gt;Scaling MySQL stack series&lt;/strong&gt;, I’m going to write about adding &lt;strong&gt;observability&lt;/strong&gt; into all SQL queries, which especially comes useful for multi-tenant apps.&lt;/p&gt;

&lt;p&gt;Other posts in the series: &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-1-timeouts/&quot;&gt;Episode 1: Timeouts&lt;/a&gt; • &lt;a href=&quot;/2020/04/16/scaling-mysql-stack-part-3-observability/&quot;&gt;Episode 3: Observability&lt;/a&gt; • &lt;a href=&quot;/2020/04/27/scaling-mysql-stack-part-4-proxy/&quot;&gt;Episode 4: Proxies&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling MySQL stack, ep. 1: Timeouts</title>
   <link href="http://kirshatrov.com/posts/scaling-mysql-stack-part-1-timeouts/">
   <updated>2020-03-23T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/scaling-mysql-stack-part-1-timeouts</id>
   <content type="html">&lt;p&gt;I’ve spent a good part of last year collaborating with different people at work on the theme of scaling our MySQL stack to the next level. For background, like many other companies founded in the mid-2000s (Facebook, YouTube, GitHub, Basecamp), Shopify is a MySQL shop. We’ve invested a lot into our tooling to manage and scale MySQL, and lately, it’s been time to invest in improving ways how applications interact with MySQL.&lt;/p&gt;

&lt;p&gt;Accounting for all my learnings, I decided to commit not just for a single post about it, but to a &lt;strong&gt;series of at least three posts about scaling MySQL stack.&lt;/strong&gt; As always, &lt;a href=&quot;https://twitter.com/kirshatrov&quot; target=&quot;_blank&quot;&gt;follow me on Twitter&lt;/a&gt; to be the first to read them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This post is the first in the series, and it will talk about &lt;strong&gt;timeouts&lt;/strong&gt; and how to make them &lt;strong&gt;fine-grained&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Commonly, a query that’s taking too long to run will eventually time out, and the developer would see an exception. The first thing to find there is whether that’s a timeout on the &lt;strong&gt;client&lt;/strong&gt; or on the &lt;strong&gt;server&lt;/strong&gt; side.&lt;/p&gt;

&lt;p&gt;Timeout on the client side means that the client gave up on waiting for the response from the server. It could indicate not only a slow query but also a server that went away without closing the socket, making the client to wait for too long. At least in Ruby’s &lt;a href=&quot;https://github.com/brianmario/mysql2&quot; target=&quot;_blank&quot;&gt;mysql2&lt;/a&gt; client, client timeout is tweaked through &lt;code class=&quot;highlighter-rouge&quot;&gt;read_timeout&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;Timeout on the server always means that the query has run too long so MySQL server decided to terminate it.&lt;/p&gt;

&lt;p&gt;There’s multiple ways to set timeout on the server side:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SET GLOBAL MAX_EXECUTION_TIME=2000;&lt;/code&gt; (available in MySQL &amp;gt;=5.7.7)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Append a magic comment on all your queries, like &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT /*+ MAX_EXECUTION_TIME(1000) */ FROM products&lt;/code&gt; (available in MySQL &amp;gt;=5.7.7)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/LATEST/pt-kill.html&quot; target=&quot;_blank&quot;&gt;pt-kill&lt;/a&gt;, a tool that constantly polls all connections and kills those that have queries running for longer than X (commonly used before MySQL 5.7)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Timeout on the client should always be longer&lt;/strong&gt; than the timeout on the server - otherwise, your clients will never acknowledge server timing out and will always lose the connection and have to reconnect. With the right configuration, you should see clients timing out very rarely, and mostly due to network issues.&lt;/p&gt;

&lt;p&gt;Now, imagine you have a good understanding of timeouts and how to configure them properly. How do you leverage that in your app?&lt;/p&gt;

&lt;h2 id=&quot;cooking-timeouts-right&quot;&gt;Cooking timeouts right&lt;/h2&gt;

&lt;p&gt;A great standard timeout could be a value around 5 seconds. Make it longer, and you’re in risk of queries taking too much MySQL CPU time. That’s the risk that we want to reduce from the capacity standpoint to allow for more throughout for the rest of the queries (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Little%27s_law&quot; target=&quot;_blank&quot;&gt;Little’s law&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;At the same time, your app is likely to have some reporting feature that requires running longer-than-average queries on the DB. Eventually, you’ll have a slightly larger customer with more records in the DB that will take longer to fetch than the existing timeout allows. You want the client to get the most out of your app &lt;em&gt;now&lt;/em&gt;, so you go and increase the default timeout.&lt;/p&gt;

&lt;p&gt;Unless you do the right thing from the very beginning and offload analytical queries from the primary DB to a replica, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Online_analytical_processing&quot; target=&quot;_blank&quot;&gt;another store&lt;/a&gt; that is meant for that, you are very likely to end up with a query timeout configured to low double-digit numbers. While it’s a pretty bad state to be in terms of resiliency and resource usage (imagine the DB slows down for all queries and every client would block and wait too long), it’s a common thing that happened to many projects.&lt;/p&gt;

&lt;p&gt;The best thing you can do now (beside making those features use faster queries) is &lt;strong&gt;only to allow known slow things to be slow&lt;/strong&gt; and keep fast things fast. &lt;strong&gt;That means that the code path that is running a known bad query can be allowed to take 10 seconds to run, but most other codepaths that do O(1) lookups should still have a pretty low timeout.&lt;/strong&gt; This helps with two things: &lt;strong&gt;making regressions more noticeable&lt;/strong&gt; and making things &lt;strong&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/release-it/9781680500264/f_0047.html&quot; target=&quot;_blank&quot;&gt;fail fast&lt;/a&gt; during incidents&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whitelisting harmful patterns and call sites to limit their spread is what we often do at Shopify, we even gave it a name (&lt;a href=&quot;https://sirupsen.com/shitlists/&quot; target=&quot;_blank&quot;&gt;read about shitlists&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So, how do you achieve that with MySQL?&lt;/p&gt;

&lt;p&gt;In the previous section, I’ve mentioned that you can annotate a query with a magic comment that gives MySQL Server a &lt;strong&gt;hint&lt;/strong&gt; to limit its execution time:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT /*+ MAX_EXECUTION_TIME(10000) */ FROM products
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; takes time in milliseconds, so 10000 in my example is 10 seconds.&lt;/p&gt;

&lt;p&gt;There’s a lot more query hints that MySQL supports, &lt;a href=&quot;https://mysqlserverteam.com/new-optimizer-hints-in-mysql/&quot; target=&quot;_blank&quot;&gt;check out the list&lt;/a&gt; if you’re curious.&lt;/p&gt;

&lt;p&gt;Even ActiveRecord 6.0 comes with support for hints in the query builder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Product.optimizer_hints(&quot;MAX_EXECUTION_TIME(10000)&quot;).all
# SELECT /*+ MAX_EXECUTION_TIME(10000) */ `products`.* FROM `products`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way, you can set the global &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; to a lower value (I’d recommend &amp;lt;=5 seconds) and override it for specific queries that are known to be slow. This way, you will isolate parts of your project that need a larger timeout, while not having to increase the global timeout for the rest of the project.&lt;/p&gt;

&lt;p&gt;This works great for a small to medium size codebase, but what if your app has hundreds or thousands of call sites that would need to have explicit about tweaking the timeout?&lt;/p&gt;

&lt;p&gt;This has been the case for us, and we had to come up with something that wouldn’t require us to study and touch every wrong query pattern in the codebase.&lt;/p&gt;

&lt;p&gt;We settled on doing this on a per controller basis. Here’s a quick example of how that could be done in Rails:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;around_filter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_context_max_execution&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_context_max_execution&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uow_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_execution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_execution_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uow_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:query_max_execution_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_execution&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:query_max_execution_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max_execution_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uow_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# lookup the YAML table. Must return milliseconds&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve skipped the ActiveJob part for wrapping the job with into a thread-local variable in the same way as with the controller, but you get the idea.&lt;/p&gt;

&lt;p&gt;Now comes the corresponding bit to inject context-based &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; into all queries:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ConnectionPatch&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotate_sql_with_max_execution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;annotate_sql_with_max_execution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;valid_encoding?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/MAX_EXECUTION_TIME\(\d+\)/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The MySQL the parser [1] recognizes&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# optimizer hint comments after the initial keyword of&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SELECT, UPDATE, INSERT, REPLACE, and DELETE statements.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This code appends the hint after the first SELECT.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Subqueries are not modified by this patch.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# [1]: https://dev.mysql.com/doc/refman/5.7/en/optimizer-hints.html&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT /*+ MAX_EXECUTION_TIME(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_execution_ms&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;select /*+ MAX_EXECUTION_TIME(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_execution_ms&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max_execution_ms&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:query_max_execution_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:query_max_execution_ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# default 5 seconds&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnectionAdapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Mysql2Adapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordMaxExecution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ConnectionPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, we went through logs and collected all entry points (for a Rails app, that’s controllers and background jobs) that produce slow queries. We ended up having a YAML hash where the entry point is the key, and max query time we’ve seen in that entry point is the value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ less db/data/slow_query_shitlist.yml
---
UpdateAllProductsJob: 10000
AddressGeolocationJob: 6100
Dashboard::BarsController#show: 13800
Dashboard::CustomersController#index: 15400
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We could now wrap all code within every entry point into &lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_EXECUTION_TIME&lt;/code&gt; for “known to be bad” areas while enforcing a lower default timeout for the rest of the app.&lt;/p&gt;

&lt;p&gt;We could go further and figure a &lt;strong&gt;dynamic default timeout&lt;/strong&gt; based on the business importance of the code: REST or GraphQL API is hit by computers where a longer timeout is tolerable, while something like payments is interactive and would benefit from failing fast without having to wait for too long.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We often say “that thing timed out because it took too long”, but it’s essential to separate client timeouts from server timeouts. If configured right, you should never see clients to time out. That leaves us server timeouts to tackle.&lt;/p&gt;

&lt;p&gt;We use to think that query timeout is configured globally, while the latest versions of MySQL allow setting that dynamically per query. You can use that to contain code paths that are known to be slow, and if your app is too big to wrap each spot explicitly, you can use the shitlist approach.&lt;/p&gt;

&lt;p&gt;Using dynamic timeouts, you can enforce the best defaults on new code while keeping compatibility for features that required longer timeouts. Doing that will pontentially allow extra query throughput during overload and will limit the blast radius of disruptions.&lt;/p&gt;

&lt;p&gt;In the next post of &lt;strong&gt;Scaling MySQL stack series&lt;/strong&gt;, I’m going to write about the concept of &lt;strong&gt;deadlines&lt;/strong&gt; and how they could be leveraged in a production app.&lt;/p&gt;

&lt;p&gt;Other posts in the series: &lt;a href=&quot;/2020/04/06/scaling-mysql-stack-part-2-deadlines/&quot;&gt;Episode 2: Deadlines&lt;/a&gt; • &lt;a href=&quot;/2020/04/16/scaling-mysql-stack-part-3-observability/&quot;&gt;Episode 3: Observability&lt;/a&gt; • &lt;a href=&quot;/2020/04/27/scaling-mysql-stack-part-4-proxy/&quot;&gt;Episode 4: Proxies&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Databases and company growth</title>
   <link href="http://kirshatrov.com/posts/databases-and-growth/">
   <updated>2020-02-05T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/databases-and-growth</id>
   <content type="html">&lt;p&gt;You start a company, make the MVP in Ruby on Rails or whatever another technology is hyped at the moment, raise a round of investments, and start hiring people. All of your production fits in the Hobby plan on Heroku and a single database (also managed by Heroku).&lt;/p&gt;

&lt;p&gt;A few years after, your headcount is a couple hundred people, and the business is growing as well as demands for the app. You start noticing occasional load on that Heroku-managed database. This load could be analytical workloads like reports or a particularly noisy customer that hits a path that’s no so well optimized for the DB access.&lt;/p&gt;

&lt;p&gt;You move analytical workloads on a read-only replica of the primary DB and optimize that inefficient feature to use the right index. Maybe add some caching here and there. The DB load is back to the steady-state.&lt;/p&gt;

&lt;p&gt;Another few years after, the demand for your app is so high that the primary database is not handling the number of writes that your customers do. This could be celebrity sales doing thousands of checkouts per second or the number of cab rides spiking every Friday night PST time.&lt;/p&gt;

&lt;p&gt;You decide to shard your primary database by some sharding key. For a SaaS company that’s likely to be a column like &lt;code class=&quot;highlighter-rouge&quot;&gt;business_id&lt;/code&gt; (because businesses don’t overlap with each other). For a cab company, this could be something tied to the geography (maybe a neighborhood or a city). If done right, sharding will let your your infrastructure to scale horizontally and add 2x more shards with 2x more load.&lt;/p&gt;

&lt;p&gt;Another few years pass (think a 10-15 years old company), and your biggest customers are starting to push boundaries of a single shard. Of course, you could give them a fully dedicated shard (maybe with higher CPU DBs), but even that might not be enough for the capacity they want - imagine peak hours in San Francisco giving stress the SFO shard of the cab company, or a high volume seller peaking in numbers of checkout on their own shard.&lt;/p&gt;

&lt;p&gt;You spawn teams to optimize the performance of those features and educate everyone around the company to be more smart about working with the database, but you also know that will only buy you time. At this growth rate, you will eventually still outgrow the capacity of a single shard. On top of that, the number of new features introduced will, at some point, outgrow the existing features that you’ve been trying to optimize for less database pressure.&lt;/p&gt;

&lt;p&gt;This is especially common for any organization that ended up with an ORM (Object-relational mapping) as the core piece in their codebase. The largest benefit of ORMs is flexibility and iteration speed - which is great to bootstrap the business, but comes at a cost when you want everything on the critical path to be well optimized - and not crash the DB when someone puts the wrong &lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt; that messes up with an index.&lt;/p&gt;

&lt;p&gt;At this point of scale, I’ve seen many companies invest in their own, domain-specific data stores. At Facebook, everything is a relation on the graph (a post has comments, comments have likes, pages have likes). It was natural for them to introduce &lt;a href=&quot;https://www.usenix.org/system/files/conference/atc13/atc13-bronson.pdf&quot; target=&quot;_blank&quot;&gt;TAO&lt;/a&gt;, an internal data store for the social graph backed by MySQL and memcached. For Uber, trip data is always append-only, and often without a schema. So they came up with &lt;a href=&quot;https://eng.uber.com/schemaless-part-one/&quot; target=&quot;_blank&quot;&gt;Schemaless&lt;/a&gt;, a distributed key/value append-only store on top of MySQL.&lt;/p&gt;

&lt;p&gt;By specializing the data model and reducing the developer contact to a narrow set of APIs that are easier to scale, they gave developers a set of tools that scales by default. By having a narrow set of APIs you’ll allow the platform team to optimize those specifically, and it’s a lot easier to optimize append-only log (in case of Schemaless) than any-query-that-a-developer-can-construct with an ORM like ActiveRecord.&lt;/p&gt;

&lt;p&gt;Most often, these domain-specific databases are wrappers on top of existing, community-wide stores like MySQL, Postgres or etcd. But if you feel like you’re not ready to go that far to run your own DBaaS, there’s still plenty of things that could be done on the application side to enforce stricter patterns for DB access.&lt;/p&gt;

&lt;p&gt;One company that I spoke to had a point when they suffered from a series of outages, all related to human mistakes in making the ORM to build a query that would not hit the right index. As a solution, they changed their approach to the ORM by enforcing everyone to explicitly declare all queries - think &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; from ActiveRecord, but without possibility to chain them. On CI, they validate that all defined queries hit proper indexes. This would be a lot harder to achieve if they kept allowing arbitrary ActiveRecord-style chaining like &lt;code class=&quot;highlighter-rouge&quot;&gt;.where(...).where(...).order(...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re looking for more examples in addition to TAO and Schemaless, there are &lt;a href=&quot;https://engineering.linkedin.com/espresso/introducing-espresso-linkedins-hot-new-distributed-document-store&quot; target=&quot;_blank&quot;&gt;Espresso by LinkedIn&lt;/a&gt;, &lt;a href=&quot;https://blogs.dropbox.com/tech/2016/08/reintroducing-edgestore/&quot; target=&quot;_blank&quot;&gt;Edgestore by Dropbox&lt;/a&gt; and &lt;a href=&quot;https://github.com/twitter-archive/gizzard&quot; target=&quot;_blank&quot;&gt;Gizzard by Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the meantime, if we look at the history of YouTube, we’ll notice they went the other way. At the point when they needed to shard, they’ve realized that the codebase became so big that it would be too much effort to rewrite it to support multiple databases and sharding. Instead, they came up with Vitess. From the application perspective, Vitess looks like a single MySQL instance and speaks the same protocol, but underneath it will talk to different MySQL nodes depending on what table and what data range the query is requesting. This approach allows Vitess to accomplish impressive things like the &lt;a href=&quot;https://vitess.io/docs/user-guides/vertical-split/&quot; target=&quot;_blank&quot;&gt;live vertical split&lt;/a&gt; of a DB with minimum downtime and without making &lt;em&gt;any&lt;/em&gt; changes to the app, that would otherwise take weeks or months.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To summarize my points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;At a particular scale, some companies start to look into creating a data store specific to their domain: &lt;a href=&quot;https://www.usenix.org/system/files/conference/atc13/atc13-bronson.pdf&quot; target=&quot;_blank&quot;&gt;TAO&lt;/a&gt; by Facebook, &lt;a href=&quot;https://eng.uber.com/schemaless-part-one/&quot;&gt;Schemaless&lt;/a&gt; by Uber, &lt;a href=&quot;https://engineering.linkedin.com/espresso/introducing-espresso-linkedins-hot-new-distributed-document-store&quot; target=&quot;_blank&quot;&gt;Espresso by LinkedIn&lt;/a&gt;, &lt;a href=&quot;https://blogs.dropbox.com/tech/2016/08/reintroducing-edgestore/&quot; target=&quot;_blank&quot;&gt;Edgestore by Dropbox&lt;/a&gt; and &lt;a href=&quot;https://github.com/twitter-archive/gizzard&quot; target=&quot;_blank&quot;&gt;Gizzard by Twitter&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is dictated not only by scalability needs but also because giving less freedom to developers makes it easier to grow the org in terms of the headcount&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sometimes the “do fewer things, but do them more performant” part can also be achieved by restricting your existing APIs (and making them less flexible) without having to build your own store&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m very curios to learn more cases of this growth stage from other companies. I realize that there’s only a handful of them that went through this stage of scale. Please reach out to me on Twitter or comment on the post if this topic interests you!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Creating productive teams</title>
   <link href="http://kirshatrov.com/posts/creating-teams/">
   <updated>2020-01-25T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/creating-teams</id>
   <content type="html">&lt;p&gt;While I’ve mostly been writing about the tech, lately, my primary interest has been engineering management. This note is an observation of what I’ve seen as a successful pattern being part of at least 2 new teams spawned at work.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The time comes to spawn a new team, either from a group of people that are already working together or from a mix from different groups who don’t know each other really well. This may happen for various reasons, for example, desire to give autonomy to a couple people on the team who’re already working on a pretty isolated thing, or some reorg at the company.&lt;/p&gt;

&lt;p&gt;Forming a team may often feel uncomfortable for its members. Maybe they haven’t worked together, and they don’t know what to expect from each other, or they are frustrated by having to set up their own agenda, which before was dictated by the larger group.
The team forms and now they to figure out the roadmap. Sometimes that team would be started for a specific project in mind, sometimes they’d have a blank list to work on an area that has been underinvested (“our CI/CD process has not been great, let’s start a team that would invest into that“).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To my experience, the best thing to do for a new team is to take on a less ambitious project that already has a high chance of success.&lt;/strong&gt; This could be something that has already been well explored by others but didn’t have enough stuffing to do.&lt;/p&gt;

&lt;p&gt;The team would have a  higher chance to get that done well (compared to taking on something ambitious but complex and more likely to fail), and shipping a successful thing together will create trust between members and something to celebrate.&lt;/p&gt;

&lt;p&gt;As they all become confident in the domain and generate new ideas on the way, this will create a solid base to take on something more ambitious as the next project. Then, having a team that trusts each other and has an exciting momentum will only increase the chance to succeed for that “high impact, but many unknowns” project.&lt;/p&gt;

&lt;p&gt;Of course, there are exceptions to my statement. If the new team consists of senior individual contributors who already have high trust battery and domain knowledge, it might not be as risky to allow them to undertake more ambitious goals from day one. But in the rest cases, letting the team start slowly with projects that have fewer unknowns is a lot more likely to give you a healthy team that can sustain long-term.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Contributing to Ruby MRI</title>
   <link href="http://kirshatrov.com/posts/contributing-to-mri/">
   <updated>2020-01-11T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/contributing-to-mri</id>
   <content type="html">&lt;p&gt;I’ve recently worked on (so far) my biggest &lt;a href=&quot;https://github.com/ruby/ruby/pull/2827&quot; target=&quot;_blank&quot;&gt;patch&lt;/a&gt; to Ruby MRI. While the changeset is only 50 lines of code it took me a few days and couple takes to figure out the right way to make &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo&lt;/code&gt; interrupt and fail fast when DNS is unhealthy.&lt;/p&gt;

&lt;p&gt;It’s often unclear where to start when you’re about to contribute to some large codebase in C. This post is a collection of notes, mostly for myself, on how to contribute code to Ruby.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; is your best friend. For any project, usually I like to start from reading the Makefile, but Ruby is using &lt;code class=&quot;highlighter-rouge&quot;&gt;autoconf&lt;/code&gt; to generate platform-dependent Makefile, so 1) at the start you don’t even have a Makefile 2) the generated one is not too readable. Still, learn and get to understand what &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;make install&lt;/code&gt; do generally.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At least for my patch, I’ve had to develop and run it on Linux since it was specific to the OS. My primary computer is Mac and the usual choice would be to run a devbox VM and write my code there. I’m not always a fan of VMs because it takes extra time to configure and it’s trickier to use your favorite editor with it (unless you have a portable VIM config).&lt;/p&gt;

    &lt;p&gt;I’ve recently tweeted about how awesome is VS Code’s &lt;a href=&quot;https://code.visualstudio.com/docs/remote/containers&quot; target=&quot;_blank&quot;&gt;devcontainers feature&lt;/a&gt;, and I wanted to try that for MRI too. It took me a single &lt;code class=&quot;highlighter-rouge&quot;&gt;docker compose up&lt;/code&gt; and “Attach to container” in VS Code to allow to keep writing code in my editor while being able to build and test on Linux. That made me a lot comfortable working on the project. Check out the &lt;a href=&quot;https://gist.github.com/kirs/3912e1a44b67fda906ab4f6aad09ebaf&quot; target=&quot;_blank&quot;&gt;docker-compose.yml&lt;/a&gt; I’ve used.&lt;/p&gt;

    &lt;p&gt;Below is a screenshot of how a running Ubuntu container integrates with the editor.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/dev-container-mri.png&quot; alt=&quot;VS Code devcontainer feature&quot; class=&quot;bordered&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After you make changes, you’d usually want to run tests. I know how to run tests for Rails (&lt;code class=&quot;highlighter-rouge&quot;&gt;bin/rails test test/...&lt;/code&gt;) and for Minitest (&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec ruby -Itest test/...&lt;/code&gt;), but from what I know, every C project in different and MRI has its own test framework. &lt;code class=&quot;highlighter-rouge&quot;&gt;make test-all&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;make test-all TESTS='test/path/to/test'&lt;/code&gt; is the way to run tests here (more on that below)&lt;/li&gt;
  &lt;li&gt;Koichi’s &lt;a href=&quot;https://github.com/ko1/rubyhackchallenge/tree/master/EN&quot; target=&quot;_blank&quot;&gt;ruby hack challenge repo&lt;/a&gt; is a gem when it comes to “how do I even develop this?”. It contains multiple guides on what’s the MRI structure, how to build it, how to test it and so on. You can forget what’s my post about, but if you’re interested in contributing to MRI, &lt;strong&gt;that’s the repo that you should star&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Here’s the flow I used:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;c&quot;&gt;# build within current directory&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make install-nodoc &lt;span class=&quot;c&quot;&gt;# install built files skipping rdoc which takes time&lt;/span&gt;
./ruby my-script-to-reproduce.rb &lt;span class=&quot;c&quot;&gt;# run something on locally built ruby&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-all &lt;span class=&quot;c&quot;&gt;# run all tests, thought that will take a while&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;-all &lt;span class=&quot;nv&quot;&gt;TESTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test/socket/test_socket.rb'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# run socket-related tests&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# push to github, let the CI generate more failed tests&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# run tests locally again and try to fix it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://silverhammermba.github.io/emberb/c/&quot; target=&quot;_blank&quot;&gt;The Ruby C API&lt;/a&gt; is super valuable when it comes to hacking on internals and also to writing native gems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this has been helpful. Even if you don’t have a patch to contribute in mind, it’s still very fun to learn how the language actually work, and to find how Ruby is actually implemented in C. There’s nothing in C to be afraid of.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Playing with BPF</title>
   <link href="http://kirshatrov.com/posts/bpf-playground/">
   <updated>2019-12-25T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/bpf-playground</id>
   <content type="html">&lt;p&gt;I’ve been taking some time to study the &lt;a href=&quot;http://www.brendangregg.com/bpf-performance-tools-book.html&quot; target=&quot;_blank&quot;&gt;BPF Performance Tools&lt;/a&gt; book by Brendan Gregg.&lt;/p&gt;

&lt;p&gt;There’s a been a lot of partial resources and tips about using BPF, and it has already helped me to find an epic &lt;a href=&quot;/2019/11/04/finding-memory-leak-in-cgo/&quot; target=&quot;_blank&quot;&gt;memory leak&lt;/a&gt;. I always wanted to get a chance to learn it deeper and the release of Gregg’s book was a good cause. My colleague from Shopify’s ProdEng team Dale Hamel helped to review the book too, which only pumped my interest about the technology.&lt;/p&gt;

&lt;p&gt;When it comes to observability, the most impact (IMO) from being able to trace something really quickly and find the root cause is during incidents, when it’s not clear what’s happening and pulling the right observability tool from your hat is the top skill. That’s the muscle that I’d want to extract from the book, and writing notes in “what I’ve learned” format will hopefully help.&lt;/p&gt;

&lt;p&gt;This post is a collection of notes taken while getting my hands dirty with each of the tools, as the book goes.&lt;/p&gt;

&lt;h2 id=&quot;getting-bpfcc-tools-ready&quot;&gt;0. Getting bpfcc-tools ready&lt;/h2&gt;

&lt;p&gt;Turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install bpfcc-tools&lt;/code&gt; on Ubuntu 18.04 Bionic is broken, as I’m writing this in December 2019. Thankfully it’s fixed in the upstream, and I &lt;a href=&quot;https://github.com/iovisor/bcc/issues/2119#issuecomment-568455415&quot; target=&quot;_blank&quot;&gt;documented&lt;/a&gt; steps how to install a nightly package.&lt;/p&gt;

&lt;h2 id=&quot;execsnoop&quot;&gt;1. execsnoop&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;execsnoop&lt;/code&gt; prints all processes that were launched (aka trace &lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt; syscalls). In the real life, it might come handy to inspect external calls coming from the application server (for instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;imagemagick&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Steps I’ve taken:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open a terminal tab, SSH to the devbox, run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /usr/share/bcc/tools/execsnoop&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSH to the same VM from another terminal tab, observe &lt;code class=&quot;highlighter-rouge&quot;&gt;execsnoop&lt;/code&gt; in tab 1) printing all the commands that were executed during the login:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PCOMM            PID    PPID   RET ARGS
sshd             5429   1430     0 /usr/sbin/sshd -D -R
sh               5431   5429     0
env              5432   5431     0 /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d
run-parts        5432   5431     0 /bin/run-parts --lsbsysinit /etc/update-motd.d
00-header        5433   5432     0 /etc/update-motd.d/00-header
uname            5434   5433     0 /bin/uname -o
uname            5435   5433     0 /bin/uname -r
uname            5436   5433     0 /bin/uname -m
10-help-text     5437   5432     0 /etc/update-motd.d/10-help-text
50-landscape-sy  5438   5432     0 /etc/update-motd.d/50-landscape-sysinfo
grep             5439   5438     0 /bin/grep -c ^processor /proc/cpuinfo
cut              5443   5441     0 /usr/bin/cut -f1 -d   /proc/loadavg
bc               5442   5440     0 /usr/bin/bc
date             5444   5438     0 /bin/date
landscape-sysin  5445   5438     0 /usr/bin/landscape-sysinfo
ldconfig         5446   5445     0 /sbin/ldconfig -p
ldconfig.real    5446   5445     0 /sbin/ldconfig.real -p
ldconfig         5447   5445     0 /sbin/ldconfig -p
ldconfig.real    5447   5445     0 /sbin/ldconfig.real -p
who              5449   5445     0 /usr/bin/who -q
50-motd-news     5450   5432     0 /etc/update-motd.d/50-motd-news
cat              5451   5450     0 /bin/cat /var/cache/motd-news
tr               5453   5450     0 /usr/bin/tr -d \000-\011\013\014\016-\037
head             5452   5450     0 /usr/bin/head -n 10
cut              5454   5450     0 /usr/bin/cut -c -80
80-esm           5455   5432     0 /etc/update-motd.d/80-esm
lsb_release      5456   5455     0 /usr/bin/lsb_release -cs
lsb_release      5457   5455     0 /usr/bin/lsb_release -ds
80-livepatch     5458   5432     0 /etc/update-motd.d/80-livepatch
90-updates-avai  5459   5432     0 /etc/update-motd.d/90-updates-available
cat              5460   5459     0 /bin/cat /var/lib/update-notifier/updates-available
91-release-upgr  5461   5432     0 /etc/update-motd.d/91-release-upgrade
cut              5464   5462     0 /usr/bin/cut -d  -f4
lsb_release      5463   5462     0 /usr/bin/lsb_release -sd
release-upgrade  5461   5432     0 /usr/lib/ubuntu-release-upgrader/release-upgrade-motd
date             5465   5461     0 /bin/date +%s
stat             5466   5461     0 /usr/bin/stat -c %Y /var/lib/ubuntu-release-upgrader/release-upgrade-available
expr             5467   5461     0 /usr/bin/expr 1577101965 + 86400
95-hwe-eol       5468   5432     0 /etc/update-motd.d/95-hwe-eol
update-motd-hwe  5468   5432     0 /usr/lib/update-notifier/update-motd-hwe-eol
apt-config       5469   5468     0 /usr/bin/apt-config shell StateDir Dir::State
dpkg             5470   5469     0 /usr/bin/dpkg --print-foreign-architectures
apt-config       5471   5468     0 /usr/bin/apt-config shell ListDir Dir::State::Lists
dpkg             5472   5471     0 /usr/bin/dpkg --print-foreign-architectures
apt-config       5473   5468     0 /usr/bin/apt-config shell DpkgStatus Dir::State::status
dpkg             5474   5473     0 /usr/bin/dpkg --print-foreign-architectures
apt-config       5475   5468     0 /usr/bin/apt-config shell EtcDir Dir::Etc
dpkg             5476   5475     0 /usr/bin/dpkg --print-foreign-architectures
apt-config       5477   5468     0 /usr/bin/apt-config shell SourceList Dir::Etc::sourcelist
dpkg             5478   5477     0 /usr/bin/dpkg --print-foreign-architectures
find             5479   5468     0 /usr/bin/find /var/lib/apt/lists/ /etc/apt/sources.list //var/lib/dpkg/status -type f -newer /var/lib/update-notifier/hwe-eol -print -quit
dirname          5481   5480     0 /usr/bin/dirname /var/lib/update-notifier/hwe-eol
mktemp           5480   5468     0 /bin/mktemp -p /var/lib/update-notifier
cat              5482   5468     0 /bin/cat /var/lib/update-notifier/hwe-eol
rm               5483   5468     0 /bin/rm -f /var/lib/update-notifier/tmp.RjVbtK5reS
97-overlayroot   5484   5432     0 /etc/update-motd.d/97-overlayroot
egrep            5486   5485     0 /bin/egrep overlayroot|/media/root-ro|/media/root-rw /proc/mounts
sort             5487   5485     0 /usr/bin/sort -r
grep             5486   5485     0 /bin/grep -E overlayroot|/media/root-ro|/media/root-rw /proc/mounts
98-fsck-at-rebo  5488   5432     0 /etc/update-motd.d/98-fsck-at-reboot
update-motd-fsc  5488   5432     0 /usr/lib/update-notifier/update-motd-fsck-at-reboot
stat             5489   5488     0 /usr/bin/stat -c %Y /var/lib/update-notifier/fsck-at-reboot
awk              5491   5490     0 /usr/bin/awk {print $1} /proc/uptime
date             5490   5488     0 /bin/date -d now - 1614.44 seconds +%s
date             5492   5488     0 /bin/date +%s
cat              5493   5488     0 /bin/cat /var/lib/update-notifier/fsck-at-reboot
98-reboot-requi  5494   5432     0 /etc/update-motd.d/98-reboot-required
update-motd-reb  5494   5432     0 /usr/lib/update-notifier/update-motd-reboot-required
bash             5496   5495     0 /bin/bash
groups           5498   5497     0 /usr/bin/groups
locale-check     5500   5499     0 /usr/bin/locale-check C.UTF-8
locale           5501   5496     0 /usr/bin/locale
lesspipe         5504   5503     0 /usr/bin/lesspipe
basename         5505   5504     0 /usr/bin/basename /usr/bin/lesspipe
dirname          5507   5506     0 /usr/bin/dirname /usr/bin/lesspipe
dircolors        5509   5508     0 /usr/bin/dircolors -b
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Turns out there’s a lot of stuff involved when you ssh and login into a terminal session.&lt;/p&gt;

&lt;h2 id=&quot;biolatency&quot;&gt;2. biolatency&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;biolatency&lt;/code&gt; prints stats about I/O latency as a diagram. In the past, I’ve seen my colleagues using it to debug slow disks in cloud, which might be especially critical for latency-sensitive workloads like DBs.&lt;/p&gt;

&lt;p&gt;Steps I’ve taken:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;fio&lt;/code&gt; (I/O tester) on a VM with standard disk (&lt;code class=&quot;highlighter-rouge&quot;&gt;pd-standard&lt;/code&gt; on Google Cloud) and run a sample test:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 $ fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test --filename=random_read_write.fio --bs=4k --iodepth=64 --size=4G --readwrite=randrw --rwmixread=75
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;biolatency&lt;/code&gt; in another tab:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/share/bcc/tools/biolatency -D
Tracing block device I/O... Hit Ctrl-C to end.
^C

disk = 'sda'
     usecs               : count     distribution
         0 -&amp;gt; 1          : 0        |                                        |
         2 -&amp;gt; 3          : 0        |                                        |
         4 -&amp;gt; 7          : 0        |                                        |
         8 -&amp;gt; 15         : 0        |                                        |
        16 -&amp;gt; 31         : 1        |                                        |
        32 -&amp;gt; 63         : 14       |                                        |
        64 -&amp;gt; 127        : 7        |                                        |
       128 -&amp;gt; 255        : 1        |                                        |
       256 -&amp;gt; 511        : 0        |                                        |
       512 -&amp;gt; 1023       : 8        |                                        |
      1024 -&amp;gt; 2047       : 9        |                                        |
      2048 -&amp;gt; 4095       : 30       |                                        |
      4096 -&amp;gt; 8191       : 49       |                                        |
      8192 -&amp;gt; 16383      : 172      |                                        |
     16384 -&amp;gt; 32767      : 298      |*                                       |
     32768 -&amp;gt; 65535      : 395      |*                                       |
     65536 -&amp;gt; 131071     : 758      |***                                     |
    131072 -&amp;gt; 262143     : 1290     |*****                                   |
    262144 -&amp;gt; 524287     : 9138     |****************************************|
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The latency seems pretty high!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Provision another VM with a local SSD and re-run the command:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;disk = 'nvme0n1'
     usecs               : count     distribution
         0 -&amp;gt; 1          : 0        |                                        |
         2 -&amp;gt; 3          : 0        |                                        |
         4 -&amp;gt; 7          : 0        |                                        |
         8 -&amp;gt; 15         : 0        |                                        |
        16 -&amp;gt; 31         : 0        |                                        |
        32 -&amp;gt; 63         : 47812    |****                                    |
        64 -&amp;gt; 127        : 171016   |***************                         |
       128 -&amp;gt; 255        : 448958   |****************************************|
       256 -&amp;gt; 511        : 136858   |************                            |
       512 -&amp;gt; 1023       : 50191    |****                                    |
      1024 -&amp;gt; 2047       : 69666    |******                                  |
      2048 -&amp;gt; 4095       : 57147    |*****                                   |
      4096 -&amp;gt; 8191       : 7615     |                                        |
      8192 -&amp;gt; 16383      : 246      |                                        |
     16384 -&amp;gt; 32767      : 47       |                                        |
     32768 -&amp;gt; 65535      : 41       |                                        |
     65536 -&amp;gt; 131071     : 120      |                                        |
    131072 -&amp;gt; 262143     : 298      |                                        |
    262144 -&amp;gt; 524287     : 511      |                                        |
    524288 -&amp;gt; 1048575    : 1263     |                                        |
   1048576 -&amp;gt; 2097151    : 1658     |                                        |
   2097152 -&amp;gt; 4194303    : 152      |                                        |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As expected, switching to SSD gives much lower latency.&lt;/p&gt;

&lt;h1 id=&quot;opensnoop&quot;&gt;3. opensnoop&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;opensnoop&lt;/code&gt; traces all files that were open on the system (aka trace &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; syscalls).&lt;/p&gt;

&lt;p&gt;Steps I’ve taken:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In one tab, run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo /usr/share/bcc/tools/opensnoop&lt;/code&gt; (optionally pass &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; to scope it to a specific app)&lt;/li&gt;
  &lt;li&gt;In another tab, run some user app (in my case it was ProxySQL since I’ve already had it compiled on that devbox)&lt;/li&gt;
  &lt;li&gt;Observe files that ProxySQL attempted to open:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo /usr/share/bcc/tools/opensnoop -n proxysql

PID    COMM               FD ERR PATH
2470   proxysql            3   0 /etc/ld.so.cache
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libgnutls.so.30
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libpthread.so.0
2470   proxysql            3   0 /lib/x86_64-linux-gnu/librt.so.1
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libdl.so.2
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libstdc++.so.6
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libm.so.6
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libgcc_s.so.1
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libc.so.6
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libz.so.1
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libp11-kit.so.0
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libidn2.so.0
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libunistring.so.2
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libtasn1.so.6
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libnettle.so.6
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libhogweed.so.4
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libgmp.so.10
2470   proxysql            3   0 /usr/lib/x86_64-linux-gnu/libffi.so.6
2470   proxysql            3   0 /proc/sys/vm/overcommit_memory
2470   proxysql            3   0 /sys/kernel/mm/transparent_hugepage/enabled
2470   proxysql            3   0 /etc/nsswitch.conf
2470   proxysql            3   0 /etc/ld.so.cache
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/tls/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/tls/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64-linux-gnu/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/tls/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/tls/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64-linux-gnu/libnss_db.so.2
2470   proxysql           -1   2 /lib/tls/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/tls/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /lib/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/tls/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/tls/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/tls/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/x86_64/libnss_db.so.2
2470   proxysql           -1   2 /usr/lib/libnss_db.so.2
2470   proxysql            3   0 /etc/ld.so.cache
2470   proxysql            3   0 /lib/x86_64-linux-gnu/libnss_files.so.2
2470   proxysql            3   0 /etc/services
2470   proxysql           -1   2 /usr/local/ssl/openssl.cnf
2470   proxysql            3   0 /etc/localtime
2470   proxysql            3   0 /dev/urandom
2470   proxysql            3   0 /home/kir/proxysql-key.pem
2470   proxysql            3   0 /home/kir/proxysql-cert.pem
2470   proxysql            3   0 /usr/bin/proxysql
2470   proxysql            4   0 /home/kir/proxysql.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Under the hood, &lt;code class=&quot;highlighter-rouge&quot;&gt;opensnoop&lt;/code&gt; is just a fancy wrapper around &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo bpftrace -e 'tracepoint:syscalls:sys_enter_open*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, tracing &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; syscalls only shows files that were opened, but not files that were attempted to open but didn’t exist. This might come useful if you want to trace an app that’s failing due some config file that doesn’t exist.&lt;/p&gt;

&lt;p&gt;A common scanerio could be:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# some other behaviour&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my case, it was ProxySQL failing to start because it couldn’t find the config file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ proxysql
2019-12-25 18:26:58 main.cpp:829:ProxySQL_Main_process_global_variables(): [WARNING] Unable to open config file /etc/proxysql.cnf
[Warning]: Cannot open any default config file . Using default datadir in current working directory /home/kir
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s find a syscall that attempts (and fails) to read &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/proxysql.cnf&lt;/code&gt;. From what I found, it’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; syscall that is used to check for file existance. It was easy enough to come up with a BPF instruction.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo bpftrace -e 'tracepoint:syscalls:sys_enter_access { printf(&quot;%s %s\n&quot;, comm, str
Attaching 1 probe...
proxysql /etc/ld.so.preload
proxysql /etc/proxysql.cnf
proxysql /home/kir/proxysql-key.pem
proxysql /home/kir/proxysql-cert.pem
proxysql /home/kir/proxysql-ca.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also at this point, I’ve started to peak and learn syntax for &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt;, as opposed to user-friendly tools around it like &lt;code class=&quot;highlighter-rouge&quot;&gt;opensnoop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maybe I could even find the stacktrace?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo bpftrace -e 'tracepoint:syscalls:sys_enter_access { printf(&quot;%s %s %s\n&quot;, comm, str(args-&amp;gt;filename), ustack); }'
Attaching 1 probe...
proxysql /etc/ld.so.preload
        0x7f4cdaf6e9d7
        0x7f4cdaf6c9ef
        0x40

proxysql /etc/proxysql.cnf
        access+7
        0x6e632e6c71737978
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Not much info from the stack trace anyways. Debugging symbols must be missing. Let’s try to recompile ProxySQL with &lt;code class=&quot;highlighter-rouge&quot;&gt;make debug&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo bpftrace -e 'tracepoint:syscalls:sys_enter_access { printf(&quot;%s %s %s\n&quot;, comm, str(args-&amp;gt;filename), ustack); }'
proxysql /etc/ld.so.preload
        0x7f95ff32f9d7
        0x7f95ff32d9ef
        0x40

proxysql /etc/proxysql.cnf
        0x7f95fed0a0e7
        _ZN19ProxySQL_ConfigFile8OpenFileEPKc+94
        _Z38ProxySQL_Main_process_global_variablesiPPKc+125
        main+115
        0x7f95fec23b6b
        0x41fd89415541f689
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yay! Now we can know that it’s the &lt;code class=&quot;highlighter-rouge&quot;&gt;ProxySQL_ConfigFile8OpenFileEPK&lt;/code&gt; function that checks for existance of &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/proxysql.cnf&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;access()&lt;/code&gt; syscall.&lt;/p&gt;

&lt;h2 id=&quot;inspecting-failed-dns-queries&quot;&gt;Inspecting failed DNS queries&lt;/h2&gt;

&lt;p&gt;I wanted to play more with the raw &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace -e&lt;/code&gt; and I came up with an actual problem from production that would be interesting to debug.
At work, I observed a tiny percentage of RPCs failing due DNS lookups timing out. I don’t have an idea yet why that might be happening, but with BPF I could at least observe those events better.&lt;/p&gt;

&lt;p&gt;DNS resolution is done by &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo(3)&lt;/code&gt;. I found &lt;a href=&quot;https://github.com/iovisor/bpftrace/blob/master/tools/gethostlatency.bt&quot; target=&quot;_blank&quot;&gt;gethostlatency.bt&lt;/a&gt; in bpftrace samples code which observes DNS resolution latency - something close to my case.&lt;/p&gt;

&lt;p&gt;Here is the gist of it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uprobe:/lib/x86_64-linux-gnu/libc.so.6:getaddrinfo,
uprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname,
uprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname2
{
	@start[tid] = nsecs;
	@name[tid] = arg0;
}

uretprobe:/lib/x86_64-linux-gnu/libc.so.6:getaddrinfo,
uretprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname,
uretprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname2
/@start[tid]/
{
	$latms = (nsecs - @start[tid]) / 1000000;
	time(&quot;%H:%M:%S  &quot;);
	printf(&quot;%-6d %-16s %6d %s\n&quot;, pid, comm, $latms, str(@name[tid]));
	delete(@start[tid]);
	delete(@name[tid]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The way I understand it, it does the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Capture the start of a user-land probe &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo/gethostbyname/gethostbyname2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Record the timestamp and the host&lt;/li&gt;
  &lt;li&gt;Capture the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo/gethostbyname/gethostbyname2&lt;/code&gt; probe&lt;/li&gt;
  &lt;li&gt;Print the summary about the trace, including the delta of timestamps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I’m looking for, is to only print &lt;em&gt;failed&lt;/em&gt; DNS lookups. Luckily, the end capture (&lt;code class=&quot;highlighter-rouge&quot;&gt;uretprobe&lt;/code&gt;) contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;retval&lt;/code&gt; (return value) field. According to &lt;code class=&quot;highlighter-rouge&quot;&gt;getaddrinfo(3)&lt;/code&gt; docs, non-zero return code means it failed. Let’s filter by that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BEGIN
{
        printf(&quot;Tracing getaddr/gethost calls... Hit Ctrl-C to end.\n&quot;);
        printf(&quot;%-9s %-6s %-16s %6s %s\n&quot;, &quot;TIME&quot;, &quot;PID&quot;, &quot;COMM&quot;, &quot;LATms&quot;,
            &quot;HOST&quot;);
}

uprobe:/lib/x86_64-linux-gnu/libc.so.6:getaddrinfo,
uprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname,
uprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname2
{
        @name[tid] = arg0;
}

uretprobe:/lib/x86_64-linux-gnu/libc.so.6:getaddrinfo,
uretprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname,
uretprobe:/lib/x86_64-linux-gnu/libc.so.6:gethostbyname2
{
        if (retval != 0 ) { // for some reason retval &amp;lt; 0 didn't work in if statement
                time(&quot;%H:%M:%S  &quot;);
                printf(&quot;failed | %-6d %-16s (error: %d) %s\n&quot;, pid, comm, retval, str(@name[tid]));
        };
        delete(@name[tid]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, how do I locally reproduce a failing DNS lookup? The way to &lt;a href=&quot;https://gist.github.com/kirs/5f711099b23ddae7a87ebb082ce43f59&quot; target=&quot;_blank&quot;&gt;stub&lt;/a&gt; that I’ve learned earlier it is to point resolv to a non-existing DNS server:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// find your original DNS server
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat /etc/resolv.conf |grep -i &lt;span class=&quot;s1&quot;&gt;'^nameserver'&lt;/span&gt;|head -n1|cut -d &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; -f2

// to take DNS down and point it to 127.0.0.1:
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sed &lt;span class=&quot;s1&quot;&gt;'s/&amp;lt;your-original-DNS-server&amp;gt;/127.0.0.1/g'&lt;/span&gt; /etc/resolv.conf&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt; /etc/resolv.conf

// to take DNS back up:
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;sed &lt;span class=&quot;s1&quot;&gt;'s/127.0.0.1/&amp;lt;your-original-DNS-server&amp;gt;/g'&lt;/span&gt; /etc/resolv.conf&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt; /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, with the probe running, we can try to hit &lt;code class=&quot;highlighter-rouge&quot;&gt;curl google.com&lt;/code&gt; (which will fail on name lookup) and see the following output from &lt;code class=&quot;highlighter-rouge&quot;&gt;bpftrace&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;20:28:19  failed | 24087  curl             (error -3) google.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hurray!&lt;/p&gt;

&lt;p&gt;There’s probably another story for how to long-run that safely in production environment, which I’m yet to learn.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;These are my notes for what I’ve learned so far from the BPF book, and I’m only 1/4 way through. Let’s see what the rest of the book brings.&lt;/p&gt;

&lt;p&gt;The goal of publishing this is mostly for me to be able to come back and revisit some steps from what I’ve documented, but I hope it could be useful for others too.&lt;/p&gt;

&lt;p&gt;I’m eager to learn if there’s anything here that I misunderstood or something that could be done better - please feel free to contact me on Twitter and point it out.&lt;/p&gt;

&lt;p&gt;Also, thanks to my friend Javier Honduco for walking me over and explaining some of those things I’ve learned.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Finding a memory leak in a Go app with cgo bindings</title>
   <link href="http://kirshatrov.com/posts/finding-memory-leak-in-cgo/">
   <updated>2019-11-04T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/finding-memory-leak-in-cgo</id>
   <content type="html">&lt;p&gt;In this post, I’d like to share a story how my team was able to find and fix a memory leak in a Go app that’s been using a leaking C extension through cgo.&lt;/p&gt;

&lt;p&gt;Usually, finding a leak in Go apps is rather trivial thanks to the built-in profiling tool that comes with Go. &lt;code class=&quot;highlighter-rouge&quot;&gt;go tool pprof&lt;/code&gt; with a minimum setup steps will show you all recent allocations and the overview of the memory heap. Our case turned out to be a lot more interesting.&lt;/p&gt;

&lt;p&gt;At work, we have an internal service discovery application written in Go and backed by Zookeeper. Zookeeper is great as a distributed configuration store, but its protocol is quite complex, so we have a REST API wrapper in Go on top of it to make it easy to consume from other apps. This service discovery tool answers questions like “in which datacenter and region does a shop live?” or “to which region should we send a new shop?” or “what’s the list of IPs that are bad citizens?”.&lt;/p&gt;

&lt;p&gt;The problem we’ve been seeing was that the memory consumed by the app has been growing unexpectedly fast. It would boot taking ~50Mb of RSS and then grow to &amp;gt;500Mb in a matter of hours until it was killed by container’s OOM setting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/leak-before.png&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was a typical saw wave memory leak situation.&lt;/p&gt;

&lt;p&gt;We could allow the container to take more memory and buy more time until it would get killed but that would only threat the symptom. We really wanted to figure out what was wrong with it.&lt;/p&gt;

&lt;p&gt;The first thing to do was to add &lt;code class=&quot;highlighter-rouge&quot;&gt;import _ &quot;net/http/pprof&quot;&lt;/code&gt; and attach to the profiling port. You could even do that to a production container in Kubernetes with &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl port-forward&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;However, attaching to a process with RSS of &lt;strong&gt;hundreds of megabytes&lt;/strong&gt;, you could see Go’s heap only being less than hundred of Mb. This meant that the memory was taken by something outside of the Go’s VM. Go profiler would’t be able to show any of that memory.&lt;/p&gt;

&lt;p&gt;What could it be? We use &lt;a href=&quot;https://github.com/Shopify/gozk&quot; target=&quot;_blank&quot;&gt;gozk&lt;/a&gt; as a Zookeeper client. gozk is using &lt;a href=&quot;https://golang.org/cmd/cgo/&quot; target=&quot;_blank&quot;&gt;cgo&lt;/a&gt; to call out to libzookeeper, a C client for Zookeper.&lt;/p&gt;

&lt;p&gt;Usually when there’s C involved, there’s a memory leak somewhere there. I saw a bunch of mallocs in gozk’s code, not saying about the generated C code in &lt;code class=&quot;highlighter-rouge&quot;&gt;libzookeeper&lt;/code&gt; that was even more tricky to follow.&lt;/p&gt;

&lt;p&gt;I recently enjoyed reading Sam Saffron’s &lt;a href=&quot;https://samsaffron.com/archive/2019/10/08/debugging-unmanaged-and-hidden-memory-leaks-in-ruby&quot; target=&quot;_blank&quot;&gt;Debugging hidden memory leaks in Ruby&lt;/a&gt; blog post, where he mentioned &lt;a href=&quot;https://github.com/KDE/heaptrack&quot; target=&quot;_blank&quot;&gt;heaptrack&lt;/a&gt; as something that could find leaks in C bindings.&lt;/p&gt;

&lt;p&gt;It took my colleague Jared and I some time to get it working in a Debian container. In this app we used two stage Docker build to make the final container very light.&lt;/p&gt;

&lt;p&gt;Our Dockerfile looked like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM golang:1.12-buster AS buildstage
go build -o /bin/appname

FROM debian:buster-slim

COPY --from=buildstage /bin/appname /bin/appname
ENTRYPOINT [&quot;/bin/appname&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;heaptrack needed the actual Go tooling to inspect the process, so we’ve had to remove the two stage build optimization:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM golang:1.12-buster
go build -o /bin/appname
ENTRYPOINT [&quot;/bin/appname&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When we were finally able to run &lt;code class=&quot;highlighter-rouge&quot;&gt;heaptrack&lt;/code&gt;, it didn’t work due some syntax errors:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heaptrack --pid 12

heaptrack output will be written to &quot;/go/heaptrack.magellan.578.gz&quot;
injecting heaptrack into application via GDB, this might take some time...
warning: File &quot;/usr/local/go/src/runtime/runtime-gdb.py&quot; auto-loading has been declined by your `auto-load safe-path' set to &quot;$debugdir:$datadir/auto-load&quot;.
A syntax error in expression, near `) __libc_dlopen_mode(&quot;/usr/lib/heaptrack/libheaptrack_inject.so&quot;, 0x80000000 | 0x002)'.
A syntax error in expression, near `) heaptrack_inject(&quot;/tmp/heaptrack_fifo578&quot;)'.
injection finished
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was able to &lt;a href=&quot;https://github.com/KDE/heaptrack/blob/2d14f5de75b9dae33be0e782bcec043794e3f5e7/src/track/heaptrack.sh.cmake#L256&quot; target=&quot;_blank&quot;&gt;trace&lt;/a&gt; where that happens but at this point I’ve lacked the knowledge in heapstack itself to fix those syntax errors. I went to search for another tool.&lt;/p&gt;

&lt;p&gt;I then asked my friend &lt;a href=&quot;http://twitter.com/javierhonduco&quot; target=&quot;_blank&quot;&gt;Javier Honduco&lt;/a&gt; what tool he’d use to find a leak in C code binded to an app in a higher level language (this could even be Ruby instead of Go). He suggested few options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://clang.llvm.org/docs/LeakSanitizer.html&quot; target=&quot;_blank&quot;&gt;https://clang.llvm.org/docs/LeakSanitizer.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iovisor/bcc/blob/master/tools/memleak.py&quot; target=&quot;_blank&quot;&gt;https://github.com/iovisor/bcc/blob/master/tools/memleak.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jemalloc/jemalloc/wiki/Use-Case:-Leak-Checking&quot; target=&quot;_blank&quot;&gt;https://github.com/jemalloc/jemalloc/wiki/Use-Case:-Leak-Checking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;jemalloc&lt;/code&gt; which has leak checking features looked like an easy option, but I wasn’t sure how that would play with &lt;code class=&quot;highlighter-rouge&quot;&gt;cgo&lt;/code&gt;. I always heard how powerful BPF-based tools are, so I decided to give a try to &lt;code class=&quot;highlighter-rouge&quot;&gt;iovisor/bcc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;memleak.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s what I get from &lt;code class=&quot;highlighter-rouge&quot;&gt;memleak&lt;/code&gt; when I attached it to my PID:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ memleak-bpfcc -p 3584581
Attaching to pid 3584581, Ctrl+C to quit.
[12:22:50] Top 10 stacks with outstanding allocations:
    0 bytes in 1228 allocations from stack
        [unknown] [libzookeeper_mt.so.2.0.0]
        [unknown]
    24 bytes in 1 allocations from stack
        [unknown] [libzookeeper_mt.so.2.0.0]
        [unknown]
    256 bytes in 2 allocations from stack
        [unknown] [libzookeeper_mt.so.2.0.0]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The stacktrace wasn’t very informative, but I learned that it was definitely something to do with the C part and zookeeper!&lt;/p&gt;

&lt;p&gt;Someone told me that my build must have had missing debugging symbols which is why the stacktrace was missing exact lines.&lt;/p&gt;

&lt;p&gt;To make sure that everything included debugging symbols, I’ve had to rewrite my Dockerfile from the above.&lt;/p&gt;

&lt;p&gt;Instead of installing &lt;code class=&quot;highlighter-rouge&quot;&gt;libzookeeper&lt;/code&gt; from a deb package, I ended up building it myself to be able to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-debug&lt;/code&gt; flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN curl -o zk.tar.gz https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz &amp;amp;&amp;amp; tar -xf zk.tar.gz &amp;amp;&amp;amp; cd zookeeper-3.4.14/zookeeper-client/zookeeper-client-c &amp;amp;&amp;amp; ./configure --enable-debug &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install &amp;amp;&amp;amp; ldconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s been to mention that I wasn’t able to build it on a slim container even after installing a few extra packages. I took &lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu:bionic&lt;/code&gt; as a base and installed Go myself:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:bionic

RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y curl build-essential

RUN curl -sSL https://storage.googleapis.com/golang/go1.12.5.linux-amd64.tar.gz &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  | tar -C /usr/local -xz
ENV PATH /usr/local/go/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
RUN mkdir -p /go/src /go/bin &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod -R 777 /go
ENV GOROOT /usr/local/go
ENV GOPATH /go
ENV PATH /go/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
WORKDIR /go

&lt;span class=&quot;c&quot;&gt;# ZK&lt;/span&gt;
RUN curl -o zk.tar.gz https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xf zk.tar.gz &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;zookeeper-3.4.14/zookeeper-client/zookeeper-client-c &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure --enable-debug &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ldconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This took me a couple hours to make it work, and now I was able to grab the full trace of the leak:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# use interval of 30 seconds and prune any allocations newer than 5000ms&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;memleak-bpfcc -p 1174052 -o 5000 30
Attaching to pid 1174052, Ctrl+C to quit.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;17:34:55] Top 10 stacks with outstanding allocations:
    0 bytes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;6261 allocations from stack
        deserialize_String_vector+0x4c &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;libzookeeper_mt.so.2.0.0]
        deserialize_GetChildren2Response+0x4b &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;libzookeeper_mt.so.2.0.0]
        process_sync_completion+0x27e &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;libzookeeper_mt.so.2.0.0]
        zookeeper_process+0x5e7 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;libzookeeper_mt.so.2.0.0]
        do_io+0x277 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;libzookeeper_mt.so.2.0.0]
        start_thread+0xdb &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;libpthread-2.27.so]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was amazed by how much debugging symbols make the difference.&lt;/p&gt;

&lt;p&gt;With this data, it was now possible to trace it to actual C functions and try to find the suspicious part. That’s when the rest of the team (Scott and Hormoz, who had more experience with C) came into action.&lt;/p&gt;

&lt;p&gt;Now that there was a pointer where to look at, Scott was able to read the potentially leaking code and come up with the &lt;a href=&quot;https://github.com/Shopify/gozk/pull/4&quot; target=&quot;_blank&quot;&gt;fix&lt;/a&gt;. I won’t try to rephrase it here, so please read the PR, it’s a great write-up!&lt;/p&gt;

&lt;p&gt;It was an amazing moment when we canaried the fix and found how much impact it had:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/leak-after.png&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As you can see, it took us couple failures (with &lt;code class=&quot;highlighter-rouge&quot;&gt;go tool profile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;heapstack&lt;/code&gt;) until we found a tool that allowed us to pin the issue. I was close to surrending and not continue to explore this. I hope this will motivate others and give a faith that any issue can be fixed if you spend enough time looking at problem from different angles.&lt;/p&gt;

&lt;p&gt;I’d like to say thanks to all people who’ve worked on finding this leak: Jared, Forrest, Hormoz, Tai, Scott, and Dale. There wouldn’t be this post if all these people wouldn’t put efforts to address the leak. And of course Javier who’ve suggested the veriety of tools that I could try.&lt;/p&gt;

&lt;p&gt;If you’re keen to learn more tools, I was recommended the &lt;a href=&quot;http://www.brendangregg.com/bpf-performance-tools-book.html&quot; target=&quot;_blank&quot;&gt;BPF Performance Tools&lt;/a&gt; book that covers a lot more topics on Linux observability than just memory.&lt;/p&gt;

&lt;p&gt;If you have any other ideas how you’d approach the problem and what other tool you’d try, please let me know in comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Methods vs constants for static values in Ruby</title>
   <link href="http://kirshatrov.com/posts/methods-vs-constants/">
   <updated>2019-08-20T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/methods-vs-constants</id>
   <content type="html">&lt;p&gt;Recently, I’ve been part of a team that stumbled upon rewriting a legacy library into a new, refreshed API. That API would serve as a foundation for long-term development, so we’ve put some time to design it well.&lt;/p&gt;

&lt;p&gt;We’ve had to agree on many aspects of the API design, and one of them was how we want to define static values. Even for something as simple as a name of reserved queue (in case you’re building a job framework), there’s at least 3 ways to define it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Option 1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;RESERVED_QUEUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reserved&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Option 2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reserved_queue&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;reserved&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Option 3&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queue&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;RESERVED_QUEUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reserved&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reserved_queue&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RESERVED_QUEUE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In older versions of Ruby, Option 2 would had poor performance due duplicated string allocation - however, with frozen string literals, this is no longer a thing and the performance of all options is the same.&lt;/p&gt;

&lt;p&gt;So, when would you choose Option 1, 2, or 3?&lt;/p&gt;

&lt;p&gt;Personally I’d reject Option 3 altogether, because it was a way to write optimized Ruby when it lacked frozen string literals. You no longer have to do that, and since Ruby is meant to be elegant, you should use simpler forms without wrapping all repeating strings into constants. And for an outside reader, it introduces an extra hop compared to other options: you have to go from a caller of &lt;code class=&quot;highlighter-rouge&quot;&gt;reserved_queue&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;def reserved_queue&lt;/code&gt; and then to the actual value in &lt;code class=&quot;highlighter-rouge&quot;&gt;RESERVED_QUEUE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This leaves Option 1 and 2. Some debates happened, where a great colleague of mine mentioned that if something is meant to be static, a constant is preferred to a method. I couldn’t argue with that, but I also cared about a nice external API in case the value was meant to be consumed outside of the same module.&lt;/p&gt;

&lt;p&gt;I was able to make a rule of thumb that lets you pick the right one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you expect consumers of the value to be inside the same module, define it as a private constant (Option 1)&lt;/li&gt;
  &lt;li&gt;If you expect consumers to be outside of the module, that makes the static value publicly exposed, which means defining it as a method is likely the best (Option 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To rephrase it, where the consumer of an API lives defines whether it should be a constant or a method.&lt;/p&gt;

&lt;p&gt;In the example from above, the reserved queue name has been extensively consumed around the codebase, which made us choose &lt;code class=&quot;highlighter-rouge&quot;&gt;Queue.reserved_queue&lt;/code&gt; as a public and documented accessor.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Boosting application boot time with container snapshots</title>
   <link href="http://kirshatrov.com/posts/experimenting-with-criu-and-slow-boot/">
   <updated>2019-07-06T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/experimenting-with-criu-and-slow-boot</id>
   <content type="html">&lt;p&gt;Recently I came across the &lt;a href=&quot;https://criu.org/&quot; target=&quot;_blank&quot;&gt;CRIU technology&lt;/a&gt;. It lets you checkpoint any running application and serialize its state on disk, to resume it later from that state. What’s more interesting is that it comes with &lt;a href=&quot;https://criu.org/Docker&quot; target=&quot;_blank&quot;&gt;Docker integration&lt;/a&gt;, potentially allowing you to run a container, make a serializable snapshot of it and recreate it later - possibly even on another host.&lt;/p&gt;

&lt;p&gt;This technology might be beneficial for live migrations (in fact, &lt;a href=&quot;https://www.linuxplumbersconf.org/event/2/contributions/69/attachments/205/374/Task_Migration_at_Scale_Using_CRIU_-_LPC_2018.pdf&quot; target=&quot;_blank&quot;&gt;Google uses it&lt;/a&gt; to live migrate batch jobs in Borg) - but what excited me is that this could help with the &lt;strong&gt;long boot time problem&lt;/strong&gt;. As a Rails app grows, it ends up with more Ruby code to parse and load on boot, which makes the startup time quite long. Autoloading and &lt;a href=&quot;https://github.com/Shopify/bootsnap/&quot; target=&quot;_blank&quot;&gt;bootsnap&lt;/a&gt; help in local and CI environments, but in production (where you want to eager-load everything) is still quite slow. It’s not uncommon for some of the largest monoliths to take 1+ minute to startup before it’s able to serve requests.&lt;/p&gt;

&lt;p&gt;Note that I’m using Rails as an example, but technically this applies to any app written in a scripting language with ever-growing database and number of dependencies.&lt;/p&gt;

&lt;p&gt;If we could prepare a snapshot of a live application server beforehand and use that to start containers in production, maybe we could &lt;strong&gt;save some of the boot time&lt;/strong&gt;? That’s what I wanted to explore.&lt;/p&gt;

&lt;p&gt;The brief content of this post is: 1) setting up a lab with Docker + CRIU to snapshot and restore containers 2) automating that with a script and leveraging compute instances in Google Cloud 3) measuring the savings.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-a-lab&quot;&gt;Setting up a lab&lt;/h2&gt;

&lt;p&gt;All CRIU magic is based on Linux kernel features, so Docker for Mac is not an option. I would have to setup a Linux VM with all the dependencies.&lt;/p&gt;

&lt;p&gt;One option would be to spin an instance on AWS or GCP, but I’ve already had VMWare on my Mac, and I wanted to save some terminal latency (my ISP in France was not great!). I went with a Linux Alpine VM in VMWare since I’ve heard that Alpine is a good lightweight distributive. It wasn’t too hard to install CRIU and Docker on it with &lt;code class=&quot;highlighter-rouge&quot;&gt;apk&lt;/code&gt;. However, as I tried to verify the setup with &lt;code class=&quot;highlighter-rouge&quot;&gt;criu check&lt;/code&gt; I found that for some reason the Linux kernel that comes with Alpine doesn’t have all the features needed for CRIU.&lt;/p&gt;

&lt;p&gt;I wasn’t looking forward building my own kernel, so I went ahead with Ubuntu Server 18.04 LTS which would hopefully come with a full-feature kernel.&lt;/p&gt;

&lt;p&gt;I followed &lt;a href=&quot;https://www.criu.org/Docker&quot; target=&quot;_blank&quot;&gt;the CRIU docs for Docker&lt;/a&gt;. I’ve noticed that they were disabling &lt;a href=&quot;https://docs.docker.com/engine/security/seccomp/&quot; target=&quot;_blank&quot;&gt;seccomp&lt;/a&gt; (with a note that a newer kernel is required) and the container network was disabled as CRIU won’t checkpoint any open TCP connections. I decided to try it anyway and see if it becomes an issue later.&lt;/p&gt;

&lt;p&gt;It worked amazingly for an elementary Rails app (I was able to snapshot live and restore!), but as soon as I made the app talk to a database, I’ve noticed that &lt;code class=&quot;highlighter-rouge&quot;&gt;docker checkpoint&lt;/code&gt; was failing with a CRIU-level error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat /run/containerd/io.containerd.runtime.v1.linux/moby/be56af6556e28725f3d69b4d91c8905268521af9d32e8aa4525fe16a07138a5e/criu-dump.log

...
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00.152987&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; sockets: Searching &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;socket 0x27a13 family 2
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;00.152991&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Error &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;criu/sk-inet.c:199&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: inet: Connected TCP socket, consider using --tcp-established option.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I started looking for a way to enable &lt;code class=&quot;highlighter-rouge&quot;&gt;tcp-establish&lt;/code&gt;. The CRIU configuration guide &lt;a href=&quot;https://criu.org/Configuration_files&quot; target=&quot;_blank&quot;&gt;suggested&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 'tcp-established' &amp;gt; /etc/criu/runc.conf&lt;/code&gt; for containerized deployments. However, doing it had no effect. That’s when I found that the support for configs only arrived in runc 1.0-rc7 and CRIU 3.11 - while Ubuntu packages came with older runc 1.0-rc4 and CRIU 3.6.&lt;/p&gt;

&lt;p&gt;It took me some time to build the latest runc and CRIU from sources, but finally, I was able to snapshot a process with open TCP sockets and seccomp enabled! That was a success. I could even jump into the snapshot and see its content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./checkpoint-omg/
./checkpoint-omg/mountpoints-12.img
./checkpoint-omg/inventory.img
./checkpoint-omg/tmpfs-dev-73.tar.gz.img
./checkpoint-omg/tmpfs-dev-72.tar.gz.img
./checkpoint-omg/core-9.img
./checkpoint-omg/tmpfs-dev-71.tar.gz.img
./checkpoint-omg/core-1.img
./checkpoint-omg/core-10.img
./checkpoint-omg/cgroup.img
./checkpoint-omg/core-15.img
./checkpoint-omg/fdinfo-2.img
./checkpoint-omg/core-11.img
./checkpoint-omg/core-14.img
./checkpoint-omg/ids-1.img
./checkpoint-omg/core-20.img
./checkpoint-omg/pipes-data.img
./checkpoint-omg/core-17.img
./checkpoint-omg/fs-1.img
./checkpoint-omg/mm-1.img
./checkpoint-omg/tmpfs-dev-68.tar.gz.img
./checkpoint-omg/utsns-11.img
./checkpoint-omg/pagemap-1.img
./checkpoint-omg/core-12.img
./checkpoint-omg/seccomp.img
./checkpoint-omg/core-13.img
./checkpoint-omg/tmpfs-dev-74.tar.gz.img
./checkpoint-omg/pstree.img
./checkpoint-omg/core-8.img
./checkpoint-omg/core-19.img
./checkpoint-omg/core-16.img
./checkpoint-omg/ipcns-var-10.img
./checkpoint-omg/tcp-stream-cd45.img
./checkpoint-omg/files.img
./checkpoint-omg/pages-1.img
./checkpoint-omg/core-18.img
./checkpoint-omg/descriptors.json
./checkpoint-omg/core-7.img
./checkpoint-omg/tcp-stream-6b38.img
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each of those dumps is inspectable with &lt;code class=&quot;highlighter-rouge&quot;&gt;crit show&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now it was time to prepare some kind of a sample Rails app that’s slow to boot.&lt;/p&gt;

&lt;p&gt;From Shopify experience, it comes to huge amount of code to load and parse. That code includes classes in your app, a bunch of YAML configuration (for a large app, it’s natural to have lots of configs around), and all your gem dependencies.&lt;/p&gt;

&lt;p&gt;To simulate all of that, I stuffed the Gemfile with &lt;strong&gt;250 gems&lt;/strong&gt; and wrote a small code generator for Ruby and YAML.&lt;/p&gt;

&lt;p&gt;Now was time to checkpoint the fat app and try to restore it. That was easy enough!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run --name fat-app-donor -p 3000:3000 -d fat-app:latest
&lt;span class=&quot;c&quot;&gt;# curl localhost:3000 to verify that the app is booted and running&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker checkpoint create fat-app-donor my-checkpoint
&lt;span class=&quot;c&quot;&gt;# the checkpoint is located in /var/lib/docker/containers/&amp;lt;donor-container-id&amp;gt;/checkpoints/my-checkpoint&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker create --name fat-app-clone -p 3000:3000 fat-app:latest

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cp -r /var/lib/docker/containers/&amp;lt;donor-container-id&amp;gt;/checkpoints/my-checkpoint /var/lib/docker/containers/&amp;lt;clone-container-id&amp;gt;/checkpoints

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker start --checkpoint my-checkpoint fat-app-clone
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yay! You can now &lt;code class=&quot;highlighter-rouge&quot;&gt;curl localhost:3000&lt;/code&gt; and hit the container  that has been restored from a serialized state!&lt;/p&gt;

&lt;h2 id=&quot;automating-and-running-in-environment-closer-to-production&quot;&gt;Automating and running in environment closer to production&lt;/h2&gt;

&lt;p&gt;In the step above, I was able to take the snapshot of a live container on one local Ubuntu VM and re-create it on another, but I also wanted to run the experiment in a production-like environment. I planned to create a GCE instance, upload the container snapshot to GCS (S3-like store from Google), download it from GCS, and recover from it.&lt;/p&gt;

&lt;p&gt;Why upload and download the container to/from the remote store? I wanted to make it as close as possible to production and measure the penalty of downloading that blob.&lt;/p&gt;

&lt;p&gt;I was able to automate all these steps based on commands that I was running manually before. Rather than describing the steps, I thought it would be self-explanatory if you read the script itself.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e -x

&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fat-app:latest
&lt;span class=&quot;nv&quot;&gt;CHECKPOINT_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;checkpoint-omg

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ SNAPSHOT PART&quot;&lt;/span&gt;

docker run --name fat-app-donor -p 3000:3000 -d &lt;span class=&quot;nv&quot;&gt;$IMAGE&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Waiting for container to boot&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; ! curl localhost:3000 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; : sleep 0.5 ; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Boot stats&quot;&lt;/span&gt;
curl http://localhost:3000/stats

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Creating a checkpoint&quot;&lt;/span&gt;
sudo &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;docker checkpoint create fat-app-donor &lt;span class=&quot;nv&quot;&gt;$CHECKPOINT_NAME&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DONOR_CONTAINER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{.Id}}&quot;&lt;/span&gt; fat-app-donor&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Packing the checkpoint&quot;&lt;/span&gt;
sudo &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;tar cvzf checkpoint.tar.gz -C /var/lib/docker/containers/&lt;span class=&quot;nv&quot;&gt;$DONOR_CONTAINER_ID&lt;/span&gt;/checkpoints .

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Checkpoint size:&quot;&lt;/span&gt;
ls -l --block-size&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;M

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Uploading the checkpoint:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;gsutil cp checkpoint.tar.gz gs://kirs-criu/checkpoints-experiment/&lt;span class=&quot;nv&quot;&gt;$CHECKPOINT_NAME&lt;/span&gt;.tar.gz

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--- RESTORING&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Downloading the checkpoint:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;gsutil cp gs://kirs-criu/checkpoints-experiment/&lt;span class=&quot;nv&quot;&gt;$CHECKPOINT_NAME&lt;/span&gt;.tar.gz .

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Preparing the new container&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;docker create --name fat-app-clone -p 3000:3000 &lt;span class=&quot;nv&quot;&gt;$IMAGE&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CLONE_CONTAINER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker inspect --format&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{{.Id}}&quot;&lt;/span&gt; fat-app-clone&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Unpacking the checkpoint to clone docker dir:&quot;&lt;/span&gt;
sudo tar -C /var/lib/docker/containers/&lt;span class=&quot;nv&quot;&gt;$CLONE_CONTAINER_ID&lt;/span&gt;/checkpoints -xvf &lt;span class=&quot;nv&quot;&gt;$CHECKPOINT_NAME&lt;/span&gt;.tar.gz
rm &lt;span class=&quot;nv&quot;&gt;$CHECKPOINT_NAME&lt;/span&gt;.tar.gz

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;+++ Launching the clone from the snapshot:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;docker start --checkpoint &lt;span class=&quot;nv&quot;&gt;$CHECKPOINT_NAME&lt;/span&gt; fat-app-clone

curl http://localhost:3000
curl http://localhost:3000/stats
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’ve run the script for 2 apps: fat-app (one that I’ve built) and &lt;a href=&quot;https://www.redmine.org/&quot; target=&quot;_blank&quot;&gt;Redmine&lt;/a&gt;. I’ve chosen Redmine since it’s a good example of a typical Rails app that has a bunch of gems and classes. It’s also not as well optimized as Discourse, which is good in our case.&lt;/p&gt;

&lt;p&gt;You’re probably most curious about the results in time to boot versus time to restore from the snapshot.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;I got the results for both apps running on 2 types on VMs: &lt;em&gt;n1-standard-1&lt;/em&gt; (single vCPU GCE instance) and &lt;em&gt;n1-standard-16&lt;/em&gt; (16 vCPUs).&lt;/p&gt;

&lt;p&gt;The way I measured hot and cold start was by taking the delta in time from since starting the container to being able to serve an HTTP request.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Checkpoint size&lt;/th&gt;
      &lt;th&gt;Checkpoint download&lt;/th&gt;
      &lt;th&gt;RSS&lt;/th&gt;
      &lt;th&gt;Cold start&lt;/th&gt;
      &lt;th&gt;Hot start&lt;/th&gt;
      &lt;th&gt;Perf boost&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Fat-app; 1 vCPU&lt;/td&gt;
      &lt;td&gt;44.3 Mb&lt;/td&gt;
      &lt;td&gt;2.16s&lt;/td&gt;
      &lt;td&gt;191 Mb&lt;/td&gt;
      &lt;td&gt;18.58s&lt;/td&gt;
      &lt;td&gt;7.96s&lt;/td&gt;
      &lt;td&gt;+2.33x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fat-app; 16 vCPU&lt;/td&gt;
      &lt;td&gt;44.3 Mb&lt;/td&gt;
      &lt;td&gt;1.94s&lt;/td&gt;
      &lt;td&gt;191 Mb&lt;/td&gt;
      &lt;td&gt;20.60s&lt;/td&gt;
      &lt;td&gt;6.34s&lt;/td&gt;
      &lt;td&gt;+3.25x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Redmine; 1 vCPU&lt;/td&gt;
      &lt;td&gt;24.3 Mb&lt;/td&gt;
      &lt;td&gt;2.02s&lt;/td&gt;
      &lt;td&gt;121 Mb&lt;/td&gt;
      &lt;td&gt;18.39s&lt;/td&gt;
      &lt;td&gt;6.33&lt;/td&gt;
      &lt;td&gt;+2.91x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Redmine; 16 vCPU&lt;/td&gt;
      &lt;td&gt;24.3 Mb&lt;/td&gt;
      &lt;td&gt;1.95s&lt;/td&gt;
      &lt;td&gt;121 Mb&lt;/td&gt;
      &lt;td&gt;13.48s&lt;/td&gt;
      &lt;td&gt;3.71s&lt;/td&gt;
      &lt;td&gt;+3.63x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Starting the app from a snapshot gives quite a significant boost:&lt;/strong&gt; at least 2.3x on a single core machine and at most 3.6x on a VM with more compute power. The difference between CPUs is likely due CPU-bound work to unpack/unserialize the dump. I’ve also tried it on VMs with SSD disks, but I didn’t see as much improvement as after adding more CPUs.&lt;/p&gt;

&lt;p&gt;Faster time to download the snapshot can be explained by GCP allocating higher network bandwidth to larger VMs.&lt;/p&gt;

&lt;p&gt;This took me around a week of work to get working, and I’m pretty impressed by the results.&lt;/p&gt;

&lt;h2 id=&quot;things-to-mind-for-production-use&quot;&gt;Things to mind for production use&lt;/h2&gt;

&lt;h3 id=&quot;is-criu-even-prodiction-grade-software&quot;&gt;Is CRIU even prodiction grade software?&lt;/h3&gt;

&lt;p&gt;Based on my research, it is. It’s been used at &lt;a href=&quot;https://www.linuxplumbersconf.org/event/2/contributions/69/&quot; target=&quot;_blank&quot;&gt;Google’s Borg for years&lt;/a&gt; to live migrate workloads (through not with Docker), and the Docker support has been there since ~2015. Though it might still have edge cases which will need to be reported.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-hostname&quot;&gt;Dynamic hostname&lt;/h3&gt;

&lt;p&gt;When CRIU snapshots the container namespace, it persists the container hostname too. On restore, it sets the hostname of the donor container to the cloned container. This is not unexpected but might create a problem in case you’re running multiple instances of the same container on a single host - which is a typical setup for horizontally scalable web apps. And in orchestrated environments like K8s the hostname that’s part of a replicated set is randomly generated (example: &lt;code class=&quot;highlighter-rouge&quot;&gt;web-7cfd6d677d&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;For our use case, it means that we’ll need to change the hostname of the clone to avoid having the same hostname everywhere. Luckily, there’s a way for that which CRIU maintainers shared with me in &lt;a href=&quot;https://github.com/checkpoint-restore/criu/issues/727&quot; target=&quot;_blank&quot;&gt;https://github.com/checkpoint-restore/criu/issues/727&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From the application perspective, we must prepare to always dynamically check the hostname. It means that you can no longer memoize it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# typical code to avoid extra syscall on repeating hostname access&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hostname&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gethostname&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This might be harder to enforce, but at least one crazy solution would be to periodically check &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjectSpace&lt;/code&gt; for any strings that contain the memoized hostname. At the end, there’s not too much business logic that depends on hostname. It’s mostly the infrastructure code that you’d have to adjust.&lt;/p&gt;

&lt;h3 id=&quot;tcp-connections&quot;&gt;TCP connections&lt;/h3&gt;

&lt;p&gt;While &lt;a href=&quot;https://criu.org/TCP_connection&quot; target=&quot;_blank&quot;&gt;CRIU and Linux kernel has support for restoring TCP connections&lt;/a&gt;, it’s essential that the app is ready to reconnect to all kinds of resources once its snapshot has been restored on a new host. Fortunately, this is not a problem for any mature and large-scale app that’s already designed for resiliency. Retries and reconnections is an essential part of that.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-snapshot&quot;&gt;Preparing the snapshot&lt;/h3&gt;

&lt;p&gt;Before a new release, you’d have to prepare the snapshot of the container to be used in production. This perfectly falls into the model of building release artifacts during the CI. In the end, CI is already most likely involved in building the image and pushing it to the container registry.&lt;/p&gt;

&lt;h3 id=&quot;orchestrated-environments&quot;&gt;Orchestrated environments&lt;/h3&gt;

&lt;p&gt;This is probably the most significant blocker on the way to adopt CRIU for containers in production. It’s hard to imagine anyone managing containers manually nowadays with container orchestration frameworks like K8s becoming the standard.&lt;/p&gt;

&lt;p&gt;If Kubernetes is managing your containers and invoking &lt;code class=&quot;highlighter-rouge&quot;&gt;docker start&lt;/code&gt; on the actuals hosts, it would have to be aware of all concerns related to restoring from a snapshot vs booting a new instance from scratch.&lt;/p&gt;

&lt;p&gt;I imagine this making Kubernetes pods aware of restoring won’t be incredibly hard. Similar to Google’s Borg, we could make it prefer to restore from the snapshot if it’s available, and fall back to boot from scratch if starting from a snapshot didn’t work for some reason.&lt;/p&gt;

&lt;p&gt;Here’s an example of how YAML spec may look like:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gcr.io/companyname/project:sha&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;snapshotPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfPresent&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# start container from the snapshot if it's available&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;snapshotPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gs://companyname-snapshots/project/sha/boot-snapshot.tar.gz&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is work in Kubernetes required to push for CRIU adoption, however, I see at least couple reasons that can make it easy to sell to the community. Kubernetes is an open source successor of Borg, and Borg supports CRIU. And Docker support for CRIU already exists so this is mostly a matter of integrating Docker feature with K8s.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/kirs/8e73fef83db2fd3dd8541df04b5ba3d4&quot; target=&quot;_blank&quot;&gt;My setup and benchmarking script&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubykaigi.org/2019/presentations/udzura.html&quot; target=&quot;_blank&quot;&gt;A talk about CRIU and Ruby from RubyKaigi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Talk about CRIU at Borg: &lt;a href=&quot;https://www.linuxplumbersconf.org/event/2/contributions/69/attachments/205/374/Task_Migration_at_Scale_Using_CRIU_-_LPC_2018.pdf&quot; target=&quot;_blank&quot;&gt;Task Migration at Scale Using CRIU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>How I forgot my laptop and stayed calm</title>
   <link href="http://kirshatrov.com/posts/my-poor-macbook/">
   <updated>2019-02-25T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/my-poor-macbook</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/post-images/plane-seat.jpg&quot; width=&quot;500&quot; height=&quot;333&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What do people typically forget in an airplane’s seat? Glasses, headphones, tablets, phones? Flying to Moscow on Saturday, I forgot my laptop in the seat pocket next to me.&lt;/p&gt;

&lt;p&gt;I’ve only realized that when already unpacked in my apartment. I’ve thought that I’ve already taken out the laptop, which is the reason why it’s not in my backpack, but after looking through unpacked things, I didn’t find it. That left the only reason: that I forgot it onboard of British Airways after hacking some code of the flight.&lt;/p&gt;

&lt;p&gt;If that happened to me a couple of years ago, I would have panicked and declared it as the worst moment of the year. But this time I’ve started laughing and texted my friends “believe how stupid I am to forget the laptop?”. The primary reason to travel to Moscow was to give a talk at RubyRussia, and losing the laptop could also mean losing all slides for my talk. But not this time! I was thankful that unlike at all other presentations, I’ve used Google Drive to make slides. Not having a laptop for 5 days until I come back to London would have been bad but survivable.&lt;/p&gt;

&lt;p&gt;I have friends who traveled to less developed countries, and valuables that they forgot onboard were “never found”. I was curious if Russia was better than that. Since I arrived on Saturday and British Airways helpdesk is only open during weekdays, it left me a weekend to frustrate - which was a funny story to share with friends in Moscow.&lt;/p&gt;

&lt;p&gt;Back to my emotional state. I’ve started thinking what could have been worse than forgetting the laptop, and there’s actually quite a lot of things: losing a passport or the &lt;a href=&quot;https://www.gov.uk/biometric-residence-permits&quot; target=&quot;_blank&quot;&gt;BRP&lt;/a&gt; and never being able to come back to London, or losing credit cards, or being taken to the military service because I’m in the eligible age.&lt;/p&gt;

&lt;p&gt;Coping through laughing at myself had helped me to stay calm and wait until Monday when I called BA, and in 5 minutes I knew that they’d got my Macbook and I only need to spend 3 hours going back and forward to DME.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Does your laptop have stickers on it?”&lt;/li&gt;
  &lt;li&gt;“Oh yes, a lot of them.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, fetching the laptop at DME took me only 10 minutes. I was even able to catch the same train to come back to the city. Right now I’m writing this quick post sitting on that very train.&lt;/p&gt;

&lt;p&gt;What have I learned from this? Check the fucking seat pocket, don’t put the laptop beside British Airways magazine which ideally  matches MBP 13’ size, do backups, stay calm and appreciate that there’s always something worse that could happen to you and your loved ones.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The State of Background Jobs in 2019</title>
   <link href="http://kirshatrov.com/posts/state-of-background-jobs/">
   <updated>2019-01-03T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/state-of-background-jobs</id>
   <content type="html">&lt;p&gt;In 2018, my work at Shopify was hugely focused around the Job Patterns team. The team owns all kinds of asynchronous units of work, things like background jobs and database migrations. The tech we’ve built helped to power &lt;a href=&quot;https://twitter.com/tobi/status/1067821619379429376&quot; target=&quot;\_blank&quot;&gt;10% of e-commerce&lt;/a&gt; last Black Friday. The &lt;a href=&quot;https://github.com/Shopify/job-iteration&quot; target=&quot;\_blank&quot;&gt;job-iteration gem&lt;/a&gt; is one example of what we’ve released.&lt;/p&gt;

&lt;p&gt;After a year of consulting so many developers about how to design background jobs that scale, while being on-call for all infrastructure related to jobs processing, it seems clear to me that currently common architecture of Redis + set of queues + application-level library like Sidekiq or Resque to process serialized payloads &lt;strong&gt;is not going to scale well&lt;/strong&gt;, especially for multi-tenant monoliths like Shopify with hundreds of developers working in the same codebase.&lt;/p&gt;

&lt;p&gt;There are at least two sides of the jobs framework that I see: developer-facing API and infrastructure side, which executes the work behind the curtain and can sometimes get delayed or go down. I’m going to cover both in this post and mention why I think that both of them are having gaps at scale.&lt;/p&gt;

&lt;h2 id=&quot;developer-api&quot;&gt;Developer API&lt;/h2&gt;

&lt;p&gt;This part is what developer experiences when they create a new class and type &lt;code class=&quot;highlighter-rouge&quot;&gt;class WebhookJob &amp;lt; ActiveJob::Base&lt;/code&gt; or something similar.&lt;/p&gt;

&lt;p&gt;Developers care about shipping features, and there are 2 units of work where they can put the logic: web requests (synchronous) and jobs (asynchronous). The rule of thumb is to do less work in web requests to make the experience fast and do everything else in the background. Processing payments, sending emails and importing data are good examples.&lt;/p&gt;

&lt;p&gt;For web requests, there’s usually a request timeout to avoid browser waiting forever, but there’s nothing like that for jobs. At the same time, it’s too easy for a developer to introduce a job that takes a long time to run (“long-running job”) and make it unsafe to shutdown the app because the infrastructure would always have to wait for the job to finish. That’s what &lt;a href=&quot;https://github.com/Shopify/job-iteration&quot; target=&quot;\_blank&quot;&gt;Job Iteration API&lt;/a&gt; solves by making all jobs &lt;strong&gt;interruptible and resumable by design&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We’ve introduced the API to Shopify codebase around 1.5 years ago, and while by now most of the jobs have switched to use Iteration, there’s a long-tail of infrequent jobs that are still not interruptible. I’d like the next-gen jobs framework &lt;strong&gt;to enforce interruptibility and max run time&lt;/strong&gt; for all job classes that developers introduce. If a job is not following the rules, it must be reported to developers and de-prioritized. We actually have a tool at Shopify that opens a GitHub issue and tags code owners if a job takes more than X seconds to run, but it’s something that’s not fully tracked and automated.&lt;/p&gt;

&lt;p&gt;Another core concept of job framework is &lt;strong&gt;queues&lt;/strong&gt;. A typical app would have a dozen queues (&lt;em&gt;critical, default, webhooks, low, imports, payments etc&lt;/em&gt;) and the developer would have to choose one for their job. As you can see, the set of queues has a mix of priority based queues (&lt;em&gt;critical, default, low&lt;/em&gt;) and domain-specific queues (&lt;em&gt;webhooks, imports, payments&lt;/em&gt;). Ideally, we could merge domain-specific queues into priorities: &lt;code class=&quot;highlighter-rouge&quot;&gt;payments&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;critical&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;imports&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;webhooks&lt;/code&gt; are &lt;code class=&quot;highlighter-rouge&quot;&gt;low&lt;/code&gt;. But in reality, it comes to the fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;payments&lt;/code&gt; would be more important than other jobs in &lt;code class=&quot;highlighter-rouge&quot;&gt;critical&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;webhooks&lt;/code&gt; being less important than jobs in &lt;code class=&quot;highlighter-rouge&quot;&gt;low&lt;/code&gt;, so developers go ahead and introduce both priority-based and domain-based queues. We end up with an order like &lt;code class=&quot;highlighter-rouge&quot;&gt;payments &amp;gt; critical &amp;gt; default &amp;gt; low &amp;gt; webhooks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The definition of something being “critical” maps poorly to the concept of SLOs, since it doesn’t tell whether “critical” means it has to run in 1s or in 30s. It can be hard for a developer to choose the right queue, and often they wouldn’t want their job to go to “low” because that sounds bad, even if (in case of Shopify) “low” means execution within 30 seconds.&lt;/p&gt;

&lt;p&gt;If your codebase stays around for a decade, you’ll have even more queues like “lower than low”. It’s fair to give something a lower priority and allow a longer delay in execution, but that makes it even harder for developers to choose the right queue from that large set of queues.&lt;/p&gt;

&lt;p&gt;The whole concept of queues has issues with aging and scaling in terms of the codebase and people. I’d love to see some other concept of prioritizing jobs between buckets, based on SLOs (“this thing has to run in 5 minutes”) and maybe a number-based priority rather than a hardcoded queue name. From the API point, this could look as simple as &lt;code class=&quot;highlighter-rouge&quot;&gt;slo 5.minutes, weight: 0.5&lt;/code&gt; in the job definition. Why two settings? I could be wrong, but I have a feeling that you’ll need some metric for prioritizing when you have a backlog with 5M of “had to run 1 min ago” jobs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concurrency and throttling.&lt;/strong&gt; It’s common for developers to want their job to run at a certain rate. A good example is 3rd party calls, when you may have 1k jobs per second incoming while you know that the 3rd party provider will not handle that number of calls per second, even if you’ve had the capacity to run all of those jobs at once. Webhooks is a real-life example: when your store on Shopify will get a ton of new orders (congrats with large sales!) and you have a webhook endpoint configured, we won’t even attempt to deliver them all at once because it’s unlikely that those external endpoints will keep up with that throughput of webhooks. Instead, we’ll deliver them at a fixed rate.&lt;/p&gt;

&lt;p&gt;Another use case is concurrency of &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, when you want to say “only one job in the scope of X is allowed to run at any given time”. You might preserve the order of jobs or not, and the implementation gets quite complex if you do.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidekiq Enterprise&lt;/em&gt; provides the &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Ent-Rate-Limiting&quot; target=&quot;\_blank&quot;&gt;rate limiting module&lt;/a&gt; which helps to cover part if this feature, but the developer still has to come up with a certain number for rate limiting. However it’s usually hard for them to estimate that rate limit, and the limit is likely to change as the platform grows. In the perfect world, the framework could automatically detect when it’s necessary to back-off the execution rate. With a simple algorithm, it could attempt to deliver jobs at a higher rate and slowdown when the downstream is throwing exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multitenancy.&lt;/strong&gt; Multitenant applications will eventually run into the problem of enforcing fairness between jobs in the queue from different customers. If customer A triggered 100K jobs and then customer B triggered 1K jobs, with a FIFO queue that would mean that customer B jobs are executed only after all customer A jobs, which might take a while. If all of those are high priority jobs, and 100K jobs take at least some time, customer B is likely to experience delays in service. It’s somewhat solvable by heavy sharding and rate limiting in the most critical paths, but it’s still quite manual. I’d love the next-gen job framework to be multi-tenant first and to be able to enforce fairness, for instance by shuffling those 100K and 1K jobs of customers A and B.&lt;/p&gt;

&lt;p&gt;Now, let’s talk about the other side of background jobs, which is only visible to engineers who are on-call for it.&lt;/p&gt;

&lt;h2 id=&quot;infrastructure-side&quot;&gt;Infrastructure side&lt;/h2&gt;

&lt;p&gt;A common setup in the industry (at least in the Rails world) is having a Redis instance which stores a FIFO queue with all the jobs the application enqueued. There would be workers running that de-enqueue payloads and perform the work. At some point you might scale up the number of workers to perform more work if you’ve got an extra load.&lt;/p&gt;

&lt;p&gt;At the same time, we must remember Redis constraints. It’s an &lt;strong&gt;in-memory&lt;/strong&gt; database that can persist the state to disk to be prone to restarts, but it still won’t be able to store more data than RAM available. This is an important detail for a large-scale jobs setup.&lt;/p&gt;

&lt;p&gt;Imagine the following scenario: increased traffic to your service leads to millions of jobs of a certain type enqueued, and those are jobs that you can’t process at a higher rate than X - for instance because they talk to a 3rd party service that doesn’t allow too many calls. The backlog of jobs is only growing (because your campaign is getting success) and the Redis is filling up. Remember it’s an in-memory database, so it can’t store more than RAM available. It’s common to set Redis &lt;code class=&quot;highlighter-rouge&quot;&gt;maxmemory&lt;/code&gt; to 8 or even 16Gb, but even that has a limit of how many jobs it can store in the queue.&lt;/p&gt;

&lt;p&gt;If the traffic stays high for longer than a period that’s enough to fill Redis, the Redis will get into Out Of Memory (OOM) state, meaning that it can’t accept any more writes. To be precise it can still allow the &lt;em&gt;dequeue&lt;/em&gt; (RPOP) operation, but not &lt;em&gt;enqueue&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In contrast with Redis, relational databases like PostgreSQL are backed by the disk rather than RAM, which unlocks them to store more data than they have RAM available. Of course, writing to disk is way slower than writing to memory so that nothing can beat Redis performance - but in a situation when Redis runs out of memory, you’ll probably prefer slow writes than no writes at all.&lt;/p&gt;

&lt;p&gt;When the incoming rate of jobs is higher than the fixed rate delivery, your Redis goes into the danger of filling up. After all, there must be other open-source databases that somehow provide a message queue without in-memory constraints like those Redis has. Let’s review them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kafka:&lt;/strong&gt; data is persisted to disk, though running a Kafka cluster and consuming from it is a lot trickier compared to Redis, due to its distributed nature and more complex protocol.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ:&lt;/strong&gt; under memory pressure, the persistence layer tries to write as much out to disk as possible, and remove as much as possible from memory.&lt;/p&gt;

&lt;p&gt;The next two databases you likely haven’t heard about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beanstalkd:&lt;/strong&gt; (unsupported) all data is always kept in memory. Similar to Redis, can persist a binlog to disk for recovering the state after a restart.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kestrel:&lt;/strong&gt; (unsupported) a message queue database fully backed by disk. It’s actually used by GitHub to deliver webhooks on a massive scale, and I guess it’s what allowed them to put webhooks on hold during the &lt;a href=&quot;https://blog.github.com/2018-10-30-oct21-post-incident-analysis/&quot; target=&quot;\_blank&quot;&gt;October outage&lt;/a&gt;, and deliver them later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MySQL or PostgreSQL.&lt;/strong&gt; It’s &lt;a href=&quot;https://github.com/collectiveidea/delayed_job&quot; target=&quot;\_blank&quot;&gt;not&lt;/a&gt; &lt;a href=&quot;https://github.com/QueueClassic/queue_classic&quot; target=&quot;\_blank&quot;&gt;uncommon&lt;/a&gt; to implement job queue with a relational SQL database, which persists data on disk and allows to store large backlogs with no constraints on RAM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Faktory&lt;/strong&gt;. It’s not a database per se, but rather a jobs service behind the application, developed by the author of Sidekiq. In the early days, it used &lt;strong&gt;RocksDB&lt;/strong&gt;, an embedded database from Facebook, which is backed by the disk - so the number of jobs pushed to Faktory was not limited by RAM, which was great. In the current version, Faktory has &lt;a href=&quot;https://github.com/contribsys/faktory/wiki/Redis&quot; target=&quot;\_blank&quot;&gt;switched&lt;/a&gt; to Redis as a store instead of RocksDB for good reasons, which means it’s still bound by Redis limitations.&lt;/p&gt;

&lt;p&gt;As you see, there’s many stores that are able to persist data to disk and avoid in-memory constraints that Redis has.&lt;/p&gt;

&lt;p&gt;From my perspective, there are at least three reasons why it’s been hard for large-scale services to explore other options and move away from Redis.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Redis is extremely easy to set up and operate, unlike distributed Kafka or RabbitMQ&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Redis can store not only queues but a lot of other data types, which are often used for jobs metadata outside of queues. If we ever wanted to switch from Redis to an actual message queue, we’d need to find a new home for the rest of data about jobs that is nowadays stored in Redis, for instance locks for &lt;a href=&quot;https://github.com/mhenrixon/sidekiq-unique-jobs&quot; target=&quot;\_blank&quot;&gt;unique jobs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Redis is an in-memory store, and memory is incredibly fast to write and read. When you’re used to a store that can serve &lt;a href=&quot;https://redis.io/topics/benchmarks&quot; target=&quot;\_blank&quot;&gt;almost 1M writes per second&lt;/a&gt;, you’ll come to a realization that disk is never as fast as RAM, and none of disk-backed stores will be able to give the performance that’s close to the in-memory store. Depending on your workloads, switching from Redis would be a hit for performance that you’re used to.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ve become so used to a fast in-memory store which made it so hard for us to switch to a slower but more reliable store.&lt;/p&gt;

&lt;p&gt;Another feature that’s critical to operating jobs is the ability to &lt;strong&gt;blackhole&lt;/strong&gt; certain jobs. Imagine that due a bug in the app there’s a large number of faulty jobs that ended up in the queue. Since it’s a FIFO queue, they’re blocking other jobs from running, so you’d want to delete those faulty jobs from the store as soon as possible.&lt;/p&gt;

&lt;p&gt;But hey, it’s not as easy to delete stuff from the queue (aka list) data type as you may have thought. To remove items from the list you’d have to rewrite it while blocking all other writes. It also has O(N) complexity, which is a huge hit when you have a backlog of thousands and millions of jobs.&lt;/p&gt;

&lt;p&gt;To tackle that, we never remove items from the queue in production. Instead, we create a rule for workers which take jobs from the queue. Usually the rule looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;ignore all jobs of class ImportJob with customer_id=123 in the arguments&lt;/code&gt;, in case we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;customer_id&lt;/code&gt; is creating faulty &lt;code class=&quot;highlighter-rouge&quot;&gt;ImportJob&lt;/code&gt; that’s somehow causing problems for the rest of platform. This is similar to the &lt;em&gt;tombstone&lt;/em&gt; concept that’s often used in databases when instead of deleting an already persisted record right away it would write a special tombstone flag to indicate that the record has been deleted. Eventually, the pairs of record + tombstone are cleaned up.
Since job blackhole rules are created dynamically and stored in a global database, we can apply them as soon as possible without re-deploying the app. You can’t imagine how many times it saved backs for my colleagues who were on-call.&lt;/p&gt;

&lt;p&gt;Essentially the blackhole feature provides manual &lt;strong&gt;Load Shedding&lt;/strong&gt;. &lt;a href=&quot;https://landing.google.com/sre/sre-book/chapters/addressing-cascading-failures/&quot; target=&quot;\_blank&quot;&gt;Load Shedding&lt;/a&gt; is a mechanism that explicitly rejects extra work when it detects that the system is at the peak of load, instead of letting that load to crash the system. It’s a common pattern used by many large scale web services. Instead of serving all HTTP request as usual when the system is experiencing overload, it starts rejecting some percentage on low-priority requests on purpose, trying to reduce the load on the system.&lt;/p&gt;

&lt;p&gt;A similar approach could be used for jobs: when we detect an enormous stream of new jobs, we start rejecting some of them if we know that system is at the peak capacity. There’s a lot to play with here: some jobs tolerate delayed execution and some not. A good example is jobs that only care about being executed &lt;em&gt;now&lt;/em&gt;, which means that they become useless when executed later.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;Large scale web services are starting to outgrow the Redis-backed queue system which has been so common in the web dev industry for the last 10 years.&lt;/p&gt;

&lt;p&gt;Based on features that I described, the job framework of a dream would:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;enforce constraints on how long the job may run, and complain about non-interruptible jobs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;provide a better way to prioritize jobs rather than give a set of queues, which would help to define SLOs and alert on their violations&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;automatically adjust the concurrency and rate limits for jobs that talk to external services&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;be multitenant-first and provide fairness between tenants&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;be able to store a larger backlog of jobs than RAM available&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;automatically shed the load when the system is at the peak of capacity&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While it’s possible to hack maybe 50% of that with Sidekiq Enterprise and a bunch of gems, it’s still going to be manual, and you never know if that gem works with Redis in a way that’s going to scale.&lt;/p&gt;

&lt;p&gt;It’s also fair to say that 99% of apps are totally fine with what the current ecosystem offers, and they don’t need all those features I described. If the next-gen jobs framework is ever going to evolve, it’s likely to be backed by a large company.&lt;/p&gt;

&lt;h2 id=&quot;the-vision&quot;&gt;The Vision&lt;/h2&gt;

&lt;p&gt;How could it look like from the design perspective? One thing I learned last year, is that baking all features that I talked about into job workers makes them too complex and creates overhead, both for humans and for operations. Workers are meant to be scaled horizontally, and having each of thousands of workers pull the blackhole rules or concurrency settings is going to be expensive for the datastore. You’ll end up caching it to minimize the load and introducing all sorts of workarounds, all on the worker level.&lt;/p&gt;

&lt;p&gt;It would be interesting to see if we can come up with some kind of “jobs proxy”, which would allow us to move most of the complexity there and make workers as dumb as possible. Introducing a proxy behind a datastore is a common case (look for for &lt;em&gt;pgbouncer, proxysql, twemproxy&lt;/em&gt;), and there are even existing proxies for Redis. However those are abstract of what you store in Redis, and mostly focus on key/value lookups.&lt;/p&gt;

&lt;p&gt;I’m talking about a jobs-specific proxy which would take care of all things like enforcing fairness between tenants, rate limits or load-shed jobs if needed. Even for thousands of workers, we’d need to run only a few replicas of that proxy, so we could largely reduce the overhead for all those features. The worker itself would not be aware of backed database since that will be the concern of a proxy, unlike now when workers talk directly to Redis and we end up implementing resiliency patterns like circuit breaks on top of Redis clients.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/contribsys/faktory&quot; target=&quot;\_blank&quot;&gt;Faktory&lt;/a&gt; project by the author of Sidekiq is very close to what I’m talking about here. It’s a Go proxy between job workers and the database, and it takes care of enqueueing and dequeueing jobs while providing extra features like unique jobs and acknowledgment of execution. However, it &lt;a href=&quot;https://github.com/contribsys/faktory/wiki/Redis&quot; target=&quot;\_blank&quot;&gt;deliberately chose&lt;/a&gt; Redis as storage. In fact, it starts the Redis sub-process inside Faktory, giving very little control of Redis to engineers. This is great for most of Faktory users who may have little experience configuring Redis properly, but I imagine that large-scale consumers would still want to own and monitor Redis by themselves. And Redis still brings all the in-memory constraints that I’ve mentioned above. The max capacity of the queue would be equal to the RAM that Redis has available.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I also have to admit that whatever I imagined in this post could take massive investments and have not too much value for the business, as long as you’re able to optimize the current setup with Redis, reduce extra load and make it handle more than it currently does.&lt;/p&gt;

&lt;p&gt;Who knows, maybe this is just an idea for an upcoming Hack Days?&lt;/p&gt;

&lt;div class=&quot;upd&quot;&gt;
  If problems mentioned resonate with what you're working on, I'd be very curious to hear from you! Reach out to &lt;a href=&quot;https://twitter.com/kirshatrov&quot;&gt;@kirshatrov&lt;/a&gt; on Twitter (my DM is open) or at &lt;a href=&quot;mailto:kir@kirshatrov.com&quot;&gt;kir@kirshatrov.com&lt;/a&gt;.
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Engineering Leadership Unconference</title>
   <link href="http://kirshatrov.com/posts/leadership-unconference/">
   <updated>2018-11-29T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/leadership-unconference</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/post-images/eng-leadership-unconference.jpg&quot; alt=&quot;Engineering Leadership Unconference&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last weekend I went to the &lt;a href=&quot;https://www.meetup.com/Engineering-leadership-Unconference/&quot; target=&quot;_blank&quot;&gt;Engineering Leadership Unconference&lt;/a&gt; in London. It was the first time I attended the “unconference” sort of event, which unlike as a usual conference, doesn’t have a list of speakers or talks.&lt;/p&gt;

&lt;p&gt;Instead, people meet and gather in front of a whiteboard and come up with topics to discuss. Each room is assigned a topic, and attendees are free to choose a room with the most interested discussion.&lt;/p&gt;

&lt;p&gt;In each room there would be 5-10 people having a conversation for a given topic (let’s say about growing developers). There’s no leader and everyone is welcome to share an opinion. At the end of the time slot, they switch to another topic according to the whiteboard with the schedule.&lt;/p&gt;

&lt;p&gt;It’s a very cool format that IMO makes people feel more free to share their problems. In a small group of people you are a lot more comfortable to ask for advise related to a problem at work, unlike at a regular conference where you’re in front of an audience and everything you represent is the public image of the organization you’re associated with.&lt;/p&gt;

&lt;p&gt;Thanks to carwow for hosting and organizing the unconference! Below in this post are some of my notes that could be interesting for others.&lt;/p&gt;

&lt;h2 id=&quot;promoting-senior-developers--career-ladder&quot;&gt;Promoting senior developers / career ladder&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Factors used to evaluate when a person is ready for promotion
    &lt;ul&gt;
      &lt;li&gt;Values to evaluate at a company X: Tech excellence, Value delivery, Balance in quality, Always growing, Servant leadership, Further together, Taking responsibility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Detailed matrix of criterias vs defining an image of a senior engineer and helping people to get to that image&lt;/li&gt;
  &lt;li&gt;Turns out there’s a guy running a &lt;a href=&quot;http://skillsmap.io&quot; target=&quot;_blank&quot;&gt;consultancy&lt;/a&gt; about this!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;organic-growth-of-engineering-roles-vs-building-a-framework&quot;&gt;Organic growth of engineering roles vs building a framework&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;If you have a few engineers at the company and one of them really wants a promotion to senior, should you promote them for retain at the company?&lt;/li&gt;
  &lt;li&gt;There’s no point in building a career ladder for a company of 10 engineers&lt;/li&gt;
  &lt;li&gt;Reuse existing models instead of reinventing your own (&lt;a href=&quot;http://www.progression.fyi/&quot; target=&quot;_blank&quot;&gt;http://www.progression.fyi/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;environments-without-engineering-managers&quot;&gt;Environments without engineering managers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Developer anarchy: a company without managers, everyone works on whatever they want. Could be a good fit for a developer-oriented product (developers make tools for developers), but may not work for companies where the direction is defined from top level.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/holman/ama/issues/45&quot; target=&quot;_blank&quot;&gt;No managers at GitHub&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=12435706&quot; target=&quot;_blank&quot;&gt;Why GitHub Finally Abandoned Its Bossless Workplace&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tech Director (aka Google Fellow) model: exceptional engineers and engineers who’ve been delivering high-performance projects for years are promoted to be a Tech Director (TD). TD can work on whatever they want (it’s usually very complex problems that are hard to be solved by a product team), either individually of forming a small working group. They switch areas depending on where their help is needed. Compensation of TDs can be as high as for VPs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hiring-principles&quot;&gt;Hiring principles&lt;/h2&gt;

&lt;p&gt;If we had one thing to look at when hiring, what criteria would we use?&lt;/p&gt;

&lt;p&gt;Hire for delivery, fire for lack of enthusiasm
&lt;em&gt;- is what most of companies do&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;vs&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hire for enthusiasm, fire for lack of delivery &lt;em&gt;(what was proposed)&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;someone not having a track of delivery is not a reason not to hire them, if the team is excited to work with that person&lt;/li&gt;
  &lt;li&gt;a lot of unexpected but turning to be amazing hires came from this category&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;books-mentioned&quot;&gt;Books mentioned&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Crucial-Accountability-Resolving-Expectations-Commitments/dp/0071829318&quot;&gt;Critical Accountability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bloomsbury.com/uk/why-im-no-longer-talking-to-white-people-about-race-9781408870570/&quot;&gt;Why I’m No Longer Talking to White People About Race&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Capacity planning for web applications</title>
   <link href="http://kirshatrov.com/posts/capacity-planning-for-web-apps/">
   <updated>2018-10-21T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/capacity-planning-for-web-apps</id>
   <content type="html">&lt;p&gt;Lately, I’ve been looking into capacity planning at work which is the area that I’ve never known about much. In the last couple of months, I went from “I have no idea” stage into “ok, I think I know how it works”. There’s still a lot for me to learn but I wanted to write this post for a three month ago version of myself with a recap of all my findings. Hope it will be useful for others.&lt;/p&gt;

&lt;p&gt;There’s a lot of talk about the growth in tech, though I haven’t seen many discussions around planning that growth from the engineering point of view. How do you know if the number of application servers that you run is enough? Or if it’s way too high and you’re wasting money? Or what if you have an upcoming launch even and you want to handle the expected traffic?&lt;/p&gt;

&lt;p&gt;When doing capacity calculations, we’ll assume that your workload is entirely stateless and scales horizontally without an external resource like a database becoming the bottleneck.&lt;/p&gt;

&lt;p&gt;Let’s refresh the terminology first:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RPS / RPM:&lt;/strong&gt; requests-per-second and requests-per-minute. It’s typical to operate in RPM on smaller loads, though most of the industry usually refers to RPS. “We get 100 RPS in peak” means that an app is serving 100 requests per second during the peak load, likely with a &lt;em&gt;pool&lt;/em&gt; of application servers rather than a single server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steady and peak load.&lt;/strong&gt; In our previous example, we’ve used “100 RPS in peak”. That would be the amount of traffic during the busiest hours, for instance on Black Friday if it’s in the e-commerce domain. Outside of those hours, it’s typical that the app would be serving much lower traffic, maybe 50 or 70 RPM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application server.&lt;/strong&gt; Not to confuse with a load balancer (Nginx), an application server is something that runs your Ruby, Node, or Python app, listens to the TCP socket, accepts HTTP request, and returns the response from the app. Unicorn in Ruby or gunicorn in Python are good examples of application servers that use forking model. Puma is another common application server for Ruby, though it’s using threads instead of forking which is a bit harder to model since it’s concurrent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Worker&lt;/strong&gt;. A child process of the forking application server. A worker can serve only one request at the time. The app server would typically run 8 or 16 workers, depending on how fat you want the process to be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Under-provisioned:&lt;/strong&gt; lack of capacity which leads to higher response time or more frequent &lt;code class=&quot;highlighter-rouge&quot;&gt;502 Bad Gateway&lt;/code&gt; responses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over-provisioned:&lt;/strong&gt; running more capacity than you actually need and probably wasting money.&lt;/p&gt;

&lt;h2 id=&quot;calculating-from-scratch&quot;&gt;Calculating from scratch&lt;/h2&gt;

&lt;p&gt;Let’s say that you get a business requirement to handle the load of 5000 RPS in peak. How do you find the optimal number of application servers required to serve this load?&lt;/p&gt;

&lt;p&gt;The first thing to find is the distribution of response time. That metric is the key to calculating capacity. Let’s imagine that the average response time of our app is &lt;strong&gt;100ms&lt;/strong&gt;, which is enough to make a few queries to the database and render the HTML or JSON response.&lt;/p&gt;

&lt;p&gt;Using that fact, we can find that a single instance of the application server can handle &lt;strong&gt;10 RPS&lt;/strong&gt; (1s / 100ms). Which means that to serve 5000 RPS, we’ll need 5000 / 10 = 500 application servers. For a forking server running 16 workers that would be 500 / 16 = 31.25 = &lt;strong&gt;32 instances&lt;/strong&gt; of Unicorn or whatever another forking server.&lt;/p&gt;

&lt;h2 id=&quot;translating-workload-into-money&quot;&gt;Translating workload into money&lt;/h2&gt;

&lt;p&gt;How do we translate that calculation into money? We’ll use prices from Google Cloud Platform (GCP), which I personally prefer more than AWS since it’s way less complicated than Amazon’s offerings both in product view and in the pricing.&lt;/p&gt;

&lt;p&gt;Depending on how CPU-intensive your workload is, a single web worker could take from 0.5 to 1 CPU. Regarding memory, it’s not unusual for a Rails app to consume at least 1Gb, or even 2Gb for a larger app.&lt;/p&gt;

&lt;p&gt;Let’s imagine that the app is not heavy on CPU and mostly does I/O work (which is typical for web apps), and takes &lt;strong&gt;0.5 CPUs and 1.5Gb RAM&lt;/strong&gt;. For 32 workers, that means &lt;strong&gt;16 CPUs and 48 Gb RAM in total.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A single &lt;code class=&quot;highlighter-rouge&quot;&gt;n1-standard-16&lt;/code&gt; node in GCP with 16 CPUs and 60GB of memory would be enough to fit all that workload, though putting all of them on the same node wouldn’t be wise for resiliency reasons.&lt;/p&gt;

&lt;p&gt;Let’s pick &lt;code class=&quot;highlighter-rouge&quot;&gt;n1-standard-4&lt;/code&gt; node which has 4 CPUs and 15Gb on memory and &lt;a href=&quot;https://cloud.google.com/compute/pricing#predefined&quot; target=&quot;_blank&quot;&gt;costs&lt;/a&gt; $97.09 / month. This node size would fit 8 workers of our app. We need 32 workers in total so 4 nodes would be $97.09 x 4 = &lt;strong&gt;$388.36 / month&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s take a look at Committed Use Discount that GCP provides. If you sign up for those nodes for a least a year, the monthly price for a node goes to down $87.38. Sign up for 3 years, and get it as low as $62.42 / month, or &lt;strong&gt;$249.68&lt;/strong&gt; for 4 nodes vs $388.36 without any discounts.&lt;/p&gt;

&lt;p&gt;There are even more opportunities to save! You could leverage &lt;a href=&quot;https://cloud.google.com/compute/docs/instances/preemptible&quot; target=&quot;_blank&quot;&gt;Preemptible VM instances&lt;/a&gt; (nodes provided with no guarantee, they can go away at any point), in that case, &lt;code class=&quot;highlighter-rouge&quot;&gt;n1-standard-4&lt;/code&gt; would cost as little as $29.20 / month - or &lt;strong&gt;$116.8 / month&lt;/strong&gt; for all 4 nodes. But given that preemptible instances can go away at any point it makes sense to spread the workload between more nodes, and maybe switch to 8 x &lt;code class=&quot;highlighter-rouge&quot;&gt;n1-standard-2&lt;/code&gt; for the same price.&lt;/p&gt;

&lt;p&gt;As you can see, GCP is flexible in composing the workload and choosing the right commitment / discount for your business case. And if you’re ready to take the risk of losing the capacity at any point in time, there’s an opportunity to save ~70% of the costs by using preemptible instances.&lt;/p&gt;

&lt;h1 id=&quot;finding-the-ceiling&quot;&gt;Finding the ceiling&lt;/h1&gt;

&lt;p&gt;What if you already have a production setup serving some number of RPS and you want to know its utilization and the ceiling of what it can handle?&lt;/p&gt;

&lt;p&gt;Let’s take Unicorn server for Ruby as an example. As a forking server, it spawns a number of child workers that serve actual requests.&lt;/p&gt;

&lt;p&gt;By looking at how many of those workers are utilized, you could get an idea where you’re at your current capacity. &lt;a href=&quot;https://bogomips.org/raindrops/&quot; target=&quot;_blank&quot;&gt;Raindrops&lt;/a&gt; is the go-to library to monitor active workers count. If you know that only 4 out of 16 workers are busy on the average, it means that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s currently 4 times over-provisioned&lt;/li&gt;
  &lt;li&gt;It can handle 4 times more traffic, assuming that external dependencies (databases, APIs) can handle that load and the response time remains the same.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that even distribution of requests between workers is important. If your load balancer does a poor job in spreading the work between application servers, it’s possible that one of them would get too much load while others would stay idle. &lt;a href=&quot;https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/lua/balancer/ewma.lua&quot; target=&quot;_blank&quot;&gt;EWMA&lt;/a&gt; is currently one of the most efficient load balancing algorithms which is used by Google, Twitter, and Shopify.&lt;/p&gt;

&lt;h2 id=&quot;why-cpu-utilization-often-does-not-matter&quot;&gt;Why CPU utilization often does not matter?&lt;/h2&gt;

&lt;p&gt;It’s common to implement some sort of autoscaling by looking at the node’s CPU utilization. Low utilization would mean that instances are idle, and high (or closer to the limit) CPU usage would indicate that there’s a need to scale up.&lt;/p&gt;

&lt;p&gt;However, in modern web applications, CPU utilization does not correlate much with the capacity. Unless you’re calculating Pi or Fibonacci, most of the time in your application will be spent while waiting for data from an external resource. That resource would be PostgreSQL, Redis, MongoDB, or any other database that you’re using. If your app is talking to external APIs a lot, then it would be waiting for a response from an RPC endpoint or GraphQL/REST API.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;Something that I realized when getting my head around it is that all these calculations would never be too precise. All you can do is reduce the error by getting better at knowing your numbers.&lt;/p&gt;

&lt;p&gt;In the end, we can promise to serve 5000 RPM with 32 Unicorn processes of 16 workers only when the response time stays around 100ms. If one of the queries hits the database too hard and it starts to return results slower, the response time will increase also, drastically reducing the capacity. It’s important to invest into other areas that make your platform resilient: hard timeouts, &lt;a href=&quot;https://github.com/Shopify/semian&quot; target=&quot;_blank&quot;&gt;circuit breakers, bulkheading&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Load_Shedding&quot; target=&quot;_blank&quot;&gt;load shedding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#107;&amp;#105;&amp;#114;&amp;#105;&amp;#108;&amp;#108;&amp;#046;&amp;#115;&amp;#104;&amp;#097;&amp;#116;&amp;#114;&amp;#111;&amp;#118;&amp;#064;&amp;#115;&amp;#104;&amp;#111;&amp;#112;&amp;#105;&amp;#102;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;Hit me up&lt;/a&gt; if working on this sounds exciting, my team at Shopify is hiring! Our Scalability &amp;amp; Reliability team is all remote and distribured across Canada and Europe.&lt;/p&gt;

&lt;p&gt;This post is only supposed to be a summary of my findings related to web capacity on non-threaded application servers. By no means, it’s a complete guide to calculation your capacity. For instance, it doesn’t touch the aspects of threaded web servers (e.g. &lt;a href=&quot;https://github.com/puma/puma&quot; target=&quot;_blank&quot;&gt;Puma&lt;/a&gt;) or modeling the capacity of background jobs (e.g., Sidekiq or Resque).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Designing job queue in Redis</title>
   <link href="http://kirshatrov.com/posts/redis-job-queue/">
   <updated>2018-07-20T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/redis-job-queue</id>
   <content type="html">&lt;p&gt;Disclaimer: I come from the Ruby community where Resque and Sidekiq are the major job queue implementations. This post is about my findinds outside of the “comfort zone” tech stack. I’ll use “job queue” and “message queue” terms in the post, but essentually I’m referring to the same thing: a list with pop and push operations.&lt;/p&gt;

&lt;p&gt;I love playing with Clojure on my spare time and I stumbled upon a Redis library for Clojure which is called &lt;a href=&quot;https://github.com/ptaoussanis/carmine&quot; target=&quot;_blank&quot;&gt;carmine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reading the docs, I was surprised to see that it has built-in message queue implementation. It’s only about 300 LOC and &lt;a href=&quot;https://github.com/ptaoussanis/carmine/blob/master/src/taoensso/carmine/message_queue.clj&quot; target=&quot;_blank&quot;&gt;one file&lt;/a&gt; which was easy to read and understand even at 5am after waking up from jet lag.&lt;/p&gt;

&lt;p&gt;But I got even more excited when I saw how carmine’s design around Redis keys for building a message queue. Before we dive into it, let me show how Resque and Sidekiq (common job queue libraries in Ruby) use Redis.&lt;/p&gt;

&lt;p&gt;See Redis keys that they rely on:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resque:queue:&amp;lt;qname&amp;gt; - set, job payload in JSON
resque:queues - set, list of available queues &amp;lt;qname&amp;gt;
resque:workers - set, list of active workers &amp;lt;wid&amp;gt;
resque:worker:&amp;lt;wid&amp;gt; - hash, { wid, job payload }
resque:worker:&amp;lt;wid&amp;gt;:started - key, timestamp
resque:workers:heartbeat - hash, { wid, timestamp }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a job is pushed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;low&lt;/code&gt; queue, the following Redis commands would be called:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SADD resque:queues low
LPUSH resque:queue:low &amp;lt;job payload&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now a worker would start and take the job from the queue:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SET resque:worker:&amp;lt;wid&amp;gt;:started &amp;lt;NOW&amp;gt;
HSET resque:workers:heartbeat &amp;lt;wid&amp;gt; &amp;lt;NOW&amp;gt;

RPOP resque:quques:low # fetch job and the payload
HSET resque:workers:&amp;lt;wid&amp;gt; &amp;lt;job payload&amp;gt; # declare itself as working on the specific job
... execute the job handler
HREM resque:workers:&amp;lt;wid&amp;gt; # when the work is done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(forgive me if I missed any operations here!)&lt;/p&gt;

&lt;p&gt;This design of keys in Redis was &lt;a href=&quot;https://github.com/resque/resque/tree/v0.0.1&quot; target=&quot;_blank&quot;&gt;brought up&lt;/a&gt; by Resque since the very beginning. Later, when Sidekiq came around, Mike Perham &lt;a href=&quot;https://github.com/mperham/sidekiq/wiki/Resque-Compatibility&quot; target=&quot;_blank&quot;&gt;wanted&lt;/a&gt; to preserve compatibility with Resque and used the same keys structure in Sidekiq:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I try to make Sidekiq compatible with Resque where possible and appropriate; this makes it easy to try out Sidekiq for those who are already using Resque.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the very keys design that Resque and Sidekiq are using now in 2018 is coming back from Resque 0.0.1 in 2010.&lt;/p&gt;

&lt;p&gt;Now let’s take a look at what carmine (the Clojure implementation) &lt;a href=&quot;https://github.com/ptaoussanis/carmine/blob/master/src/taoensso/carmine/message_queue.clj&quot; target=&quot;_blank&quot;&gt;offers&lt;/a&gt;. Here is its keys structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;carmine:mq:&amp;lt;qname&amp;gt;:messages     - hash, {mid mcontent}.
carmine:mq:&amp;lt;qname&amp;gt;:locks        - hash, {mid lock-expiry-time}.
carmine:mq:&amp;lt;qname&amp;gt;:backoffs     - hash, {mid backoff-expiry-time}.
carmine:mq:&amp;lt;qname&amp;gt;:nattempts    - hash, {mid attempt-count}.
carmine:mq:&amp;lt;qname&amp;gt;:mid-circle   - list, rotating list of mids.
carmine:mq:&amp;lt;qname&amp;gt;:done         - set, awaiting gc, requeue, etc.
carmine:mq:&amp;lt;qname&amp;gt;:requeue      - set, for `allow-requeue?` option.
carmine:mq:&amp;lt;qname&amp;gt;:eoq-backoff? - ttl flag, used for queue-wide
                                    (every-worker) polling backoff.
carmine:mq:&amp;lt;qname&amp;gt;:ndry-runs    - int, number of times worker(s) have
                                    burnt through queue w/o work to do.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: &lt;code class=&quot;highlighter-rouge&quot;&gt;mid&lt;/code&gt; is the “message id” in carmine’s terminology. You can think of it as a “job id” in Ruby land.&lt;/p&gt;

&lt;p&gt;You’ll soon start noticing how much different is this approach when compared to Resque. &lt;code class=&quot;highlighter-rouge&quot;&gt;mid-circle&lt;/code&gt; key is essentially a &lt;a href=&quot;https://redis.io/commands/rpoplpush#pattern-circular-list&quot; target=&quot;_blank&quot;&gt;Circular list&lt;/a&gt; that makes the queue reliable. Refer to the &lt;a href=&quot;https://github.com/ptaoussanis/carmine/blob/master/src/taoensso/carmine/message_queue.clj&quot; target=&quot;_blank&quot;&gt;implementation&lt;/a&gt; if you need more clues around how it works.&lt;/p&gt;

&lt;p&gt;Let’s look at Redis operations that happen when jobs are enqueued and processed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# enqueue to the low queue
HSET carmine:mq:low:messages &amp;lt;job id&amp;gt; &amp;lt;job payload&amp;gt;
LPUSH carmine:mq:low:mid-circle &amp;lt;job_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that the job payload and the list of job ids in the queue are stored separately.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# dequeue
RPOPLPUSH carmine:mq:low:messages carmine:mq:low:messages # move the job from the head to tail within the same list, return &amp;lt;job id&amp;gt;
HGET carmine:mq:low:messages &amp;lt;job id&amp;gt; # fetch the job payload
HSET carmine:mq:low:locks &amp;lt;job id&amp;gt; {expiry} # acquire a lock
... execute the job handler
SADD carmine:mq:low:done &amp;lt;job id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;job id&amp;gt;&lt;/code&gt; stays in the list, but it’s marked as “done” so it wouldn’t be processed more than once. It will be cleaned up later when another worker takes a “done” job.&lt;/p&gt;

&lt;p&gt;I’ve been amazed how completely different this Redis keys setup is! It allows carmine’s message queue to be &lt;strong&gt;resilient&lt;/strong&gt; by default: if a worker dequeued a job but died later and didn’t mark it as “done”, it will be processed by another worker after the lock expires.&lt;/p&gt;

&lt;p&gt;Of course you can still do the hack the same feature into Resque, but with its keys structure the implementation would be orders of magnitude more complex (we actually did that at Shopify).&lt;/p&gt;

&lt;p&gt;Another aspect is atomicity. You can see that enqueue and dequeue operations involve multiple commands, and if connectivity to Redis is lost or Redis goes does, it’s possible to get the store into inconsistent state. Resque works around that by enforcing TTL on as many keys as possible and pruning dead workers from the set.&lt;/p&gt;

&lt;p&gt;Carmine, in contrast, leverages &lt;a href=&quot;https://redis.io/commands/eval&quot; target=&quot;_blank&quot;&gt;Lua support&lt;/a&gt; in Redis and makes &lt;a href=&quot;https://github.com/ptaoussanis/carmine/blob/master/src/lua/mq/enqueue.lua&quot; target=&quot;_blank&quot;&gt;enqueue&lt;/a&gt; and &lt;a href=&quot;https://github.com/ptaoussanis/carmine/blob/master/src/lua/mq/dequeue.lua&quot; target=&quot;_blank&quot;&gt;dequeue&lt;/a&gt; atomic by making them Lua scripts.&lt;/p&gt;

&lt;p&gt;The most of Carmine’s message queue implementation was developed in 2012-2013, which is not too long from the initial Resque release, but you can see how much different and more advanced it is.&lt;/p&gt;

&lt;p&gt;I’m wondering how we can use this as a lesson to:&lt;/p&gt;

&lt;p&gt;1) see the variety of decisions that you can take when designing something on top of Redis&lt;/p&gt;

&lt;p&gt;2) question whether we don’t have to forever stick with Resque’s keys design and try something different.&lt;/p&gt;

&lt;h3 id=&quot;further-read&quot;&gt;Further read&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.celeryproject.org/&quot; target=&quot;_blank&quot;&gt;Celery&lt;/a&gt;, job queue framework in Python. Has lots of interesting features that we (again) miss in Ruby.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/customerio/fairway&quot; target=&quot;_blank&quot;&gt;Fairway&lt;/a&gt;, Ruby library for multi-tenant queues on top of Redis.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>The Lead Developer conference</title>
   <link href="http://kirshatrov.com/posts/lead-developer-conference/">
   <updated>2018-07-01T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/lead-developer-conference</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/post-images/lead-dev/conf.jpg&quot; width=&quot;600&quot; height=&quot;463&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This week I attended &lt;a href=&quot;https://london2018.theleaddeveloper.com/&quot; target=&quot;_blank&quot;&gt;Lead Developer&lt;/a&gt;, a conference for technical leaders. Lead Developer is organized as a series a conferences around the world. I’ve attended it in London, but there was one in NYC in April and there’s one in Austin TX planned for December 2018.&lt;/p&gt;

&lt;p&gt;For me, a conference us usually something purely technical, with a bunch of people sharing code and telling stories about solving problems. Lead Developer was rather different. Its main topics are leadership, soft skills, communication and efficient management - exactly what I was looking for lately.&lt;/p&gt;

&lt;p&gt;The quality of the event was very high: all speakers were well prepared, M.C. was professional and funny, all talks were subtitled, there was even a chillout room and a mindfulness session.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/lead-dev/chill.jpg&quot; width=&quot;738&quot; height=&quot;345&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Was it worth £700 to attend? If you work for a small-ish company, the answer is absolutely yes. If you’re at a larger company like Shopify, where there’s a lot of internal resources and training available, it’s probably worth attending too, but not too certainly. Out of 23 talks, there’s been maybe 4 or 5 that were extremely valuable for me. For the rest of talks, I’ve already learned much of that from those 3 years that I’ve spent at Shopify.&lt;/p&gt;

&lt;p&gt;I could probably watch those few talks without going to the conference, but the thing is that you never know what talks to watch if you haven’t been there.&lt;/p&gt;

&lt;p&gt;Below is a list of talks that in my opinion are worth sharing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;its-personal---the-art-of-giving-and-receiving-code-reviews-gracefully&quot;&gt;It’s personal - the art of giving and receiving code reviews gracefully&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XY6eA2_2hOg&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I wish I saw this talk by &lt;strong&gt;Alexandra Hill&lt;/strong&gt; a couple years ago! Especially recommended for people who come from direct communication background (like Russia or Germany).&lt;/p&gt;

&lt;p&gt;Alexandra wrote a &lt;a href=&quot;http://www.alexandra-hill.com/2018/06/25/the-art-of-giving-and-receiving-code-reviews/&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; which is essentially an extended version of the talk. Please go and read it.&lt;/p&gt;

&lt;h3 id=&quot;using-agile-techniques-to-build-a-more-inclusive-team&quot;&gt;Using Agile Techniques to Build a More Inclusive Team&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Atfxtk2Q90k&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/kevingoldsmith/agile-techniques-for-lead-developers/&quot; target=&quot;_blank&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not a talk about Agile! &lt;strong&gt;Kevin Goldsmith&lt;/strong&gt; speaks about things that you learn when you become a manager (like preparing 1:1s), but my favorite part was about mentoring future leads. Here’s his approach to delegating tasks to his reports so they can learn more about lead’s responsibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make a list of things to delegate&lt;/li&gt;
  &lt;li&gt;When you delegate a task to your report, ask them to prepare and show the execution plan first&lt;/li&gt;
  &lt;li&gt;After you approved the plan, let them execute&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tips-for-managing-a-widely-distributed-team&quot;&gt;Tips for managing a widely distributed team&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pi6bHUkoBgY&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This talk by &lt;strong&gt;Dirkjan Bussink&lt;/strong&gt; was probably my favorite. As someone who works remotely, I was pleased to hear GitHub’s approach to building remote culture. There’s a lot there that’s similar to how we do it at Shopify, as well as something I haven’t thought about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have regular team gatherings. Don’t do usual work on those. Instead, do project planning, socialize, come up with fun activities like lightening talks, cooking and volunteering. Use this as an opportunity to learn about individuals on your team.&lt;/li&gt;
  &lt;li&gt;Mind timezones. Don’t stay online when it’s too late your zone. Being on the other side, don’t start discussing sensitive matters when it’s late someone’s time so their evening is not ruined.&lt;/li&gt;
  &lt;li&gt;Use timezones as your power. For instance, hand off ongoing incidents to people in the earlier timezone if it’s late your time and you are exhausted.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-hardest-scaling-challenge-of-all---yourself&quot;&gt;The Hardest Scaling Challenge of All - Yourself&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/86fqsVWngHI&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;A very American-style talk on personal efficiency from &lt;strong&gt;Christian McCarrick&lt;/strong&gt;. Please don’t take it too seriously, but it gives good tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.managerreadme.com/&quot; target=&quot;_blank&quot;&gt;Manager READMEs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jamesclear.com/eisenhower-box&quot; target=&quot;_blank&quot;&gt;The Eisenhower Matrix&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Use calendar blocking not only for meetings, but also for individual activities (e.g. to reserve 2 hours for working on feature X)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out Christian’s website with the &lt;a href=&quot;http://simpleleadership.io/leaddev/&quot; target=&quot;_blank&quot;&gt;talk resources&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;del&gt;As you’ve noticed, I haven’t linked video recordings of the talk. They are not published yet, but I will update the post as soon as they will be online.&lt;/del&gt; Updated the post with &lt;strong&gt;video recordings&lt;/strong&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Ruby processes in Kubernetes</title>
   <link href="http://kirshatrov.com/posts/debugging-ruby-in-kubernetes/">
   <updated>2018-04-13T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/debugging-ruby-in-kubernetes</id>
   <content type="html">&lt;p&gt;Debugging non-containerized apps in production is dead easy: ssh to a host, &lt;a href=&quot;http://rbspy.github.io&quot; target=&quot;_blank&quot;&gt;rbspy&lt;/a&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; the process or run &lt;code class=&quot;highlighter-rouge&quot;&gt;rails console&lt;/code&gt; to reproduce something in production.&lt;/p&gt;

&lt;h2 id=&quot;why-kubernetes-makes-it-harder&quot;&gt;Why Kubernetes makes it harder?&lt;/h2&gt;

&lt;p&gt;Running a process in a container makes debugging a bit harder: you need to first get into the container with &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec&lt;/code&gt; (and don’t forget to add &lt;code class=&quot;highlighter-rouge&quot;&gt;--interactive --tty&lt;/code&gt;) and only inside the container you’ll be able to inspect the running process.&lt;/p&gt;

&lt;p&gt;What about using rbspy in Docker? That’s even &lt;a href=&quot;https://github.com/rbspy/rbspy/issues/67&quot; target=&quot;_blank&quot;&gt;trickier&lt;/a&gt;, because the ptrace (a system call that rbspy relies on) is not allowed by default in a container. You’ll have to run the container with &lt;code class=&quot;highlighter-rouge&quot;&gt;--cap-add=SYS_PTRACE&lt;/code&gt; flag, and only then you’ll be able to &lt;code class=&quot;highlighter-rouge&quot;&gt;docker exec&lt;/code&gt; into it and use rbspy.&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;p&gt;Now, let’s move on to Kubernetes tips. I wrote this post as a collection of snippets that I use every day when I need to get into a running Ruby process and see what’s happening.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pods
NAME                         READY     STATUS    RESTARTS   AGE
secretland-c796bf9df-gmt97   1/1       Running   0          13d
secretland-4a145b44d-6xw11   1/1       Running   0          13d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have two replicas of the &lt;a href=&quot;https://github.com/kirs/secretland&quot; target=&quot;_blank&quot;&gt;secretland&lt;/a&gt; app that I’ve built in the &lt;a href=&quot;http://kirshatrov.com/2018/03/24/rails-credentials-kubernetes/&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get in to container:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -i -t secretland-c796bf9df-gmt97 /bin/bash
&lt;span class=&quot;gp&quot;&gt;root@secretland-c796bf9df-gmt97:/app# &lt;/span&gt;ls
Dockerfile  Gemfile  Gemfile.lock  README.md  Rakefile  app  bin  config  config.ru  db  lib  log  package.json  public  script  storage  &lt;span class=&quot;nb&quot;&gt;test  &lt;/span&gt;tmp  vendor
&lt;span class=&quot;gp&quot;&gt;root@secretland-c796bf9df-gmt97:/app# &lt;/span&gt;bin/rails console
Loading production environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Rails 5.2.0.rc2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
irb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:001:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or exec to Rails console directly:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -i -t secretland-c796bf9df-gmt97 /app/bin/rails console
Loading production environment &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Rails 5.2.0.rc2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
irb&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;main&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:001:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rbspy&quot;&gt;Rbspy&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://rbspy.github.io&quot; target=&quot;_blank&quot;&gt;Rbspy&lt;/a&gt; is a sampling profiler for Ruby programs that was recently released by Julia Evans. Rbspy is an awesome tool that we’ve been missing in the Ruby world for years, and it makes me so happy that Julia worked on it.&lt;/p&gt;

&lt;p&gt;Let’s see how to use rbspy on a live process that runs in a Kubernetes Pod. First we need to know that rbspy relies on &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(3)&lt;/code&gt;. To run a ptrace-enabled container, we need to give a container the &lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_PTRACE&lt;/code&gt; privilege. See &lt;code class=&quot;highlighter-rouge&quot;&gt;securityContext.capabilities&lt;/code&gt; field in the Deployment spec:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kirshatrov/secretland:v1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;securityContext&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;capabilities&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SYS_PTRACE&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;-- the privilege&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To emulate a slow endpoint, I’ve &lt;a href=&quot;https://github.com/kirs/secretland/commit/c3d9cd5d221a49b9907823f865ee73833be58dca&quot;&gt;created a sample action&lt;/a&gt; that calculates Fibonacci number. That way, we’ll be able to see where the process spends time in the Ruby land.&lt;/p&gt;

&lt;p&gt;After the new Deployment spec is in place, we can exec to the web container and try rbspy. At least in my case, Puma process has &lt;code class=&quot;highlighter-rouge&quot;&gt;pid&lt;/code&gt; equal &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -i -t secretland-8dc689458-jstp2 /bin/bash
&lt;span class=&quot;gp&quot;&gt;root@secretland-8dc689458-jstp2:/app# &lt;/span&gt;rbspy record --pid 1
Time since start: 9s. Press Ctrl+C to stop.
Summary of profiling data so far:
&lt;span class=&quot;gp&quot;&gt;% &lt;/span&gt;self  % total  name
100.00   100.00  &amp;lt;c &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&amp;gt; - unknown
  0.00    79.41  block &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;start! - /usr/local/bundle/gems/puma-3.11.3/lib/puma/thread_pool.rb
  0.00    20.59  run_internal - /usr/local/bundle/gems/puma-3.11.3/lib/puma/reactor.rb
  0.00    20.59  block &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;run_in_thread - /usr/local/bundle/gems/puma-3.11.3/lib/puma/reactor.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The profile changes after I hit the &lt;code class=&quot;highlighter-rouge&quot;&gt;/slowpath&lt;/code&gt; endpoint in browser:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% self  % total  name
 70.56   100.00  &amp;lt;c function&amp;gt; - unknown
 29.44    29.44  fibonacci - /app/app/controllers/helloworld_controller.rb
  0.00    67.89  block in start! - /usr/local/bundle/gems/puma-3.11.3/lib/puma/thread_pool.rb
  0.00    32.11  block in spawn_thread - /usr/local/bundle/gems/puma-3.11.3/lib/puma/thread_pool.rb
  0.00    30.97  process_client - /usr/local/bundle/gems/puma-3.11.3/lib/puma/server.rb
  0.00    30.97  block in run - /usr/local/bundle/gems/puma-3.11.3/lib/puma/server.rb
  0.00    29.44  tagged - /usr/local/bundle/gems/activesupport-5.2.0.rc2/lib/active_support/tagged_logging.rb
  0.00    29.44  slow - /app/app/controllers/helloworld_controller.rb
  0.00    29.44  serve - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_dispatch/routing/route_set.rb
  0.00    29.44  serve - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_dispatch/journey/router.rb
  0.00    29.44  send_action - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_controller/metal/basic_implicit_render.rb
  0.00    29.44  run_callbacks - /usr/local/bundle/gems/activesupport-5.2.0.rc2/lib/active_support/callbacks.rb
  0.00    29.44  process_action - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_controller/metal/rescue.rb
  0.00    29.44  process_action - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_controller/metal/rendering.rb
  0.00    29.44  process_action - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_controller/metal/params_wrapper.rb
  0.00    29.44  process_action - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/action_controller/metal/instrumentation.rb
  0.00    29.44  process_action - /usr/local/bundle/gems/actionpack-5.2.0.rc2/lib/abstract_controller/callbacks.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/rbspy-in-prod.png&quot; width=&quot;700&quot; height=&quot;368&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yay it works!&lt;/p&gt;

&lt;h3 id=&quot;getting-to-docker&quot;&gt;Getting to Docker&lt;/h3&gt;

&lt;p&gt;What if you need to get directly to the Docker daemon? Describe the pod, see what Node it’s running on, then ssh to that instance.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl describe pod secretland-8dc689458-jstp2 | grep Node
Node:           gke-kirs-jobs-default-pool-4a145b44-t690/10.128.0.3
Node-Selectors:  &amp;lt;none&amp;gt;

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gcloud compute ssh gke-kirs-jobs-default-pool-4a145b44-t690 --zone us-central1-a

kir@gke-kirs-jobs-default-pool-4a145b44-t690 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
CONTAINER ID        IMAGE                                                                                                                    COMMAND                  CREATED             STATUS              PORTS               NAMES
fc10153238a0        kirshatrov/secretland@sha256:2e6d8341f51ebe7393d2a7c770c29fbaf959e3317b628d0dc5ebbb19c923d29c                            &lt;span class=&quot;s2&quot;&gt;&quot;rails server -b 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m using Google Cloud, so instead of sshing directly I use &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud compute ssh&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gdb&quot;&gt;gdb&lt;/h3&gt;

&lt;p&gt;gdb might be useful for dumping MRI call stack, for instance when you want to find out why a Ruby process is stuck. See the &lt;a href=&quot;https://gist.github.com/csfrancis/11376304&quot;&gt;script&lt;/a&gt; to dump call stack by my colleague Scott.&lt;/p&gt;

&lt;p&gt;I haven’t found a proper way to run gdb from a Kubernetes Pod yet, because gdb can’t find Ruby’s symbols:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubectl exec -i -t secretland-8dc689458-jstp2 /bin/bash
root@secretland-8dc689458-jstp2:/app# ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  1.5 709816 58080 ?        Ssl  Apr07   0:08 puma 3.11.3 (tcp://0.0.0.0:3000) [app]
root        43  0.0  0.0  18204  3280 ?        Ss   02:29   0:00 /bin/bash
root        53  0.0  0.0  36636  2808 ?        R+   02:31   0:00 ps aux
root@secretland-8dc689458-jstp2:/app# gdb --pid 1
GNU gdb (Debian 7.12-6) 7.12.0.20161007-git
...
Attaching to process 1
[New LWP 6]
...
[New LWP 16]
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.
pthread_cond_wait@@GLIBC_2.3.2 () at ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185
185     ../sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S: No such file or directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Though I have a feeling that with the recent release of rbspy I won’t need to use gdb much anymore, because 1) unlike gdb, rbspy doesn’t pause the process 2) rbspy is way more user friendly.&lt;/p&gt;

&lt;p&gt;Please share any snippets that you find helpful and I’ll include them in the post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Asynchronous Active Record migrations</title>
   <link href="http://kirshatrov.com/posts/async-migrations/">
   <updated>2018-04-01T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/async-migrations</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/post-images/async-migrations/cap1.png&quot; width=&quot;849&quot; height=&quot;135&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Every time when you deploy code with schema changes, you have to apply new Active Record migrations by running &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/rails db:migrate&lt;/code&gt;. This is a common step of deploy scripts (see &lt;a href=&quot;https://github.com/capistrano/rails/blob/master/lib/capistrano/tasks/migrations.rake#L31&quot; target=&quot;_blank&quot;&gt;Capistrano&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;While running migrations as a part of the deploy is the default approach used by most of companies, for some reason Rails community never reconsidered alternatives. Does it bring extra complexity to the release process?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If a migration fails, should it fail and revert the deploy?
    &lt;ul&gt;
      &lt;li&gt;If you want to revert, new code would run in production for a limited time before the migration failed. That could cause even more issues when you roll back.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you use more that one database (maybe you use &lt;a href=&quot;https://en.wikipedia.org/wiki/Shard_(database_architecture)&quot;&gt;sharding&lt;/a&gt;), you have to apply the migration to each database&lt;/li&gt;
  &lt;li&gt;If a migration takes longer (hours), it blocks the deploys from finishing
    &lt;ul&gt;
      &lt;li&gt;What if the actor who runs the migration lost SSH connection?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In cloud environments (Heroku, Kubernetes), there may be no “after deploy” hook to run the migrations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post describes how we can shave off the migrations part from the deploy process. What we came to at Shopify is &lt;strong&gt;asynchronous migrations&lt;/strong&gt; that are eventually applied after a deploy and controlled by humans.&lt;/p&gt;

&lt;h2 id=&quot;how-does-that-work&quot;&gt;How does that work?&lt;/h2&gt;

&lt;p&gt;First we need to understand what &lt;code class=&quot;highlighter-rouge&quot;&gt;db:migrate&lt;/code&gt; really does.&lt;/p&gt;

&lt;p&gt;If we look at &lt;a href=&quot;https://github.com/rails/rails/blob/6b7a93d963d80686e9334faa80460bfde9099032/activerecord/lib/active_record/railties/databases.rake#L74-L81&quot; target=&quot;_blank&quot;&gt;Active Record Rake tasks&lt;/a&gt;, we’ll find a &lt;a href=&quot;https://github.com/rails/rails/blob/d04b5179ffc26ab7bfd7210e1103f5ab4f1bd54f/activerecord/lib/active_record/tasks/database_tasks.rb#L170-L182&quot; target=&quot;_blank&quot;&gt;call&lt;/a&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base.connection.migration_context.migrate&lt;/code&gt;. That has to be the entry point to run migrations. When it’s invoked with no arguments (like &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV['VERSION']&lt;/code&gt;), &lt;code class=&quot;highlighter-rouge&quot;&gt;MigrationContext#migrate&lt;/code&gt; &lt;a href=&quot;https://github.com/rails/rails/blob/d04b5179ffc26ab7bfd7210e1103f5ab4f1bd54f/activerecord/lib/active_record/migration.rb#L1085&quot; target=&quot;_blank&quot;&gt;creates&lt;/a&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;MigrationProxy&lt;/code&gt; instance for each migration class and &lt;a href=&quot;https://github.com/rails/rails/blob/d04b5179ffc26ab7bfd7210e1103f5ab4f1bd54f/activerecord/lib/active_record/migration.rb#L1028&quot; target=&quot;_blank&quot;&gt;calls&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Migrator.new.migrate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we understand how migrations are invoked, and we can try to &lt;strong&gt;redesign the process to make it asynchronous&lt;/strong&gt; and stop running migrations as a part deploy. What if instead we’d run the migration from a background job?&lt;/p&gt;

&lt;p&gt;Each time there is a pending migration, we would push a background job that would apply the actual migration and report the result. Let’s see how this could be implemented.&lt;/p&gt;

&lt;p&gt;First, we need to schedule a recurring job (with a tool like &lt;a href=&quot;https://github.com/ondrejbartas/sidekiq-cron&quot; target=&quot;_blank&quot;&gt;sidekiq-cron&lt;/a&gt;) that would run every few minutes and check for pending migrations.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MigrationAutoCannonJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;needs_migration?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pending_migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_all_versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# run them!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;migration_context&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migration_context&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We must remember than running a migration is a blocking process - we can’t run the next migration before the previous one finished. We also want to be able to monitor the state of running migrations, so let’s create an ActiveRecord model to keep track of it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails generate model async_migration version:integer state:text

&lt;span class=&quot;c&quot;&gt;# app/models/async_migration.rb&lt;/span&gt;
class AsyncMigration &amp;lt; ApplicationRecord
end
&lt;span class=&quot;c&quot;&gt;# don't forget to add unique indexes!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s update our recurring “auto cannon” job to keep track of things, and only run one migration at the time:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MigrationAutoCannonJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;needs_migration?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AsyncMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;state: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;processing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;AsyncMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;version: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;state: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;processing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pending_migrations&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_all_versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# rest of the job&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the job would create an entry in the &lt;code class=&quot;highlighter-rouge&quot;&gt;async_migrations&lt;/code&gt; table but only when there are no other entries in “processing” state. That protects us from running more than one migration at the same time. Keep in mind that the job is not protected from races, but that’s OK because there will be only one instance of it scheduled.&lt;/p&gt;

&lt;p&gt;Now let’s create a callback for the model to actually process the migration:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsyncMigration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;after_commit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:enqueue_processing_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on: :create&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enqueue_processing_job&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;MigrationProcessingJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;async_migration_id: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each time &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncMigration&lt;/code&gt; is created, it will enqueue &lt;code class=&quot;highlighter-rouge&quot;&gt;MigrationProcessingJob&lt;/code&gt; that will run the actual migration. Let’s see how that job may look like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MigrationProcessingJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;async_migration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AsyncMigration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:async_migration_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;all_migrations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migration_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrations&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;migration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async_migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# actual work!&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Migrator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migrate&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;async_migration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;state: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;finished&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;migration_context&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;migration_context&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s quite a few things missing here, but you should get the idea by now: using a combination of two jobs and a database record, we can schedule migrations to run in background one by one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/async-migrations/monodraw.png&quot; width=&quot;435&quot; height=&quot;313&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that the code examples are very WIP. If you want to go further, you’d need to take care of these things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s no error handling. We might want to update a status of &lt;code class=&quot;highlighter-rouge&quot;&gt;AsyncMigration&lt;/code&gt; when migration fails with an error&lt;/li&gt;
  &lt;li&gt;There’s no max retries defined for the job. Do you even want to retry migrations?&lt;/li&gt;
  &lt;li&gt;You might want to measure and persist how much time the migration took&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The possibilities are endless. You could even build an admin UI to run and monitor migrations, or send a message to a Slack channel when migrations complete or fail.&lt;/p&gt;

&lt;p&gt;At Shopify we have hundreds of database shards, and on every schema change we have to run the migration on each of them. Release process would be way more fragile if those migrations were the part of deploy script. Instead, we use asynchronous migrations that would are eventually applied after each release. That’s one of the key features that allow us to &lt;a href=&quot;https://shopifyengineering.myshopify.com/blogs/engineering/automatic-deployment-at-shopify&quot; target=&quot;_blank&quot;&gt;release more than 50 times per day&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We even post status of migrations to a Slack channel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/async-migrations/slack.png&quot; width=&quot;584&quot; height=&quot;220&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If working on such things sounds exciting for you, &lt;a href=&quot;https://www.shopify.com/careers/production-engineering-service-patterns-fe9022&quot; target=&quot;_blank&quot;&gt;come join my team&lt;/a&gt; at Shopify.&lt;/p&gt;

&lt;div class=&quot;upd&quot;&gt;
  &lt;strong&gt;UPDATED (13-Jan-2019):&lt;/strong&gt; check out the &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/Loschcode/rails_async_migrations&quot;&gt;rails_async_migrations gem&lt;/a&gt; by Laurent Schaffner which brings the idea described in this post to any Rails app.
&lt;/div&gt;

&lt;div class=&quot;upd&quot;&gt;
  &lt;strong&gt;UPDATED (16-Feb-2020):&lt;/strong&gt; check out the &lt;a target=&quot;_blank&quot; href=&quot;https://fosdem.org/2020/schedule/event/mysql_github_schema/&quot;&gt;talk by Shlomi Noach&lt;/a&gt; about how GitHub does schema changes at scale.
&lt;/div&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://samsaffron.com/archive/2018/03/22/managing-db-schema-changes-without-downtime&quot; target=&quot;_blank&quot;&gt;Managing db schema changes without downtime by Sam Saffron&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.philandstuff.com/2018/04/04/keep-database-deploys-separate.html&quot; target=&quot;_blank&quot;&gt;Keep database deploys separate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails 5.2 Credentials and Kubernetes</title>
   <link href="http://kirshatrov.com/posts/rails-credentials-kubernetes/">
   <updated>2018-03-24T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/rails-credentials-kubernetes</id>
   <content type="html">&lt;p&gt;I’ve been playing with the new &lt;a href=&quot;https://github.com/rails/rails/pull/30067&quot; target=&quot;_blank&quot;&gt;credentials feature&lt;/a&gt; that comes with Rails 5.2 and it looks really cool! It lets you store encrypted credentials (aka “secrets”) right in the repo, and decrypt them with the master key when you need to read it.&lt;/p&gt;

&lt;p&gt;See this &lt;a href=&quot;https://www.engineyard.com/blog/rails-encrypted-credentials-on-rails-5.2&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; if you’re curious how it’s different from &lt;code class=&quot;highlighter-rouge&quot;&gt;secrets.yml&lt;/code&gt; introduced in Rails 5.1.&lt;/p&gt;

&lt;p&gt;The approach is very similar to Shopify’s &lt;a href=&quot;https://github.com/Shopify/ejson&quot; target=&quot;_blank&quot;&gt;ejson&lt;/a&gt;, with the difference that Rails decided not to use asymmetric encryption like ejson does.&lt;/p&gt;

&lt;p&gt;So, how does this new credentials management works with containerized Rails apps that run in Kubernetes? &lt;strong&gt;TL;DR it works surprisingly smooth.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s no rocket science in the setup, but I wrote this post to show how easy is the deployment of Rails 5.2 Credentials.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install --pre rails

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails -v
Rails 5.2.0.rc2

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails new secretland --skip-javascript --skip-spring --skip-coffee --skip-turbolinks --skip-action-cable

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bin/rails credentials:edit
&lt;span class=&quot;c&quot;&gt;# opens vim with encrypted credentials&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat config/master.key
3bed2fdcb0261e6f48850de01a85fb5b
&lt;span class=&quot;c&quot;&gt;# master key for credentials of this app, also listed in .gitignore so it's not pushed to git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now it’s time to build a container. First, let’s add the master key to &lt;code class=&quot;highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt; file so it doesn’t get into the container (we don’t want to expose the key to container registry).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;config/master.key &amp;gt; .dockerignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s build the container using this &lt;a href=&quot;https://www.engineyard.com/blog/using-docker-for-rails&quot; target=&quot;_blank&quot;&gt;minimalistic&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ruby:2.5

RUN mkdir -p /app
WORKDIR /app

ENV RAILS_ENV production
ENV RAILS_SERVE_STATIC_FILES true
ENV RAILS_LOG_TO_STDOUT true

COPY Gemfile /app/
COPY Gemfile.lock /app/
RUN bundle config --global frozen 1
RUN bundle install --without development test

COPY . /app

EXPOSE 3000
CMD [&quot;rails&quot;, &quot;server&quot;, &quot;-b&quot;, &quot;0.0.0.0&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build -t kirshatrov/secretland:v1 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And run it with the master key as an ENV variable:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run -i -t -p 3000:3000 -e &lt;span class=&quot;nv&quot;&gt;RAILS_MASTER_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3bed2fdcb0261e6f48850de01a85fb5b kirshatrov/secretland:v1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you create a &lt;a href=&quot;https://github.com/kirs/secretland/blob/master/app/controllers/helloworld_controller.rb#L3&quot; target=&quot;_blank&quot;&gt;silly controller&lt;/a&gt; to (unsafely) render secrets, you would see this output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/rails-credentials/local.png&quot; width=&quot;445&quot; height=&quot;183&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Don’t forget to push the container to Docker registry so Kubernetes nodes could download and run it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker push kirshatrov/secretland:v1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before creating any Kubernetes resources, we need to create the secret (actually it’s the first time I’m using Kubernetes secrets!):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl create secret generic secretland-secrets --from-literal&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;rails-master-key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3bed2fdcb0261e6f48850de01a85fb5b
secret &lt;span class=&quot;s2&quot;&gt;&quot;secretland-secrets&quot;&lt;/span&gt; created

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl describe secret secretland-secrets
Name:         secretland-secrets
Namespace:    default
Labels:       &amp;lt;none&amp;gt;
Annotations:  &amp;lt;none&amp;gt;

Type:  Opaque

Data
&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt;
rails-master-key:  32 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot; target=&quot;_blank&quot;&gt;Deployment&lt;/a&gt; spec:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kirshatrov/secretland:v1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;RAILS_MASTER_KEY&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;valueFrom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;secretKeyRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland-secrets&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails-master-key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s the trick: we set the ENV variable (&lt;code class=&quot;highlighter-rouge&quot;&gt;RAILS_MASTER_KEY&lt;/code&gt;) from the value of the secret that we’ve created earlier. This allows us to separate secrets from Deployments, and avoid leaking the master key to the Deployment resource. We could even push the YAML with Deployment spec to the application repo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; as suggested by Victor in the comments, it may be better to mount the secret key as a file in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/master.key&lt;/code&gt;, and Rails would use that instead of the ENV variable. Here’s how the &lt;code class=&quot;highlighter-rouge&quot;&gt;spec.template&lt;/code&gt; part of the YAML would look like in this case:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kirshatrov/secretland:v1&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secrets&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;secretland-secrets&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rails-master-key&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app/config/master.key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s apply the Deployment and expose it to the internet:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl apply -f deployment.yml

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl expose deployment secretland --type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;LoadBalancer --port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;80 --target-port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All works!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/rails-credentials/prod.png&quot; width=&quot;459&quot; height=&quot;192&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Code mentioned in the post is also available as a &lt;a href=&quot;https://github.com/kirs/secretland&quot; target=&quot;_blank&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be honest, I haven’t expected that all these things would work so smoothly together! Credentials management in Rails 5.2 works very nicely with containerized applications, and took only a one command to push secrets to Kubernetes.&lt;/p&gt;

&lt;p&gt;Next time I want to edit the credentials, &lt;code class=&quot;highlighter-rouge&quot;&gt;bin/rails credentials:edit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; would be enough to update them on production.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Predicting database index hits</title>
   <link href="http://kirshatrov.com/posts/predicting-query-index/">
   <updated>2018-01-23T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/predicting-query-index</id>
   <content type="html">&lt;p&gt;In a large application, it’s fairly easy to introduce code that produces poor or unoptimized SQL queries.
As a developer, nothing stops you from writing this kind of a background job:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyJob&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;active: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# do something with the product&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Only after the code goes through review and CI pipeline, when it’s merged and deployed, you’ll find out that the SQL query that the relation produces doesn’t hit any index - or hits one that is inefficient. The query would time out and the job would crash with an exception.&lt;/p&gt;

&lt;p&gt;Some cases could be caught by peer code review but humans are not perfect in predicting query efficiency. This is better done by machines.&lt;/p&gt;

&lt;p&gt;You could use &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; to see what indexes the query hits and what’s the cost of the query, but results of &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; depend of the actual dataset and may be completely different in production and local environments. That makes it impossible to check queries using &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; as a part of CI, without giving it access to the production dataset.&lt;/p&gt;

&lt;p&gt;Let’s try a manual lookup of indexes for a given table by running &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW INDEX FROM products&lt;/code&gt;.
With a simple Ruby script we can compile a list of indexes and columns that they cover:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bundler/setup'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql2'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mysql2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;host: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;username: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;database: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SHOW INDEX FROM products&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;indexes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Key_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Seq_in_index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Column_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Good news: ActiveRecord already provides an API to lookup indexes!&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;indexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It looks like we could take columns from &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause and match them with the columns covered by indexes. &lt;strong&gt;That way, we could build a dumb predictor of SQL query efficiency.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There’s a complication of &lt;code class=&quot;highlighter-rouge&quot;&gt;ORDER BY&lt;/code&gt; that also affects a chosen index but we’ll simplify it for now.&lt;/p&gt;

&lt;p&gt;If we somehow implemented it, we could reduce the rate of human errors and prevent developers from shipping code that won’t be able to efficiently run in production. &lt;strong&gt;In a large organization, that could save a few human hours per day.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;parsing-queries&quot;&gt;Parsing queries&lt;/h2&gt;

&lt;p&gt;As we found, getting a list of indexes and columns that they cover is easy, especially with ActiveRecord. Now let’s see if we can identify columns mentioned in the &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause.&lt;/p&gt;

&lt;p&gt;With ActiveRecord, we could use &lt;code class=&quot;highlighter-rouge&quot;&gt;where_values_hash&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where_values_hash&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But as we’ll learn later, it only returns values of exact matches and it doesn’t work for plain predicates and ranges:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_id IS NOT NULL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where_values_hash&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we look how &lt;code class=&quot;highlighter-rouge&quot;&gt;where_values_hash&lt;/code&gt; is &lt;a href=&quot;https://github.com/rails/rails/blob/412db710dfa6ed84654068576b1841966d7f89b2/activerecord/lib/active_record/relation/where_clause.rb#L49&quot; target=&quot;_blank&quot;&gt;implemented&lt;/a&gt;, we’ll see that it reads Arel predicates. Let’s try hooking into Arel:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;active: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user_id IS NOT NULL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where_clause&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:predicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Arel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Equality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Between&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We could work with &lt;code class=&quot;highlighter-rouge&quot;&gt;Arel::Nodes::Between&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Arel::Nodes::Equality&lt;/code&gt;, but we’d still need to extract the column from &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;user_id IS NOT NULL&quot;&lt;/code&gt; which is a string.&lt;/p&gt;

&lt;p&gt;If we look broader, we’ll find something called &lt;a href=&quot;https://github.com/GNOME/libgda&quot; target=&quot;_blank&quot;&gt;libgda&lt;/a&gt; that has an AST parser of SQL queries. There’s even a &lt;a href=&quot;https://github.com/tenderlove/gda&quot; target=&quot;_blank&quot;&gt;Ruby binding&lt;/a&gt; for it. Let’s play with it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GDA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visitors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Visitor&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visit_GDA_Nodes_Expr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT id FROM products &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;WHERE user_id IS NOT NULL &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;AND active = 1 &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;AND created_at BETWEEN '2017-12-20 20:57:57' AND '2018-01-19 20:57:57'&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GDA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SQL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which gives the following output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GDA::Nodes::Expr, id, String
GDA::Nodes::Expr, products, String
GDA::Nodes::Expr, NULL, String
GDA::Nodes::Expr, NULL, String
GDA::Nodes::Expr, user_id, String
GDA::Nodes::Expr, NULL, String
GDA::Nodes::Expr, active, String
GDA::Nodes::Expr, 1, String
GDA::Nodes::Expr, NULL, String
GDA::Nodes::Expr, created_at, String
GDA::Nodes::Expr, '2017-12-20 20:57:57', String
GDA::Nodes::Expr, '2018-01-19 20:57:57', String
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can see AST nodes that GDA extracted from the query. There are columns and values, but all of them are of &lt;code class=&quot;highlighter-rouge&quot;&gt;GDA::Nodes::Expr&lt;/code&gt; type. It gets tricky to separate what is a column and what is a value. Either I missed something about it, either GDA is too low level for our purpose.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;To continue experiments, I’ll probably use Arel and manually parse &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id IS NOT NULL&lt;/code&gt; predicates. That may give me “good enough” results as I’ll be able to run it against a large codebase to see how many false positive it will identify.&lt;/p&gt;

&lt;p&gt;Stay tuned to learn about results!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Scaling database reads with Sticky Writer</title>
   <link href="http://kirshatrov.com/posts/sticky-writer/">
   <updated>2018-01-21T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/sticky-writer</id>
   <content type="html">&lt;p&gt;In the early days, your app runs with a single PostgreSQL or MySQL instance. But as it grows, it’s a common practice to add a database replica to reduce the load from the primary database instance. This is so-called &lt;em&gt;Single-leader replication&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All write queries would still go to the primary database, but read-only queries can be served from the replica (or multiple replicas). We’ll use PostgreSQL as an example. It’s common in the industry to call these database instances “PostgreSQL writer” and “PostgreSQL reader”.&lt;/p&gt;

&lt;p&gt;Now, how do you determine which queries would go to reader and which queries would go to writer? If you have some kind of Reports feature in the application, it makes sense to execute all reporting-related queries on PostgreSQL reader (assuming that reporting produces heavy read-only queries).&lt;/p&gt;

&lt;p&gt;However, sending a subset of queries to the reader may still be not enough to reduce load from the writer. What if we send &lt;em&gt;all&lt;/em&gt; read-only queries (basically, all SELECTs) to the reader, and let the writer only deal with writes?&lt;/p&gt;

&lt;p&gt;The plan sounds doable in theory. Now, let’s zoom out to see how the &lt;strong&gt;replication&lt;/strong&gt; between the writer and the reader works.&lt;/p&gt;

&lt;p&gt;All writes that come to the writer instance are appended to the Postgres’ &lt;a href=&quot;https://www.postgresql.org/docs/current/static/wal-intro.html&quot; target=&quot;_blank&quot;&gt;Write Ahead Log&lt;/a&gt; (WAL). That way, the reader instance can &lt;a href=&quot;https://www.postgresql.org/docs/10/static/runtime-config-replication.html&quot; target=&quot;_blank&quot;&gt;consume&lt;/a&gt; updates from writer’s WAL and apply them to local replica. It’s also common to have multiple replicas - in this case, all these readers would consume WAL from the writer.&lt;/p&gt;

&lt;p&gt;MySQL is using the same replication principle. There’s a &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/binlog-replication-configuration-overview.html&quot; target=&quot;_blank&quot;&gt;binary log&lt;/a&gt; instead of WAL, which all readers consume from the writer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With this replication design, we must know about possible issues.&lt;/strong&gt; What happens if there’s a network blip between the writer and the reader? The reader wouldn’t be able to consume the latest updates from the writer and it would get &lt;strong&gt;delayed&lt;/strong&gt;. Also, whenever your application produces too many writes, the reader may get delayed again. A delayed database replica will cause &lt;em&gt;stale reads&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This becomes an issue when we are going to send &lt;em&gt;all&lt;/em&gt; read-only queries to the reader. Imagine this flow:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /kittens
&amp;gt; INSERT INTO kittens ...
&amp;gt; redirect_to created_kitten

GET /kittens/1
&amp;gt; SELECT * FROM kittens WHERE id=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the first request, the &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; would go to the writer. In the second request, we would send the &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; to reader since it’s a read-only query.&lt;/p&gt;

&lt;p&gt;Somewhere between these two requests, the newly inserted row would be replicated from the writer to the reader. By the time when the client hits the reader in the second request, the newly inserted row would usually be present in that instance.&lt;/p&gt;

&lt;p&gt;However, when the replication is delayed by even a bit, the second request will respond with HTTP 404 because that newly inserted row will not be replicated to the reader yet. We’ve run into a stale read.&lt;/p&gt;

&lt;p&gt;This becomes a major problem for us as we want to send as many queries as possible to the reader.&lt;/p&gt;

&lt;h2 id=&quot;sticky-writer&quot;&gt;Sticky Writer&lt;/h2&gt;

&lt;p&gt;A common solution to this problem used in the industry is so-called “stickiness”. The idea is to send the read-only query to the writer, if we know that a client &lt;em&gt;recently&lt;/em&gt; performed a write. If the client didn’t perform any writes, we are safe to send their query to the reader.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this post, I’ll show how you can implement the stickiness in only 50 lines of code.&lt;/strong&gt; I stumbled upon this pattern at Shopify but I didn’t fully understand it, which made me write this post to learn how it works.&lt;/p&gt;

&lt;p&gt;In the example, I’m going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pg&lt;/code&gt; driver to work with PostgreSQL from Ruby and &lt;a href=&quot;http://sequel.jeremyevans.net/&quot; target=&quot;_blank&quot;&gt;Sequel&lt;/a&gt; as a simple ORM.&lt;/p&gt;

&lt;p&gt;We start from setting up two PostgreSQL instances: a writer and a reader. Check out this &lt;a href=&quot;https://github.com/kirs/sticky-pudding/blob/master/script/create_cluster&quot;&gt;script&lt;/a&gt; that configures the replication and starts two PostgreSQL processes (writer and reader).&lt;/p&gt;

&lt;p&gt;Now we can initialize Sequel with two connections (writer and reader):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sequel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;postgres://localhost:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;POSTGRES_PORT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/sticky-pudding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;servers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;replica: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;port: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;POSTGRES_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the Sinatra route to create kittens:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/kittens&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kitten&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sticky_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;STICKY_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/kittens/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The trick is to send the client a cookie that works as a flag for Sticky Writer. The presence of the cookie would mean that the client recently performed a write, and that the app should use writer even for read-only queries.&lt;/em&gt; Another benefit of using cookie is that it automatically expires (in my example, in 10 seconds). We set the expiry because we use 10 seconds as a maximum delay of the reader. After that period, we expect the value to be replicated even if the reader experienced a short delay.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/kittens/:id&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sticky_writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@target_db_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# writer&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@target_db_server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:replica&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# reader&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@kitten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kitten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@target_db_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the this route, we check for the auto-expiring cookie to determine the target connection. And then Sequel allows us to enforce the connection for a query.&lt;/p&gt;

&lt;p&gt;To see how it works in action, &lt;a href=&quot;https://github.com/kirs/sticky-pudding&quot; target=&quot;_blank&quot;&gt;clone the sample repo&lt;/a&gt; and run steps described in the README. Here is a little preview:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/sticky-writer.gif&quot; width=&quot;360&quot; height=&quot;176&quot; alt=&quot;Sticky Writer preview&quot; style=&quot;margin: 0 auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cookie-vs-other-storage&quot;&gt;Cookie vs other storage&lt;/h2&gt;

&lt;p&gt;What if your client is an API consumer that doesn’t support cookies? Another way to store the stickiness would be to set a flag in Memcache or Redis. Instead sending a cookie, you would set a flag in the key/value store with the session id as a part of the key.&lt;/p&gt;

&lt;p&gt;We want to include the session id as a part of the key to isolate stickiness flags between different clients. In that case, a write performed by one client won’t affect stickiness of other clients.&lt;/p&gt;

&lt;h2 id=&quot;scoping-stickiness-flag&quot;&gt;Scoping stickiness flag&lt;/h2&gt;

&lt;p&gt;One way to scope stickiness is per session or client. In a &lt;a href=&quot;https://en.wikipedia.org/wiki/Multitenancy&quot; target=&quot;_blank&quot;&gt;multi-tenant&lt;/a&gt; app, you can also scope it to the tenant. In fact, that’s what we do at Shopify, which is a multi-tenant platform.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;I hope this post helped you to learn about replication in modern databases and how it’s used to scale applications. You also learned about replication delay and Sticky Writer as a possible solution to the problem.&lt;/p&gt;

&lt;p&gt;When your app starts to get more and more traffic, it’s common to add database replicas. With a pattern like Sticky Writer, you are safe to send as many read-only queries as possible to those replicas.&lt;/p&gt;

&lt;p&gt;An alternative to Sticky Writer is to keep track of WAL position and use the position to determine whether to query reader or writer. This solution is very well described in a &lt;a href=&quot;https://brandur.org/postgres-reads&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; by Brandur. If you’re interested in the topic, I’d recommend you to read it to see how an alternative approach can be designed.&lt;/p&gt;

&lt;p&gt;If you wonder if there’s an existing implementation of Sticky Writer for Rails apps, have a look at the &lt;a href=&quot;https://github.com/taskrabbit/makara&quot; target=&quot;_blank&quot;&gt;makara&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;For the further reading, I can recommend the &lt;em&gt;Designing Data-Intensive Applications&lt;/em&gt; &lt;a href=&quot;https://dataintensive.net/&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; by Martin Kleppmann. It covers all topics related to scaling databases, including replication strategies and sharding.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>2017 in review</title>
   <link href="http://kirshatrov.com/posts/2017-in-review/">
   <updated>2017-12-31T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/-2017-in-review</id>
   <content type="html">&lt;p&gt;At the end of the year it’s time to do a review of what I’ve been through this year! It’s been a challenging year: switching teams at Shopify, leaving Canada, moving to the UK and a lot of travel in the meanwhile.&lt;/p&gt;

&lt;h2 id=&quot;january&quot;&gt;January&lt;/h2&gt;

&lt;p&gt;My team at Shopify shipped a year-long project, and I started thinking about new challenges. I spent most of my career working with Rails, and I realized that I want to explore more areas of Site Reliability Engineering. So-called “Pods” team was one of the teams at Shopify that worked on the edge of SRE (scaling Shopify horizontally across multiple datacenters), but at the same time, that kind of work still required deep knowledge of Ruby and Rails. In middle January I joined the team.&lt;/p&gt;

&lt;div class=&quot;fotorama&quot;&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jan-02.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jan-03.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jan-04.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jan-01.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Around the same time, I was invited to speak at RubyFuza, the South African Ruby conference. Cape Town sounded like a far and exciting destination, and I decided to go. I bet there are not too many Russians who apply for a South African visa in Canada, but we sorted it out, and a week before the trip I got my passport back with the visa. It takes 8 + 12hrs flights to get to Cape Town from Montreal, but those 20 hours spent in Economy seat were worth it.&lt;/p&gt;

&lt;p&gt;Cape Town turned out to be the most beautiful destinations in my life. It’s a hip city on the ocean with Table Mountain in the middle of the city, which you can hike any time you want (preferable in the early morning because of the heat). The food is delicious, and there’s lots of local wine. I only spent four days there, but I’m already looking forward to the next trip to South Africa. It also became visa-free for Russian citizens this year.&lt;/p&gt;

&lt;h2 id=&quot;february&quot;&gt;February&lt;/h2&gt;

&lt;div class=&quot;fotorama&quot;&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/feb-02.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/feb-03.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/feb-04.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/feb-01.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A chilly -28°C winter in Ottawa pushed me book a trip to Puerto Vallarta in Mexico. My partner has a good friend who lives there and who kindly invited us to stay with him.&lt;/p&gt;

&lt;p&gt;Puerto Vallarta appeared to be packed with retirees from the US and Canada. The first question to be asked is “So, what part of Canada are you from, eh?”. As someone told us, a couple may only go there either for a honeymoon or to retire. The central part of the town is more American than Mexican, because of all those people who moved there for retirement.&lt;/p&gt;

&lt;p&gt;In contrast, as soon as you leave the town and explore the area on your own, you’ll find the most authentic tacos on the planet. It’s hot, delicious and full of onions. When we went to those local places, we could easily get lunch for four people for $7.&lt;/p&gt;

&lt;p&gt;At the same time Mexico can be dangerous. We were lucky to get safety tip from our friends who live there. I wouldn’t go there again (except maybe Mexico City), but it was a fun trip.&lt;/p&gt;

&lt;p&gt;After I came back from Mexico, it was time to go to the University of Illinois where I was a mentor at the HackIllinois hackathon. On the way there I couldn’t resist enjoying a windy day in Chicago. Frontera Grill by Rick Bayless and Blue Chicago are &lt;a href=&quot;https://github.com/kirs/hedonism/blob/master/Chicago.md&quot; target=&quot;_blank&quot;&gt;still the best&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;march&quot;&gt;March&lt;/h2&gt;

&lt;p&gt;In February and March, I was part of a team at Shopify who pioneered running the platform in Kubernetes. We explored a lot of unknowns, found some bugs in Kubernetes and worked on making the platform more cloud-ready.&lt;/p&gt;

&lt;p&gt;The key outcome of working in this team for me was the birth of Iteration API. It’s an API in Ruby for writing Background Jobs, that allows the job to be paused at any point in time. This is great deploys and for cloud infrastructure, where a node can be identified as unhealthy and shut down at any moment of time. Iteration API helps to safely interrupt the job and resume it later when it’s rescheduled to run on the different node. Making  Iteration API available for everyone, not just for Shopify, is one of my goals for 2018.&lt;/p&gt;

&lt;p&gt;At the end of March I went to New York City to see friends and eat the &lt;a href=&quot;http://www.huffingtonpost.co.uk/entry/montreal-bagels_n_5247880&quot; target=&quot;_blank&quot;&gt;real&lt;/a&gt; bagels.&lt;/p&gt;

&lt;h2 id=&quot;april&quot;&gt;April&lt;/h2&gt;

&lt;div class=&quot;fotorama&quot;&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/apr-02.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/apr-01.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/apr-03.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/apr-04.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;This was the third year in a row when I visit New York in April! I spent a great time with friends and I even had a chance to visit &lt;a href=&quot;https://www.eater.com/2017/2/17/14648642/chefs-table-recap-ivan-ramen-orkin-nyc&quot; target=&quot;_blank&quot;&gt;Ivan Ramen&lt;/a&gt;, a restaurant from a Chef’s Table episode.&lt;/p&gt;

&lt;h2 id=&quot;may&quot;&gt;May&lt;/h2&gt;

&lt;div class=&quot;fotorama&quot;&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/may-01.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/may-02.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/may-03.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/may-04.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/may-05.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;I was invited to give a talk at GitHub Satellite in London so that’s where I went in May. This was my first time in the UK.&lt;/p&gt;

&lt;p&gt;I spent that week exploring London by foot and by bike, trying the food at street markets and watching sunsets from the Primrose Hill.&lt;/p&gt;

&lt;p&gt;I enjoyed speaking at the GitHub Satellite. It was probably the best organized medium-size conference that I’ve ever seen. The organizers took care of anything that I could imagine, and even booked a boutique hotel for speakers.&lt;/p&gt;

&lt;h2 id=&quot;june&quot;&gt;June&lt;/h2&gt;

&lt;p&gt;Our lease in Ottawa was ending, and we decided that it’s time to say goodbyes. Ottawa is a nice town, but it wasn’t the right fit for me as for someone who grew up in an urban city with 20M population. I imagined that a perfect place for me would be more like Moscow, Berlin, New York or London.&lt;/p&gt;

&lt;p&gt;To enjoy Canada at the last, me and friends went to Banff National park in the Rocky mountains in Alberta. The nature in that part of Canada is simply incredible. We rented at car and stayed in campings for a week, hiking around mountains and lakes every day. Everywhere there we were kindly reminded to beware of bears.&lt;/p&gt;

&lt;div class=&quot;fotorama&quot;&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jun-01.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jun-02.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jun-03.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jun-04.jpg&quot; /&gt;
  &lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jun-05.jpg&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;To celebrate departure from Ottawa, I booked a flight in the Business class. This was the first time I was taking Business and I can say that it’s totally worth it. It’s probably the best experience that you can buy for $1200 when you’re taking a long flight. I could even convert my seat into a real bed and sleep like at home.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/jun-06.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;july&quot;&gt;July&lt;/h2&gt;

&lt;p&gt;July has been surprisingly calm. I stayed in Russia, worked and thought what could be the best place for me to live, after Canada.&lt;/p&gt;

&lt;h2 id=&quot;august&quot;&gt;August&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/aug-01.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was time for a break. Helsinki, the place where I lived when I was student, is a great place to visit in the summer. We stayed in Espoo for a week, having long walks and enjoying salmiakki. I was happy to see my old friends from the university. Cafe Regatta is still the &lt;a href=&quot;https://github.com/kirs/hedonism/blob/master/Helsinki.md&quot; target=&quot;_blank&quot;&gt;best&lt;/a&gt; place you can go in summer.&lt;/p&gt;

&lt;h2 id=&quot;september&quot;&gt;September&lt;/h2&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/sep-02.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I flew to London and then to Dublin for SREcon. SREcon is a conference around Site Reliability Engineering, focused on talks about methodologies and best practices in DevOps. I wrote a &lt;a href=&quot;http://iempire.ru/2017/09/28/srecon-europe/&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; about the conference.&lt;/p&gt;

&lt;p&gt;I was lucky to have a friend in Dublin who showed me the town. I didn’t expect Dublin to be so small and calm, and at the same time full of tech companies. Standing on Grand Canal Square I could see Airbnb, Facebook and Google offices all at the same time.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;345&quot; height=&quot;500&quot; src=&quot;/assets/post-images/2017-in-review/sep-01.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;october&quot;&gt;October&lt;/h2&gt;

&lt;p&gt;I went to Ottawa for meetings and to Montreal for an offsite. Our team rented a large apartment in Plateau Mont-Royal where all of us cooked a dinner together. It was the second time when our team did cooking together, and I can say that it’s the best possible team activity. I’d recommend doing the same to other teams instead of going to just another escape game.&lt;/p&gt;

&lt;div class=&quot;kirs-slides-vertical&quot;&gt;
  &lt;div class=&quot;fotorama&quot; data-maxheight=&quot;500&quot;&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/oct-05.jpg&quot; /&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/oct-01.jpg&quot; /&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/oct-02.jpg&quot; /&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/oct-03.jpg&quot; /&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/oct-04.jpg&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Montreal is so good in the fall.&lt;/p&gt;

&lt;p&gt;After Montreal I went back to Russia where I enjoyed Russian banya (sauna) with friends.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/oct-06.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;november&quot;&gt;November&lt;/h1&gt;

&lt;p&gt;&lt;img width=&quot;360&quot; height=&quot;360&quot; src=&quot;/assets/post-images/2017-in-review/nov-01.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the very beginning of November, we moved to London! It wasn’t easy to decide where next I want to live. A year in Ottawa made me realize that I’m made to live in a large city and not in a suburbia. If there could be a capital of the world, it would be London or New York. NYC is great but moving to the US was not an option. At the same time I went to London twice this year, and I could see how it could be a perfect place to live. It’s vibrant and full of legacy, and an event or performance is happening every day. At the same time, it’s very local. It’s full of cozy spots like hidden gardens where people come to have lunch on the lawn. The future of the UK and Brexit is cloudy, but I’m sure this won’t make London less cozy and hip.&lt;/p&gt;

&lt;p&gt;I spent all of November setting up the new life: registering at the police, opening bank account, moving between temporary Airbnbs while looking for a flat. There was a weekend when all Airbnbs in London were booked, and we had no idea where to stay. In the end, we went for a weekend trip to Oxford.&lt;/p&gt;

&lt;div class=&quot;kirs-slides-vertical&quot;&gt;
  &lt;div class=&quot;fotorama&quot; data-maxheight=&quot;500&quot;&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/nov-03.jpg&quot; /&gt;
    &lt;img src=&quot;/assets/post-images/2017-in-review/nov-02.jpg&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Oxford is perfect for a two days trip. I even visited the Dinning Hall where Harry Potter was filmed.&lt;/p&gt;

&lt;h1 id=&quot;december&quot;&gt;December&lt;/h1&gt;

&lt;p&gt;The agency finally completed all reference checks and we could move in to the London flat. No more Airbnbs. Now it was time for IKEA.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;400&quot; height=&quot;500&quot; src=&quot;/assets/post-images/2017-in-review/dec-01.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;December is also the time when our team meets for plannings and roadmapping for the next year. I went to Canada again, this time to Toronto and Ottawa. It’s been a tough week: two days full of meetings, then an internal talk for Production Engineering and then my girlfriend’s birthday party.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;720&quot; height=&quot;540&quot; src=&quot;/assets/post-images/2017-in-review/dec-02.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was lovely see all our friends in Canada. They even organized a birthday dinner as a surprise!&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;/h2&gt;

&lt;p&gt;In 2017 I became a huge user of GoodReads (you should add &lt;a href=&quot;https://www.goodreads.com/user/show/24695079-kir&quot; target=&quot;_blank&quot;&gt;me&lt;/a&gt; as a friend!). According to Goodreads I’ve read 15 books, though it doesn’t count tech literature. Anna Karenina and War and Peace were those must-read pieces of the classical literature that I finally read. As for the rest, here are the five books that I enjoyed the most:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Born a Crime: Stories From a South African Childhood&lt;/li&gt;
  &lt;li&gt;Sapiens: A Brief History of Humankind&lt;/li&gt;
  &lt;li&gt;The European Dream: How Europe’s Vision of the Future Is Quietly Eclipsing the American Dream&lt;/li&gt;
  &lt;li&gt;Chaos Monkeys: Obscene Fortune and Random Failure in Silicon Valley&lt;/li&gt;
  &lt;li&gt;Disrupted: My Misadventure in the Start-Up Bubble&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Born a Crime&lt;/em&gt; was especially interesting to read before going to South Africa. A couple chapters pushed tears out of me.
&lt;em&gt;The European Dream&lt;/em&gt; is a must read for someone who moved to North America from Europe as it compares the difference in lifestyles between continents. The last two books in the list could open your eyes on the startup culture in the Silicon Valley.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This year has been intense in work, life and travel. I learned so many things in my new team and worked with a lot of technologies that I haven’t touched before, like Kubernetes and LuaJIT. We planned an exciting project for 2018 which I’m looking forward to.&lt;/p&gt;

&lt;p&gt;Surprisingly, the programming language of the year for me was Lua. I would never imagine what sorts of things you could &lt;a href=&quot;https://github.com/openresty/lua-nginx-module&quot; target=&quot;_blank&quot;&gt;create&lt;/a&gt; with LuaJIT embedded into NGINX.&lt;/p&gt;

&lt;p&gt;As for travel, I have visited 9 countries this year (except Canada where I lived). I have taken about 26 flights (36 if you could all legs). At least 6 of them were screwed up in some sort of way, by being cancelled or by a lost luggage. Once I stayed in “all inclusive” resort just because Air Canada rescheduled the flight to the next day. Couple of times I went to the airport and then back to home because the flight turned out to be rescheduled for tomorrow.&lt;/p&gt;

&lt;p&gt;What I could do more in 2017 is meditation, writing, and cycling. In 2015 my friend and I camped and cycled for 1000km in Germany and Denmark, which was the best time that I ever spent outdoors. I wish I did something similar last summer.&lt;/p&gt;

&lt;p&gt;As for writing, I spent a lot of time writing this year, but most of that was internal RFCs and write-ups at work. I wrote only six blog posts, and all of them were about software. I wish I could write more outside of work. Something like the &lt;a href=&quot;https://nanowrimo.org/&quot; target=&quot;_blank&quot;&gt;National Novel Writing Month&lt;/a&gt; sounds like an interesting challenge.&lt;/p&gt;

&lt;p&gt;Let’s see what 2018 brings.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Changes in Ruby 2.5 that I'm excited about</title>
   <link href="http://kirshatrov.com/posts/ruby-2-5/">
   <updated>2017-12-26T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/ruby-2-5</id>
   <content type="html">&lt;p&gt;Every year on the Christmas Eve there’s a new Ruby release. This year it’s Ruby 2.5. While &lt;a href=&quot;https://tom-lord.github.io/10-More-New-Features-In-Ruby-2.5/&quot; target=&quot;_blank&quot;&gt;many&lt;/a&gt; blog &lt;a href=&quot;http://blog.bigbinary.com/2017/12/12/ruby-2-5-added-yield_self.html&quot; target=&quot;_blank&quot;&gt;posts&lt;/a&gt; are covering major features like &lt;code class=&quot;highlighter-rouge&quot;&gt;yield_self&lt;/code&gt;, I wanted to bring your attention to something in the bottom of CHANGELOG, which I think deserves mention.&lt;/p&gt;

&lt;h2 id=&quot;threadreportonexception&quot;&gt;Thread.report_on_exception&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;omg&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Would you guess the output of this script? On Rubies before 2.5, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. This happens because &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.report_on_exception&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; by default, which means that you could waste quite some time before you realize that a thread was crashing. To avoid that mistake, I always had to call &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.raise_on_exception = true&lt;/code&gt; before spawning any threads.&lt;/p&gt;

&lt;p&gt;Ruby 2.5 &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14143&quot; target=&quot;_blank&quot;&gt;sets&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread.report_on_exception&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; by default. In my opinion, this is a great decision that could improve developer experience of threads.&lt;/p&gt;

&lt;p&gt;There’s a &lt;a href=&quot;https://eregon.me/blog/2017/12/28/thread-report-on-exception.html&quot; target=&quot;_blank&quot;&gt;great post&lt;/a&gt; by Benoit Daloze, a contributor behind this change, where he explains the background and the reasoning behind the new default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; As Janko Marohnić poined out in comments, there’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread#abort_on_exception&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Thread#report_on_exception&lt;/code&gt;. The first makes the thread raise the exception to the parent thread, and it is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; by default. The latter only prints the error to stdout, and that’s the parameter that got the new default.&lt;/p&gt;

&lt;h1 id=&quot;erbs-rendering-performance&quot;&gt;ERB’s rendering performance&lt;/h1&gt;

&lt;p&gt;In a Rails app with a large number of views, it’s not unusual to see a half of the request time being spent on rendering ERB templates. Faster ERB rendering is a great news!&lt;/p&gt;

&lt;p&gt;Takashi Kokubun improved the ERB performance in a series of commits: &lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/58735&quot; target=&quot;_blank&quot;&gt;r58735&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/58916&quot; target=&quot;_blank&quot;&gt;r58916&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/58905&quot; target=&quot;_blank&quot;&gt;r58905&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/58904&quot; target=&quot;_blank&quot;&gt;r58904&lt;/a&gt;, &lt;a href=&quot;https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/58842&quot; target=&quot;_blank&quot;&gt;r58842&lt;/a&gt;. All of them are related to frozen strings or string encoding.&lt;/p&gt;

&lt;p&gt;The announcement says that it’s “twice as fast as Ruby 2.4”. That’s BIG, and I wanted to see it myself. I run a &lt;a href=&quot;https://github.com/ruby/ruby/blob/65d3461e95246ba710a79ea8f6fcf145f872f304/benchmark/bm_app_erb.rb&quot; target=&quot;_blank&quot;&gt;benchmark&lt;/a&gt; from Ruby repo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ruby benchmark/run.rb --matzruby=ruby -m bm_app_erb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]
app_erb: 1.237

ruby 2.4.3p205 (2017-12-14 revision 61247) [x86_64-darwin17]
app_erb: 1.642

ruby 2.3.4p301 (2017-03-30 revision 58214) [x86_64-darwin16]
app_erb: 1.129
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While I could see 30% boost between 2.5.0 and 2.4.3 on my machine, 2.3.4 still produced a better result. Maybe it’s my hardware?&lt;/p&gt;

&lt;h1 id=&quot;standard-gems&quot;&gt;Standard gems&lt;/h1&gt;

&lt;p&gt;Before, when you wanted to make a change to a standard library like FileUtils or CSV, you had to send a patch to &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby/ruby&lt;/code&gt; and go through the complete review process.&lt;/p&gt;

&lt;p&gt;In Ruby 2.5, a number of standard libraries were promoted to default gems: cmath, csv, date, dbm, etc, fcntl, fiddle, fileutils, gdbm, ipaddr, scanf, sdbm, stringio, strscan, webrick, zlib.&lt;/p&gt;

&lt;p&gt;Now if you want to make a change to something like &lt;code class=&quot;highlighter-rouge&quot;&gt;StringIO&lt;/code&gt;, it’s as simple as sending a PR to the GitHub &lt;a href=&quot;https://github.com/ruby/stringio&quot; target=&quot;_blank&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/javierhonduco&quot; target=&quot;_blank&quot;&gt;Javier Honduco&lt;/a&gt; for sharing these updates with me.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Environment variables considered evil</title>
   <link href="http://kirshatrov.com/posts/env-varaibles-considered-evil/">
   <updated>2017-11-05T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/env-varaibles-considered-evil</id>
   <content type="html">&lt;p&gt;For the past few years I noticed that it became more common among developers to use environment (ENV) variables as a way to control a command line tool. In this post I’m going to expand some of the use cases and demonstrate why in some of them ENV variables may be considered evil, and why using classic command line arguments may be a better approach.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the Ruby world, it’s common to define tasks with something called &lt;a href=&quot;https://en.wikipedia.org/wiki/Rake_(software)&quot; target=&quot;_blank&quot;&gt;Rake&lt;/a&gt;. Rake is a build tool and a DSL for task management. Historically, Rake tasks caused many developers to use ENV variables. This comes from the &lt;a href=&quot;https://robots.thoughtbot.com/how-to-use-arguments-in-a-rake-task&quot; target=&quot;_blank&quot;&gt;lack of arguments support&lt;/a&gt; in Rake. Developers are left with ENV variables as the only way to control the flow. Consider a task from e-commerce application that seeds products for a specific shop:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# products.rake&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:products&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:generate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Shop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SHOP_ID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;shop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# SHOP_ID=1 rake products:generate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If developer forgot to add a check for &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOP_ID&lt;/code&gt; being present, you’ll end up with an exception when &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOP_ID&lt;/code&gt; is empty. Developer would need to re-run the task after an exception when they learn that there’s a required ENV variable.&lt;/p&gt;

&lt;p&gt;Imagine that the task grows over time and now it takes a dozen arguments. There’s no way to list all accepted ENV variables. There’s no way to run it with a &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; flag to see what each variable is responsible for. Developer could read the source and see what each option is made for, but what if the logic is spread across multiple files? Good luck with searching the codebase for &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; keyword and reading the code.&lt;/p&gt;

&lt;p&gt;When you are building a command line tool, it’s usually for the best to stay away from Rake tasks and stick with a plain Ruby script instead. That’s when &lt;a href=&quot;http://ruby-doc.org/stdlib-2.4.2/libdoc/optparse/rdoc/OptionParser.html&quot; target=&quot;_blank&quot;&gt;OptionParser&lt;/a&gt; comes for the rescue. It allows you to specify an option name and a type for each argument. It will also take care of supporting &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; flag that lists all available options and description.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'optparse'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: bin/generate_products [options]&quot;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--shop-id VALUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Shop ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:shop_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--[no-]verbose&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Run verbosely&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:verbose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse!&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Shop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:shop_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;shop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/generate_products --help
Usage: bin/generate_products [options]
    -s, --shop-id VALUE              Shop ID
    -v, --[no-]verbose               Run verbosely
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since &lt;a href=&quot;http://capistranorb.com/&quot; target=&quot;_blank&quot;&gt;Capistrano&lt;/a&gt; is based on Rake it inherits its poor support of arguments. When it comes to customizing tasks, it’s tempting for developers to use ENV variables:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;775&quot; alt=&quot;screen shot 2017-10-07 at 11 59 19&quot; src=&quot;https://user-images.githubusercontent.com/522155/31309615-fa5cb4f4-ab56-11e7-9962-447dc19d611f.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we know why it might be not the best idea. The number of variables will grow and there would be no way to list them other than digging documentation and sources. It’s opaque that kind of input each of the variables accepts.&lt;/p&gt;

&lt;p&gt;Now let’s review a case where environment variables can be helpful.&lt;/p&gt;

&lt;h2 id=&quot;global-configuration&quot;&gt;Global configuration&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/semian&quot;&gt;Semian&lt;/a&gt; is a resiliency toolkit for Ruby. It injects itself into MySQL and Redis clients to fail fast in case of incidents. It’s used heavily at Shopify to make our apps resilient to outages.&lt;/p&gt;

&lt;p&gt;Semian is always there sitting in front of database adapters, doesn’t matter if you run the Rails app as a web server (by starting Unicorn) or as a job worker (by starting Sidekiq or Resque). What would be the way to tweak or disable Semian?&lt;/p&gt;

&lt;p&gt;We can’t do it with &lt;code class=&quot;highlighter-rouge&quot;&gt;OptionParser&lt;/code&gt; as we did in the previous case because web server (Unicorn) and job worker (Sidekiq) each take their own arguments. This is where an environment variable like &lt;a href=&quot;https://github.com/Shopify/semian/blob/4218ea541c79f2402ae693e015a8a74bed4eb750/lib/semian/platform.rb#L14&quot; target=&quot;_blank&quot;&gt;SEMIAN_SEMAPHORES_DISABLED&lt;/a&gt; is extremely helpful. Since this option is something that is only used by operations engineers in extreme cases, the lack of discovery of the option (the one you get with &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; flag) is acceptable.&lt;/p&gt;

&lt;h2 id=&quot;combining-arguments-and-env-variables&quot;&gt;Combining arguments and ENV variables&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/kubernetes-deploy&quot; target=&quot;_blank&quot;&gt;kubernetes-deploy&lt;/a&gt; is a tool to watch deployment progress in Kubernetes. It takes few arguments:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ kubernetes-deploy --help
$ kubernetes-deploy namespace context --template-dir config/k8s --no-prune
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At the same time, it &lt;a href=&quot;https://github.com/Shopify/kubernetes-deploy#usage&quot; target=&quot;_blank&quot;&gt;relies&lt;/a&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;KUBECONFIG&lt;/code&gt; variable that is usually set in your shell. But if your want to deploy with a specific KUBECONFIG, nothing stops you from running the tool with ENV variable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ KUBECONFIG=./mykubeconfig kubernetes-deploy namespace context --template-dir config/k8s --no-prune
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here is the rule that I often use when discussing UX of a command line tool: you must have a good reason to prefer ENV variable over command line arguments. Global Kubernetes config of a flag to completely disable Semian are such cases.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Introducing control with ENV variable may be tempting, but first we should think about end users of the tool and the discoverability of the arguments. With ENV variables there’s no way to list allowed options and their values, and there’s nothing like &lt;code class=&quot;highlighter-rouge&quot;&gt;--help&lt;/code&gt; flag that shows the usage.&lt;/p&gt;

&lt;p&gt;For user-facing command line tools you should always provide help about usage and expected values for each argument. &lt;code class=&quot;highlighter-rouge&quot;&gt;OptionParser&lt;/code&gt; is a great tool for those scripts that comes in with the language standard library.&lt;/p&gt;

&lt;p&gt;For cases like global configuration sometimes it’s not possible to control behaviour with command line flags. Those are use cases when ENV variables may help.&lt;/p&gt;

&lt;p&gt;Keep it mind that ENV variables also bring the pattern of global variables which is something that any language recommends to avoid. ENV variables are also harder to test, and nothing prevents shitty code from mutating then in the runtime (&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV['MY_FRAGILE_SETTING'] = &quot;new_value&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It’s important to know that some ENV variables like &lt;a href=&quot;https://github.com/rails/rails/issues/29516&quot; target=&quot;_blank&quot;&gt;$HOST&lt;/a&gt; are reserved by the system.&lt;/p&gt;

&lt;p&gt;All of these reason make me to think twice before introducing a global ENV variable. I hope this post was convincing enough.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SREcon Europe 2017: impressions</title>
   <link href="http://kirshatrov.com/posts/srecon-europe/">
   <updated>2017-09-28T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/srecon-europe</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://kirshatrov.com/assets/post-images/srecon-eu-2017.png&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; width=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Earlier this month I went to SREcon Europe in Dublin. This was my non-Ruby conference, and it was quite different from the conferences I attended before. I decided to write a short post with my impressions and links to talks that I liked the most.&lt;/p&gt;

&lt;p&gt;The conference takes three days and each day has 4-5 tracks. That’s almost as huge as RailsConf (which is up to 7 tracks). Sometimes I found it hard to choose between talks, especially when you had to forgo three talks to attend a two hour workshop.&lt;/p&gt;

&lt;p&gt;Speaking of workshops, SREcon was full of them! Even that I couldn’t stay for all workshops, I think the variety of them was quite diverse: Statistics for Engineers, Mastering Linux performance tools, Introduction to gRPC and Technical Writing. I was told that at least two of them take place on every SREcon which is pretty cool.&lt;/p&gt;

&lt;p&gt;Overall, the conference was not as technical heavy as I expected. There were maybe a couple presentations with the code, and the rest were either about system design (e.g. load balancing) either about about soft skills like communication and incident management.&lt;/p&gt;

&lt;p&gt;Dublin seemed like a great place for conferences. Thanks to many tech companies based there, there were many local engineers at the conference. It was fun to hang out with locals and visit Facebook and Intercom offices (thanks Javier and Anatoly!).&lt;/p&gt;

&lt;p&gt;Some of my favourite talks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/suriar-anycast&quot; target=&quot;_blank&quot;&gt;Anycast Is Not Load Balancing&lt;/a&gt; by Murali Suriar&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/epure&quot; target=&quot;_blank&quot;&gt;The Dangers of Being Overly-Paranoid&lt;/a&gt; by Ingrid Epure&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/schaevitz&quot; target=&quot;_blank&quot;&gt;Deploying Changes to Production in the Age of the Microservice&lt;/a&gt; by Samantha Schaevitz&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/gordon&quot; target=&quot;_blank&quot;&gt;Automated Debugging of Bad Deployments&lt;/a&gt; by Joe Gordon&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/beyer&quot; target=&quot;_blank&quot;&gt;Why Work with a Tech Writer?&lt;/a&gt; by Betsy Beyer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, talks by my colleagues at Shopify:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/glaser&quot; target=&quot;_blank&quot;&gt;Bots Are Fast, Humans Are Smarter&lt;/a&gt; by Felix Glaser&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/pittis&quot; target=&quot;_blank&quot;&gt;Resiliency Testing with Toxiproxy&lt;/a&gt; by Jake Pittis&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/niyonkuru&quot; target=&quot;_blank&quot;&gt;Incident Management and Chatops at Shopify&lt;/a&gt; by Daniella Niyonkuru&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/turner&quot; target=&quot;_blank&quot;&gt;Building an On-Premise Kubernetes Cluster For a Large Web Application&lt;/a&gt; by Daniel Turner&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/hiltz-laforge&quot; target=&quot;_blank&quot;&gt;Make Haste Slowly: Balancing SRE Diligence in Urgency Driven Organizations&lt;/a&gt; by Jason Hiltz-Laforge&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.usenix.org/conference/srecon17europe/program/presentation/stolarsky&quot; target=&quot;_blank&quot;&gt;Standing On the Shoulders of Giants: Unleashing the Power of Scriptable Load Balancers&lt;/a&gt; by Emil Stolarsky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d recommend you to go to SREcon especially if you interested in learning about Site Reliability Engineering practices. The conference is a great fit for someone from a relatively small, fast-growing company, who’d like to establish SRE culture in a startup.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://twitter.com/shopifyeng?lang=en&quot; target=&quot;_blank&quot;&gt;Shopify Engineering&lt;/a&gt; for sponsoring my trip.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Background jobs and deploys</title>
   <link href="http://kirshatrov.com/posts/background-jobs-and-deploys/">
   <updated>2017-05-01T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/background-jobs-and-deploys</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://kirshatrov.com/assets/post-images/resque.png&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have you ever wondered what happens with a running background job in Sidekiq or Resque when you deploy new version of code and restart the workers? The answer depends on what library you use and sometimes the behaviour is not acceptable for the business needs.&lt;/p&gt;

&lt;p&gt;My post is an overview of architecture concerns that I’ve been keeping in mind when designing continuous deployment of a highly distributed background job system.&lt;/p&gt;

&lt;h2 id=&quot;first-of-all-how-does-resque-and-sidekiq-work&quot;&gt;First of all, how does Resque and Sidekiq work&lt;/h2&gt;

&lt;p&gt;Sidekiq: when the worker receives SIGTERM (graceful shutdown signal), it lets the job to finish with a certain timeout (8s by default). If the job didn’t finish within the timeout, it’s killed and re-enqueued to be retried in the future.&lt;/p&gt;

&lt;p&gt;Resque: on SIGTERM or SIGQUIT (graceful shutdown signals for Resque) it stops taking new jobs from the queue and waits until the current job has finished processing. There’s no timeout for long-running jobs.&lt;/p&gt;

&lt;h2 id=&quot;problems&quot;&gt;Problems&lt;/h2&gt;

&lt;p&gt;The problem with Sidekiq is that if you deploy and restart workers too frequently and your jobs are too long to complete, there might the the case when you deploy every hour and the job that takes few hours won’t ever finish. It would eventually be started and killed multiple times during the workday, and maybe it will have enough time to run during the night when you don’t deploy. Sidekiq also requires your jobs to be idempotent (means that your job can safely execute multiple times), which is the best practice not always achievable in the real life.&lt;/p&gt;

&lt;p&gt;The issue with Resque is that it has no timeout for graceful shutdown. What if you sent SIGTERM but the current job is going to take five more hours to finish? What if it has infinite loop that runs forever?&lt;/p&gt;

&lt;p&gt;In cloud environments like Heroku there’s a platform-wide timeout for graceful termination. For instance Heroku sends SIGTERM and then waits 10 seconds for process to exit (&lt;em&gt;upd:&lt;/em&gt; the timeout was &lt;a href=&quot;https://devcenter.heroku.com/articles/limits#exit-timeout&quot;&gt;increased&lt;/a&gt; to 30 sec). If the process didn’t exit, Heroku will kill it in the hard way.&lt;/p&gt;

&lt;p&gt;Neither behaviors (Sidekiq and Resque) are ideal. You have to choose between tradeoffs based on what approach is less evil for your business.&lt;/p&gt;

&lt;p&gt;At Shopify we have the world’s biggest Rails app with hundreds of jobs. Some of them take seconds and some take weeks to complete. The Sidekiq’s approach wouldn’t work for us because these long-running jobs would just never ever complete due very frequent deploys. As Resque users we’ve allowed jobs to take as much time as they want, doesn’t matter if they have to be restarted. From time to time we found job workers that have been stuck forever and we had to manually kick them off.&lt;/p&gt;

&lt;p&gt;Our architecture with workers that restart only when they finish the current job (which may happen only in 10 days) makes it really hard for us to migrate to cloud environments which:&lt;/p&gt;

&lt;p&gt;1) have restrictions for how long the process can gracefully terminate&lt;/p&gt;

&lt;p&gt;2) encourage to write software in a way that any unit of work can be interrupted at any time&lt;/p&gt;

&lt;p&gt;3) discourage units of works that are unsafe to terminate, such as long-running jobs&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;

&lt;p&gt;We can no longer give the job unlimited time to finish and at the same time we can’t simply terminate and re-enqueue the job because deploys are too frequent and the job may not manage to finish in the window between the deploys. What are the options?&lt;/p&gt;

&lt;p&gt;One option is to increase the platform timeout for graceful termination. In Kubernetes you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;terminationGracePeriodSeconds&lt;/code&gt; to allow the container to stay in termination state for days or weeks. When I started experimenting with it, it turned out that the option &lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/44956&quot;&gt;was half broken&lt;/a&gt; (maybe I was the only person who used it?). Another problem with increasing timeout is that it’s a hack, and even high value doesn’t guarantee that Kubernetes won’t kick out the container earlier.&lt;/p&gt;

&lt;p&gt;Another option is to make the jobs resumable. The main reason why a job would take days to complete is the amount of records that it has to touch. &lt;code class=&quot;highlighter-rouge&quot;&gt;SyncProductsJob&lt;/code&gt; may work fast for a customer with a dozen products but stuck for a week for your largest customer. So why don’t we save the job progress (the fact that it already processed N records), allow to kill and re-enqueue the job on restart, and resume the work from the point when it was interrupted.&lt;/p&gt;

&lt;p&gt;You can check my &lt;a href=&quot;https://gist.github.com/kirs/3a1bf876c9f15ecdba22274aaf490b73&quot;&gt;prototype&lt;/a&gt; of this idea. What I love about it is that it works with any enumerable collection which can be ActiveRecord scope or a large CSV.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;

&lt;p&gt;First of all, don’t let your developers write non-indempotent jobs that are unsafe to interrupt.
Keep an eye on long-running jobs and rewrite those that are taking too long. Always prefer many smaller jobs to one large job. There’s no overhead of enqueueing a new job.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.celeryproject.org/&quot;&gt;Celery&lt;/a&gt;, a job processing framework in Python, provides &lt;a href=&quot;http://docs.celeryproject.org/en/latest/userguide/workers.html#time-limits&quot;&gt;an option&lt;/a&gt; to limit the max time that a job can take.
I think it’s a great constraint to have as it could help to keep your jobs runtime healthy, in the same manner with request timeout in HTTP servers.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Today I’m working on generic API for resumable/interruptible jobs which would help us to move towards cloud environment where it would be safe to shutdown or restart any background job worker. The main goal of the API would be to make developer define the collection of items to process (records in the database or CSV rows) and the work to be done with each record.&lt;/p&gt;

&lt;p&gt;If the API turns our to be successful I’ll probably share it publicly. Ping me if you’re have any ideas or if you would like a sneak peek of the API.&lt;/p&gt;

&lt;div class=&quot;upd&quot;&gt;
  &lt;strong&gt;[UPDATED]&lt;/strong&gt; My team at Shopify has published the &lt;a href=&quot;https://github.com/Shopify/job-iteration&quot; target=&quot;_blank&quot;&gt;job-iteration gem&lt;/a&gt; which does exactly what my post describes.
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Signal handling in Ruby and its internals</title>
   <link href="http://kirshatrov.com/posts/ruby-signal-trap/">
   <updated>2017-04-17T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/ruby-signal-trap</id>
   <content type="html">&lt;div class=&quot;upd&quot;&gt;
  &lt;strong&gt;[UPDATED]&lt;/strong&gt; Since this post was published, MRI got a &lt;a href=&quot;https://github.com/ruby/ruby/blob/012faccf040344360801b0fa77e85f9c8a3a4b2c/doc/signals.rdoc&quot; target=&quot;_blank&quot;&gt;documentation page&lt;/a&gt; with what's safe and what's not safe to call from signal handlers. I highly recommend reading that one if you've run across my post.
&lt;/div&gt;

&lt;p&gt;I have been debugging signal handlers in Ruby and at some point I started to ask questions that no one could answer.
The only way to find answers for them was to read the MRI internals. Just in case, I’ve decided to document my observations
in a blog post.&lt;/p&gt;

&lt;p&gt;I’m assuming that you already have a context about &lt;a href=&quot;http://www.alexonlinux.com/signal-handling-in-linux&quot;&gt;signal handling in Linux&lt;/a&gt;
and the &lt;a href=&quot;http://ruby-doc.org/core-2.4.1/Signal.html&quot;&gt;Ruby API&lt;/a&gt; for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In what context is the signal handler executed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ruby executes the signal handler in the same thread as the parent. It can be proven by&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;parent: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TERM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The thread &lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/vm_core.h#L762-L763&quot;&gt;struct&lt;/a&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;interrupt_flag&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;interrupt_mask&lt;/code&gt; fields (dunno why they made it two fields).&lt;/p&gt;

&lt;p&gt;When the signal is trapped, the current (main) thread is marked with &lt;code class=&quot;highlighter-rouge&quot;&gt;TRAP_INTERRUPT_MASK&lt;/code&gt; (&lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/thread.c#L414&quot;&gt;[1]&lt;/a&gt;, &lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/signal.c#L982&quot;&gt;[2]&lt;/a&gt;). The current executing thread is &lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/signal.c#L982&quot;&gt;put on hold&lt;/a&gt; and the VM runs the signal handler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is safe to do from a signal handler?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I found only one place that explicitly forbids from being called inside a signal handler. This place is &lt;code class=&quot;highlighter-rouge&quot;&gt;Mutex#lock&lt;/code&gt;. It &lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/thread_sync.c#L245&quot;&gt;prevents&lt;/a&gt; user from locking a mutex from the signal handler by the &lt;a href=&quot;https://bugs.ruby-lang.org/issues/7917&quot;&gt;design&lt;/a&gt;. This is not a huge limitation, but it prevents you from using &lt;code class=&quot;highlighter-rouge&quot;&gt;Logger&lt;/code&gt; which relies on using a mutex. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;puts&lt;/code&gt; still works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; see a &lt;a href=&quot;https://bugs.ruby-lang.org/issues/14222&quot;&gt;thread&lt;/a&gt; in Ruby bug tracker where contributors discuss what id safe to do from a signal handler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then how do you log from the signal handler?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve questioned myself: why can’t you use &lt;code class=&quot;highlighter-rouge&quot;&gt;Logger&lt;/code&gt; inside signal trap when Resque is &lt;a href=&quot;https://github.com/resque/resque/blob/master/lib/resque/worker.rb#L916&quot;&gt;doing it&lt;/a&gt; without any troubles? The answer is that Resque is using &lt;a href=&quot;https://github.com/steveklabnik/mono_logger&quot;&gt;mono_logger&lt;/a&gt;, which is a mutex-free logger implementation. It works just well from the signal trap!&lt;/p&gt;

&lt;p&gt;At Shopify we are logging to Kafka which doesn’t rely on a mutex, meaning that we are also free to log from a signal handler.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re curious, here are the spots in MRI sources that define signal trap behaviour:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/thread.c#L2030&quot;&gt;thread.c#rb_threadptr_execute_interrupts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/signal.c#L967&quot;&gt;signal.c#signal_exec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ruby/ruby/blob/cf6ec79b37a2efcd477ff76c480c570bcf17bf69/thread.c#L410&quot;&gt;thread.c#rb_threadptr_interrupt_common&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/7917&quot;&gt;MRI Bug #7917&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mikeperham.com/2013/02/23/signal-handling-with-ruby/&quot;&gt;Mike Perham: Signal Handling with Ruby 2.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mvidner/bf12a0b3c662ca6a5784&quot;&gt;Best practices of Signal handling in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Class attributes and ActiveSupport</title>
   <link href="http://kirshatrov.com/posts/class-attributes/">
   <updated>2017-02-15T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/class-attributes</id>
   <content type="html">&lt;p&gt;It’s not uncommon case to provide a class-level accessors for some kind of configuration.
For instance, ActiveRecord has multiple class-level settings:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inheritance_column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;schema_migrations_table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;schema_migrations&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Some of them are model-level:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ignored_columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;legacy_column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How do you implement them?
You can start with the vanilla Ruby implementation:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Configurable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@setting&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@setting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Configurable&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;default&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, the default value won’t be available in the subclass:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can fix it by changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;setting&lt;/code&gt; accessor:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Configurable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@setting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@setting&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the &lt;code class=&quot;highlighter-rouge&quot;&gt;setting&lt;/code&gt; value of parent class will also be accessible in the child class.
Unfortunatelly, this snippet doesn’t scale if you are going to have a dozen of class accessors.&lt;/p&gt;

&lt;p&gt;There comes ActiveSupport with &lt;code class=&quot;highlighter-rouge&quot;&gt;mattr_accessor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;class_attribute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mattr_accessor&lt;/code&gt; defines both class and instance accessors for class attributes &lt;a href=&quot;http://api.rubyonrails.org/classes/Module.html#method-i-mattr_accessor&quot;&gt;(docs)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/core_ext/module/attribute_accessors'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mattr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hair_colors&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;HairColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hair_colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:brown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:blonde&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;HairColors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hair_colors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:brown, :black, :blonde, :red]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hair_colors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:brown, :black, :blonde, :red]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind that &lt;strong&gt;if a subclass changes the value then that would also change the value for parent class.&lt;/strong&gt;
Similarly if parent class changes the value then that would change the value of subclasses too.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Male&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Male&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hair_colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hair_colors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:blue]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Usually this is not the desired behaviour and you’d want subclasses not to change the parent class values.
There comes &lt;code class=&quot;highlighter-rouge&quot;&gt;class_attribute&lt;/code&gt; &lt;a href=&quot;http://api.rubyonrails.org/classes/Class.html#method-i-class_attribute&quot;&gt;(docs)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It declares a class-level attribute whose value is inheritable by subclasses.
Subclasses can change their own value and it will not impact parent class.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'active_support/core_ext/class/attribute'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;class_attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:setting&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Subclass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Subclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Subclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Subclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setting&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I’ve been reading &lt;code class=&quot;highlighter-rouge&quot;&gt;class_attribute&lt;/code&gt; implementation it surprised me how elegant the writer method works.
You’d probably expect that it stores the value in the instance variable, like we did in the vanilla Ruby solution above.&lt;/p&gt;

&lt;p&gt;The code from &lt;a href=&quot;https://github.com/rails/rails/blob/94ca3e0a571dba0fe41ca18d61634c5f3aa11209/activesupport/lib/active_support/core_ext/class/attribute.rb#L87-L91&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;active_support/core_ext/class/attribute.rb&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;define_singleton_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It took me a moment to understand &lt;em&gt;why&lt;/em&gt; writer method does &lt;code class=&quot;highlighter-rouge&quot;&gt;class_eval&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;define_method&lt;/code&gt;.
Then I realized that it simply declares a reader method that returns the new value.&lt;/p&gt;

&lt;p&gt;Normally this would hurt the performance because adding a method &lt;a href=&quot;tmm1.net/ruby21-method-cache/&quot;&gt;resets the method cache&lt;/a&gt;,
but in case of a class-level attributes you only change it once or twice on the application start.
In this case it makes more sense to declare a method dynamically rather than use instance variables.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I really liked this trick when I found it, and it’s the main reason why I wrote this post.
Even if you avoid using ActiveSupport in smaller non-Rails projects, now you know
multiple options of implementing class-level attributes in Ruby.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Safe monkeypatching</title>
   <link href="http://kirshatrov.com/posts/monkeypatching/">
   <updated>2017-01-03T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/monkeypatching</id>
   <content type="html">&lt;p&gt;Ruby is the language of monkey patching. While it’s theoretically possible to avoid monkey patching, I’m 99% sure that your app contains at least a few of them (especially of you use Rails).&lt;/p&gt;

&lt;p&gt;Monkey patching is usually considered as an anti-pattern, but sometimes it can’t be avoided.&lt;/p&gt;

&lt;p&gt;The typical use case of monkey patching in a Rails app is a bug fix. If you’re using Rails 5 and the bug you’re hunting was only fixed in 5.1 which is not released yet, you’d have no other option than to copy-paste the fix and use a monkey patch.&lt;/p&gt;

&lt;p&gt;But still, there are good and bad ways to add a monkey patch. This &lt;a href=&quot;https://github.com/rails/rails/pull/27437&quot;&gt;Pull Request&lt;/a&gt; introduces a configurable option for dumping a database. Before that patch, there was no way to configure dumping flags. Imagine that we’re using an older Rails and we still want to pass a custom flag. We’d have to monkeypatch that class:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/active_record_patches.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecordDbCommandPatch&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# pass an extra flag to mysqldump&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysqldump&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;—skip-add-drop-table&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MySQLDatabaseTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordDbCommandPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Why is this way to monkey patch is not the best? Because when we upgrade to a new Rails version that has a configurable option, we may forget to clean up and this patch will still live in the app. Even worse, imagine that &lt;code class=&quot;highlighter-rouge&quot;&gt;run_cmd&lt;/code&gt; method in Rails was refactored and the patch will introduce a bug.&lt;/p&gt;

&lt;p&gt;We can improve it by 1) checking that &lt;code class=&quot;highlighter-rouge&quot;&gt;run_cmd&lt;/code&gt; is available and 2) that configurable option is not available yet in the current Rails version.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/active_record_patches.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DatabaseTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:structure_dump_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;you're running the Rails version that no longer requires the patch&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecordDbCommandPatch&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# pass an extra flag to mysqldump&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mysqldump&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;—skip-add-drop-table&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# instance_method will raise with NameError is the method is not available&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MySQLDatabaseTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:run_cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MySQLDatabaseTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordDbCommandPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way will help you to remove the patch as soon as you update Rails. There is also a way to use the Rails version as an indicator that the patch is no longer necessary:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAJOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;you're running the Rails version that no longer requires the patch&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;For a large Rails app, it may be impossible to avoid monkeypatches. The best we can do is to inject them carefully, providing a safe way for a patch to be removed when it’s no longer necessary.&lt;/p&gt;

&lt;p&gt;Happy monkeypaching!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rewriting code with Rubocop</title>
   <link href="http://kirshatrov.com/posts/rewrite-code-with-rubocop/">
   <updated>2016-12-18T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/rewrite-code-with-rubocop</id>
   <content type="html">&lt;p&gt;Many of you used &lt;a href=&quot;https://github.com/bbatsov/rubocop/&quot;&gt;Rubocop&lt;/a&gt; to enforce code style in your project.
But have you thought that it can be also used to rewrite the code?&lt;/p&gt;

&lt;p&gt;Under the hood, Rubocop uses &lt;a href=&quot;https://github.com/whitequark/parser/&quot;&gt;parser&lt;/a&gt; library to convert Ruby code into syntax tree (AST).
Within Rubocop cop (rule), you can manipulate with nodes of the syntax tree in any way you like. This gives us the power to write code that rewrites another code.&lt;/p&gt;

&lt;p&gt;In my case, we did a huge refactoring and the project was full of blocks like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProjectName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;support_legacy?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# old code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# new code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We had hundreds of &lt;code class=&quot;highlighter-rouge&quot;&gt;ProjectName.support_legacy?&lt;/code&gt; statements all over the project. Sometimes it was &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;, and sometimes &lt;code class=&quot;highlighter-rouge&quot;&gt;unless&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ProjectName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;support_legacy?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# do smth&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At some point the refactoring was finished and it was time to get rid of all &lt;code class=&quot;highlighter-rouge&quot;&gt;if ProjectName.support_legacy?&lt;/code&gt; branches.
I’m not a big fan of writing complex regular expressions and I decided to give Rubocop a try with rewriting my code automatically.&lt;/p&gt;

&lt;p&gt;Rubocop design provides you a way to add your own rules, which are called “cops”. Here is our cop that removes all &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; branches with the legacy code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RuboCop&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CustomCops&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RewriteLegacyBranch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cop&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Constant required for Rubocop&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;MSG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'violation message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# triggered on any `if` statement in the code&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;on_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;ifst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;child_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# if this is what we're looking for, mark it as an offence&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:support_legacy?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ProjectName&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;add_offense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:expression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;autocorrect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# for unless, completely remove the statement&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_unless?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;drop_unless_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;drop_if_block_and_leave_new_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_unless?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loc&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'unless'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drop_if_block_and_leave_new_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# drop the `if` and just leave the new code&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;new_source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;if_content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;child_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;if_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# for indentation&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^( +)/&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert_before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drop_unless_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# indentation workarounds to not leave whitespaces after we remove the block of code&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;indent_found&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^( +)/&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent_found&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;whitespaces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_range&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;line_range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;begin_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;whitespaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;corrector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It turned out that he Rubocop API is not so well documented. I had to dig around the code of existing cops to see examples.
You’ll may need to do the same if you’re looking into creating rules that are more complex than mine.&lt;/p&gt;

&lt;p&gt;Now it’s time to apply the cop to the code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec rubocop --require /absolute/path/to/cop_we_wrote.rb --only CustomCops/RewriteLegacyBranch --autocorrect
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We provide three arguments to rubocop:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Require the custom cop that we wrote (the path should be absolute)&lt;/li&gt;
  &lt;li&gt;Only apply the single cop (by default, Rubocop will also apply a list of default cops)&lt;/li&gt;
  &lt;li&gt;Autocorrect the violations with the rule defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;autocorrect&lt;/code&gt; method&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I was extremely happy with the fact that Rubocop saved me a couple of hours of cleaning up the legacy code myself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails feature that you've never heard about: schema cache</title>
   <link href="http://kirshatrov.com/posts/schema-cache/">
   <updated>2016-12-13T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/schema-cache</id>
   <content type="html">&lt;p&gt;I’ve been doing Rails development already for more than five years and only now I learned about the schema cache, although this feature is mostly relevant for apps under the massive scale.&lt;/p&gt;

&lt;h1 id=&quot;what-is-it-for&quot;&gt;What is it for?&lt;/h1&gt;

&lt;p&gt;On boot, the Rails process makes &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW FULL FIELDS&lt;/code&gt; query to get information about the &lt;a href=&quot;https://github.com/rails/rails/blob/5-0-stable/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L883&quot;&gt;database structure and columns types&lt;/a&gt;. This is required in order to know that the &lt;code class=&quot;highlighter-rouge&quot;&gt;created_at&lt;/code&gt; column is &lt;code class=&quot;highlighter-rouge&quot;&gt;DATETIME&lt;/code&gt; and we have to cast all values as a date time objects.&lt;/p&gt;

&lt;p&gt;Now imagine that you have a hundred of Unicorn processes and you restart them in your production cluster. Every process will query MySQL with the same query: &lt;code class=&quot;highlighter-rouge&quot;&gt;SHOW FULL FIELDS&lt;/code&gt;. Keep in mind that this query is quite expensive because it’s not optimized as may be &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; with an index.&lt;/p&gt;

&lt;p&gt;A hundred application servers all making an expensive query at the same time may also kill your database! To avoid it, Rails provides with the schema cache feature. The idea is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Serialize data about the schema (tables, columns, and types) into a file&lt;/li&gt;
  &lt;li&gt;Distribute that file over all application servers&lt;/li&gt;
  &lt;li&gt;Load the data from file to avoid hitting the database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the chart with a number of queries not using index: you can totally see the moment when we enabled the schema cache!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kirshatrov.com/assets/post-images/schema-cache.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;In Rails &amp;lt;= 5.0, schema cache is serialized and persisted in &lt;a href=&quot;https://ruby-doc.org/core-2.3.1/Marshal.html&quot;&gt;Marshal&lt;/a&gt;. In Rails 5.1, I &lt;a href=&quot;https://github.com/rails/rails/pull/27042&quot;&gt;changed&lt;/a&gt; schema cache to use YAML to preserve compatibility of serialized cache between different Rails version.&lt;/p&gt;

&lt;p&gt;Schema cache is &lt;a href=&quot;https://github.com/rails/rails/blob/5-0-stable/activerecord/lib/active_record/railtie.rb#L27&quot;&gt;enabled by default&lt;/a&gt; for all Rails apps, but it won’t be used unless you have prepared the dump file on your app server with &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:schema:cache:dump&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Anyway, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SchemaCache&lt;/code&gt; class is only 100 LOC and I suggest that you &lt;a href=&quot;https://github.com/rails/rails/blob/5-0-stable/activerecord/lib/active_record/connection_adapters/schema_cache.rb&quot;&gt;check it out&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-you-may-need-it&quot;&gt;Why you may need it?&lt;/h2&gt;

&lt;p&gt;Using schema cache may not be worth it with only a couple of application servers, but you may start using it as you scale your app and the number of Unicorns grows.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/5162&quot;&gt;rails/rails#5162&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/17632&quot;&gt;rails/rails#17632&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pull/27042&quot;&gt;rails/rails#27042&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a plan to write more about Rails features that are not well known. Please let me know if you are interested in this topic.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging Rubygems</title>
   <link href="http://kirshatrov.com/posts/rubygems-extentions-are-not-built/">
   <updated>2016-11-29T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/rubygems-extentions-are-not-built</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install --force&lt;/code&gt; to fix “extensions are not built” errors&lt;/p&gt;

&lt;p&gt;This note describes the source of &lt;code class=&quot;highlighter-rouge&quot;&gt;Ignoring [GEM NAME] because its extensions are not built&lt;/code&gt; errors you may eventually encounter when starting a Ruby process.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bin/rails server
Ignoring nokogiri-1.6.8.1 because its extensions are not built.  Try: gem pristine nokogiri --version 1.6.8.1
Ignoring websocket-driver-0.6.4 because its extensions are not built.  Try: gem pristine websocket-driver --version 0.6.4
Ignoring libxml-ruby-2.9.0 because its extensions are not built.  Try: gem pristine libxml-ruby --version 2.9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clearly, there’s something wrong with the installed gems.
You can find ton of StackOverflow questions about this error message, but none of the answers there are true. Let’s try to find what’s the problem here.&lt;/p&gt;

&lt;p&gt;We can start by inspecting the code that produces the error.
Let’s see where my Rubygems sources are located:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ which gem
/Users/kir/.rubies/ruby-2.3.3/bin/gem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ok, let’s go to &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/kir/.rubies/ruby-2.3.3&lt;/code&gt; and grep the directory for similar messages. I use &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;ag&lt;/a&gt; to file contents in the directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /Users/kir/.rubies/ruby-2.3.3
$ ag -Q &quot;extensions are not built&quot;
lib/ruby/2.3.0/rubygems/basic_specification.rb
74:      warn &quot;Ignoring #{full_name} because its extensions are not built.  &quot; +
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bingo. Now we can check what’s inside &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/c9d8350/lib/rubygems/basic_specification.rb#L74&quot;&gt;rubygems/basic_specification.rb&lt;/a&gt; and see which line prints the error message.&lt;/p&gt;

&lt;p&gt;It comes from the method called &lt;code class=&quot;highlighter-rouge&quot;&gt;contains_requirable_file?&lt;/code&gt;. When &lt;code class=&quot;highlighter-rouge&quot;&gt;missing_extensions?&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, Rubygems prints the error message. There are two interesting things for us here:&lt;/p&gt;

&lt;p&gt;1) Looking to the method description, it sounds like &lt;code class=&quot;highlighter-rouge&quot;&gt;contains_requirable_file?&lt;/code&gt; is a flag that says if the gem has any requirable files.&lt;/p&gt;

&lt;p&gt;2) We should obviously check &lt;a href=&quot;https://github.com/rubygems/rubygems/blob/c9d8350/lib/rubygems/specification.rb#L2179&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;missing_extensions?&lt;/code&gt; method source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we debug &lt;code class=&quot;highlighter-rouge&quot;&gt;missing_extensions?&lt;/code&gt; method, we’ll see that the line that leads to the error is &lt;code class=&quot;highlighter-rouge&quot;&gt;return false if File.exist? gem_build_complete_path&lt;/code&gt;. What’s inside that path and why it’s is missing?&lt;/p&gt;

&lt;p&gt;In my case, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;gem_build_complete_path&lt;/code&gt; was &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/rails/app/vendor/bundle/extensions/x86_64-darwin-16/2.3.0-static/nokogiri-1.6.8.1/gem.build_complete&lt;/code&gt;. Obviously, that file didn’t exist. But there was a very similar file that existed: &lt;code class=&quot;highlighter-rouge&quot;&gt;/path/to/rails/app/vendor/bundle/extensions/x86_64-darwin-15/2.3.0-static/nokogiri-1.6.8.1/gem.build_complete&lt;/code&gt;. If you haven’t noticed the difference, look at &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64-darwin-16&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64-darwin-15&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is related to a recent macOS upgrade. I initially installed my gems on OS X El Capitan (&lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64-darwin-15&lt;/code&gt;) and now I’m running macOS Sierra (&lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64-darwin-16&lt;/code&gt;). The actual issue is that running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; again won’t rebuild the gem for the new &lt;code class=&quot;highlighter-rouge&quot;&gt;x86_64-darwin-16&lt;/code&gt; platform.&lt;/p&gt;

&lt;p&gt;This is likely a Bundler &lt;a href=&quot;https://github.com/bundler/bundler/issues/5210&quot;&gt;issue&lt;/a&gt;. Right now it won’t rebuild missing extentions when the gem is already installed. I’m looking forward to fix this bug, but meanwhile we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt; flag that would make Bundler to rebuild the extensions. &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install --force&lt;/code&gt; fixes all problems! 🎉 🎉 🎉&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I wrote this debugging story not to point to exact Bundler/Rubygems bugs, but to demonstrate how you can debug annoying warnings.
Instead of searching StackOverflow and following misguided tips, it’s much more fun to look into internals yourself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Developing Rails on JRuby</title>
   <link href="http://kirshatrov.com/posts/jruby-rails/">
   <updated>2016-11-28T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/jruby-rails</id>
   <content type="html">&lt;p&gt;For the last couple of weeks, I’ve got my hands dirty with JRuby.
With the main goal of making Rails test suite green(er) on JRuby I used it as an opportunity to dive into JRuby internals.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chruby jruby-9.1.6.0
$ cd ~/Projects/opensource/rails
$ jruby -S bundle install
$ cd activemodel

# running all activemodel tests
$ jruby -S bundle exec rake test

# running single test file
$ jruby -S bundle exec ruby -Itest test/cases/failing_test.rb

# running single test case
$ jruby -S bundle exec ruby -Itest test/cases/failing_test.rb -n test_spefici_failing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The process of developing Rails on JRuby was pretty easy, until I got into a situation when I fixed a couple on bugs in JRuby master and I wanted to run tests against my own build of JRuby.&lt;/p&gt;

&lt;p&gt;Assuming my build of JRuby master is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Projects/opensource/jruby/bin/jruby&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/Projects/opensource/rails/activemodel
$ ~/Projects/opensource/jruby/bin/jruby --dev -S bundle exec ruby -v
ruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;WTF? It looks like &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt; doesn’t respect the JRuby environment.
At the same time, we should remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt; is just a wrapper around &lt;code class=&quot;highlighter-rouge&quot;&gt;require 'bundler/setup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following command successfully runs &lt;code class=&quot;highlighter-rouge&quot;&gt;decimal_test.rb&lt;/code&gt; from ActiveModel:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ~/Projects/opensource/jruby/bin/jruby --dev -rbundler/setup -Itest test/cases/type/decimal_test.rb

# to run complete test suite
$ ~/Projects/opensource/jruby/bin/jruby --dev -rbundler/setup -S rake test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Talking about JRuby internals, I was amazed with how readable they are when compared with MRI C sources.
So faw I managed to fix &lt;a href=&quot;https://github.com/jruby/jruby/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr%20author%3Akirs%20&quot;&gt;two issues&lt;/a&gt; and all of them required to write a bit of Java code.
That felt quite easy. I don’t imagine how much time I would spend if I had to do the same with C code in MRI.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Working on fork and upstream</title>
   <link href="http://kirshatrov.com/posts/sync-upstream/">
   <updated>2016-11-20T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/sync-upstream</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;http://kirshatrov.com/assets/post-images/fork.jpg&quot; style=&quot;display: block;margin-left: auto;margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you fork a repo, Github makes your own copy of the project.
If you forked Rails in 2014, your fork is now 2 years outdated
unless you synced it with the original repo (called upstream).&lt;/p&gt;

&lt;p&gt;In this post, I’ll show the efficient way to sync your fork with the upstream.&lt;/p&gt;

&lt;p&gt;When I clone my fork, I create two upstreams: for my fork and for the upstream (original repo).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone git@github.com:kirs/rails.git
$ cd rails
# create remote for the original repo
$ git remote add upstream git@github.com:rails/rails.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then comes my awesome script that updates my fork:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set bash to strict mode&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -eu
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -v

&lt;span class=&quot;c&quot;&gt;# make sure we're on master&lt;/span&gt;
git checkout master
&lt;span class=&quot;c&quot;&gt;# pull original repo&lt;/span&gt;
git fetch upstream
&lt;span class=&quot;c&quot;&gt;# sync your master with upstream master and force push&lt;/span&gt;
git reset --hard upstream/master
git push origin master --force
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I put that script to &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bin/sync-upstream&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bin&lt;/code&gt; added to my &lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;.
Now I can call &lt;code class=&quot;highlighter-rouge&quot;&gt;sync-upstream&lt;/code&gt; from any directory.&lt;/p&gt;

&lt;p&gt;I have two usecases to use the script:&lt;/p&gt;

&lt;p&gt;1) When my PR was merged and I’d like to get a fresh &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; that includes my changes
2) When I haven’t been working on the project for a while and I want to make sure that I don’t sent new PR
based on the old codebase.&lt;/p&gt;

&lt;p&gt;Happy forking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Inspecting ActiveRecord queries</title>
   <link href="http://kirshatrov.com/posts/query-subscriber/">
   <updated>2016-10-31T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/query-subscriber</id>
   <content type="html">&lt;p&gt;Imagine a case when you define conditions for how an object performs the SQL query:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supports_multiple_insert?&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# use bulk INSERT&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO posts (id, title) VALUES (1, 'abc') (2, 'foo')&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# use single INSERT&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO posts (id, title) VALUES (1, 'abc')&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO posts (id, title) VALUES (2, 'foo')&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How would you test this condition?
There’s no other way than to subscribe to SQL queries and watch them.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; you can implement it with a subscriber:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InsertQueriesSubscriber&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@events&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/INSERT/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_bulk_insert&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;insert_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InsertQueriesSubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sql.active_record&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert_subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# perform the operation&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert_subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It takes one INSERT query to insert two fixtures&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;ensure&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;events&lt;/code&gt; will accumulate all &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT&lt;/code&gt; queries and you can assert it.
This is actually a real life case from my &lt;a href=&quot;https://github.com/rails/rails/commit/02f4c15671ad9cf94a1f6270b86b5e250cfb7dde&quot;&gt;commit in Rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another example of using subscribers is forbidding specific SQL queries.
In our case, we wanted to forbid queries that contain serialized instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::Parameters&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParamsInsertQuerySubscriber&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# implementation of AC::Parameters is different in Rails 5&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MAJOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;!ruby/object:ActionController::Parameters&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;!ruby/hash-with-ivars:ActionController::Parameters&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INSERT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATTERN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;not allowed to store serialized ActionController::Parameters: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When running the app in development or test mode, you may enable the subscriber:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sql.active_record'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ParamsInsertQuerySubscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can imagine other use cases of SQL notifications.
Please share your ideas in comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Five ways to write a flaky test</title>
   <link href="http://kirshatrov.com/posts/flaky-tests/">
   <updated>2016-10-21T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/flaky-tests</id>
   <content type="html">&lt;p&gt;Test flakiness is a part of technical debt that ruins your everyday work.
It prevents new code from being shipped just because CI is red, and you have to go and restart the build.
It creates frustration from the fact that your code may be broken, when in fact it’s not.&lt;/p&gt;

&lt;p&gt;Having &lt;a href=&quot;https://jobs.lever.co/shopify?lever-via=eV7L5-Yack&quot;&gt;50k tests and hundreds of developers&lt;/a&gt;
makes the chance of introducing a flaky test even higher.&lt;/p&gt;

&lt;p&gt;Some cases that I demonstrate are related to test order and some are not.
What is the test order and how it’s related? The best practice is to run your tests in random order,
to make sure that a test is not coupled with another test, and the order in which they run does not matter.&lt;/p&gt;

&lt;p&gt;I will use MiniTest syntax in examples, but RSpec vs MiniTest doesn’t really matter here because all these issues
are framework agnostic.&lt;/p&gt;

&lt;h2 id=&quot;random-factories&quot;&gt;1. Random factories&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# assuming the email field has unique constraint&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Internet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Do you see anything suspicious here?
In most of the times, it will pass. But sometimes &lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;Faker&lt;/a&gt; may return a random email
that has already been used, and your test will crash with uniqueness constraint error.&lt;/p&gt;

&lt;p&gt;The right way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Internet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;safe_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The argument tells Faker to return n-th email, instead of a random one.&lt;/p&gt;

&lt;h2 id=&quot;database-records-order&quot;&gt;2. Database records order&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While this test may usually pass, the SELECT query without ORDER instruction doesn’t guarantee consistent order of records.
To avoid random failures, you should explicitly specify the order:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mutating-the-global-environment&quot;&gt;3. Mutating the global environment&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;BulkEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BulkEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attributes_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my case, &lt;code class=&quot;highlighter-rouge&quot;&gt;BulkEditor&lt;/code&gt; used a global variable to store the registered models list.
As a result, after running the test the registry gets dirty.
This may affect other tests that will run after it (make them order dependent).&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;BulkEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;teardown&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;BulkEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unregister&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I have another real life example of mutating the state:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;SomeGem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9999.99.11'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_not&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;supported?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Any test that will run after this one will get broken value of &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeGem::VERSION&lt;/code&gt;.
It will also lead to a language-level warning: &lt;code class=&quot;highlighter-rouge&quot;&gt;warning: already initialized constant SomeGem::VERSION&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# only the block will get modified value of the constant&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stub_constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeGem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9999.99.99'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_not&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;supported?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;time-sensitive-tests&quot;&gt;4. Time-sensitive tests&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish_delayed_post&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published_at&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Normally, the test would pass. But sometimes the post publishing will take a little longer than a millisecond,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;published_at&lt;/code&gt; will take a little more than &lt;code class=&quot;highlighter-rouge&quot;&gt;1.hour.from_now&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s a special helper &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_in_delta&lt;/code&gt; exactly for this case:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish_delayed_post&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assert_in_delta&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;published_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As an alternative, you can also freeze the time with libraries like &lt;a href=&quot;https://github.com/travisjeffery/timecop&quot;&gt;Timecop&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;require-dependent-tests&quot;&gt;5. Require-dependent tests&lt;/h2&gt;

&lt;p&gt;We had two kinds of test classes: one allowed remote HTTP calls and one not. Here is how it looked like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/unit/remote_api_test.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'remote_test_helper'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# test/unit/simple_test.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test_helper'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A number of tests used &lt;code class=&quot;highlighter-rouge&quot;&gt;remote_test_helper&lt;/code&gt; that allowed the test case to make external HTTP calls.
As you may guess, it perfectly worked when you run a single test. But when running all tests on CI, depending on the test order,
it could happen that every test that was executed after the remote one was allowed to make external calls 😱&lt;/p&gt;

&lt;p&gt;You should always keep in mind that &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; is global and it’s going to mutate the global state.&lt;/p&gt;

&lt;p&gt;A better solution would be to use a macro that modifies only the context of specific test:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test/unit/remote_api_test.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test_helper'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteServiceTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;allow_remote_calls!&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# test/unit/simple_test.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test_helper'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;something&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Fixing a flaky tests is usually hard and it deserves a separate blog post, so I would suggest
you to not even introduce one. If you’re intested, you can use one of links below to read more about flaky tests.&lt;/p&gt;

&lt;h1 id=&quot;further-reading&quot;&gt;Further reading&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://thoughtbot.com/upcase/videos/rspec-bisect&quot;&gt;Using Rspec bisect to catch order dependent tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://semaphoreci.com/community/tutorials/how-to-deal-with-and-eliminate-flaky-tests&quot;&gt;How to Deal With and Eliminate Flaky Tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugs.ruby-lang.org/issues/12776&quot;&gt;Even Ruby core has flaky tests&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://testing.googleblog.com/2016/05/flaky-tests-at-google-and-how-we.html&quot;&gt;Flaky Tests at Google and How We Mitigate Them&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Dynamic breaking points in Ruby</title>
   <link href="http://kirshatrov.com/posts/breaking-points/">
   <updated>2016-09-23T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/breaking-points</id>
   <content type="html">&lt;p&gt;Debugging a large codebase can sometimes be a pain, especially if you’re new to it and
you don’t know about all the classes and relations in the system.&lt;/p&gt;

&lt;p&gt;In this post I’d like to share a cool (IMO) way to debug not well-known codebase using
dynamically created breakpoints. &lt;em&gt;NB:&lt;/em&gt; yes, Ruby is so dynamic that you can create breakpoints on the go.&lt;/p&gt;

&lt;p&gt;Assuming that you use &lt;a href=&quot;https://github.com/deivid-rodriguez/byebug&quot;&gt;byebug&lt;/a&gt; or &lt;a href=&quot;http://pryrepl.org/&quot;&gt;pry&lt;/a&gt;,
imagine that you’ve put a breaking point:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaymentValidator&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:credit_card&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;credit_card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create_credit_card&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/522155/18772286/a0bfca58-8113-11e6-88da-b6f66fe09613.png&quot; alt=&quot;screen shot 2016-09-22 at 21 02 30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside the breaking point, you only know that there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;credit_card&lt;/code&gt; object with &lt;code class=&quot;highlighter-rouge&quot;&gt;errors&lt;/code&gt; method
coming from &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveModel/Errors.html&quot;&gt;ActiveModel::Errors&lt;/a&gt;.
You also expect that some other objects will be calling &lt;code class=&quot;highlighter-rouge&quot;&gt;errors.add&lt;/code&gt;, but you don’t know who
and how will be doing it.&lt;/p&gt;

&lt;p&gt;Here is what you can insert being in the breaking point:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;credit_card&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This snipped will inject into &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; method from &lt;code class=&quot;highlighter-rouge&quot;&gt;credit_card.errors&lt;/code&gt; and start debugging when someone
calls that method. Tricky, eh?&lt;/p&gt;

&lt;p&gt;In my case, this dynamic breaking point helped me to find which objects have been adding errors on &lt;code class=&quot;highlighter-rouge&quot;&gt;credit_card&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;As an alternative, I could probably insert a breaking point into  the &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Errors#add&lt;/code&gt; method,
but that would trigger too many breaking points that I’m not interested in, because &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Errors#add&lt;/code&gt;
is used in other places of the same system.&lt;/p&gt;

&lt;p&gt;Happy debugging!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Improving Rails test helpers</title>
   <link href="http://kirshatrov.com/posts/assert-response/">
   <updated>2016-09-12T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/assert-response</id>
   <content type="html">&lt;p&gt;A great productivity comes from the small things. When making sure that the app works
fine on the new version of Rails, I had to fix failures like this one many many times:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;PostsControllerTest&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#test_whatever&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unprocessable&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The test was usually fairly easy and it looked like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integration&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_whatever&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as: :json&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every time I wanted to look inside, I had to insert a debugger (pry)
before the &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_response&lt;/code&gt; line and check what kind of errors are present the response body.&lt;/p&gt;

&lt;p&gt;I thought: what can I do to make it easier? And I came up with this patch:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;BetterAssertResponse&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assert_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Assertion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;better_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Response body: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Assertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;better_message&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IntegrationTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BetterAssertResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Can you guess how it works?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;PostsControllerTest&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#test_whatever&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unprocessable&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;After:&lt;/em&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;PostsControllerTest&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#test_whatever&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Expected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;but&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Unprocessable&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Invalid settings object for section '1'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This trick saves me and other developers a few seconds every time we need to fix a failing test.
Counting the number of failing tests we had after upgrading Rails (&amp;gt; 1000), this potentually saves hours of work.&lt;/p&gt;

&lt;p&gt;Good news: I’ve submitted &lt;a href=&quot;https://github.com/rails/rails/pull/26477&quot;&gt;a patch to Rails&lt;/a&gt; to bring this upstream.&lt;/p&gt;

&lt;p&gt;You can do the same trick with &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::TestCase&lt;/code&gt; in your app. Unfortunatelly, we can’t bring it into Rails because &lt;a href=&quot;http://blog.bigbinary.com/2016/04/19/changes-to-test-controllers-in-rails-5.html&quot;&gt;ActionController testing has been deprecated&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>When abstraction is a mistake: ActionController::TestCase</title>
   <link href="http://kirshatrov.com/posts/rails-abstractions/">
   <updated>2016-09-05T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/rails-abstractions</id>
   <content type="html">&lt;p&gt;Recently, I’ve been working on improving the quality of controller tests in Shopify core, with the primary goal of making them Rails 5-ready.&lt;/p&gt;

&lt;p&gt;Spending days on this helped me to understand the higher-level problem of abstractions. I decided to write a post about it to share my thoughts and discuss it with the readers.&lt;/p&gt;

&lt;p&gt;Imagine a controller test in Rails that asserts &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; endpoint of a JSON API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should create post&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :json&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Counting that we specified &lt;code class=&quot;highlighter-rouge&quot;&gt;format: :json&lt;/code&gt;, how do you think the request parameters will be encoded? As JSON or as form data? If we hook into controller with &lt;a href=&quot;https://github.com/deivid-rodriguez/byebug&quot;&gt;byebug&lt;/a&gt;, we’ll see the answer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(byebug) request.format.to_s
&quot;application/json&quot;
(byebug) request.body.read
&quot;post%5Btitle%5D=title&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you see, it’s the form data. It didn’t emulate JSON API. For some reason &lt;code class=&quot;highlighter-rouge&quot;&gt;format: :json&lt;/code&gt; does not tell Rails to make request with JSON data. In fact, all it does is that it emulates &lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt; at the end of URL.&lt;/p&gt;

&lt;p&gt;To actually emulate JSON API request, we can use this snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should create post&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CONTENT_TYPE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/json'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :json&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And verifying it with byebug, we can see it’s the real JSON:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(byebug) request.format.to_s
&quot;application/json&quot;
(byebug) request.body.read
&quot;{\&quot;post\&quot;:{\&quot;title\&quot;:\&quot;title\&quot;}}&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same applies to XML requests:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should create post&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# magic headers to enable Rails to encode request params to XML&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CONTENT_TYPE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/xml&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;format: :xml&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert_response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(byebug) request.format.to_s
&quot;application/xml&quot;
(byebug) request.body.read
&quot;&amp;lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&amp;gt;\n&amp;lt;hash&amp;gt;\n  &amp;lt;post&amp;gt;\n    &amp;lt;title&amp;gt;title&amp;lt;/title&amp;gt;\n  &amp;lt;/post&amp;gt;\n&amp;lt;/hash&amp;gt;\n&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;How comes that &lt;code class=&quot;highlighter-rouge&quot;&gt;format: :json&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;format: :xml&lt;/code&gt; has &lt;em&gt;no effect on request body&lt;/em&gt;, and setting &lt;code class=&quot;highlighter-rouge&quot;&gt;@request.headers['CONTENT_TYPE']&lt;/code&gt; outside of request method has?&lt;/p&gt;

&lt;p&gt;Here are the &lt;a href=&quot;https://github.com/rails/rails/blob/029cbb35352ed79805da1b3a089e724b05bd2a80/actionpack/lib/action_controller/test_case.rb#L100-L113&quot;&gt;Rails sources&lt;/a&gt; responsible for request encoding part:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_mime_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unknown Content-Type: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non_path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:xml&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_xml&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:url_encoded_form&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@custom_param_parsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_mime_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_path_parameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_path_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Based on content-type, Rails tries to convert request body to an appropriate format, like to &lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt; when the content-type is &lt;code class=&quot;highlighter-rouge&quot;&gt;application/xml&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# to submit form data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# to send XML document&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CONTENT_TYPE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/xml&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# to send JSON document&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CONTENT_TYPE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Look at three ways to hit Rails controller with a request. All of them look similar, but the requests are totally different: in first case it’s form data, in second case it’s XML document and in third it’s JSON encoded string.&lt;/p&gt;

&lt;p&gt;In my opinion, this is not very straight forward and the &lt;strong&gt;choice of request format should not be hidden from the developer&lt;/strong&gt;. As a result, today developer just writes &lt;code class=&quot;highlighter-rouge&quot;&gt;post :create, post: { title: &quot;my post&quot;}&lt;/code&gt; and doesn’t even know which format the request got.&lt;/p&gt;

&lt;p&gt;Rails tries to put selection of request data under the hood (to abstract), but in fact this logic becomes hidden. It would be better to educate developers about request types and make them write more explicit code.&lt;/p&gt;

&lt;p&gt;Working with platforms with less magic like Clojure or Go, I would have to explicitly declare the request body:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://webscale.io&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`{&quot;title&quot;:&quot;Rails does not scale.&quot;}`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;response Status:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This looks a bit too explicit after Rails, but you see the point: developer has to explicitly set request body to JSON string and the content-type. No magic of encoding request body under the hood.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For me, it has been a lesson about the case when hiding things into abstraction may be not the best way to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good news&lt;/strong&gt;: the behavior I described applies only to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::TestCase&lt;/code&gt;. While it’s still used in most of Rails applications, &lt;a href=&quot;http://blog.bigbinary.com/2016/04/19/changes-to-test-controllers-in-rails-5.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::TestCase&lt;/code&gt; is deprecated in Rails 5&lt;/a&gt;. New apps should always use &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionDispatch::IntegrationTest&lt;/code&gt; for controller testing. In contrast, it doesn’t have any hidden logic for automatically encoding request body and you’d have to do that yourself:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsControllerTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;IntegrationTest&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should create post&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json_body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;post: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# posts_path(format: :json) is required to hit &quot;/posts.json&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;posts_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;format: :json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;params: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_body&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_response&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:created&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Good news #2&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;ActionController::TestCase&lt;/code&gt; &lt;a href=&quot;https://github.com/rails/rails/pull/26212&quot;&gt;now gets “as” option&lt;/a&gt;, which explicitly tells the request format. You don’t have to operate with &lt;code class=&quot;highlighter-rouge&quot;&gt;@request.headers['CONTENT_TYPE']&lt;/code&gt; anymore.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git and large repos</title>
   <link href="http://kirshatrov.com/posts/mono-git/">
   <updated>2016-08-14T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/mono-git</id>
   <content type="html">&lt;p&gt;As you &lt;a href=&quot;https://dzone.com/articles/resilient-routing-and-discovery-at-shopify&quot;&gt;may heard&lt;/a&gt;,
at Shopify we prefer monolith application to microservices.
Dealing a monolyth repo &lt;a target=&quot;_blank&quot; href=&quot;https://news.ycombinator.com/item?id=11991479&quot;&gt;can become tricky&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today the Shopify project directory takes &amp;gt; 2 Gb on my SSD drive,&lt;/strong&gt; plus 2.5 Gb of non-CVS tracked files like Ruby and Javascript dependencies and cache.&lt;/p&gt;

&lt;p&gt;I imagine that it’s not the largest Git repo in the world, but sometimes Git still breaks on such a huge repo.
Last week I’ve got the following symptoms:&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;1208&quot; alt=&quot;&quot; src=&quot;https://cloud.githubusercontent.com/assets/522155/17649861/a4315600-620c-11e6-83b8-542857b0989a.png&quot; /&gt;
&lt;img width=&quot;671&quot; alt=&quot;&quot; src=&quot;https://cloud.githubusercontent.com/assets/522155/17649860/a248e196-620c-11e6-8168-55f2f9acffb9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That was 12 background &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; processes that consumed 360% of CPU and a ton of memory.
As Git launched these processes automatically in background, there was definetely something that went wrong.&lt;/p&gt;

&lt;p&gt;Killing them didn’t help: Git launched them again. I’ve also tried to disable auto GC (&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global gc.auto 0&lt;/code&gt;) but it didn’t help either.&lt;/p&gt;

&lt;p&gt;As I found, there is a Git command to verify validity of the repo database: &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt;.
While in the clear scenario the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;git fsck&lt;/code&gt; should be empty, in my case it printed a huge list of invalid objects.&lt;/p&gt;

&lt;p&gt;Afterwards, I launched garbage collection manually with &lt;code class=&quot;highlighter-rouge&quot;&gt;git gc --prune=now&lt;/code&gt;. And it finally solved the issue.&lt;/p&gt;

&lt;p&gt;I hope my story will help someone with the the similar Git symptoms.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rails and Webpack: No Gem Required</title>
   <link href="http://kirshatrov.com/posts/webpack-and-rails/">
   <updated>2016-07-09T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/webpack-and-rails</id>
   <content type="html">&lt;p&gt;Developing a Rails project with a rich client side features, at some point you may want to replace the Asset Pipeline
with a modern Node.js-based asset compilation toolkit. &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; is a great example of an asset compilation tool.&lt;/p&gt;

&lt;p&gt;There are a lot of opinions about issues with Asset Pipeline. Some of the reasons are: it doesn’t scale well for SPA applications; it doesn’t support require/commonjs modules and asset bundling (using &lt;code class=&quot;highlighter-rouge&quot;&gt;require &quot;component.css&quot;&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;component.js&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This is it: one day you decide switch to Webpack in your Rails app. How do you start?
For majority of developers, the easiest way is to start with a gem. The most popular one is &lt;a href=&quot;https://github.com/mipearson/webpack-rails&quot;&gt;webpack-rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But in &lt;a href=&quot;http://onboardiq.com&quot;&gt;our&lt;/a&gt; case, the problem with the gem was that it required us to change the workflow. Instead of simply running &lt;code class=&quot;highlighter-rouge&quot;&gt;rails server&lt;/code&gt; you would need to manage processes with  &lt;a href=&quot;https://github.com/mipearson/webpack-rails#using-webpack-rails&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foreman&lt;/code&gt;&lt;/a&gt;.
It’s the same reason why I wrote a post about &lt;a href=&quot;http://blog.iempire.ru/2015/12/18/simple-rails-encryption/&quot;&gt;ActiveRecord fields encryption&lt;/a&gt;. I do not like using universal gems with hidden logic that just works (tm) because in most cases you can implement it with a small snippet avoiding introducing a new dependency that you’d have to upgrade and maintain in the future.&lt;/p&gt;

&lt;p&gt;I saw no need in using an extra dependency here, because a basic integration with Webpack is quite fast-forward.&lt;/p&gt;

&lt;p&gt;Working on &lt;a href=&quot;http://onboardiq.com&quot;&gt;OnboardIQ&lt;/a&gt; in 2015, we came up with a solution that I want to share in this post.
&lt;strong&gt;All of Webpack and Rails integration is just a set of techniques and helpers that tie them together.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-asset-helper&quot;&gt;The asset helper&lt;/h1&gt;

&lt;p&gt;In development, Webpack requires running a separate process that would compile changed assets and as a developer who is not famillar with Webpack it’s easy to forget to run or restart the Webpack process.&lt;/p&gt;

&lt;p&gt;I decided to fix it on the Rails side. The idea is to inform the developer is the webpack process is not running.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;webpack_bundle_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check_if_running!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Webpack&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotRunningError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_running?&lt;/span&gt;
      &lt;span class=&quot;sb&quot;&gt;`ps aux | grep &quot;webpac[k]&quot; | wc -l`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_if_running!&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# `npm run development` starts the webpack process&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process_running?&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotRunningError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;webpack is not running. Please run 'npm install &amp;amp;&amp;amp; npm run webpack-development'&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you proxy all calls to webpack-generated assets with &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack_bundle_tag&lt;/code&gt; (instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;%= javascript_include_tag 'application' %&amp;gt;&lt;/code&gt;) in your views and the developer will immediatelly know if he/she forgot to start the process. This is especially helpful in case when your new developer does not have a background in asset management and webpack.&lt;/p&gt;

&lt;h1 id=&quot;detecting-errors&quot;&gt;Detecting errors&lt;/h1&gt;

&lt;p&gt;When you’re browsing in your Rails app and modifying assets, Webpack will recompile JS when the files are changed. Since it’s not very likely that you will monitor the Webpack output, sometimes you may miss that there is a compilation error in your code.
To avoid these cases, me and &lt;a href=&quot;https://github.com/lysyi3m&quot;&gt;Emil Kashkevich&lt;/a&gt; came up with the following trick:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Small Webpack plugin writes all compilation errors to &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp/webpack-status.json&lt;/code&gt;. If there are no errors, the file becomes empty&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp/webpack-status.json&lt;/code&gt; is not empty, Rails will read the file and display the backtrace&lt;/li&gt;
  &lt;li&gt;You’ll immediately see all Webpack errors right in your browser&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I decided not to share the plugin here because the implementation was too dirty, but it should’t take more than an hour for you to write a similar script.&lt;/p&gt;

&lt;h1 id=&quot;running-on-heroku&quot;&gt;Running on Heroku&lt;/h1&gt;

&lt;p&gt;We also wanted to make Heroku automatically precompile all assets when the app is deployed. At first I tried to write a simple Heroku buildpack myself, but then I discovered that the &lt;a href=&quot;https://github.com/heroku/heroku-buildpack-nodejs&quot;&gt;official Node buildpack from Heroku&lt;/a&gt; perfectly works for us.&lt;/p&gt;

&lt;p&gt;We had to configure Heroku to use &lt;a href=&quot;https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app&quot;&gt;two buildpacks&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;heroku buildpacks:set heroku/ruby
heroku buildpacks:add --index 1 heroku/nodejs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And set the NPM environment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;heroku config:set &lt;span class=&quot;nv&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production &lt;span class=&quot;nv&quot;&gt;NPM_CONFIG_PRODUCTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll also need to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; which it’s basically a &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; for the NPM world. This file allows to set a &lt;code class=&quot;highlighter-rouge&quot;&gt;postinstall&lt;/code&gt; callback that will run on Heroku. In our case it precompiled the assets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/kirs/app.git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;development&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webpack --config webpack.development.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;production&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webpack --config webpack.production.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;postinstall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sh -c 'if [ \&quot;${NODE_ENV}\&quot; = \&quot;production\&quot; ]; then npm run production; fi'&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well done. From now on, when you push the code to Heroku, it will run NPM/Webpack scripts to precompile the assets as well as the Rails app.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I hope these three recipes helped you to get started with Webpack on Rails and Heroku.&lt;/p&gt;

&lt;p&gt;Big thanks to my former colleagues at &lt;a href=&quot;http://evl.ms&quot;&gt;Evil Martians&lt;/a&gt; who contributed to the Webpack integration described in this post.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Starting with Clojure</title>
   <link href="http://kirshatrov.com/posts/starting-with-clojure/">
   <updated>2016-05-24T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/starting-with-clojure</id>
   <content type="html">&lt;p&gt;It has been almost a year since I’ve started with Clojure. Thanks to &lt;a href=&quot;https://twitter.com/xnutsive/&quot;&gt;Nate&lt;/a&gt; who offered me to pair for learning in June 2015.&lt;/p&gt;

&lt;p&gt;Clojure feels very expressive and simple for me after 5 years with Rails. What I really like about it is that you don’t need any framework; everything can be composed with components. Hiccup for views, Ring for HTTP stack, Korma for building SQL, couple of middlewares for parameter and Content-Type handling.&lt;/p&gt;

&lt;p&gt;I miss this lack of building your project from components in Ruby. I’m also going to miss immutability and powerful data structures.&lt;/p&gt;

&lt;p&gt;It’s also worth mentioning that Clojure was one of the reasons why I switched to Vim because Atom didn’t have a REPL plugin at that time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Since you’re reading this post in my blog, today I’m here to announce my latest pet project in Clojure: I’ve been rewriting my blog on Jekyll to Clojure as a practice in learning the language. You can check the &lt;a href=&quot;https://github.com/kirs/clj-blog&quot;&gt;source code&lt;/a&gt; and &lt;a href=&quot;clj-blog.herokuapp.com&quot;&gt;live website on Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve implemented main features from Jekyll: markdown / &lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt; parsers and code highlighting, working with published/draft posts and URLs. Of course it’s not as flexible as Jekyll and it doesn’t generate static files, but it works for my blog.&lt;/p&gt;

&lt;p&gt;Things missing in the project:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;archive by year and month because haven’t found a perfect HTTP router yet. I’m using &lt;a href=&quot;https://github.com/weavejester/compojure/&quot;&gt;Compojure&lt;/a&gt; now but it doesn’t have any relevant documentation about handling request parameters.&lt;/li&gt;
  &lt;li&gt;pagination because I couldn’t get Compojure to work with paths like &lt;code class=&quot;highlighter-rouge&quot;&gt;/page2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/page3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;asset minification - what’s the best solution in Clojure for that?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;As a reference to my previous project in Clojure, I’ll also mention my first project in Clojure: &lt;a href=&quot;https://github.com/kirs/cad-visa-tracking&quot;&gt;cad-visa-tracking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Canadian Visa application centre has quite long waiting times. This app helped me to track my passport as frequent as possible. The funny part is that after they introduced the CAPTCHA, I couldn’t automate form requests anymore :D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/522155/15505459/568dac80-21cc-11e6-8897-54071263cb85.jpg&quot; alt=&quot;canada&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My notes from RailsConf 2016</title>
   <link href="http://kirshatrov.com/posts/railsconf-2016/">
   <updated>2016-05-09T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/railsconf-2016</id>
   <content type="html">&lt;style&gt;
.post ul {
  list-style-position: outside;
  margin-left: -40px;
}
.post ul li {
  margin-bottom: 10px;
}
&lt;/style&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Greetings from the Heroku booth at &lt;a href=&quot;https://twitter.com/hashtag/railsconf?src=hash&quot;&gt;#railsconf&lt;/a&gt; &lt;a href=&quot;https://t.co/7OEOSgrg7m&quot;&gt;https://t.co/7OEOSgrg7m&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/heroku?src=hash&quot;&gt;#heroku&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/wywh?src=hash&quot;&gt;#wywh&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kir Shatrov (@kirshatrov) &lt;a href=&quot;https://twitter.com/kirshatrov/status/728648608266903552&quot;&gt;May 6, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;It was my second RailsConf. Last year I went to the RailsConf to give a talk, and this time, I had an entirely different conference experience as an attendee. I had a lot of time since I didn’t have to prepare!&lt;/p&gt;

&lt;p&gt;This year I decided to take a few notes and facts from the talks I attended to share it on my blog. You will find a link to slides and my summary of the talk. And at the end of the post, you can find links to all keynotes.&lt;/p&gt;

&lt;h1 id=&quot;i-cant-believe-its-not-a-queue-using-kafka-with-rails&quot;&gt;I Can’t Believe It’s Not A Queue: Using Kafka with Rails&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/hone/i-cant-believe-its-not-a-queue-using-kafka-with-rails-railsconf-2016&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kafka is a distributed, partitioned, replicated commit log service. You can use it for distributed pub/sub messaging&lt;/li&gt;
  &lt;li&gt;Kafka is distributed, which means that you should have at least more than one node&lt;/li&gt;
  &lt;li&gt;Kafka messages are byte arrays. It means that you can store message in any format: string, Marshal or JSON&lt;/li&gt;
  &lt;li&gt;Heroku is launching a beta support for Kafka!&lt;/li&gt;
  &lt;li&gt;Terence made a sample app that accepts Heroku logs from logdrains and pushed them to Kafka: hone/heroku-replay-ratpack&lt;/li&gt;
  &lt;li&gt;Examples of Kafka usecases:&lt;/li&gt;
  &lt;li&gt;Heroku billing consumes events about your app to watch when you scale a dyno&lt;/li&gt;
  &lt;li&gt;Heroku metrics are built on Kafka too&lt;/li&gt;
  &lt;li&gt;Shopify is using Kafka to process all logs from Rails instances&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;inside-activejob-by-jerry-dantonio&quot;&gt;Inside ActiveJob by Jerry D’Antonio&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/JerryDAntonio/inside-activejob-railsconf-2016&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Right in the talk Jerry built a simple async backend for ActiveJob in just 40 lines of code. This backend is fully functional, and it’s using process memory for the jobs queue instead of Redis as a classical queue.&lt;/li&gt;
  &lt;li&gt;The job backend is based on two primitives from concurrent-ruby gem: CachedThreadPool and ScheduledTask. As for me, it the most interesting part because Jerry is the author of &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby&quot;&gt;concurrent-ruby&lt;/a&gt; and he knows a lot about concurrency.&lt;/li&gt;
  &lt;li&gt;Read more about internals: &lt;a href=&quot;https://github.com/ruby-concurrency/concurrent-ruby/blob/master/doc/thread_pools.md&quot;&gt;thread pools&lt;/a&gt;, &lt;a href=&quot;http://ruby-concurrency.github.io/concurrent-ruby/Concurrent/CachedThreadPool.html&quot;&gt;CachedThreadPool&lt;/a&gt;, &lt;a href=&quot;http://ruby-concurrency.github.io/concurrent-ruby/Concurrent/ScheduledTask.html&quot;&gt;ScheduledTask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-rails-boot-process-by-xavier-noria&quot;&gt;The Rails Boot Process by Xavier Noria&lt;/h1&gt;

&lt;p&gt;Sometimes you use Rails components independently - as I’d use ActiveRecord in a Sinatra app. In this case, you see exact code that loads them.
But in the case of Rails app, you have no idea how all components are loaded. Xavier explained how it works.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There are two core files in every Rails project: &lt;code class=&quot;highlighter-rouge&quot;&gt;config/boot.rb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;config/environment.rb&lt;/code&gt;. The first one is loaded at the very beginning. The second one works as a config finalizer and it’s invoked after all other files in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Every gem that integrates with Rails has a thing called Railtie: it’s a class with a DSL to hook into Rails&lt;/li&gt;
  &lt;li&gt;When you subclass from Railtie, &lt;a href=&quot;https://github.com/rails/rails/blob/5-0-stable/railties/lib/rails/railtie.rb#L128&quot;&gt;a hook is created&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;When &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.application.initialize!&lt;/code&gt; is called, all hooks will be triggered&lt;/li&gt;
  &lt;li&gt;See example Railtie from &lt;a href=&quot;https://github.com/thoughtbot/factory_girl_rails/blob/master/lib/factory_girl_rails/railtie.rb&quot;&gt;FactoryGirl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;x-rails-tuning-the-framework-internals-by-akira-matsuda&quot;&gt;3x Rails: Tuning the Framework Internals by Akira Matsuda&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/a_matsuda/3x-rails&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;According to Akira’s benchmarks, GC adds about 10% of overhead and it’s not what makes Rails stack slow&lt;/li&gt;
  &lt;li&gt;Use &lt;a href=&quot;https://github.com/tmm1/rblineprof&quot;&gt;rblineprof&lt;/a&gt; to profile Ruby scripts&lt;/li&gt;
  &lt;li&gt;Ruby has a &lt;a href=&quot;http://ruby-doc.org/core-2.3.0/TracePoint.html&quot;&gt;Tracepoint API&lt;/a&gt;. Use it for counting number of method calls&lt;/li&gt;
  &lt;li&gt;ActionView paths resolver (when you call &lt;code class=&quot;highlighter-rouge&quot;&gt;render ‘something&lt;/code&gt;, we need to figure out which file is that) has some room for optimization: &lt;a href=&quot;https://github.com/amatsuda/more_optimized_resolver&quot;&gt;more_optimized_resolver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ActionView Multi Encoding support makes rendering very slow. It can be made 1.5x faster by omitting the encoding operations.&lt;/li&gt;
  &lt;li&gt;You can already use faster rendering with HAML:
&lt;a href=&quot;https://github.com/k0kubun/hamlit&quot;&gt;hamlit&lt;/a&gt;,
&lt;a href=&quot;https://github.com/eagletmt/faml&quot;&gt;faml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We can make ActiveSupport::SafeBuffer faster by implementing it in C, as we did with &lt;code class=&quot;highlighter-rouge&quot;&gt;fast_blank&lt;/code&gt; gem&lt;/li&gt;
  &lt;li&gt;Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;present?&lt;/code&gt; on ActiveRecord models is very slow. &lt;a href=&quot;https://github.com/rails/rails/pull/23394&quot;&gt;You should avoid it&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amatsuda/database_rewinder&quot;&gt;database_rewinder gem&lt;/a&gt; provides faster way to clean DB in test environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;precompiling-ruby-scripts---myth-and-fact-by-koichi-sasada&quot;&gt;Precompiling Ruby scripts - Myth and Fact by Koichi Sasada&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;JIT: planned for Ruby 3&lt;/li&gt;
  &lt;li&gt;Ruby 3: Matz wants to release it before Tokyo Olympics in 2020&lt;/li&gt;
  &lt;li&gt;Koichi developed an API in Ruby 2.3 for serializing and deserializing bytecode. It allows to skip bytecode step every time when you execute Ruby script. This technique is called Ahead-of-time compilation.&lt;/li&gt;
  &lt;li&gt;The API allows you to store serialized bytecode anywhere: in the same directory as ruby script, in specific directory or in database&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ko1/yomikomu&quot;&gt;yomikomu gem&lt;/a&gt; is a demonstration of how it can be used&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;turbolinks-5-i-cant-believe-its-not-native-by-sam-stephenson&quot;&gt;Turbolinks 5: I Can’t Believe It’s Not Native! by Sam Stephenson&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Turbolinks 5 allows you to build hybrid mobile apps with Rails.&lt;/li&gt;
  &lt;li&gt;It comes as a library for Rails, iOS and Android&lt;/li&gt;
  &lt;li&gt;You can even use it from NPM with webpack&lt;/li&gt;
  &lt;li&gt;Sam demonstrated a video of creating a sample app (not published online yet)&lt;/li&gt;
  &lt;li&gt;More: &lt;a href=&quot;https://github.com/turbolinks/turbolinks-android&quot;&gt;turbolinks-android&lt;/a&gt;, &lt;a href=&quot;https://github.com/turbolinks/turbolinks-ios&quot;&gt;turbolinks-ios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sprockets-conf&quot;&gt;sprockets conf&lt;/h1&gt;

&lt;p&gt;This year we had two talks about Sprockets, both from core project developers. These two talks were called “sprocketsconf” and I’ve decided to summarize them as a one.&lt;/p&gt;

&lt;p&gt;Slides:
&lt;a href=&quot;https://speakerdeck.com/rafaelfranca/how-sprockets-works&quot;&gt;How Sprockets works by Rafael França&lt;/a&gt;,
&lt;a href=&quot;https://speakerdeck.com/schneems/saving-sprockets&quot;&gt;Saving Sprockets by Richard Schneeman&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What we call Asset Pipeline in Rails is backed by several gems: sprockets, sprockets-rails, sass-rails, execjs, coffee-rails&lt;/li&gt;
  &lt;li&gt;As a new maintainer, Richard had to deal with a lot of issues in Sprockets. 70% of project were written by initial author, who no longer could maintain the gem&lt;/li&gt;
  &lt;li&gt;Richard wrote &lt;a href=&quot;https://github.com/rails/sprockets/tree/master/guides&quot;&gt;Sprockets guides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Source maps support: it’s not there yet but you can read more in &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/guides/source_maps.md&quot;&gt;a guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;General advises:
- If you got 5 minutes a day to check Instagram or Twitter, you’ll find time to maintain your open source projects
- Method docs are like unit tests, but they get outdated
- Deprecation messages as code comments are a bad idea
- Two resources to help you write better code: &lt;a href=&quot;http://www.poodr.com/&quot;&gt;Practical Object-Oriented Design in Ruby&lt;/a&gt; and &lt;a href=&quot;http://kytrinyx.com/exercism&quot;&gt;Exercism.io&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;rspec-and-rails-5-by-justin-searls&quot;&gt;RSpec and Rails 5 by Justin Searls&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://vimeo.com/165527044&quot;&gt;Talk video&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Most important: Rails 5 &lt;a href=&quot;https://github.com/rails/rails/issues/18950&quot;&gt;drops functional tests&lt;/a&gt;. You can use &lt;a href=&quot;https://github.com/rails/rails-controller-testing&quot;&gt;rails-controller-testing&lt;/a&gt; gem if you still want to use it&lt;/li&gt;
  &lt;li&gt;There is no official way to test ActionCable &lt;a href=&quot;https://github.com/rails/rails/pull/23211&quot;&gt;yet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;rspec-rails providers many ways to test your app: controller, request, feature, view, routing and helper specs. However Justin’s &lt;a href=&quot;http://blog.testdouble.com/posts/2015-11-16-how-to-stop-hating-your-tests.html&quot;&gt;approach&lt;/a&gt; is to only use functional and unit (model) test.&lt;/li&gt;
  &lt;li&gt;Number of Ruby jobs is dropping last years. Why? Because it’s easy to support and advocate for popular and growing technology. People only share new things. We should understand that it is ok for software to be complete. Ruby has became mature.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;turbo-rails-with-rust-by-godfrey-chan&quot;&gt;Turbo Rails with Rust by Godfrey Chan&lt;/h1&gt;

&lt;p&gt;&lt;img width=&quot;348&quot; alt=&quot;screen shot 2016-05-06 at 13 29 17&quot; src=&quot;https://cloud.githubusercontent.com/assets/522155/15118406/0889c9cc-15da-11e6-82d6-e496ac1621ea.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/chancancode/turbo-rails-with-rust&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Right now we have 2 opposite directions to write performant code in Ruby. Ruby is slow, and when it comes to C extensions they are dangerous. It’s very easy to get a SEGFAULT.&lt;/li&gt;
  &lt;li&gt;In contract, Rust compiler finds errors that may crash in runtime and validates your code from many perspectives&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rustbridge/&quot;&gt;Rustbridge&lt;/a&gt; is a project about making Rust accessible from another platforms&lt;/li&gt;
  &lt;li&gt;Godfrey Chan and Yehuda Katz are working on &lt;a href=&quot;https://github.com/rustbridge/helix&quot;&gt;helix&lt;/a&gt;, a tool that allows you to write Ruby classes in Rust without having to write the glue code yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;developing-and-maintaining-a-platform-with-rails-and-lotus-by-simone-carletti&quot;&gt;Developing and maintaining a platform with Rails and Lotus by Simone Carletti&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/weppos/developing-and-maintaining-a-platform-with-rails-and-hanami-railsconf-2016&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Speaker works on DNSSimple, a domain hosting.&lt;/li&gt;
  &lt;li&gt;To deal with complexity, DNSSimple developed few rules about working with ActiveRecord:&lt;/li&gt;
  &lt;li&gt;Methods defined in AR::Base are not allowed outside of Models&lt;/li&gt;
  &lt;li&gt;Models MUST expose custom API to perform operations&lt;/li&gt;
  &lt;li&gt;Callbacks are allowed only for data integrity&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scoped can’t be invoked directly outside models&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;At DNSSimple, developers wrap all dependencies into local classes. It’s makes it easier to replace dependencies and stub code in tests.&lt;/li&gt;
  &lt;li&gt;Request, controller, commands, services&lt;/li&gt;
  &lt;li&gt;Business logic and core models are totally separate from Rails. It allows to use them from both Rails and other Ruby frameworks, and also CLI tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bonus-track&quot;&gt;Bonus track&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Confreaks will be posting individual videos for each session in the next weeks. Meanwhile, you already can watch all keynotes:
&lt;a href=&quot;https://www.youtube.com/watch?v=fC-r51Dgwik&quot;&gt;Day 1&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=Q-52L_KEBO8&quot;&gt;Day 2&lt;/a&gt;,
&lt;a href=&quot;https://www.youtube.com/watch?v=s8oRJNokRaM&quot;&gt;Day 3&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Google Cloud Platform launches Ruby support: &lt;a href=&quot;https://cloudplatform.googleblog.com/2016/05/Ruby-on-Google-App-Engine-goes-betaruntime.html&quot;&gt;blog post&lt;/a&gt;,
&lt;a href=&quot;https://cloud.google.com/ruby&quot;&gt;tutorial&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sandi Metz and Katrina Owen are working on a new book about Object Oriented design. &lt;a href=&quot;http://signup.99bottlesbook.com/&quot;&gt;Sign up for it&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;where-rails-will-be-next-year&quot;&gt;Where Rails will be next year&lt;/h1&gt;

&lt;p&gt;Looking at the talks content, we can try to predict what new features in Rails and Ruby we will have next year.
We will mostly likely see built-in support for precompiling Ruby in Rails. We will also be able to benefit from embedding language like Rust into our Ruby code. There is even a chance that some of the core Rails components, like ActiveSupport, will have an alternative implementation in Rust.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Simple encryption of ActiveRecord fields</title>
   <link href="http://kirshatrov.com/posts/simple-rails-encryption/">
   <updated>2015-12-18T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/simple-rails-encryption</id>
   <content type="html">&lt;p&gt;For past week, I have been working on encryption solution for a Rails app.
The requirement was to encrypt chosen fields like &lt;code class=&quot;highlighter-rouge&quot;&gt;ssn&lt;/code&gt; of an ActiveRecord model.&lt;/p&gt;

&lt;p&gt;I’ve research a variety of solutions, including &lt;a href=&quot;https://github.com/attr-encrypted/attr_encrypted&quot;&gt;attr_encrypted&lt;/a&gt;
and &lt;a href=&quot;https://github.com/attr-encrypted/encryptor&quot;&gt;encryptor&lt;/a&gt; gems.&lt;/p&gt;

&lt;p&gt;I want to show a simple way of encryption that combines &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize&quot;&gt;ActiveRecord::Base.serialize&lt;/a&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenSSL::Cipher&lt;/code&gt;, which comes with the Ruby stdlib.&lt;/p&gt;

&lt;p&gt;Few things to bear in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this kind of encryption helps only in case when your database is stolen&lt;/li&gt;
  &lt;li&gt;if hacker gets access to Rails console or &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV['ENCRYPTION_KEY']&lt;/code&gt;, you’re hacked&lt;/li&gt;
  &lt;li&gt;you may want to use &lt;a href=&quot;http://ruby-doc.org/stdlib-2.2.0/libdoc/openssl/rdoc/OpenSSL/Cipher.html#method-i-iv-3D&quot;&gt;IV&lt;/a&gt; and &lt;a href=&quot;http://ruby-doc.org/stdlib-2.2.0/libdoc/openssl/rdoc/OpenSSL/Cipher.html#method-i-pkcs5_keyivgen&quot;&gt;salt&lt;/a&gt; for sensitive data&lt;/li&gt;
  &lt;li&gt;by using Marshal, our encrypted field can store instance of any class (Date, Time, whatever!)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/crypt.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Crypt&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encryption_key&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ENCRYPTION_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;ALGO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aes-256-cbc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenSSL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ALGO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pkcs5_keyivgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encryption_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;final&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# lib/encrypted_coder.rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# custom coder for Rails serialized attribute&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# more examples: https://github.com/rails/rails/tree/4-2-stable/activerecord/lib/active_record/coders&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# encrypted value has to be stored as base64 because it's not UTF-safe&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EncryptedCoder&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Crypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# app/models/wow_such_secure_model.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WowSuchSecureModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EncryptedCoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Done! You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;EncryptedCoder&lt;/code&gt; in any model.&lt;/p&gt;

&lt;p&gt;A quick demo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WowSuchSecureModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ssn: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11-22-333&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;SQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;table&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;updated_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RETURNING&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ssn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;S9CTpTxsuG1mFExrFzyy1XD1qtxpiTKGOiopvFhuuwY=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;created_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2015-12-18 21:52:24.425346&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;updated_at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2015-12-18 21:52:24.425346&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;COMMIT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;WowSuchSecureModel:0x007f803a19f4f8&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;id: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;ssn: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;11-22-333&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;created_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UTC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;updated_at: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Fri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dec&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2015&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UTC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ssn&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;11-22-333&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WowSuchSecureModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ssn&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;11-22-333&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WowSuchSecureModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ssn_before_type_cast&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;S9CTpTxsuG1mFExrFzyy1XD1qtxpiTKGOiopvFhuuwY=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Kaminari to paginate non-ActiveRecord query</title>
   <link href="http://kirshatrov.com/posts/kaminari-custom-query/">
   <updated>2015-11-08T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/kaminari-custom-query</id>
   <content type="html">&lt;p&gt;While optimizing database performance in a Rails app, sometimes we stop using ActiveRecord in the critical parts.
Avoiding ActiveRecord models gives us the freedom of writing complex SQL queries and working with them as with plain objects.
But it also becomes tricky when you want to pass them to other Rails components - like forms and pagination.&lt;/p&gt;

&lt;p&gt;In my case, I had a plain SQL query that I passed directly to PostgreSQL using the &lt;a href=&quot;http://deveiate.org/code/pg/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pg&lt;/code&gt; gem&lt;/a&gt;.
Later when I passed the query results to a Rails view, I realized that I also need to paginate results when presenting them to a user.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amatsuda/kaminari&quot;&gt;Kaminari&lt;/a&gt; (which I am using) is a de-facto pagination solution for Rails apps.
Then how to paginate a custom non-ActiveRecord query with Kaminari?&lt;/p&gt;

&lt;p&gt;Beside of ActiveRecord integration, Kaminari also provides API for paginating plain arrays:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# controller&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;SELECT complex_query FROM big_users_table JOIN ... GROUP BY ...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kaminari&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paginate_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# view&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= paginate @users %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Imagine fetching 100k records from the table, loading them into Ruby memory and then slicing only 10 of them
to render the first page. Sounds horrible, right?&lt;/p&gt;

&lt;p&gt;To write a better solution, let’s review how Kaminari works with ActiveRecord:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# controller&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# view&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= paginate @users %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Technically, &lt;code class=&quot;highlighter-rouge&quot;&gt;@users&lt;/code&gt; is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;paginate&lt;/code&gt; &lt;a href=&quot;https://github.com/amatsuda/kaminari/blob/master/lib/kaminari/helpers/action_view_extension.rb#L17&quot;&gt;helper&lt;/a&gt;
that comes with Kaminari accepts &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt;, which should respond to these 3 methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;current_page&lt;/code&gt; - returns current page number&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;total_pages&lt;/code&gt; - returns total number of pages&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;all&lt;/code&gt; - returns an array of rows for the current page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What if we write &lt;em&gt;our own relation object&lt;/em&gt; that would behave exactly like &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Relation&lt;/code&gt; and then simply pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;paginate&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Here is the final code of the Relation class:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/kirs/5a098654f1c1205ddbaa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;How do we use it with a view and a controller?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# controller&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyRelation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# view&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= paginate @collection %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It works: &lt;code class=&quot;highlighter-rouge&quot;&gt;params[:page]&lt;/code&gt; is passed to the query and Kaminari renders pagination for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kirshatrov.com/assets/post-images/kaminari-query.gif&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I digged into writing my own relation object mostly because of the interest.
In most of the cases, the problem can be solved by creating a PostgreSQL view:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VIEW&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_complex_view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And using this view from an ActiveRecord model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# model&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyComplexQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_complex_view&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# controller&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyComplexQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# view&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= paginate @collection %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result will be the same.&lt;/p&gt;

&lt;p&gt;It’s up to you to use a view or to write a relation object, through the first option may not be possible
for some kind of queries.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Making a custom logger for Rails query optimization</title>
   <link href="http://kirshatrov.com/posts/rails-query-optim/">
   <updated>2015-10-20T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/rails-query-optim</id>
   <content type="html">&lt;blockquote&gt;
Originally posted on the &lt;a href=&quot;https://evilmartians.com/chronicles/rails-query-optimizations&quot;&gt;Evil Martians Chronicles Blog&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently, I’ve been working on optimizing performance for one of &lt;a href=&quot;http://evl.ms&quot; target=&quot;_blank&quot;&gt;Evil Martians&lt;/a&gt; clients’ applications. This Rails app has a dashboard that lists all resources. Every resource is an ActiveRecord model that embeds a lot of relationships, so the dashboard displays them as well. In some cases, the chaining level was up to 5 objects, like &lt;code class=&quot;highlighter-rouge&quot;&gt;account.owner.company.tags.first&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you may guess, the biggest bottleneck with this page was the huge number of database queries. Some of the tables used in these queries had missing indexes. Almost all models have caused &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;N+1 queries&lt;/a&gt;. Since the dashboard has lots of conditions and filters as well, it wasn’t easy to detect problematic queries and then find &lt;em&gt;what line of code triggered the query&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In classical MVC frameworks, the Controller layer is always responsible for fetching the data from a model. But Rails models are “lazy”. When you do &lt;code class=&quot;highlighter-rouge&quot;&gt;@user = User.find(1)&lt;/code&gt; in the controller and then call &lt;code class=&quot;highlighter-rouge&quot;&gt;@user.account.title&lt;/code&gt; in the view, the actual &lt;code class=&quot;highlighter-rouge&quot;&gt;account&lt;/code&gt; data will be retrieved from the View layer! Isn’t that against the MVC rules?&lt;/p&gt;

&lt;p&gt;But this is how modern Rails versions work. It is a trade-off that we have to pay to have efficient models and lazily executed database queries.&lt;/p&gt;

&lt;p&gt;In my example, the dashboard was built using lots of partials, and this made finding out the source of a heavy query really tricky. When making optimizations, I had to change the code, reload the page in a browser and then go back to Terminal where I could see the Rails log, and make conclusions about whether or not my change did help (and why the query was triggered at all from some weird partial).&lt;/p&gt;

&lt;p&gt;Later I found the &lt;code class=&quot;highlighter-rouge&quot;&gt;active_record_query_trace&lt;/code&gt; &lt;a href=&quot;https://github.com/ruckus/active-record-query-trace&quot;&gt;gem&lt;/a&gt; made by &lt;a href=&quot;https://github.com/ruckus&quot;&gt;Cody Caughlan&lt;/a&gt;. The gem helps to find out where the query was triggered by printing the trace:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;no&quot;&gt;IntuitAccount&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intuit_accounts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intuit_accounts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intuit_accounts&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Called&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from:
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;haml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`block in _app_views_users_edit_html_haml___1953197429694975654_70177901460360’
  app/views/users/edit.html.haml:16:in `&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_app_views_users_edit_html_haml___1953197429694975654_70177901460360&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The gem helped me a lot. But I still had to switch between the browser and the Terminal with Rails log and scroll through the log, because query traces made the log quite huge.&lt;/p&gt;

&lt;p&gt;I’ve spent a lot of time figuring out where ActiveRecord chains were called and tracing problematic queries. That is why I’ve made a special logger to simplify this process.&lt;/p&gt;

&lt;p&gt;At some point, I realized that if I only use the latest request entry from the log, then maybe I can limit the log to avoid scrolling. I also wished that I have a better formatting of queries and traces. I decided to try saving &lt;em&gt;the last log entry&lt;/em&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;public/last_request_log.html&lt;/code&gt;, which I could open in the next tab to the project and watch the query details right in the browser.&lt;/p&gt;

&lt;p&gt;After an hour of coding &lt;a href=&quot;https://gist.github.com/kirs/d6a3721ad01800f500d9&quot;&gt;here is what I’ve got&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://kirshatrov.com/assets/post-images/logger.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The beginning of the log entry is in exactly the same format that you have in Rails log. It displays the controller and action, format, params and response code. The next part is all about queries: it shows the query body and traces for every item. Queries that are longer than average are highlighted with red.&lt;/p&gt;

&lt;p&gt;While it may look very simplistic, this tool saved me a ton of time and visualized what was happening through the full MVC stack.&lt;/p&gt;

&lt;p&gt;You can also try some other tools like &lt;a href=&quot;https://github.com/MiniProfiler/rack-mini-profiler&quot;&gt;rack-mini-profiler&lt;/a&gt; that injects a tiny block to your app layout with some statistics about the queries. Or if you need to go lower level, try &lt;a href=&quot;https://github.com/tmm1/stackprof&quot;&gt;stackprof&lt;/a&gt;, the Ruby call-stack profiler.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Later, I am going to write &lt;em&gt;how&lt;/em&gt; I optimized that page using this logger. Some spoilers: I will show how to detect N+1 queries on the early stage and why getting rid of ActiveRecord objects in view layer is a good idea.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Profiling RSpec examples with Stackprof</title>
   <link href="http://kirshatrov.com/posts/profiling-specs/">
   <updated>2015-10-13T08:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/profiling-specs</id>
   <content type="html">&lt;p&gt;Finding out why a particular spec is slow might be tricky.
Thanks to &lt;a href=&quot;https://github.com/tmm1&quot;&gt;Aman Gupta&lt;/a&gt;, we have &lt;a href=&quot;https://github.com/tmm1/stackprof&quot;&gt;stackprof&lt;/a&gt; - a sampling call-stack profiler for ruby 2.1+.&lt;/p&gt;

&lt;p&gt;I have used it a lot while working on &lt;a href=&quot;http://rubybench.com&quot;&gt;RubyBench&lt;/a&gt; and finding slow parts of code in Rails stack, but never in specs.
Yesterday I had to find out why my RSpec example was slow and I wrote this snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tmp/stackprof-cpu-test-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;full_description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parameterize&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.dump&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;StackProf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;mode: :cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;out: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This snippet profiles every example block in your test file and saves the dump into &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp/&lt;/code&gt;, for instance &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp/stackprof-cpu-test-posts-controller-get-works&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Later, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec stackprof&lt;/code&gt; to analize the dump.&lt;/p&gt;

&lt;p&gt;In my case, stackprof helped me to realize that most of the time in specs was spent on SASS compilation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/stackprof-rspec.png&quot; alt=&quot;stackprof dump&quot; class=&quot;bordered&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NB: you do not need to keep the profiling enabled all the time. Use the snippet only when you need to debug a specific case.&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Confident Ruby by Avdi Grim</title>
   <link href="http://kirshatrov.com/posts/confident-ruby/">
   <updated>2015-10-09T08:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/confident-ruby</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/post-images/confident_ruby.png&quot; alt=&quot;Confident Ruby book&quot; style=&quot;margin: 0 auto&quot; class=&quot;bordered&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I have read a wonderful book by Avdi Grim about Ruby called &lt;a href=&quot;http://www.confidentruby.com/&quot;&gt;&lt;em&gt;Confident Ruby&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The book by itself is a collection of useful patterns, grouped by three topics: Collecting Input, Delivering Results and Handling Failure.&lt;/p&gt;

&lt;p&gt;All these topics are highly recommended for all of you, even in case you are using Ruby for four years like I am. Avdi has a unique talent to illustrate patterns with perfectly matching code examples and abstractions. On the next day after you read the book, you will see how these patterns make your life better applied to the real life codebase.&lt;/p&gt;

&lt;p&gt;There is only one piece in the book about the Null Object pattern that I would personally disagree:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NullObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BasicObject&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;respond_to_missing?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://robots.thoughtbot.com/rails-refactoring-example-introduce-null-object&quot;&gt;Null Object is quite a powerful pattern&lt;/a&gt; that is in my opinion underestimated in Ruby and Rails worlds. But taking this example, I imagine how some junior developer copies the class, puts it into &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; of Rails projects and uses it everywhere in the project, which would make it a hell to debug issues.&lt;/p&gt;

&lt;p&gt;Instead of using &lt;code class=&quot;highlighter-rouge&quot;&gt;NullObject&lt;/code&gt; class globally, it may be a better idea to scope it to the particular library or API.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you, Avdi! I wish I would read the book in 2013 when it was published because I could start using all these patterns to write the better code even earlier.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Proper way to use the Struct</title>
   <link href="http://kirshatrov.com/posts/struct/">
   <updated>2015-10-04T18:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/struct</id>
   <content type="html">&lt;p&gt;We use Structs in Ruby to create simple classes with constructor and some instance variables.&lt;/p&gt;

&lt;p&gt;Look at this simple &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using Struct, you can simply use a single line instead of declaring &lt;code class=&quot;highlighter-rouge&quot;&gt;attr_accessor&lt;/code&gt;s and constructor and the class will have exactly the same API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But when it comes to a class with internal resources like constants, you may get a warning:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MIN_AGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# some methods dealing with user&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Admin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MIN_AGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; warning: already initialized constant MIN_AGE&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; warning: previous definition of MIN_AGE was here&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What happends here? We assumed that &lt;code class=&quot;highlighter-rouge&quot;&gt;MIN_AGE&lt;/code&gt; was declared inside &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Admin&lt;/code&gt;, but actually it was declared on the top level:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MIN_AGE&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And warnings were printed.&lt;/p&gt;

&lt;p&gt;But wait, there is actually a proper way to subclass from Struct:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Admin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;MIN_AGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No warnings here!&lt;/p&gt;

&lt;p&gt;I also recommend you to check it &lt;a href=&quot;http://blog.steveklabnik.com/posts/2012-09-01-random-ruby-tricks--struct-new&quot;&gt;the post by Steve Klabnik&lt;/a&gt;, where he describes all power of Struct.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Localized cache store in Rails</title>
   <link href="http://kirshatrov.com/posts/localized-cache-store/">
   <updated>2015-09-14T18:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/localized-cache-store</id>
   <content type="html">&lt;p&gt;Today I have got a &lt;a href=&quot;https://groups.google.com/forum/#!topic/rubyonrails-core/jRctpsQ-hO4&quot;&gt;question in the Ruby on Rails Core mailing list&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tonight was the first time i faced one new bug on my website, when i saw one cached partial to be returned in another language than currently selected one. That  was i guess because that cache was generated when another locale was enabled.
Hence, shouldn’t local be included by default into cache key?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;So, shouldn’t we include the current locale into Rails cache key?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As for the defaults, my guess is no. As DHH said, &lt;a href=&quot;https://github.com/rails/rails/pull/21124#issuecomment-127995334&quot;&gt;only a very small minority of apps need localization&lt;/a&gt;, and I totally agree with him.&lt;/p&gt;

&lt;p&gt;But to solve this particular case described in a mailing list, I’ve started looking for a way to specify a global cache key prefix.&lt;/p&gt;

&lt;p&gt;First of all, &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.cache&lt;/code&gt; API already has a simple way to pass a lambda with a namespace, but it isn’t global:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;namespace: &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;locale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First option was to add the namespace option to Rails config.
There were two reasons why I didn’t stick with it:&lt;/p&gt;

&lt;p&gt;1) &lt;code class=&quot;highlighter-rouge&quot;&gt;config.cache_store&lt;/code&gt; accepts only store-specific settings and we would have to introduce a new option like &lt;code class=&quot;highlighter-rouge&quot;&gt;config.cache_key_namespace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) it’s always better to find a solution without modifying Rails.&lt;/p&gt;

&lt;p&gt;So, here is the better way that I found:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LocalizedCacheStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;namespaced_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;I18n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LocalizedCacheStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FileStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I borrowed few ideas from the Functional (tm) approach: &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalizedCacheStore&lt;/code&gt; wraps existing cache class as a function, and you still have all control on your cache store if you need some options:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cache_store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LocalizedCacheStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RedisStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'redis://localhost:6379/0/cache'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;expires_in: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As for me, it proves the great flexibility of Ruby and Rails: we didn’t have to change any framework code, and &lt;code class=&quot;highlighter-rouge&quot;&gt;LocalizedCacheStore&lt;/code&gt; logic is only 5 lines of code (two of them are &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;s).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Direct uploads with AWS S3 and Rails</title>
   <link href="http://kirshatrov.com/posts/s3-direct-uploads/">
   <updated>2015-08-19T15:07:00+00:00</updated>
   <id>http://kirshatrov.com/posts/s3-direct-uploads</id>
   <content type="html">&lt;p&gt;Thinking of a classic Rails app with user uploads, the usual workflow is: upload user file to the controller, process the upload with gem like CarrierWave or Paperclip, upload it to some cloud storage and save the model with a reference to the storage.&lt;/p&gt;

&lt;p&gt;It’s a proven solution especially when you want to validate, resize or somehow process the file — for example user avatar. But what if the file is just a file, and it doesn’t need to be processed by the backend? Attachable CV in PDF is a good example of such case. By using &lt;a href=&quot;https://aws.amazon.com/articles/1434&quot;&gt;Amazon S3 direct uploads&lt;/a&gt;, you can avoid extra load on you application servers with file uploads, and serve more requests instead.&lt;/p&gt;

&lt;p&gt;Instead of uploading a file into Rails controller, AWS S3 allows to presign a unique upload URL, and then the user submits the form with file directly to that Amazon URL. In the database, we can just store address of the file on S3, like &lt;code class=&quot;highlighter-rouge&quot;&gt;https://s3-eu-west-1.amazonaws.com/mybucket/myfile.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are few other blog posts about mastering Rails and S3 Direct uploads, but in my post I want to focus on “vanila” solution, without using any gems like CarrierWave, Paperclip or &lt;a href=&quot;https://github.com/waynehoover/s3_direct_upload&quot;&gt;s3_direct_upload&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Assuming we have &lt;strong&gt;Rails 4.2&lt;/strong&gt; app, let’s start by creating the User model with avatar field:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rails g scaffold user name avatar
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rake db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To use Amazon S3 API, let’s add the official AWS gem, &lt;code class=&quot;highlighter-rouge&quot;&gt;aws-sdk-v2&lt;/code&gt; to the Gemfile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gem 'aws-sdk', '~&amp;gt; 2'&quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;User upload will be sent to the presigned S3 URL, and this URL will be valid only for single upload. In this case, user won’t be able to upload more files then we allow and to pollute the S3 bucket. You can also limit the maximum allowed file size to upload.&lt;/p&gt;

&lt;p&gt;We will need controller action to presign the request:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UsersController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presign_upload&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# pass the limit option if you want to limit the file size&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UploadPresigner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/users/avatar/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;megabyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:presign_upload&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This controller action will accept &lt;code class=&quot;highlighter-rouge&quot;&gt;filename&lt;/code&gt; parameter like &lt;code class=&quot;highlighter-rouge&quot;&gt;selfie.jpg&lt;/code&gt; and generate the &lt;strong&gt;presigned URL&lt;/strong&gt; for exactly this filename.&lt;/p&gt;

&lt;p&gt;Let’s write the UploadPresigner class to work with S3:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/services/s3_presigner.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UploadPresigner&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;upload_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Aws&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;S3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;region: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'us-west-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;credentials: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yourproject'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upload_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;acl: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'public-read'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:content_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;presigned_url: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;presigned_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;public_url: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;public_url&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Basically, this class takes a filename, makes a request to AWS S3 API and returns presigned URL with token, which we will use on the client side.&lt;/p&gt;

&lt;p&gt;Please notice that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; variables to store AWS access and secret keys, don’t forget to obtain them! It’s also important to create the S3 bucket before uploading files (replace the bucket name in the code) and to configure it.&lt;/p&gt;

&lt;p&gt;Now, let’s configure the S3 bucket to receive uploads from the browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post-images/aws-acl.png&quot; alt=&quot;AWS S3 CORS button&quot; class=&quot;bordered&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open AWS Console, go to the bucket properties, open “Permissions” and click on “Add CORS configuration”. Then, paste this XML snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSConfiguration&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s3.amazonaws.com/doc/2006-03-01/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;POST&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;PUT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These settings are required to process direct uploads to S3 and they are recommended by AWS.&lt;/p&gt;

&lt;p&gt;Now when your bucket is able to accept browser uploads, and it’s time to prepare the form.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# app/views/users/_form.html.erb
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= f.label :avatar %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= f.hidden_field :avatar, class: &quot;js-signed-upload-value&quot; %&amp;gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js-signed-upload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-presign-url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%= presign_upload_path %&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js-signed-upload-status&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% if f.object.avatar.present? %&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;%= f.object.avatar %&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;File attached&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the Javascript part:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/assets/javascripts/users.coffee&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;uploadWithUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presignedUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# disable submit while uploading and update status&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input[type='submit']&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'disabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.js-signed-upload-status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Uploading...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# create PUT request to S3&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presignedUrl&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestHeader&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'disabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.js-signed-upload-value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;publicUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.js-signed-upload-status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'disabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.js-signed-upload-status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Failed to upload. Try uploading a smaller file.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# before actually uploading the file, we need to ask controller for a token&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'?filename='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;amp;filetype='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'json'&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# pass presigned public urls to the function to actually upload it&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;uploadWithUrl&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;presigned_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;public_url&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;uploadHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;presignUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.js-signed-upload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;uploadHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now when the page is ready, start &lt;code class=&quot;highlighter-rouge&quot;&gt;rails server&lt;/code&gt; and open the &lt;code class=&quot;highlighter-rouge&quot;&gt;/users/new&lt;/code&gt; in your browser.
Enter some name and choose an avatar. After you submit the form, controller will redirect you to the &lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt; action. Let’s improve it a bit to display the link to attachment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;# app/views/users/show.html.erb
[...]
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% if @user.avatar %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Avatar:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= link_to image_tag(@user.avatar), @user.avatar %&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
[...]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now all user uploads in your app are processed directly to AWS S3, without causing any extra load on the backend.&lt;/p&gt;

&lt;p&gt;By using direct uploads in the customer’s app, I reduced the file storage codebase and avoided using some unnecessary gems.&lt;/p&gt;

&lt;p&gt;There are however situations when you can’t use direct uploads: for example, if you want to resize or somehow validate the user upload.&lt;/p&gt;

&lt;p&gt;As the next step, you can add the code for cleanup: after the record is destroyed, the app should destroy remote file on S3 storage.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>RailsConf 2015 Recap and Thoughts</title>
   <link href="http://kirshatrov.com/posts/railsconf-recap/">
   <updated>2015-04-25T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/railsconf-recap</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Building RailsPerf (my RailsConf talk)</title>
   <link href="http://kirshatrov.com/posts/railsconf-talk/">
   <updated>2015-04-16T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/railsconf-talk</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>Rails 5: what's new</title>
   <link href="http://kirshatrov.com/posts/rails-5/">
   <updated>2015-04-07T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/rails-5</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>An annoying Capistrano, Unicorn and Bundler issue</title>
   <link href="http://kirshatrov.com/posts/capistrano-unicorn-bundler/">
   <updated>2015-03-02T00:00:00+00:00</updated>
   <id>http://kirshatrov.com/posts/capistrano-unicorn-bundler</id>
   <content type="html">
</content>
 </entry>
 

</feed>
