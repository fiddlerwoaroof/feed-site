{
  "title":"DuckDB SQL queries on Lisp vectors & lists as columns",
  "date":"2022-11-16T00:46:44.000000Z",
  "author":"/u/ak-coram",
  "id":"t3_ywev7o",
  "link":"https://www.reddit.com/r/lisp/comments/ywev7o/duckdb_sql_queries_on_lisp_vectors_lists_as/",
  "content":"<div class=\"md\"><p>I've been fervently working on my Lisp bindings for DuckDB and recently implemented support for table functions and replacement scans. Sadly the C API does't seem to allow for directly querying data in memory (<a href=\"https://github.com/duckdb/duckdb/discussions/5340\">as of now</a>), but the current implementation is already surprisingly fast (especially when using Lisp vectors).</p> <p>Assuming you have the Ultralisp distribution in Quicklisp (or following the <a href=\"https://github.com/ak-coram/cl-duckdb#development-setup\">development setup</a>) you can simply use your vectors and lists as tables (for the supported types):</p> <pre><code>(ql:quickload :duckdb) (ddb:with-transient-connection (ddb:with-static-table (&quot;data&quot; `((&quot;i&quot; . (,(loop :for i :below 10000 :collect (random 256)) :column-type :duckdb-utinyint)))) (ddb:query &quot;SELECT avg(i) AS avg, stddev(i) AS stddev FROM data&quot; nil))) ;; =&gt; ((&quot;avg&quot; . #(127.1324d0)) (&quot;stddev&quot; . #(73.87880939814758d0))) </code></pre> <p>Here are some more examples if you're interested: <a href=\"https://github.com/ak-coram/cl-duckdb#querying-lisp-vectors-and-lists-as-table-columns\">https://github.com/ak-coram/cl-duckdb#querying-lisp-vectors-and-lists-as-table-columns</a></p> </div>   submitted by   <a href=\"https://www.reddit.com/user/ak-coram\"> /u/ak-coram </a>   to   <a href=\"https://www.reddit.com/r/lisp/\"> r/lisp </a> <br> <span><a href=\"https://www.reddit.com/r/lisp/comments/ywev7o/duckdb_sql_queries_on_lisp_vectors_lists_as/\">[link]</a></span>   <span><a href=\"https://www.reddit.com/r/lisp/comments/ywev7o/duckdb_sql_queries_on_lisp_vectors_lists_as/\">[comments]</a></span>"
}