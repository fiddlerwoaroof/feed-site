{
  "title":"How to write Good Lisp Programs?",
  "date":"2021-08-31T15:25:49.000000-07:00",
  "author":"/u/Yava2000",
  "id":"t3_pfge2s",
  "link":"https://www.reddit.com/r/lisp/comments/pfge2s/how_to_write_good_lisp_programs/",
  "content":"<div class=\"md\"><p>I am curious to learn what tips and insights you have all developed over the years in coding in Lisp (CL, Scheme, Racket, Clozure, all lisps welcome) that would be useful to learn.</p> <p>I am not so much talking about style guides, I have seen those, more about deeper topics that come out of years of experience.</p> <p>For example, SICP was a very informative read to me. I learnt from it (and from On Lisp) to write programs both top down and bottom up.</p> <p>I guess this question is more towards “programming in the large”, and I am sorry if I am being unclear or ambiguous, as I don’t quite know what I am after. I just want to absorb good nuggets of information that had been developed by others with experience.</p> <p>An example of something I found useful, by the late and wonderful Dan Weinreb (Rest in Peace) was the following quote:</p> <blockquote> <p>You ought not get a warning for a forward reference to a function. Lisp compilers generally defer these checks until the end of a &quot;compilation unit&quot;, so that it will only tell you that a function is undefined if the function was not seen in this compilation unit, or earlier in the compilation.</p> <p>Macros must precede usage. If you're going to use the macro throughout many files, e.g. if it is a general utility, it's often good to put it in a separate file of utility macros. If it's only going to be used within one file, just put it at the beginning of that file.</p> <p>If a class's methods are going to be dispersed amongst many files, then you might want to put the class definition in a separate file. Otherwise it's fine to just put it into a file and then put the method later in the file.</p> <p>I think it's very good practice to use explicit defgeneric forms, particularly so that you can use their doc strings to explain the generic meaning of the function. You can put them anywhere after the class definition. You might want to put them all together, after the class definition, so that someone reading the code can see the whole &quot;protocol&quot; all together.</p> <p>A slightly more tricky issue is Lisp functions that are called by macros: not by the code that the macro expands into, but by the macro itself during expansion. Such functions must be available when the macro is expanded. You can either use eval-when to make sure that they get defined at compile-time, or you can put them into another file (Y) and tell ASDF that in order to compile X, you must first load Y.</p> <p>Yes, it's unfortunate that a Lisp programmer has to worry about all this. Many of us have talked about the possibility of doing a Lisp IDE that would take care of all this automatically. But as far as I know, nobody has that yet.</p> </blockquote> </div>   submitted by   <a href=\"https://www.reddit.com/user/Yava2000\"> /u/Yava2000 </a>   to   <a href=\"https://www.reddit.com/r/lisp/\"> r/lisp </a> <br> <span><a href=\"https://www.reddit.com/r/lisp/comments/pfge2s/how_to_write_good_lisp_programs/\">[link]</a></span>   <span><a href=\"https://www.reddit.com/r/lisp/comments/pfge2s/how_to_write_good_lisp_programs/\">[comments]</a></span>"
}