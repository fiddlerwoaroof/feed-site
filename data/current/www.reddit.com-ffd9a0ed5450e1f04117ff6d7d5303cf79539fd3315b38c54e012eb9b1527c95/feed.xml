<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"><category term="multi" label="r/multi"/><updated>2021-09-01T09:30:00+00:00</updated><id>/r/lisp+scheme+prolog+haskell.rss</id><link rel="self" href="https://www.reddit.com/r/lisp+scheme+prolog+haskell.rss" type="application/atom+xml"><link rel="alternate" href="https://www.reddit.com/r/lisp+scheme+prolog+haskell" type="text/html"><title>posts from lisp, haskell, scheme, prolog</title><entry><author><name>/u/Iceland_jack</name><uri>https://www.reddit.com/user/Iceland_jack</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;It&amp;#39;s probably time to extend generics to handle&lt;/p&gt; &lt;ul&gt; &lt;li&gt;GADTs&lt;/li&gt; &lt;li&gt;existentials, constraints&lt;/li&gt; &lt;li&gt;arbitrary kinds&lt;/li&gt; &lt;li&gt;(I also like the &lt;code&gt;Code&lt;/code&gt; representation of &lt;a href=&quot;https://hackage.haskell.org/package/generics-sop&quot;&gt;&lt;em&gt;generics-sop&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Currently &lt;code&gt;Generic&lt;/code&gt; is limited to ADTs, and only for &lt;code&gt;Type&lt;/code&gt;s and unary type constructors. This allows us to derive generic implementations like &lt;code&gt;Monoid&lt;/code&gt; and &lt;code&gt;Applicative&lt;/code&gt; via &lt;a href=&quot;https://gitlab.haskell.org/ghc/ghc/-/merge_requests/5726&quot;&gt;&lt;code&gt;Generically&lt;/code&gt; and &lt;code&gt;Generically1&lt;/code&gt;&lt;/a&gt; respectively but with a heavier emphasis on fancy types and a growing number of type classes that don&amp;#39;t fit this mold¹ I think it&amp;#39;s due for an upgrade.&lt;/p&gt; &lt;p&gt;One solution exists in the super powerful &lt;a href=&quot;https://hackage.haskell.org/package/kind-generics&quot;&gt;kind-generics&lt;/a&gt; library. Ryan Scott discussed a possible path for &lt;a href=&quot;https://ryanglscott.github.io/2018/02/11/how-to-derive-generic-for-some-gadts/&quot;&gt;&lt;code&gt;GHC.Generics&lt;/code&gt;&lt;/a&gt;. Maybe some changes are planned already? I&amp;#39;m curious about your thoughts&lt;/p&gt; &lt;hr/&gt; &lt;p&gt;¹ More than I can list: &lt;code&gt;Bifunctor&lt;/code&gt;, &lt;code&gt;Biapplicative&lt;/code&gt; hierarchy, the &lt;code&gt;Category&lt;/code&gt;/&lt;code&gt;Arrow&lt;/code&gt;/&lt;code&gt;Profunctor&lt;/code&gt; hierarchy, &lt;code&gt;MonadTrans&lt;/code&gt;/&lt;code&gt;ComonadTrans&lt;/code&gt;/&lt;code&gt;IxMonadTrans&lt;/code&gt;, higher-order &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;Comonad&lt;/code&gt;, lifted classes like &lt;code&gt;Eq2&lt;/code&gt;, the indexed &lt;code&gt;IxFunctor&lt;/code&gt; hierarchy and an n-ary &lt;a href=&quot;https://www.reddit.com/r/haskell/comments/eoo16m/base_category_polymorphic_functor_and_functorof/&quot;&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/a&gt; hierarchy.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Iceland_jack&quot;&gt; /u/Iceland_jack &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pfl6m7/future_of_ghcgenerics/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pfl6m7/future_of_ghcgenerics/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfl6m7</id><link href="https://www.reddit.com/r/haskell/comments/pfl6m7/future_of_ghcgenerics/"><updated>2021-09-01T03:05:38+00:00</updated><published>2021-09-01T03:05:38+00:00</published><title>Future of GHC.Generics</title></entry><entry><author><name>/u/GabiNaali</name><uri>https://www.reddit.com/user/GabiNaali</uri></author><category term="lisp" label="r/lisp"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/GabiNaali&quot;&gt; /u/GabiNaali &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pflp6q/how_can_i_start_learning_lisp_and_which/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pflp6q/how_can_i_start_learning_lisp_and_which/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pflp6q</id><link href="https://www.reddit.com/r/lisp/comments/pflp6q/how_can_i_start_learning_lisp_and_which/"><updated>2021-09-01T03:37:21+00:00</updated><published>2021-09-01T03:37:21+00:00</published><title>How can I start learning Lisp and which dialect/compiler should I use?</title></entry><entry><author><name>/u/Logtalking</name><uri>https://www.reddit.com/user/Logtalking</uri></author><category term="prolog" label="r/prolog"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Hi,&lt;/p&gt; &lt;p&gt;Logtalk 3.50.0 is now available for downloading at:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://logtalk.org/&quot;&gt;https://logtalk.org/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This release focus on improved documentation, developer tools, and test suites. The Handbook includes improved sections on documenting and testing applications, directives, and multi-threaded features. The testing automation script have been updated with support for passing base URLs to generate reports that link to the tests source code. The documenting and diagrams include more versatile helper scripts with new options. A significant number of new tests have been added to the Prolog standards compliance suite for better coverage. This release also includes fixes and updates to libraries and examples plus portability updates for JIProlog, LVM, and SICStus Prolog. For details and a complete list of changes, please consult the release notes at:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md&quot;&gt;https://github.com/LogtalkDotOrg/logtalk3/blob/master/RELEASE_NOTES.md&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can show your support for Logtalk continued development and success at GitHub by giving us a star and a symbolic sponsorship:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/LogtalkDotOrg/logtalk3&quot;&gt;https://github.com/LogtalkDotOrg/logtalk3&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Happy logtalking!&lt;/p&gt; &lt;p&gt;Paulo&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Logtalking&quot;&gt; /u/Logtalking &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/prolog/&quot;&gt; r/prolog &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/prolog/comments/pfdy8b/logtalk_3500_released/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/prolog/comments/pfdy8b/logtalk_3500_released/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfdy8b</id><link href="https://www.reddit.com/r/prolog/comments/pfdy8b/logtalk_3500_released/"><updated>2021-08-31T20:19:18+00:00</updated><published>2021-08-31T20:19:18+00:00</published><title>Logtalk 3.50.0 released</title></entry><entry><author><name>/u/arthurgleckler</name><uri>https://www.reddit.com/user/arthurgleckler</uri></author><category term="scheme" label="r/scheme"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Scheme Request for Implementation 229,&lt;br/&gt; &amp;quot;Tagged Procedures,&amp;quot;&lt;br/&gt; by Marc Nieper-Wißkirchen,&lt;br/&gt; is now available for discussion.&lt;/p&gt; &lt;p&gt;Its draft and an archive of the ongoing discussion are available at &lt;a href=&quot;https://srfi.schemers.org/srfi-229/&quot;&gt;https://srfi.schemers.org/srfi-229/&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can join the discussion of the draft by filling out the subscription form on that page.&lt;/p&gt; &lt;p&gt;You can contribute a message to the discussion by sending it to [&lt;a href=&quot;mailto:srfi-229@srfi.schemers.org&quot;&gt;srfi-229@srfi.schemers.org&lt;/a&gt;](mailto:&lt;a href=&quot;mailto:srfi-229@srfi.schemers.org&quot;&gt;srfi-229@srfi.schemers.org&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Here&amp;#39;s the abstract:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;This SRFI defines &lt;em&gt;tagged procedures&lt;/em&gt;, which are procedures that are tagged with a Scheme value when created through the syntax lambda/tag and case-lambda/tag. The value of the tag of a procedure can be retrieved with procedure-tag, and the predicate procedure/tag?&lt;br/&gt; discerns whether a procedure is tagged. &lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Regards, &lt;/p&gt; &lt;p&gt;SRFI Editor&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/arthurgleckler&quot;&gt; /u/arthurgleckler &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/scheme/&quot;&gt; r/scheme &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pfgkwn/srfi_229_tagged_procedures/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pfgkwn/srfi_229_tagged_procedures/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfgkwn</id><link href="https://www.reddit.com/r/scheme/comments/pfgkwn/srfi_229_tagged_procedures/"><updated>2021-08-31T22:36:21+00:00</updated><published>2021-08-31T22:36:21+00:00</published><title>SRFI 229: Tagged Procedures</title></entry><entry><author><name>/u/RentGreat8009</name><uri>https://www.reddit.com/user/RentGreat8009</uri></author><category term="lisp" label="r/lisp"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/RentGreat8009&quot;&gt; /u/RentGreat8009 &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://dreamsongs.com/Files/ECOOP.pdf&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pfey4t/the_common_lisp_object_system_an_overview/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfey4t</id><link href="https://www.reddit.com/r/lisp/comments/pfey4t/the_common_lisp_object_system_an_overview/"><updated>2021-08-31T21:09:45+00:00</updated><published>2021-08-31T21:09:45+00:00</published><title>The Common Lisp Object System: An Overview</title></entry><entry><author><name>/u/arthurgleckler</name><uri>https://www.reddit.com/user/arthurgleckler</uri></author><category term="scheme" label="r/scheme"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Subject: SRFI 228: A further comparator library&lt;br/&gt; Scheme Request for Implementation 228,&lt;br/&gt; &amp;quot;A further comparator library,&amp;quot;&lt;br/&gt; by Daphne Preston-Kendal,&lt;br/&gt; is now available for discussion.&lt;/p&gt; &lt;p&gt;Its draft and an archive of the ongoing discussion are available at &lt;a href=&quot;https://srfi.schemers.org/srfi-228/&quot;&gt;https://srfi.schemers.org/srfi-228/&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can join the discussion of the draft by filling out the subscription form on that page.&lt;/p&gt; &lt;p&gt;You can contribute a message to the discussion by sending it to [&lt;a href=&quot;mailto:srfi-228@srfi.schemers.org&quot;&gt;srfi-228@srfi.schemers.org&lt;/a&gt;](mailto:&lt;a href=&quot;mailto:srfi-228@srfi.schemers.org&quot;&gt;srfi-228@srfi.schemers.org&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Here&amp;#39;s the abstract:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Further procedures and syntax forms for defining SRFI 128 comparators, and for extracting comparison procedures similar to those defined for Scheme’s built-in types using them.&lt;br/&gt; Best enjoyed in combination with SRFI 162.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Regards, &lt;/p&gt; &lt;p&gt;SRFI Editor&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/arthurgleckler&quot;&gt; /u/arthurgleckler &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/scheme/&quot;&gt; r/scheme &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pfgkuv/srfi_228_a_further_comparator_library/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pfgkuv/srfi_228_a_further_comparator_library/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfgkuv</id><link href="https://www.reddit.com/r/scheme/comments/pfgkuv/srfi_228_a_further_comparator_library/"><updated>2021-08-31T22:36:16+00:00</updated><published>2021-08-31T22:36:16+00:00</published><title>SRFI 228: A further comparator library</title></entry><entry><author><name>/u/Martinsos</name><uri>https://www.reddit.com/user/Martinsos</uri></author><category term="haskell" label="r/haskell"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Martinsos&quot;&gt; /u/Martinsos &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://github.com/wasp-lang/haskell-handbook/blob/master/forall.md&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pfaxtg/i_wrote_a_tutorial_about_forallaimed_at_nonsenior/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfaxtg</id><link href="https://www.reddit.com/r/haskell/comments/pfaxtg/i_wrote_a_tutorial_about_forallaimed_at_nonsenior/"><updated>2021-08-31T17:46:35+00:00</updated><published>2021-08-31T17:46:35+00:00</published><title>I wrote a tutorial about `forall`aimed at non-senior Haskellers - any feedback is welcome!</title></entry><entry><author><name>/u/Yava2000</name><uri>https://www.reddit.com/user/Yava2000</uri></author><category term="lisp" label="r/lisp"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I am curious to learn what tips and insights you have all developed over the years in coding in Lisp (CL, Scheme, Racket, Clozure, all lisps welcome) that would be useful to learn.&lt;/p&gt; &lt;p&gt;I am not so much talking about style guides, I have seen those, more about deeper topics that come out of years of experience.&lt;/p&gt; &lt;p&gt;For example, SICP was a very informative read to me. I learnt from it (and from On Lisp) to write programs both top down and bottom up.&lt;/p&gt; &lt;p&gt;I guess this question is more towards “programming in the large”, and I am sorry if I am being unclear or ambiguous, as I don’t quite know what I am after. I just want to absorb good nuggets of information that had been developed by others with experience.&lt;/p&gt; &lt;p&gt;An example of something I found useful, by the late and wonderful Dan Weinreb (Rest in Peace) was the following quote:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;You ought not get a warning for a forward reference to a function. Lisp compilers generally defer these checks until the end of a &amp;quot;compilation unit&amp;quot;, so that it will only tell you that a function is undefined if the function was not seen in this compilation unit, or earlier in the compilation.&lt;/p&gt; &lt;p&gt;Macros must precede usage. If you&amp;#39;re going to use the macro throughout many files, e.g. if it is a general utility, it&amp;#39;s often good to put it in a separate file of utility macros. If it&amp;#39;s only going to be used within one file, just put it at the beginning of that file.&lt;/p&gt; &lt;p&gt;If a class&amp;#39;s methods are going to be dispersed amongst many files, then you might want to put the class definition in a separate file. Otherwise it&amp;#39;s fine to just put it into a file and then put the method later in the file.&lt;/p&gt; &lt;p&gt;I think it&amp;#39;s very good practice to use explicit defgeneric forms, particularly so that you can use their doc strings to explain the generic meaning of the function. You can put them anywhere after the class definition. You might want to put them all together, after the class definition, so that someone reading the code can see the whole &amp;quot;protocol&amp;quot; all together.&lt;/p&gt; &lt;p&gt;A slightly more tricky issue is Lisp functions that are called by macros: not by the code that the macro expands into, but by the macro itself during expansion. Such functions must be available when the macro is expanded. You can either use eval-when to make sure that they get defined at compile-time, or you can put them into another file (Y) and tell ASDF that in order to compile X, you must first load Y.&lt;/p&gt; &lt;p&gt;Yes, it&amp;#39;s unfortunate that a Lisp programmer has to worry about all this. Many of us have talked about the possibility of doing a Lisp IDE that would take care of all this automatically. But as far as I know, nobody has that yet.&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Yava2000&quot;&gt; /u/Yava2000 &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pfge2s/how_to_write_good_lisp_programs/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pfge2s/how_to_write_good_lisp_programs/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfge2s</id><link href="https://www.reddit.com/r/lisp/comments/pfge2s/how_to_write_good_lisp_programs/"><updated>2021-08-31T22:25:49+00:00</updated><published>2021-08-31T22:25:49+00:00</published><title>How to write Good Lisp Programs?</title></entry><entry><author><name>/u/myShoggoth</name><uri>https://www.reddit.com/user/myShoggoth</uri></author><category term="haskell" label="r/haskell"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/myShoggoth&quot;&gt; /u/myShoggoth &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://discourse.haskell.org/t/haskell-foundation-august-update/3006&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pfi5w4/haskell_foundation_august_update/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfi5w4</id><link href="https://www.reddit.com/r/haskell/comments/pfi5w4/haskell_foundation_august_update/"><updated>2021-09-01T00:05:57+00:00</updated><published>2021-09-01T00:05:57+00:00</published><title>Haskell Foundation August Update</title></entry><entry><author><name>/u/therealdivs1210</name><uri>https://www.reddit.com/user/therealdivs1210</uri></author><category term="scheme" label="r/scheme"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;&lt;strong&gt;[SOLVED]&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Any pointers on how can I run a shell command from a (Chez) Scheme script?&lt;/p&gt; &lt;p&gt;Google didn&amp;#39;t give relevant results, all I&amp;#39;m seeing is command line args to the scheme command.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;found it: &lt;code&gt;system&lt;/code&gt; &lt;a href=&quot;https://cisco.github.io/ChezScheme/csug9.5/foreign.html&quot;&gt;source&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/therealdivs1210&quot;&gt; /u/therealdivs1210 &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/scheme/&quot;&gt; r/scheme &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pf3vqk/shelling_out_with_chez_scheme/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pf3vqk/shelling_out_with_chez_scheme/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf3vqk</id><link href="https://www.reddit.com/r/scheme/comments/pf3vqk/shelling_out_with_chez_scheme/"><updated>2021-08-31T11:24:42+00:00</updated><published>2021-08-31T11:24:42+00:00</published><title>Shelling out with Chez Scheme</title></entry><entry><author><name>/u/sacha-sokoloski</name><uri>https://www.reddit.com/user/sacha-sokoloski</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Hi everyone,&lt;/p&gt; &lt;p&gt;Today I&amp;#39;m happy to announce the release of version 0.20 of my numerical optimization libraries that I call Goal (Geometric OptimizAtion Libraries). I&amp;#39;m a postdoc working in the areas of machine learning and computational neuroscience, and I&amp;#39;ve been working on Goal for about 5 years. I&amp;#39;ve been doing my research with these libraries for the duration, but I now feel that they&amp;#39;re well-developed and feature rich enough that they might be of wider interest.&lt;/p&gt; &lt;p&gt;Goal is essentially my attempt at doing type-safe numerical optimization, with types based on information geometry, which is the combination of Riemannian geometry with probability theory, exponential families, and statistics. Some features include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Strongly-typed vectors (understood as points on a manifold), which distinguish based on dimension, underlying manifold, and coordinate system (and even derivatives vs differentials).&lt;/li&gt; &lt;li&gt;Flexible and easily extensible class hierarchy, designed to incorporate various new instances of e.g. exponential family models or backpropagatable functions.&lt;/li&gt; &lt;li&gt;Implementations for some uncommon probability distributions including: von Mises and CoM-Poisson distributions.&lt;/li&gt; &lt;li&gt;Flexible implementations of various latent variable models including: arbitrary exponential family mixture models, restricted Boltzmann machines, Kalman filters and HMMs, and factor analysis.&lt;/li&gt; &lt;li&gt;Implementations of optimization algorithms for these models, including backpropagation, expectation-maximization, gradient pursuit, and more advanced gradient optimizers such as momentum and Adam.&lt;/li&gt; &lt;li&gt;Efficient batch implementations of all algorithms, driven by hmatrix. Implementations should be fast, at least up to CPU-bound performance.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can find Goal at my gitlab repo &lt;a href=&quot;https://gitlab.com/sacha-sokoloski/goal&quot;&gt;here&lt;/a&gt;. I&amp;#39;ve done my best to make Goal accessible. Nearly every function is documented, and I&amp;#39;ve done my best to write readable code. At the repository I&amp;#39;ve added a few README.mds that explain Goal overall, and the four libraries of which it&amp;#39;s composed. In the &lt;a href=&quot;https://gitlab.com/sacha-sokoloski/goal/-/tree/master/scripts&quot;&gt;scripts&lt;/a&gt; folder you can find a dozen or so scripts that do various fun things in Goal. Finally, on my &lt;a href=&quot;https://sacha-sokoloski.gitlab.io/website/&quot;&gt;website&lt;/a&gt; you can find a few tutorials, where I try to go more in depth on a few topics, in particular:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;a very simple &lt;a href=&quot;https://sacha-sokoloski.gitlab.io/website/posts/01-gradient-descent.html&quot;&gt;introduction to gradient pursuit with Goal&lt;/a&gt;,&lt;/li&gt; &lt;li&gt;a more complex tutorial on &lt;a href=&quot;https://sacha-sokoloski.gitlab.io/website/posts/02-von-mises-mixture.html&quot;&gt;fitting a mixture of von Mises distributions&lt;/a&gt;,&lt;/li&gt; &lt;li&gt;and a &lt;a href=&quot;https://sacha-sokoloski.gitlab.io/website/posts/03-neural-network.html&quot;&gt;review of my idiosyncratic implementation of neural networks and backpropagation&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;(on a side note, I use laziness to implement backprop implicitly, and I&amp;#39;m curious if this is a widely known trick).&lt;/p&gt; &lt;p&gt;Anyway, I&amp;#39;ll always keep hacking away at Goal to fit the needs of my research projects, but I&amp;#39;d be happy if there were wider community interest. Right now the libraries are only available at my gitlab repo (there&amp;#39;s an ancient version on hackage) but with mild prodding I would package them up for hackage/stackage.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/sacha-sokoloski&quot;&gt; /u/sacha-sokoloski &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf5fuw/ann_goal_geometric_optimization_libraries/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf5fuw/ann_goal_geometric_optimization_libraries/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf5fuw</id><link href="https://www.reddit.com/r/haskell/comments/pf5fuw/ann_goal_geometric_optimization_libraries/"><updated>2021-08-31T13:05:01+00:00</updated><published>2021-08-31T13:05:01+00:00</published><title>ANN: Goal (Geometric OptimizAtion Libraries)</title></entry><entry><author><name>/u/ringingraptor</name><uri>https://www.reddit.com/user/ringingraptor</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I&amp;#39;m curious as to why &lt;code&gt;String&lt;/code&gt; is used almost ubiquitously throughout the GHC codebase and many Haskell codebases in general. In any other language, building a string as a &lt;code&gt;LinkedList&amp;lt;char&amp;gt;&lt;/code&gt; is practically unheard of. That being said, Haskell is not every other language, and I&amp;#39;m curious to hear if this representation has any benefits over a packed string type due to the GHC runtime, garbage collector, or something like that.&lt;/p&gt; &lt;p&gt;Any thoughts?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/ringingraptor&quot;&gt; /u/ringingraptor &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pffeba/on_the_usage_of_string_in_ghc/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pffeba/on_the_usage_of_string_in_ghc/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pffeba</id><link href="https://www.reddit.com/r/haskell/comments/pffeba/on_the_usage_of_string_in_ghc/"><updated>2021-08-31T21:32:55+00:00</updated><published>2021-08-31T21:32:55+00:00</published><title>On the usage of String in GHC?</title></entry><entry><author><name>/u/anonXMR</name><uri>https://www.reddit.com/user/anonXMR</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;In Haskell, is the styling where a function has a prime marker i.e:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mapError &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;vs&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mapError&amp;#39; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;does this just mean &amp;quot;another version&amp;quot; of the same function? like with a different signature?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/anonXMR&quot;&gt; /u/anonXMR &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf800j/functions_with_prime/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf800j/functions_with_prime/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf800j</id><link href="https://www.reddit.com/r/haskell/comments/pf800j/functions_with_prime/"><updated>2021-08-31T15:20:18+00:00</updated><published>2021-08-31T15:20:18+00:00</published><title>functions with prime ( ' )</title></entry><entry><author><name>/u/alex-manool</name><uri>https://www.reddit.com/user/alex-manool</uri></author><category term="lisp" label="r/lisp"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/alex-manool&quot;&gt; /u/alex-manool &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;/r/manool/comments/pffjh7/manool_fairly_readable_homoiconic_language_with/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pffxf3/manool_fairly_readable_homoiconic_language_with/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pffxf3</id><link href="https://www.reddit.com/r/lisp/comments/pffxf3/manool_fairly_readable_homoiconic_language_with/"><updated>2021-08-31T22:00:43+00:00</updated><published>2021-08-31T22:00:43+00:00</published><title>MANOOL: fairly readable homoiconic language with primarily value (non-referential) semantics that balances the programmer's productivity with scalability</title></entry><entry><author><name>/u/Moist-File4795</name><uri>https://www.reddit.com/user/Moist-File4795</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Hi, I am doing some research and compiling a list of most important topics in teaching Haskell and what can be very good examples to teach those topics. &lt;/p&gt; &lt;p&gt;So a list of topics that I have already listed are (Please correct me if i am wrong)&lt;/p&gt; &lt;ol&gt; &lt;li&gt;higher-order functions (HOF);&lt;/li&gt; &lt;li&gt;purity;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;recursion;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;referential transparency.&lt;/li&gt; &lt;li&gt;Strict and lazy evaluation&lt;/li&gt; &lt;li&gt;type systems.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;I would very much appreciate if you can guide me here. I am very new to Haskell and just exploring for the sake of comparison with OOP. I intend to persuade faculty to teach it as a full course.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Moist-File4795&quot;&gt; /u/Moist-File4795 &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pfg6kc/best_examples_to_learn_from/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pfg6kc/best_examples_to_learn_from/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pfg6kc</id><link href="https://www.reddit.com/r/haskell/comments/pfg6kc/best_examples_to_learn_from/"><updated>2021-08-31T22:14:24+00:00</updated><published>2021-08-31T22:14:24+00:00</published><title>Best Examples to learn from</title></entry><entry><author><name>/u/Serokell</name><uri>https://www.reddit.com/user/Serokell</uri></author><category term="haskell" label="r/haskell"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Serokell&quot;&gt; /u/Serokell &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://serokell.io/blog/dependency-analysis-haskell&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf7fg7/dependency_analysis_of_haskell_declarations/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf7fg7</id><link href="https://www.reddit.com/r/haskell/comments/pf7fg7/dependency_analysis_of_haskell_declarations/"><updated>2021-08-31T14:52:04+00:00</updated><published>2021-08-31T14:52:04+00:00</published><title>Dependency Analysis of Haskell Declarations</title></entry><entry><author><name>/u/simpl3t0n</name><uri>https://www.reddit.com/user/simpl3t0n</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I reckon the best way to get comfortable with the language is to put it to use on meaningful tasks. On that note, I was hoping to (at least, have a go at) rewrite a small, personal, script I use at work. That script requires connecting to an Oracle DB on Linux, however, and I&amp;#39;m not sure how to get started.&lt;/p&gt; &lt;p&gt;Python and Java have cx_Oracle and JDBC/Spring (respectively) offering plenty support out of the box. From a user perspective, their respective APIs take a database name (from which, I believe, the database is resolved via. $TNS_ADMIN and tnsnames.ora) and password. I couldn&amp;#39;t find any mention/examples that straight forward with Haskell.&lt;/p&gt; &lt;p&gt;The only &lt;a href=&quot;https://www.reddit.com/r/haskellquestions/comments/9gz3rz/advice_on_how_to_connect_to_an_oracle_database/&quot;&gt;related post&lt;/a&gt; I could find doesn&amp;#39;t offer much in terms of a solution. Do people use Haskell on OracleDB? Could I get some pointers?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/simpl3t0n&quot;&gt; /u/simpl3t0n &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf4t1q/connecting_to_oracle_db/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf4t1q/connecting_to_oracle_db/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf4t1q</id><link href="https://www.reddit.com/r/haskell/comments/pf4t1q/connecting_to_oracle_db/"><updated>2021-08-31T12:27:09+00:00</updated><published>2021-08-31T12:27:09+00:00</published><title>Connecting to Oracle DB</title></entry><entry><author><name>/u/clos-encounters</name><uri>https://www.reddit.com/user/clos-encounters</uri></author><category term="lisp" label="r/lisp"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/clos-encounters&quot;&gt; /u/clos-encounters &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://hyperthings.garden/posts/2021-08-30/freeing-your-goats.html&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pen5g9/savelispordie_followup_to_hell_is_other_repls/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pen5g9</id><link href="https://www.reddit.com/r/lisp/comments/pen5g9/savelispordie_followup_to_hell_is_other_repls/"><updated>2021-08-30T17:45:43+00:00</updated><published>2021-08-30T17:45:43+00:00</published><title>save-lisp-or-die followup to Hell Is Other REPLs</title></entry><entry><author><name>/u/MrPotatoRice</name><uri>https://www.reddit.com/user/MrPotatoRice</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I have on and off used Haskell a bit and have convinced myself to use it. I just got what Monads and the like actually do and mean. I can look at Haskell code and properly understand it, but as soon as I get to actually do some excersises or anything. I put down some code and it NEVER WORKS! It&amp;#39;s been like 6 months and I can&amp;#39;t write basic code. For the record I can and have coded applications (and guis) in other functional programming languages but can never wrap my head around how haskell wants me to think!&lt;/p&gt; &lt;p&gt;Can anyone give me any advice on how to improve or what to think when coding in Haskell?&lt;/p&gt; &lt;p&gt;Thanks in advance.&lt;/p&gt; &lt;p&gt;CLARITY: I like the GHC compiler but can&amp;#39;t get the result I am looking for. I have read the &amp;quot;Learn you a haskell for the great good&amp;quot; book. I am currently going through 99 problems in haskell. The real problem &lt;em&gt;i think i am having&lt;/em&gt; is recursion. I can only really code in (and have only properly tried) FP Languages like Lisp especially Common Lisp. &lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;Edit 0: English&lt;/p&gt; &lt;p&gt;Edit 1: Clarity&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/MrPotatoRice&quot;&gt; /u/MrPotatoRice &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf1tg4/how_to_think_haskell/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf1tg4/how_to_think_haskell/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf1tg4</id><link href="https://www.reddit.com/r/haskell/comments/pf1tg4/how_to_think_haskell/"><updated>2021-08-31T08:39:43+00:00</updated><published>2021-08-31T08:39:43+00:00</published><title>How to think Haskell?</title></entry><entry><author><name>/u/n00bomb</name><uri>https://www.reddit.com/user/n00bomb</uri></author><category term="haskell" label="r/haskell"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/n00bomb&quot;&gt; /u/n00bomb &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLyrlk8Xaylp6_QTmXGuRe3lShaRGaMtgc&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/peyirm/hiw_2021_videos/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_peyirm</id><link href="https://www.reddit.com/r/haskell/comments/peyirm/hiw_2021_videos/"><updated>2021-08-31T04:14:05+00:00</updated><published>2021-08-31T04:14:05+00:00</published><title>HIW 2021 Videos</title></entry><entry><author><name>/u/Fibreman</name><uri>https://www.reddit.com/user/Fibreman</uri></author><category term="lisp" label="r/lisp"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I needed a little bit more help than the info &lt;a href=&quot;https://gitlab.com/embeddable-common-lisp/ecl/-/blob/master/INSTALL&quot;&gt;that was in here&lt;/a&gt; to install ECL on my Windows Machine and I&amp;#39;m sure I&amp;#39;m not the only one. I&amp;#39;ve left some extra steps here that might be useful to someone else. &lt;/p&gt; &lt;p&gt;As a side note... I had trouble installing ecl in the C:\Program Files (I think b/c of the space in the name) so I ended up installing it in my home dir. I&amp;#39;m a linux guy so the command prompt is confusing for me :)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Getting ECL&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;Go to &lt;a href=&quot;https://gitlab.com/embeddable-common-lisp/ecl/-/tree/master&quot;&gt;https://gitlab.com/embeddable-common-lisp/ecl/-/tree/master&lt;/a&gt;&lt;/p&gt; &lt;p&gt;1a. Make sure you are on the master branch (unless you want the develop branch)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Download the zip file by clicking the download button (next to blue clone button)&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Extracting ECL&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;I want it in a folder called home in C:\home so I created a folder there called home. &lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Extract the zip file to your chosen folder (in my case home)&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Visual Studio&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Visual studio is needed to compile the files that you extracted &lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;Download Visual Studio &lt;a href=&quot;https://visualstudio.microsoft.com/&quot;&gt;https://visualstudio.microsoft.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Open Visual Studio&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;If you don&amp;#39;t have the developer command prompt in Tools &amp;gt; Command Line &amp;gt; Developer Command Prompt then..&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Open the Tools Tab&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Go to Extensions and Updates&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Search the market place for Visual Studio Command Prompt (devCmd)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Download it. Close Visual Studio and restart.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Open Visual Studio (RUN AS ADMINISTRATOR. If not it might not allow you to install ECL in the folder you want when you run the developer prompt)&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Open the Visual Studio command prompt in the Tools tab&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;In the Command Prompt cd C:\path\to\ecl-master or whatever the name of the unzipped folder was called&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;cd to the msvc folder inside the unzipped ecl folder&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Type nmake and hit enter in the command prompt&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;After that finishes run nmake install prefix=&amp;quot;C:\path\to\your\desired folder&amp;quot; ECL_WIN64=1 (I used ECL_WIN64 b/c it said that was the 64bit version in the INSTALL file)&lt;/p&gt; &lt;p&gt;13a. ECL will install all files into the given prefix folder. If you don&amp;#39;t a bunch of loose files in that folder make sure to specify a subfolder in your prefix path. I.E &lt;em&gt;C:\Program Files\ecl&lt;/em&gt; instead of C:\Program Files&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;Updating your Path variable so you can launch ecl from the cmd prompt&lt;/p&gt; &lt;p&gt;1 Click the start button on your desk top&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;p&gt;Type the word &amp;quot;path&amp;quot;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Click &amp;quot;Edit the system environment variables&amp;quot; result&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Click the Environment Variables button in the System Properties window&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Scroll through the System variables window and double click path&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Click the new button&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Type the path to your ecl folder with the ecl executable in it. In my case it&amp;#39;s C:\home\ecl&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Save and close the window&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Open cmd prompt and type ecl then hit enter&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;ECL should launch&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Type (quit) in the ECL repl to quit ;)&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Fibreman&quot;&gt; /u/Fibreman &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/petce1/guide_how_to_install_ecl_on_windows_10/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/petce1/guide_how_to_install_ecl_on_windows_10/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_petce1</id><link href="https://www.reddit.com/r/lisp/comments/petce1/guide_how_to_install_ecl_on_windows_10/"><updated>2021-08-30T22:59:38+00:00</updated><published>2021-08-30T22:59:38+00:00</published><title>[Guide] How to install ECL on Windows 10</title></entry><entry><author><name>/u/kuberlog</name><uri>https://www.reddit.com/user/kuberlog</uri></author><category term="lisp" label="r/lisp"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/kuberlog&quot;&gt; /u/kuberlog &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2mW3UlxBcxc&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pexy5h/how_the_symbolic_ai_lisp_crowd_got_things_right/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pexy5h</id><link href="https://www.reddit.com/r/lisp/comments/pexy5h/how_the_symbolic_ai_lisp_crowd_got_things_right/"><updated>2021-08-31T03:35:29+00:00</updated><published>2021-08-31T03:35:29+00:00</published><title>How the symbolic AI lisp crowd got things right in a BIG WAY.</title></entry><entry><author><name>/u/zerexim</name><uri>https://www.reddit.com/user/zerexim</uri></author><category term="scheme" label="r/scheme"/><content type="html">&amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/zerexim&quot;&gt; /u/zerexim &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/scheme/&quot;&gt; r/scheme &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;/r/lisp/comments/pe074h/any_updatesreviews_for_software_design_for/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/scheme/comments/pehe77/any_updatesreviews_for_software_design_for/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pehe77</id><link href="https://www.reddit.com/r/scheme/comments/pehe77/any_updatesreviews_for_software_design_for/"><updated>2021-08-30T12:47:12+00:00</updated><published>2021-08-30T12:47:12+00:00</published><title>Any updates/reviews for Software Design for Flexibility book?</title></entry><entry><author><name>/u/Suedie</name><uri>https://www.reddit.com/user/Suedie</uri></author><category term="haskell" label="r/haskell"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;I keep getting an error:&lt;/p&gt; &lt;p&gt;dyld: lazy symbol binding failed: Symbol not found; _utimensatReferenced from: /Users/Mac/.ghcup/bin/ghcup (which was built for Mac OS X 10.13)Expected in: /usr/lib/libsystem.B.dylib&lt;/p&gt; &lt;p&gt;dyld: Symbol not found: _utimensatReferenced from: /Users/Mac/.ghcup/bin/ghcup (which was built for Mac OS X 10.13)Expected in: /usr/lib/libsystem.B.dylib&lt;/p&gt; &lt;p&gt;sh: line 100: 504 Trace/BPT trap: 5 &amp;quot;${GHCUP_BIN}/ghcup&amp;quot; ${args} &amp;quot;$@&amp;quot;&amp;quot;_eghcup upgrade&amp;quot; failed!&lt;/p&gt; &lt;p&gt;&amp;#x200B;&lt;/p&gt; &lt;p&gt;Sorry for the shitty formatting. I&amp;#39;m completely new to programming so I don&amp;#39;t really know what any of this means or what to do. I tried looking for solutions but it seems many of the answers are very outdated. I did manage to install stack, could I use stack to install ghc?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/Suedie&quot;&gt; /u/Suedie &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/haskell/&quot;&gt; r/haskell &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf3gc6/having_trouble_installing_ghc_on_an_old_macbook/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/haskell/comments/pf3gc6/having_trouble_installing_ghc_on_an_old_macbook/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pf3gc6</id><link href="https://www.reddit.com/r/haskell/comments/pf3gc6/having_trouble_installing_ghc_on_an_old_macbook/"><updated>2021-08-31T10:54:08+00:00</updated><published>2021-08-31T10:54:08+00:00</published><title>Having trouble installing GHC on an old Macbook (El Capitan)</title></entry><entry><author><name>/u/stuudente</name><uri>https://www.reddit.com/user/stuudente</uri></author><category term="lisp" label="r/lisp"/><content type="html">&lt;!-- SC_OFF --&gt;&lt;div class=&quot;md&quot;&gt;&lt;p&gt;Most of programming boils down to data and transformation, at least traditionally. Recently it seems that there are more and more need to include &lt;code&gt;PROOF&lt;/code&gt; into the paradigm. What do I mean?&lt;/p&gt; &lt;p&gt;Well, data and transformation are nice, but it will be great if we can easily argue if, say, a function is going to act exactly as we expect! The old way is to write some tests, and hopefully no edge cases slip through. However, for some scenario having a strong proof could be useful and eventually save us time!&lt;/p&gt; &lt;p&gt;For example, in Haskell or typed Racket, we must attach a type to a function. This way &lt;a href=&quot;https://www.youtube.com/watch?v=XTl7Jn_kmio&quot;&gt;eliminates&lt;/a&gt; a lot of long-term bugs! I hope to bring this to a stronger extreme, and define a paradigm in which functions&amp;#39; behaviors can be argued.&lt;/p&gt; &lt;p&gt;Lisp is of course fully extendable, so I wonder how I can achieve that with it. Namely, how to define a new class of functions that are more predicable, in the sense that a rigorous proof can be provided?&lt;/p&gt; &lt;p&gt;E.g.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;(defvar *proof* #|insert-a-mathematical-proof|#) (equalf (lambda (n) (apply #&amp;#39;+ (loop for k from 1 to n collect k)) ;; 1+2+..+n (lambda (n) (/ (* n (+ n 1)) 2))) ;; n(n+1)/2 :proof *proof* :class &amp;#39;N-&amp;gt;N) ;; =&amp;gt; t (is-pure-function (lambda () 1)) ;; =&amp;gt; t (is-pure-function (lambda () *X*) ;; =&amp;gt; nil &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href=&quot;https://www.reddit.com/user/stuudente&quot;&gt; /u/stuudente &lt;/a&gt; &amp;#32; to &amp;#32; &lt;a href=&quot;https://www.reddit.com/r/lisp/&quot;&gt; r/lisp &lt;/a&gt; &lt;br/&gt; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pey8vk/data_transformation_and_proof/&quot;&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href=&quot;https://www.reddit.com/r/lisp/comments/pey8vk/data_transformation_and_proof/&quot;&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content><id>t3_pey8vk</id><link href="https://www.reddit.com/r/lisp/comments/pey8vk/data_transformation_and_proof/"><updated>2021-08-31T03:55:38+00:00</updated><published>2021-08-31T03:55:38+00:00</published><title>data, transformation, and PROOF!</title></entry></feed>