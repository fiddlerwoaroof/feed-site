<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
        <link>https://www.smashingmagazine.com/</link>
        <description>Recent content in Articles on Smashing Magazine — For Web Designers And Developers</description>
        <lastBuildDate>Thu, 17 Nov 2022 12:33:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>manual</generator>
        <language>en</language>
        <image>
            <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
            <url>https://www.smashingmagazine.com/images/favicon/app-icon-512x512.png</url>
            <link>https://www.smashingmagazine.com/</link>
        </image>
        <copyright>All rights reserved 2022, Smashing Media AG</copyright>
        <category>Development</category>
        <category>Design</category>
        <category>UX</category>
        <category>Mobile</category>
        <category>Front-end</category>
        <atom:link href="https://www.smashingmagazine.com/feed/" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[A Guide To Image Optimization On Jamstack Sites]]></title>
            <link>https://smashingmagazine.com/2022/11/guide-image-optimization-jamstack-sites/</link>
            <guid>https://smashingmagazine.com/2022/11/guide-image-optimization-jamstack-sites/</guid>
            <pubDate>Thu, 17 Nov 2022 10:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Alba Silvente shows us the theoretical and practical solutions to the most common problems when working with images and how to automate them by using a headless CMS and an image CDN.]]></description>
            <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.storyblok.com/">Storyblok</a></p>
<p>Today, creating content on the Internet is the norm, not the exception. It has never been easier to build a personalized website, digitalize a product and start seeing results. But what happens when we all start creating content on a massive scale, filling the web with more and more data, and storing hundreds of zettabytes of content?</p>
<p>Well, it is right at that moment when big brands and hosting platforms, such as Google or Netlify, seek solutions to optimize the data we generate, make the web lighter, and therefore faster, promoting measures and techniques to improve our website’s performance, and rewarding those who do so with better positions in the ranking of their search engines. That is why, today, Web Performance is as important and trendy as having an online presence.</p>
<p><strong>Table of Contents:</strong></p>
<ul>
<li><a href="#what-is-web-performance">What Is Web Performance?</a></li>
<li><a href="#why-image-optimization-is-so-important-for-a-jamstack-site">Why Image Optimization Is So Important For A Jamstack Site?</a></li>
<li><a href="#fixes-to-common-problems">Fixes To Common Problems</a></li>
<li><a href="#the-benefits-of-using-an-image-service-cdn">The Benefits Of Using An Image Service CDN</a></li>
<li><a href="#case-study-image-component-in-a-jamstack-site">Case Study: Image Component In A Jamstack Site</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h3>What Is Web Performance?</h3>
<p>Web performance refers to the speed at which a website loads, how fast it’s downloaded, and how an app is displayed on the user’s browser. It is both the objective measurement and the perceived user experience (UX) of an application.</p>
<p>If you minimize load times, improve UX and make your website faster, more users will be able to access your site regardless of device or Internet connection, increase visitor retention, loyalty, and user satisfaction, and this will ultimately help you achieve your business goals and rank better in search engines.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/790d7f1b-3b90-4399-b457-3a1a312959b3/webpage-performance-test-report-for-the-smashing-magazine-website.png" /></p>
<h4>The Relation Between Images And Web Performance</h4>
<p>It is clear that when we think of content, the first thing that comes to mind is text. But if we leave text aside, what other options are left? Video? Images? Yes, images play a very important role on the web today, not only on platforms that are 100% focused on this asset, such as <a href="https://www.pinterest.com/">Pinterest</a> or <a href="https://unsplash.com/">Unsplash</a>, but on most of the web pages we browse on a daily basis.</p>
<blockquote>According to the Web Almanac in late 2021, 95.9 percent of pages contain at least one <code>&lt;img&gt;</code> tag, and 99.9 percent have generated at least one request for an image resource.<br /><br />— <a href="https://almanac.httparchive.org/en/2021/media#images">Media, Images, Web Almanac 2021 chapter</a></blockquote>

<p>And, just as the use of images is so present in content creation, <strong>optimizing them is key to improving our page load speed</strong> and rendering it in the shortest possible time, as images are responsible for more bytes than any other resource. Although in the last years, the size of the image transfer per page has been reduced, thanks to the use of new image optimization techniques, there is still a lot of work to be done.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8fea09bb-c4cc-4df6-9b7d-970cac4d6f39/mobile-image-transfer-size-by-year.png" /></p>
<p>Images are crucial elements for performance and UX, and data extracted from <a href="https://web.dev/vitals/">Core Web Vitals</a> metrics such as <a href="https://web.dev/lcp/">Largest Contentful Paint</a>, which attempts to identify the most important piece of the above-the-fold content on a given page, proves this.</p>
<p>According to the analysis carried out in <a href="https://almanac.httparchive.org/en/2021/performance#largest-contentful-paint-lcp">the performance section of Web Almanac</a>, the <code>img</code> tag represents <strong>42% of the LCP elements</strong> of websites, while <strong>71-79%</strong> of the pages <strong>have an image</strong> as an LCP element, because they can also be applied as background using CSS. This data makes it clear that there will be no good performance without well-optimized images.</p>
<blockquote>Key <a href="https://web.dev/vitals/">user-centric metrics</a> often depend on the size, number, layout, and loading priority of images on the page. This is why a lot of our guidance on performance talks about image optimization.<br /><br />— <a href="https://addyosmani.com/">Addy Osmani</a></blockquote>

<h3>Why Image Optimization Is So Important For A Jamstack Site?</h3>
<p>As you may already know, image optimization is the process that a high-quality image has to go through to be delivered in ideal conditions, sometimes with the help of an <a href="https://cloudinary.com/documentation/image_transformations">Image Transformation API</a> and a global <a href="https://www.cloudflare.com/learning/cdn/what-is-a-cdn/">Content Delivery Network (CDN)</a> to make the process simpler and scalable.</p>
<p>And while optimizing images is a must in any application, in the Jamstack ecosystem, it is even more paramount, considering that one of the main goals of the Jamstack architecture is to improve web performance.</p>
<blockquote>Jamstack is an architectural approach that decouples the web experience layer from data and business logic, improving flexibility, scalability, performance, and maintainability.<br /><br />— <a href="https://jamstack.org/">Jamstack.org</a></blockquote>

<p>A Jamstack site is decoupled: the front end is separated from the backend and pre-built into <strong>highly optimized static pages</strong> before being deployed. But it’s not all static. It also allows dynamic content by using JS and APIs to talk to backend services.</p>
<p>And you might ask, what do images have to do with this static site architecture? As Web Almanac addresses in the section on <a href="https://almanac.httparchive.org/en/2021/jamstack#images">the impact of images on Jamstack sites</a>, <strong>images are the main bottleneck for a good UX</strong>. Most of the blame lies with using older formats, such as PNG and JPEG, instead of using the next generation ones, such as WebP or AVIF, making the user wait too long and producing poor scores in Core Web Vitals metrics.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/857ccca6-78fb-4919-a84c-7adef9970d0c/static-site-generators-adoption-by-image-format.png" /></p>
<p>But if you’re worried that you’re not getting the performance you expected because of large, poorly optimized images, don’t worry because that’s what you’re reading this article for!</p>
Fixes To Common Problems
<p>In most web performance measurement tools, such as <a href="https://www.webpagetest.org/">WebPageTest</a> or <a href="https://pagespeed.web.dev/">PageSpeed Insights</a>, when we generate a report on the status of our website, we can find parameters related to images. These parameters talk about the size, format, encoding, and so on, namely how optimized our images are.</p>
<p>In this section, we will enumerate the problems that usually appear due to the use of images and what would be the theoretical optimization technique for each of them.</p>
<h3>1. Use Compressed Files</h3>
<p>Imagine working on a project like <a href="https://dev.to">DEV.to</a>, where hundreds of people can upload content to your platform without being reviewed. In such a case, it would be expected for your project to have <strong>large, high-resolution images</strong>, as not everyone is aware of the bandwidth consumption and the slowdown in loading times that this entails.</p>
<h4>Solution</h4>
<p>Clearly, we want to give freedom to our content creators, but we can leave to chance neither the resolution nor the speed of delivery and download of the images that will be displayed on our website.</p>
<p>The solution is to optimize our images, <strong>compressing them and reducing their size</strong> with almost no loss of quality. There’re two well-known compression techniques:</p>
<ol>
<li><strong>Lossy compression</strong><br />This compression type uses algorithms that <strong>eliminate the less critical data to reduce the file size</strong>.<br />When considering the use of this lossy technique, we must keep two things in mind: by discarding part of the image information, the <strong>image quality will be negatively impacted</strong>, and if someone were to compress a picture with this technique and we wanted to compress it again, it would lose even more quality.</li>
<li><strong>Lossless compression</strong><br />On the other hand, lossless compression <strong>compresses the data without interfering with the image quality</strong>.<br />This technique allows the images not to lose quality in subsequent compressions. Still, it leads to a larger file size, which we try to avoid in cases where quality is not a game changer for the project’s value proposition.</li>
</ol>
<p><strong>When deciding on one of these techniques, the most important thing is to know our users</strong> and what they are looking for from our website. If we think about social networks, we can see two clear trends, those focusing on text and those focusing on multimedia content.</p>
<p>It is clear that for text-focused social networks, losing a little bit of image quality is not a big problem for them and can reduce a fifth of the image file size, which would mean a big increase in performance. So it is clear that lossy compression would be the ideal technique for that case. However, for social networks focused on image content, the most important thing is delivering images with exceptional quality, so lossless compression would play a better role here.</p>
<p><strong>Tip:</strong> <em>While using an Image Service CDN, compression is usually included, but it is always good to know more tools that can help us compress our images. For that, I bring you open-source tools that you can use to add image compression to your development workflow:</em></p>
<ul>
<li><a href="https://github.com/calibreapp/image-actions">Calibre Image Actions</a> is a GitHub Action built by performance experts at <a href="https://calibreapp.com/">Calibre</a> that automatically compresses JPEGs, PNGs, and WebPs in Pull Requests;</li>
<li><a href="https://github.com/imgbot/Imgbot">Imgbot</a>, which will crawl your image files in GitHub and submit pull requests after applying a lossless compression.</li>
</ul>
<h3>2. Serve In Next-generation (Next-gen) Formats, Encode Efficiently</h3>
<p>Part of the problem above may be due to the <strong>use of older image formats</strong> such as JPG and PNG, which provide <strong>worse compression and larger file sizes</strong>. But not only is compression an essential factor in deciding whether to adopt a next-gen image format, but also the speed of its encoding/decoding and the quality improvement.</p>
<p>While it is true that in recent years we have heard a lot about next-gen formats such as WebP, AVIF, or JPEG XL, it is still surprising how many websites have not migrated to these formats and continue <strong>providing bad UX and bad performance results</strong>.</p>
<h4>Solution</h4>
<p>It is time for us to move to a better world, where the compression of our images and their quality have no direct relationship, where we can make them take up as little space as possible without changing their visual appearance, and where next-gen formats are used.</p>
<p><strong>By using next-gen formats</strong>, we will be able to <strong>reduce the size of our images considerably</strong>, making them <strong>download faster</strong> and consume <strong>less bandwidth</strong>, improving the UX and performance of our website.</p>
<blockquote>“Modern image formats (AVIF or WebP) can improve compression by up to 50% and deliver better quality per byte while still looking visually appealing.”<br /><br />— Addy Osmani (Image optimization expert)</blockquote>

<p>Let’s look at the two most promising formats and how they differ from each other.</p>
<ul>
<li><strong>WebP</strong></li>
</ul>
<p>It is an image format that <strong>supports lossy and lossless</strong> compression, reducing file size by 25-34% compared to JPEG, as well as <strong>animation</strong> and alpha <strong>transparency</strong>, offering 26% less file size than PNG. It was a clear substitute for these formats until <a href="https://caniuse.com/avif">AVIF</a> and <a href="https://caniuse.com/jpegxl">JPEG XL</a> came out.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7aabd11f-4c71-4808-a9fb-6f7745b4e6d7/webp-image-format-caniuse.png" /></p>
<p>Its advantages are its <strong>uniform support across most modern browsers</strong>, its lossless 8-bit transparency channel and lossy RGB transparency, and support for metadata of various types and animations. On the other hand, it does not support HDR or wide-gamut images, nor does it support progressive decoding.</p>
<ul>
<li><strong>AVIF</strong></li>
</ul>
<p>It is an open-source AV1 image file format for <strong>storing still and animated images with better lossy and lossless compression</strong> than most popular formats on the web today, offering a 50% saving in file size compared to JPEG. It is in direct competition with <a href="https://caniuse.com/jpegxl">JPEG XL</a>, which has similar compression quality but more features.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f19d0b8-2243-4908-bb0d-5cb8e77a1f74/avif-image-format-caniuse.png" /></p>
<p>The advantages of the AVIF format are that it <strong>supports animations and graphic elements</strong> where JPEG has limitations, <strong>improves JPEG and WebP compression</strong>, supports 12-bit color depth enabling HDR and wide color gamut, monochrome and multichannel images, and transparencies with alpha channel. However, <strong>the major drawback</strong> of AVIF is that it is <strong>not compatible with all browsers</strong> and its encoding/decoding is more expensive in terms of time and CPU, causing some Image CDNs to still not apply AVIF as an automatic format.</p>
<p><strong>Note</strong>: <em>If you want to know the differences between each format in detail, I recommend you read the article “<a href="https://www.smashingmagazine.com/2021/09/modern-image-formats-avif-webp/">Using Modern Image Formats: AVIF And WebP</a>” by Addy Osmani, and trying out the <a href="https://avif-webp-quality-setting.industrialempathy.com/">AVIF and WebP quality settings picker tool</a>.</em></p>
<p>And remember, regardless of which format you choose, if you want an effective result, you must generate the compressed files from a master image of the best possible quality.</p>
<p><strong>Extra tip</strong>: <em>Suppose you want to take advantage of the features of an image format with limited browser support. In that case, you can always use the <code>&lt;picture&gt;</code> HTML tag, as shown in the code below, so that the browser can pick the image format supported in the order provided.</em></p>
<pre><code>&lt;picture&gt;
    &lt;!-- If AVIF is not supported, WebP will be rendered. --&gt;
    &lt;source srcset="img/image.avif" type="image/avif"&gt;
    &lt;!-- If WebP is not supported, JPG will be rendered --&gt;
    &lt;source srcset="img/image.webp" type="image/webp"&gt;
    &lt;img src="img/image.jpg" width="360" height="240" alt="The last format we want"&gt;
&lt;/picture&gt;
</code></pre>

<h3>3. Specify The Dimensions</h3>
<p>When the <strong><code>width</code> and <code>height</code> attributes have not been added</strong> to the <code>&lt;img&gt;</code> tag, the browser cannot calculate the aspect ratio of the image and therefore does <strong>not reserve a correctly sized placeholder box</strong>. This leads to a layout shift when the image loads, causing performance and usability issues.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6070530f-1e89-4d43-a993-fb4e12a5bc24/image-width-and-height-missing-example.png" /></p>
<h4>Solution</h4>
<p>As developers, it is in the palm of our hands to improve the UX and make the layout shifts less likely to happen. We already have part of the way done by adding <code>width</code> and <code>height</code> to the images.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06254d2e-5911-4d39-a4b4-e3015fa36b89/image-width-and-height-included-example.png" /></p>
<p>At first glance, it seems like a simple task, but in the background, browsers do a tedious job of calculating the size of these images in different scenarios:</p>
<ul>
<li><strong>For images that are resized in responsive design.</strong></li>
</ul>
<p>If we have a responsive design, we will want the image to stay within the margins of the container, using the CSS below for that:</p>
<pre><code>img {
  max-width: 100%;
  height: auto;
}
</code></pre>

<p>For browsers to calculate the aspect ratio and then the correct size of our images before loading, our <code>&lt;img&gt;</code> tag must contain the defined <code>height</code> and <code>width</code> attributes when we specify the height (or width) in the CSS and the opposite property, width (or height), as auto. </p>
<p>If there is no <code>height</code> attribute in the <code>&lt;img&gt;</code>, the CSS above sets the height to 0 initially, and therefore there will be a content shift when the image loads.</p>
<div>
<pre><code>&lt;img src="image.webp" width="700" height="500" alt="The perfect scenario"&gt;

&lt;style&gt;
img {
    max-width: 100%;
  height: auto;
}
&lt;/style&gt;
</code></pre>
</div>

<ul>
<li><strong>For responsive images that can change their aspect ratio.</strong></li>
</ul>
<p>In the latest versions of Chromium, you can set <a href="https://github.com/whatwg/html/pull/5894"><code>width</code> and <code>height</code> attributes on <code>&lt;source&gt;</code> elements</a> inside <code>&lt;picture&gt;</code>. This allows the parent container to have the right height before the image is loaded and to avoid layout shifts for different images.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30de7f62-680c-4ca6-93e7-00dfb4b9e790/width-html-source-element-caniuse.png" /></p>
<div>
<pre><code>&lt;picture&gt;
  &lt;source media="(max-width: 420px)" srcset="small-image.webp" width="200" height="200"&gt;
  &lt;img src="image.webp" width="700" height="500" alt="Responsive images with different aspect ratios."&gt;
&lt;/picture&gt;
</code></pre>
</div>

<p><strong>Note</strong>: <em>To know more about this topic, I recommend you to look at the article “<a href="https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/">Setting Height And Width On Images Is Important Again</a>” by Barry Pollard.</em></p>
<h3>4. Optimize Images For All Devices, And Resize them Appropriately</h3>
<p>Usually, with CSS, we have the superpower to make our images occupy the space we want; the problem is that all superpower comes with great responsibility. <strong>If we scale an image without previously having optimized it for that use case, we will make the browser load an image with an inadequate size</strong>, worsening the loading time.</p>
<p>When we talk about images that are not optimized for the device and/or viewport on which they are displayed, there are three different cases:</p>
<ul>
<li><strong>The change of resolution</strong><br />When large images intended for desktops are displayed on smaller screens consuming up to 4 times more data, or vice versa, from mobile to desktop, losing image quality when enlarged.   </li>
<li><strong>The change of pixel density</strong><br />When images resized by pixels are represented on screens with higher pixel density and not providing the best image quality.</li>
<li><strong>The change of design</strong><br />When an image with important details loses its purpose on other screen sizes by not serving a cropped image highlighting them.</li>
</ul>
<h4>Solution</h4>
<p>Fortunately, today we have responsive image technologies to solve the three problems listed above by offering different versions, in size, resolution, and/or design, of each image to browsers so that they determine which image to load based on the user’s screen size, and/or device features.</p>
<p>Now let’s see how these solutions are implemented in HTML for each case:</p>
<p>1. <strong>Resolution change fix:</strong> Responsive images with different sizes</p>
<p>The solution is to <strong>properly resize the original image</strong> according to the viewport size.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/24d9944a-a85c-4acd-8f35-162f811b4794/responsive-images-with-different-sizes.png" /></p>
<p>To do this, using the <code>&lt;img&gt;</code> tag with the <code>src</code> attribute won’t be enough since it only allows to specify an image file to the browser. But by adding the <a href="https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-srcset"><code>srcset</code></a> and <a href="https://developer.mozilla.org/docs/Web/HTML/Element/img#attr-sizes"><code>sizes</code></a> attributes, we can specify more versions of the same image and media conditions so the browser can choose which one to display.</p>
<p>Let’s see a simple example of a responsive image and understand each attribute:</p>
<div>
<pre><code>&lt;img
    src="image-desktop.webp"
    srcset="image-mobile.webp 360w, image-tablet.webp 760w, image-desktop.webp 1024w"
    sizes="(max-width: 1024px) calc(100vw - 4rem), 1024px"
    alt="Image providing 3 different sizes for 3 viewports"&gt;
</code></pre>
</div>

<ul>
<li><strong><code>src</code></strong><br />We must always add the <code>src</code> attribute to our images just in case the browser does not support <code>srcset</code> and <code>sizes</code> attributes. The <code>src</code> will serve as a fallback, so adding an <strong>image large enough</strong> to work on most devices is crucial.</li>
<li><strong><code>srcset</code></strong><br />The <code>srcset</code> attribute is used to define a <strong>set of images with their corresponding width descriptors</strong> (image widths represented in the unit <strong>w</strong>), separated by commas, from which the browser can choose.<br />In the above example, we can see that <code>360w</code> is a width descriptor that tells the browser that image-mobile.webp is 360px wide.</li>
<li><strong><code>sizes</code></strong> [Optional]<br />The <code>sizes</code> attribute ensures that <strong>responsive images are loaded based on the width they occupy</strong> in the viewport and not the screen size.<br />It consists of a comma-separated <strong>list of media queries that indicate how wide the image will be when displayed</strong> under specific conditions, ending with a fixed width value as a default value.</li>
</ul>
<p><strong>Note</strong>: <em>Units such as <code>vw</code>, <code>em</code>, <code>rem</code>, <code>calc()</code>, and <code>px</code> can be used in this attribute. The only unit that cannot be used is the percentage (<code>%</code>).</em></p>
<p>Once we have our responsive image ready, it is <strong>up to the browser to choose the correct version using the parameters specified</strong> in the <code>srcset</code> and <code>sizes</code> attributes and what it knows about the <strong>user’s device</strong>.</p>
<p>The browser process consists of knowing the device width, checking the <code>sizes</code> attribute, and then choosing from the <code>srcset</code> images the one that has that width. If there is no image with that width, the browser will choose the first one larger than the size got from <code>sizes</code> (as long as the screen is not high-density).</p>
<p>2. <strong>Device’s pixel density change fix:</strong> Responsive images with different resolutions</p>
<p>The solution is to allow the <strong>browser to choose an appropriate resolution image</strong> for each display density.</p>
<table>
    <thead>
        <tr>
            <th>Device vs CSS Pixels</th>
            <th>360px width image by screen resolution</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1 device pixel = 1 CSS pixel</td>
            <td>360px</td>
        </tr>
        <tr>
            <td>2 device pixels = 1 CSS pixel</td>
            <td>720px</td>
        </tr>
        <tr>
            <td>3 device pixels = 1 CSS pixel</td>
            <td>1440px</td>
        </tr>
    </tbody>
</table>

<p>To achieve this, we will use <code>srcset</code> again, but this time, with <strong>density descriptors, used to serve different images based on the device pixel density</strong>, not the image size, and without the need to specify the <code>sizes</code> attribute:</p>
<div>
<pre><code>&lt;img
    src="image-1440.webp"
    srcset="image-360.webp 1x, image-720.webp 2x, image-1440.webp 3x"
    alt="Image providing 3 different resolutions for 3 device densities"&gt;
</code></pre>
</div>

<ul>
<li><strong><code>src</code></strong><br />Having <em><code>image-1440.webp</code></em> as a fallback version.</li>
<li><strong><code>srcset</code></strong><br />In this case, the <code>srcset</code> attribute is used to specify an image for each density descriptor, 1x, 2x, and 3x, telling the browser which image is associated with each pixel density.<br />For this case, if the device’s pixel density is 2.0, the browser will choose the image version <em>image-720.webp</em>.</li>
</ul>
<p>3. <strong>Design change fix:</strong> Different images for different displays</p>
<p>The solution is to <strong>provide a specially designed image with different ratios or focus points for each screen size</strong>, a technique known as <strong>art direction</strong>.</p>
<blockquote><a href="https://developer.mozilla.org/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#Art_direction"><strong>Art direction</strong></a> is the practice of serving completely different looking images to different viewports sizes to improve visual presentation, rather than different size versions of the same image.</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8fe6025-74b7-494e-b297-dbef682bdb6c/art-direction-responsive-image-example.png" /></p>
<p>The art direction technique makes this possible through the <code>&lt;picture&gt;</code> tag, which contains several <code>&lt;source&gt;</code> tags providing the different images from which the browser will choose, and adding <code>&lt;img&gt;</code> as a fallback:</p>
<div>
<pre><code>&lt;picture&gt;
  &lt;source media="(max-width: 420px)" srcset="image-mobile.webp" width="360" height="280"&gt;
  &lt;source media="(max-width: 960px)" srcset="image-tablet.webp" width="760" height="600"&gt;
  &lt;img src="image-desktop.webp" width="1024" height="820" alt="Image providing 3 different images for 3 displays"&gt;
&lt;/picture&gt;
</code></pre>
</div>

<ul>
<li><strong><code>picture</code></strong><br />The wrapper of the different images brought by 0 or more <code>&lt;source&gt;</code> and an <code>&lt;img&gt;</code>.</li>
<li><strong><code>source</code></strong><br />Each <code>&lt;source&gt;</code> tag specifies a media resource, in this case, an image, with its <code>srcset</code> attribute being the file path to that resource.<br /><strong>The order of placement</strong> of this tag <strong>matters</strong>. <strong>The browser will read the conditions</strong> defined in the <code>media</code> attribute of each <code>&lt;source&gt;</code> <strong>from top to bottom</strong>. If any of them are true, it will display that image, and if the subsequent ones are true, they won’t be read.<br />An example would be the <code>media="(max-width: 960px)"</code> of the second <code>&lt;source&gt;</code>. If the viewport’s width is 960px or less but more than 420px, <em><code>image-tablet.webp</code></em> will be displayed, but if it is less than 420px, <em><code>image-mobile.webp</code></em> will be displayed.</li>
<li><strong><code>img</code></strong><br />When a browser does not support the <code>&lt;picture&gt;</code> or <code>&lt;source&gt;</code> tags or none of the media queries are met, the <code>&lt;img&gt;</code> tag will act as a fallback or default value and will be loaded. Therefore, it is crucial to add an appropriate size that will work in most cases.</li>
</ul>
<p><strong>Extra tip</strong>: <em>You can combine the art direction technique with different resolutions.</em></p>
<div>
<pre><code>&lt;picture&gt;
  &lt;source media="(max-width: 420px)" srcset="image-mobile.webp 1x, image-mobile-2x.webp 2x" width="360" height="280"&gt;
  &lt;source media="(max-width: 960px)" srcset="image-tablet.webp 1x, image-tablet-2x.webp 2x" width="760" height="600"&gt;
  &lt;img src="image-desktop.webp" srcset="image-desktop.webp 1x, image-desktop-2x.webp 2x" width="1024" height="820" alt="Image providing 6 different images for 3 displays and 6 pixels density"&gt;
&lt;/picture&gt;
</code></pre>
</div>

<p>By making use of width and pixel density at the same time, you can amplify the criteria for which an image source is displayed.</p>
<p><strong>Note</strong>: <em>If you want to learn about tools that can help you crop and resize your images efficiently, you can take a look at <a href="https://web.dev/serve-responsive-images/">Serve Responsive Images</a> by web.dev.</em> </p>
<h3>5. <strong>Load your images after critical resources</strong></h3>
<p>By default, if we do not specify the priority of our images, the browser will load them before the critical resources of our site, causing poor performance and increasing the <strong>Time To Interactive (TTI)</strong>.</p>
<h4>Solution</h4>
<p>Fortunately, native solutions such as <a href="https://web.dev/browser-level-image-lazy-loading/">lazy loading</a> allow us to defer off-screen images, the ones the user does not see initially, and focus on the most important ones, the images above the fold.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a24b6d11-aa2c-4e13-b57a-1ef072bfa6e0/lazy-loading-attribute-caniuse.png" /></p>
<p>To make use of this native solution, we must add the <code>loading</code> attribute to our images with the <strong>lazy</strong> value:</p>
<div>
<pre><code>&lt;!-- Native lazy loading --&gt;
&lt;img src="image.webp" loading="lazy" width="700" height="500" alt="Loaded by appearance"&gt;
</code></pre>
</div>

<p>The <code>loading</code> attribute can have two values:</p>
<ul>
<li><code>lazy</code>: Postpones the loading of the resource until it reaches the viewport.</li>
<li><code>eager</code>: Loads the resource immediately, regardless of where it is.<br />Although this is the browser’s default behavior, it can be helpful in cases where you prefer to set <code>loading="lazy"</code> automatically on all your images and manually specify which ones will be visible first.</li>
</ul>
<blockquote>Since our goal is to defer images that do not appear above the fold, we mustn’t add the <code>loading</code> attribute for those displayed first. Otherwise, we can set the <code>loading="eager"</code> and add <code>fetchpriority="high"</code> to load them quicker.</blockquote>

<p><strong>Extra tip</strong>: <em>Responsive images using the <code>&lt;picture&gt;</code> element can also be lazy-loaded only, including the <code>loading</code> attribute to the fallback <code>&lt;img&gt;</code> element.</em></p>
<pre><code>&lt;picture&gt;
  &lt;source media="(max-width: 420px)" srcset="image-mobile.webp"&gt;
  &lt;img src="image-desktop.webp" loading="lazy"&gt;
&lt;/picture&gt;
</code></pre>

<h3>6. Cache Your Images</h3>
<p>A website’s performance can suffer if frequently accessed images are not cached, as <strong>many requests will be made to images</strong> that have already been loaded in the user’s system.</p>
<p>Users should be able to view the images directly from their system and not wait again for them to download.</p>
<h4>Solution</h4>
<p>The solution is to <strong>store the heavily accessed images</strong> at the end of the user’s browser cache and use a CDN service to cache them on the server for you.</p>
<p><strong>Note</strong>: <em>To understand how the cache works for a user and the different strategies we can follow, I recommend the talk and article “<a href="https://web.dev/love-your-cache/">Love your cache</a>” by <a href="https://web.dev/authors/samthor/">Sam Thorogood</a>.</em></p>
<p>Once we have an optimization technique for each of the problems that images bring us, it is worth remembering that there are more things to consider for the accessibility and SEO of our images, such as the <code>alt</code> attribute, the file name, and its metadata.</p>
<p>That said, it is time to see how an image service will save us hundreds of headaches. Let’s go there! 🚀</p>
The Benefits Of Using An Image Service CDN
<p>All the solutions to the problems we have seen in the previous section could be solved with external tools. But why complicate things if we can just use an Image Service CDN, saving us time, reducing infrastructure costs, and automating and scaling the image optimization?</p>
<p>An Image Service CDN is a <strong>combination of an Image Transformation API and a CDN network</strong>. It allows you to <strong>transform images on the fly</strong> by adding a few extra parameters in the URL and delivering them to users through a <strong>fast CDN with optimized caching</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfc8bb81-2bcb-4925-9ec7-df7eb671b05b/image-service-cdn-composition.png" /></p>
<p><strong>The image transformations provided</strong> by this kind of service include modifying their <strong>format, focal point, and size by cropping or resizing</strong> them, as well as applying <strong>effects and other visual enhancements</strong>. In addition, it also allows you to optimize images so that they have the smallest possible size without losing quality, thus improving the UX and using the minimum bandwidth.</p>
<p><strong>Note</strong>: <em>You can always learn more about the transformations that some services offer by reading their documentation, as in <a href="https://cloudinary.com/documentation/image_transformations">Cloudinary</a> or <a href="https://imagekit.io/features/image-transformation">Imagekit</a>.</em></p>
<p>Thanks to the combination of the image service with the <strong>CDN network</strong>, we can <strong>speed up the delivery of our images</strong> since, after the first request, the image will be <strong>cached and served from there in future requests</strong>. But not only does it cache the original image, but it also stores all the transformations and combinations we make from it. And if that is not enough, it also creates new transformation requests from the cached version of the original image. Can it be more optimal?</p>
<p>In the Jamstack ecosystem, it couldn’t be easier to access these services. <strong>Most headless CMSs already have their Image Service CDN</strong>, so you don’t have to leave their premises to perform your image transformations, optimizations, or cache and deliver them quickly. This article will use <strong>Storyblok Image Service CDN</strong> as an example.</p>
<p>So now, let’s see how the Storyblok Image Service CDN can resolve the problems we listed before:</p>
<h3>Compressing Images</h3>
<p>The problem of using large image files can be resolved by adding <code>/m/</code> at the end of the image URL.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5df3b51-5cfa-44f8-9fc6-47b7066028b0/original-image-vs-compressed-by-image-service-cdn.png" /></p>
<ul>
<li>Original image URL → <a href="https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg">demo-image.jpeg</a></li>
<li>Compressed image URL (By default 80% quality) → <a href="https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg/m/">demo-image.jpeg/m/</a></li>
</ul>
<p>But of course, if you want to change the compression rate of your images, you can use the <strong>quality</strong> filter with a value between <strong>0</strong> and <strong>100</strong> by adding <code>/filters:quality(0-100)</code> to the URL.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ec82e208-d6f0-4898-a1aa-62a34b6fe208/compressed-with-default-quality-vs-ten-percent.png" /></p>
<ul>
<li>Compressed image with 10% quality → <a href="https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg/m/filters:quality(10">demo-image.jpeg/m/filters:quality(10)</a>)</li>
</ul>
<h3>Serving The Right Format And Encoding Effectively</h3>
<p>If we want to serve our images in a next-gen format, Storyblok’s Image Service CDN makes it easy by:</p>
<ul>
<li><strong>Automatic conversion to WebP if the browser supports it</strong>.<br />Storyblok chooses the WebP format as the default format due to its capabilities. By adding <code>/m/</code> to the image URL, it will be automatically served in WebP if the browser supports it.  </li>
<li><strong>The format filter</strong><br />If we want to set a specific format, we can do it by using <a href="https://www.storyblok.com/docs/image-service#changing-the-format">the format filter</a>, which supports <code>webp</code>, <code>jpeg</code>, and <code>png</code>.<br />→ <a href="https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg/m/200x0/filters:format(jpeg">demo-image.jpeg/m/200x0/filters:format(jpeg)</a>)</li>
</ul>
<p><strong>Note</strong>: <em>If anything, I miss the integration with more new formats, such as AVIF, but I understand that they are waiting for it to consolidate and become supported by more browsers.</em></p>
<h3>Defining Width And Height From Storyblok</h3>
<p>Although the Image Service CDN cannot help us define the image sizes, the Headless CMS, on the other hand, can streamline this process.</p>
<p>By simply adding a field for each attribute in our image component (Block), we can automate our front-end image component to suit the requirements of each use case.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5da3e222-d547-418c-9803-bd4458d9f0d3/image-size-fields-inside-storyblok-headless-cms.png" /></p>
<p><strong>Tip</strong>: <em>By creating presets of the most used images, we can make these fields be filled by default and thus improve the content editor experience.</em></p>
<h3>Cropping Or Resizing Images</h3>
<p>If your website has or expects to have a large number of images, maintaining each version generated for each resolution, density, or focal point can be time-consuming.</p>
<p>An Image Service CDN saves you from manually creating cropped or resized versions from the master image through two methods:</p>
<h4>Resizing</h4>
<p>It iss perfect for responsive images using width or density descriptors.</p>
<p>By adding <code>width</code> x <code>height</code> in the URL of the original image, right after <code>/m</code>, you will have a new version of your image. By setting one of the parameters to 0 each time, you will have an image with the same aspect ratio, wholly resized.</p>
<ul>
<li>Proportional from height → <a href="https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg/m/0x400">demo-image.jpeg/m/0x400</a></li>
<li>Proportional from width → <a href="https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg/m/700x0">demo-image.jpeg/m/700x0</a> </li>
</ul>
<h4>Cropping</h4>
<p>It is perfect for art direction, different aspect ratios, and focal points.</p>
<p>By using the same technique in resizing but always providing width and height, you will be able to crop the image.</p>
<ul>
<li>→ <a href="https://a.storyblok.com/f/39898/2250x1500/c15735a73c/demo-image-human.jpeg/m/700x200">demo-image-human.jpeg/m/700x200</a></li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94f4285d-aa5d-4030-84a0-58013b296136/cropped-image-service-cdn-example.png" /></p>
<p><strong>Smart Cropping Of Images</strong></p>
<p>To put the subject of the image in the <strong>center automatically</strong>, the Image Service CDN allows you to make use of its smart feature by simply adding <code>/smart</code> to the path:</p>
<ul>
<li>→ <a href="https://a.storyblok.com/f/39898/2250x1500/c15735a73c/demo-image-human.jpeg/m/700x200/smart">demo-image-human.jpeg/m/700x200/smart</a></li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b02a323-5a2b-454d-b8e6-8798259b5eea/cropped-image-service-cdn-smart-feature-example.png" /></p>
<p><strong>Custom Focal Point Filter</strong></p>
<p>In case the subject is not a person and the previous technique does not work for us, the Image Service allows us to specify in our images the point that we consider to be the center of a crop, also known as the <strong>focal point</strong>.</p>
<p>This can be implemented by adding the focal filter to our image path:</p>
<ul>
<li>→ <a href="https://a.storyblok.com/f/39898/1000x600/d962430746/demo-image-human.jpeg/m/600x130/filters:focal(450x500:550x600">demo-image-human.jpeg/m/600x130/filters:focal(450x500:550x600)</a>)</li>
</ul>
<p><strong>Note</strong>: <em>This can be further simplified if we are using Storyblok as a headless CMS, as it returns a focus variable on each of our images via the delivery API.</em> </p>
<h3>Specifying The Loading Option Of The Images</h3>
<p>As with image <code>width</code> and <code>height</code> attributes, lazy loading is not something we do through the Image Service CDN; instead, we implement it in the front-end code.</p>
<p>To automate this process, create a single-option field on the headless CMS Storyblok showing the <code>eager</code> and <code>lazy</code> options, so the content editors can choose the option that best suits each case.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d692068-4939-4ea2-9aeb-b5b671cacceb/loading-single-option-field-storyblok.png" /></p>
<p><strong>Note</strong>: <em>This field can be ignored if the website only has images above the fold.</em></p>
<p>In addition, another thing that can improve the loading of our images is to use <strong>the hint preconnect</strong> by adding the Image Service CDN domain, in this case, <code>https://a.storyblok.com/</code>.</p>
<blockquote>The preconnect keyword is <strong>a hint to browsers that the user is likely to need resources from the target resource’s origin</strong>, and therefore the browser can likely improve the UX by preemptively initiating a connection to that origin.<br /><br />— <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/prefetch">MDN docs</a></blockquote>

<div>
<pre><code>&lt;link rel="preconnect" href="<a href="https://a.storyblok.com/">https://a.storyblok.com/</a>"&gt;
</code></pre>
</div>

<h3>Caching Your Images</h3>
<p>In this case, we don’t have to do anything from our side. By adding <code>/m</code> to our URL, we are already using the Image Service CDN, which by default caches our images the first time they are loaded and serves them from there in the next requests.</p>
<p>We already know the parameters we have to add to our image URL to make use of the image service and optimize them. Combining it with an image component in the associated Headless CMS, Storyblok, which is responsible for receiving the data initially, such as the width and height attributes or their responsive sizes, we will be able to standardize the use of optimized images and create presets to automate their definition in our project.</p>
Case Study: Image Component In A Jamstack Site
<p>For this demo, we will use Nuxt 3 to build our static site, Vue 3 with script setup to define our image component and Storyblok as a headless CMS and Image Service CDN provider. But everything we will see can be extrapolated to any other technology.</p>
<h3>Step 1: Create The Nuxt Project And The Storyblok Space</h3>
<p>Let’s start by creating an account on <a href="https://www.storyblok.com/">Storyblok</a> and a new space from scratch.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/172a5404-b69b-4fc1-aeeb-2e275cbf6b58/create-new-space-storyblok-screen.png" /></p>
<p>Now, following the steps in the article <a href="https://www.storyblok.com/tp/add-a-headless-CMS-to-nuxt-3-in-5-minutes">Add a headless CMS to Nuxt 3 in 5 min</a>, we are going to create our Nuxt 3 application and connect it to our space. Go to the command line and run:</p>
<pre><code>npx nuxi init 
</code></pre>

<p>Install the dependencies with <code>yarn</code> and launch your project with <code>yarn dev</code> to ensure everything goes well.</p>
<p>To enable the Storyblok Visual Editor, we must define a default HTTPS preview URL. First, <a href="https://www.storyblok.com/faq/setting-up-https-on-localhost-in-nuxt-3">set up SSL in Nuxt 3</a> and then go to your space <strong>Settings &gt; Visual Editor</strong> and add <code>https://localhost:3000/</code>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/16f37c32-7f9e-4e39-9fad-3a9654e85ed8/default-environment-preview-url-in-the-storyblok-space.png" /></p>
<p>Now go to the <strong>Content</strong> section in the left menu, and open the <strong>Home</strong> story. In order to see your Nuxt project, open the <strong>Entry configuration</strong> and set the real path to <code>/</code>, save, and voilá, you should be able to see the Nuxt landing page in the Visual Editor:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6695d0d8-f6b1-47e2-b81a-1b97ca250099/real-path-field-entry-configuration.png" /></p>
<h3>Step 2: Connect The Nuxt Project To The Space’s Content</h3>
<p>Once the Visual Editor is set up, the next step is connecting Nuxt 3 with Storyblok. To do that, we need to install the Storyblok SDK:</p>
<pre><code>yarn add @storyblok/nuxt axios # npm install @storyblok/nuxt axios
</code></pre>

<p>And then, include the SDK as a module inside <code>nuxt.config.js</code>, providing the <strong>Preview API token</strong> that we can grab at <strong>Settings &gt; Access Tokens</strong> from our space:</p>
<pre><code>export default defineNuxtConfig({
    modules: [
      [
        '@storyblok/nuxt',
        { accessToken: '' }
      ]
    ]
})
</code></pre>

<p>The new space, by default, already contains some blocks (components), such as page, grid, and so on. Instead of using those, we are going to define our own components, so you can remove all nestable components from this space and leave only the content type <strong>Page</strong>.</p>
<p><strong>Note</strong>: <em>Check the tutorial <a href="https://www.storyblok.com/docs/guide/essentials/content-structures#component">Structures of Content tutorial</a> by Storyblok to understand the difference between Nestable and Content Types blocks.</em></p>
<h3>Step 3: Create The Blocks (Components) In The Storyblok Space</h3>
<p>Now, let’s <strong>create the blocks</strong> needed for this demo project in the space <strong>Block Library</strong>, where (*) means required:</p>
<p><strong>Design Image</strong> (<code>design_image</code>) is the component we will use to define different images on different devices when using the art direction technique.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7866d35e-41f0-49cc-b907-2f707cd92b4e/design-image-component-schema.png" /></p>
<p>A <strong>nestable</strong> component with the required fields:</p>
<ul>
<li><strong>image</strong> (*) (Asset &gt; Images)</li>
<li><strong>width</strong> (*) (Number)</li>
<li><strong>height</strong> (*) (Number)</li>
<li><strong><code>media_condition</code></strong> (*) (Single-Option &gt; Source: Self) with the key-value pair options: mobile → <code>(max-width: 640px)</code> &amp; tablet → <code>(max-width: 1024px)</code>, being <code>(max-width: 640px)</code> the default value.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a847e8bb-02c8-4a23-8da0-32a042309168/mediacondition-field-of-the-design-image.png" /></p>
<p><strong>Image</strong>, the component responsible for collecting all the information necessary to optimize the image.  </p>
<p>A <strong>nestable</strong> component with the tabs:</p>
<ul>
<li><strong>General</strong>, the tab containing the fields:</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ab158d9-007f-4661-9419-ee5c51292230/image-nestable-component-general-tab-schema.png" /></p>
<ul>
<li><strong><code>original_image</code></strong> (*) (Asset &gt; Images)</li>
<li>Image size (Group)<ul>
<li><strong>width</strong> (*) (Number): Maximum width the image will have on your website.</li>
<li><strong>height</strong> (*) (Number): Maximum height the image will have on your website.</li>
</ul>
</li>
<li>Responsive image (Group)<ul>
<li><strong><code>responsive_widths</code></strong> (Text &gt; Regex validation: (^$|^\d+(,\d+)*$))<br />Comma-separated list of widths that will be included on <code>srcset</code>.<br />Example: 400,760,960,1024.  </li>
<li><strong><code>responsive_conditions</code></strong> (Text)<br />Comma-separated list of media queries, with their image slots sizes that will be included on the attribute sizes.</li>
</ul>
</li>
<li>Supported densities (Group)<ul>
<li><strong><code>density_2x</code></strong> (Boolean)</li>
<li><strong><code>density_3x</code></strong> (Boolean)</li>
</ul>
</li>
<li>Art Direction (Group)<ul>
<li><strong><code>art_direction</code></strong> (Blocks &gt; Allow only <strong><code>design_image</code></strong> components to be inserted)</li>
</ul>
</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88282733-87cd-483a-aa6a-4884ddfeebd2/image-block-artdirection-field-schema.png" /></p>
<ul>
<li><strong>Style</strong>, the tab containing the fields:</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fe0ffcda-dcc9-4b22-bf53-bc641b1d4fe3/image-nestable-component-style-tab-schema.png" /></p>
<ul>
<li><strong>loading</strong> (Single-Option &gt; Source: Self) with the key-value pair options: lazy → <code>lazy</code> and eager → <code>eager</code>.</li>
<li><strong>rounded</strong> (Boolean).</li>
</ul>
<p><strong>Card</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/272b7d5f-6649-4507-a442-7cbcad78bad4/card-nestable-component-schema.png" /></p>
<p>A <strong>nestable</strong> component with the fields:</p>
<ul>
<li><strong>image</strong> (Blocks &gt; Allowed maximum <strong>1</strong> &gt; Allow only <strong>image</strong> components to be inserted)</li>
<li><strong>title</strong> (Text)</li>
<li><strong>subtitle</strong> (Text)</li>
<li><strong>color</strong> (Plugin &gt; Custom type: <code>native-color-picker</code>)</li>
</ul>
<p><strong>Note</strong>: <em>To be able to see the custom type <code>native-color-picker</code> available in that list, you need to install the</em> <strong><em>Colorpicker</em></strong> <em>app in the space App Directory.</em></p>
<ul>
<li><strong><code>button_text</code></strong> (Text)</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e0b9750-a06c-4ac2-bb20-cac1a7bfbc2b/card-component-final-result.png" /></p>
<p><strong>Album</strong></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8098643-348d-46ba-ba89-8f7b6cbc83de/album-universal-component-schema.png" /></p>
<p>A universal (mix between nestable &amp; content type) component with the field:</p>
<ul>
<li><strong>cards</strong> (Blocks &gt; Allow only <strong>card</strong> components to be inserted)</li>
</ul>
<h3>Step 4: Create The Main View, Layout, And Install Tailwind CSS In The Nuxt Project</h3>
<p>Once we have defined the schema of our blocks in the Storyblok space, let’s go back to the code of our Nuxt 3 project and start creating the pages and components needed.</p>
<p>The first step will be to delete the <code>app.vue</code> view from the root of the project and create a <code>pages</code> folder with the <code>[...slug].vue</code> view in it to render the pages dynamically by slug and fetch the data from the Storyblok space.</p>
<ul>
<li><strong>[…slug].vue</strong> (<code>pages/[…slug].vue</code>)</li>
</ul>
<pre><code>&lt;script setup&gt;
const { slug } = useRoute().params;
const url = slug || 'home';

const story = await useAsyncStoryblok(url, { version: 'draft' });
&lt;/script&gt;

&lt;template&gt;
    &lt;div class="container"&gt;
      &lt;StoryblokComponent v-if="story" :blok="story.content" /&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p>In the template, we use the <code>StoryblokComponent</code> component that the SDK provides us to represent the specific blocks coming from the <a href="https://www.storyblok.com/docs/api/content-delivery/v2">Content Delivery API</a>, in this case, the <code>page</code>.</p>
<p>And since our goal is to generate a static page, we’re using the <code>useAsyncStoryblok</code> composable provided by the SDK too, which uses <a href="https://v3.nuxtjs.org/api/composables/use-async-data/"><code>useAsyncData</code></a> under the hood.</p>
<p>Next, let’s create a default layout, so our page has some basic styles and metadata.</p>
<ul>
<li><strong>default.vue</strong> (<code>layouts/default.vue</code>)</li>
</ul>
<div>
<pre><code>&lt;template&gt;
  &lt;main class="min-h-screen bg-[#1A0F25] text-white"&gt;
    &lt;slot /&gt;
  &lt;/main&gt;
&lt;/template&gt;

&lt;script setup&gt;
useHead({
  title: 'Pokemon cards album',
  meta: [
    { name: 'description', content: 'The Pokemon album you were looking for with optimized images.' }
  ],
  htmlAttrs: {
    lang: 'en'
  }
})
&lt;/script&gt;
</code></pre>
</div>

<p>As Tailwind CSS is used for styling this demo example, let’s install and configure it in the Nuxt 3 project using the <a href="https://tailwindcss.nuxtjs.org/getting-started/setup">Nuxt Tailwind module</a>. For that, run:</p>
<div>
<pre><code>yarn add -D @nuxtjs/tailwindcss # npm install -D @nuxtjs/tailwindcss
</code></pre>
</div>

<p>Then add the code below to the modules in <code>nuxt.config.ts</code>:</p>
<pre><code>export default defineNuxtConfig({
  modules: [
        // ...
        '@nuxtjs/tailwindcss'
    ]
})
</code></pre>

<p>Create <code>tailwind.config.js</code> by running <code>npx tailwindcss init</code> and copy/paste this code:</p>
<pre><code>module.exports = {
  content: [
    'storyblok/**/*.{vue,js}',
    'components/**/*.{vue,js}',
    'pages/**/*.vue'
  ],
  theme: {
    container: {
      center: true,
      padding: '1rem',
    },
  },
  plugins: [],
}
</code></pre>

<p>Finally, create an <code>assets</code> folder in the root of the project, and inside, include a <code>css</code> folder with a file named <code>tailwind.css</code> that the Nuxt Tailwind module will use to get the Tailwind styles:</p>
<pre><code>@tailwind base;
@tailwind components;
@tailwind utilities;
</code></pre>

<p>Now the project is ready to represent all the defined styles!</p>
<h3>Step 5: Define The Components Related To The Blocks In The Nuxt Project</h3>
<p>Let’s create a new folder called <code>storyblok</code> under the project’s root. The Storyblok SDK will use this folder to auto-import the components only if used on our pages.</p>
<p>Start by adding the components:</p>
<ul>
<li><strong>Page.vue</strong> (<code>storyblok/Page.vue</code>)</li>
</ul>
<div>
<pre><code>&lt;template&gt;
  &lt;StoryblokComponent v-for="item in blok.body" :key="item._uid" :blok="item" /&gt;
&lt;/template&gt;

&lt;script setup&gt;
defineProps({ blok: Object })
&lt;/script&gt;
</code></pre>
</div>

<p>All components will expect the <code>blok</code> prop, which contains an object with the fields’ data of that specific block. In this case, the content type <code>page</code> will have only the body field, an array of objects/components.</p>
<p>Using the <code>v-for</code>, we iterate the body field and represent the items dynamically using <code>StoryblokComponent</code>.</p>
<ul>
<li><strong>Album.vue</strong> (<code>storyblok/Album.vue</code>)</li>
</ul>
<div>
<pre><code>&lt;template&gt;
  &lt;div
    v-editable="blok"
    class="container grid grid-cols-[repeat(auto-fit,332px)] justify-center gap-10 py-12"
  &gt;
    &lt;StoryblokComponent v-for="card in blok.cards" :key="card._uid" :blok="card"
    /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
defineProps({ blok: Object })
&lt;/script&gt;
</code></pre>
</div>

<p>The same will happen in this component, but instead of being the <code>blok.body</code> field, it will be the <code>blok.cards</code> field.</p>
<ul>
<li><strong>Card.vue</strong> (<code>storyblok/Card.vue</code>)</li>
</ul>
<div>
<pre><code>&lt;template&gt;
  &lt;article v-editable="blok" class="bg-[#271B46] rounded-xl p-4 pb-6"&gt;
    &lt;StoryblokComponent v-if="blok.image[0]" :blok="blok.image[0]" /&gt;
    &lt;header class="pt-4 flex gap-4 items-center"&gt;
      &lt;div class="rounded-full w-8 h-8" :style="<code>background-color: ${blok.color.color}</code>"&gt;&lt;/div&gt;
      &lt;h3 class="flex flex-col"&gt;
        {{ blok.title }}
        &lt;span class="font-sans font-thin text-xs"&gt;{{ blok.subtitle}}&lt;/span&gt;
      &lt;/h3&gt;
      &lt;button class="ml-auto bg-purple-900 rounded-full px-4 py-1"&gt;{{ blok.button_text }}&lt;/button&gt;
    &lt;/header&gt;
  &lt;/article&gt;
&lt;/template&gt;

&lt;script setup&gt;
defineProps({ blok: Object })
&lt;/script&gt;
</code></pre>
</div>

<p>As <code>card</code> is one of the last levels of nested blocks, we won’t iterate in this component, but we will directly represent the fields in the HTML.</p>
<h3>Step 6: Create The Image Component Property By Property</h3>
<p>Let’s build a generic image component in Vue, using the parameters coming from the Storyblok <code>image</code> block and taking advantage of the Image Service CDN to render an optimized image.</p>
<h4>The Foundation Of The Image Component</h4>
<p>Let’s define the core functionality of the image component with the <code>original_image</code>, <code>width</code>, and <code>height</code> properties that come from the image block in our space and create a custom method called <code>createImage</code> that returns the URL of the optimized image using the Image Service CDN:</p>
<pre><code>&lt;template&gt;
  &lt;picture v-editable="blok"&gt;
    &lt;img
      :src="createImage(filename, width, height)"
      :width="width"
      :height="height"
      :alt="alt"
      class="shadow-lg w-full"
    /&gt;
  &lt;/picture&gt;
&lt;/template&gt;

&lt;script setup&gt;
const props = defineProps({ blok: Object })

const { width, height } = props.blok
const { filename, alt, focus } = props.blok.original_image

const createImage = (original, width, height, focal = focus) =&gt; {
  return `${original}/m/${width}x${height}/filters:focal(${focal})`
};
&lt;/script&gt;
</code></pre>

<h4>Adding Lazy Or Eager Loading</h4>
<p>Once we have the image’s base, we can start adding new properties, such as <code>loading</code>, and specifying it as an attribute in the <code>img</code> tag:</p>
<pre><code>&lt;template&gt;
  &lt;picture v-editable="blok"&gt;
    &lt;img
      // all other attributes
      :loading="loading"
    /&gt;
  &lt;/picture&gt;
&lt;/template&gt;

&lt;script setup&gt;
const props = defineProps({ blok: Object })

const { /* all other properties */, loading } = props.blok
// ...
&lt;/script&gt;
</code></pre>

<h4>Adding Responsive Images Using Width Descriptors</h4>
<p>If we need to represent different sizes of the same image on our website, using the responsive image technique, we can specify the widths and conditions using the <code>responsive_widths</code> and <code>responsive_conditions</code> properties.</p>
<div>
<pre><code>&lt;template&gt;
  &lt;picture v-editable="blok"&gt;
    &lt;img
      // all other attributes
      :srcset="srcset"
      :sizes="blok.responsive_conditions"
    /&gt;
  &lt;/picture&gt;
&lt;/template&gt;

&lt;script setup&gt;
const props = defineProps({ blok: Object })

// all other properties
let srcset = ref('')

if (props.blok.responsive_widths) {
  const aspectRatio = width / height
  const responsiveImages = props.blok.responsive_widths.split(',')

  let widthsSrcset = ''
  responsiveImages.map(imageWidth =&gt; {
    widthsSrcset += <code>${createImage(filename, imageWidth, Math.round(imageWidth / aspectRatio))} ${imageWidth}w,</code>
    return true
  })

  srcset.value = widthsSrcset
}
&lt;/script&gt;
</code></pre>
</div>

<h4>Adding Responsive Images Using Density Descriptors</h4>
<p>When our site is used on different devices with different pixel densities, we must display our image in the appropriate resolution. By checking the <code>density_2x</code> and <code>density_3x</code> boxes to true and creating an image for each density with the following code, we can patch this problem.</p>
<p><strong>Note</strong>: <em>The original image must be large enough to work with a size three times larger than the image used in the viewport.</em></p>
<div>
<pre><code>&lt;template&gt;
  &lt;picture v-editable="blok"&gt;
    &lt;img
      // all other attributes
      :srcset="srcset"
    /&gt;
  &lt;/picture&gt;
&lt;/template&gt;

&lt;script setup&gt;
const props = defineProps({ blok: Object })

// all other properties
let srcset = ref('')

if (props.blok.density_2x || props.blok.density_3x) {
  let densitiesSrcset = <code>${createImage(filename, width, height)} 1x</code>
  densitiesSrcset += props.blok.density_2x ? <code>, ${createImage(filename, width &amp;#42; 2, height &amp;#42; 2)} 2x</code> : ''
  densitiesSrcset += props.blok.density_3x ? <code>, ${createImage(filename, width &amp;#42; 3, height &amp;#42; 3)} 3x</code> : ''

  srcset.value = densitiesSrcset
}
&lt;/script&gt;
</code></pre>
</div>

<h4>Adding Different Images For Different Devices</h4>
<p>When using the art direction technique, we will define one <code>source</code> tag per element in the  <code>art_direction</code> array field. We will use that data to render a different image according to the specified <code>media_condition</code>.</p>
<div>
<pre><code>&lt;template&gt;
  &lt;picture v-editable="blok"&gt;
    &lt;template v-if="art_direction"&gt;
      &lt;source
        v-for="{ image, media_condition, width, height } in art_direction"
        :media="media_condition"
        :srcset="createImage(image.filename, width, height, image.focus)"
        :width="width"
        :height="height"
      &gt;
    &lt;/template&gt;
    &lt;!-- Base Image --&gt;
  &lt;/picture&gt;
&lt;/template&gt;

&lt;script setup&gt;
const props = defineProps({ blok: Object })

// all other properties
const { art_direction } = props.blok
&lt;/script&gt;
</code></pre>
</div>

<p>In the example repository for this demo, you can find <strong>Image.vue</strong> (<code>storyblok/Image.vue</code>), <a href="https://github.com/Dawntraoz-Storyblok/sb-pokemon-gallery/blob/main/storyblok/Image.vue">the resulting image component</a>, combining all the cases above.</p>
<p><strong>Note</strong>: <em>These implementations are the only possible ways to solve the problems we have seen during this article.</em></p>
<h3>Measuring Performance To Test The Image Component</h3>
<p>It’s time to measure the performance results with and without the custom image component to demonstrate how the above optimizations improve our site.</p>
<p>If we generate a report with Lighthouse from our website representing the images as they originally came from the headless CMS without going through the Image Service CDN or applying any optimization technique other than the definition of the <code>width</code> and <code>height</code> attributes in the <code>img</code> tag, the result we get is:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1875076d-30ec-4307-b109-f06e9b9594c2/mobile-performance-report-scores-without-optimizations.png" /></p>
<p>As we can see, the performance is already negatively affected, with only five unoptimized images in place. But at least the report not only gives us bad news but also provides us with a list of opportunities to improve the results and solve the problems.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6fa234a8-7f09-4e11-87a0-8b6dcf43355e/lighthouse-report-recommendations.png" /></p>
<p>Once we apply the improvements mentioned above using the image component we have developed and giving the necessary values in the CMS headless, the result is impeccable:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/383a22e0-3053-4cc1-9c76-e0d24137d5d6/performance-report-after-using-the-image-vue-component-optimized.png" /></p>
<p>The next step will be to educate our content editors, designers, and developers to synchronize between them what values are required for each case and prepare self-defined presets in our Storyblok space to make their work a lot easier.</p>
<h3>Simplifying Image Optimization With Next-generation Frameworks</h3>
<p>What if I tell you that if you use a framework like Nuxt, Next, or Astro to build your applications, you don’t need to develop a custom image component? They have already created one for you. These being <a href="https://v1.image.nuxtjs.org/">Nuxt Image</a>, <a href="https://nextjs.org/docs/api-reference/next/image">Next Image</a> and <a href="https://docs.astro.build/es/guides/integrations-guide/image/">Astro Image</a>, among others.</p>
<p>These components are extensions to the <code>&lt;img&gt;</code> tag, which includes a number of built-in performance optimizations to help us achieve a better web experience.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8574678-f1a8-470d-bb22-2bc6ea6c0ce5/nuxt-image-social-sharing-image.png" /></p>
<p>By simply installing or using the component provided, we achieve the same result. To test the Nuxt Image in our project, let’s install it by running <code>yarn add -D @nuxt/image-edge</code> and adding the module to <code>nuxt.config.ts</code> with Storyblok as Image CDN provider:</p>
<pre><code>export default defineNuxtConfig({
  modules: [
    // ...
    '@nuxt/image-edge',
  ],
    image: {
    storyblok: {
      baseURL: 'https://a.storyblok.com'
    }
  }
})
</code></pre>

<p>By replacing the <code>Image.vue</code> component with the code below, we will get similar behavior to our custom component but using the Nuxt Image enhancements:</p>
<p><strong>Note</strong>: <em>To render different images per device, we will have to add the <code>source</code> as in the custom component. This is not something that Nuxt Image supports yet.</em></p>
<div>
<pre><code>&lt;template&gt;
  &lt;picture v-editable="blok"&gt;
    &lt;NuxtImg
      provider="storyblok"
      :src="filename"
      :width="width"
      :height="height"
      :[srcset]="densitiesSrcset"
      :sizes="widthsPerSize"
      :modifiers="{ filters: { focal: focus } }"
      :loading="loading"
      :alt="alt"
    /&gt;
  &lt;/picture&gt;
&lt;/template&gt;

&lt;script setup&gt;
const props = defineProps({ blok: Object })

const { width, height, loading, responsive_widths, density_2x, density_3x } = props.blok
const { filename, alt, focus } = props.blok.original_image

let srcset = responsive_widths ? '' : 'srcset'
let densitiesSrcset = ''
if (density_2x || density_3x) {
  densitiesSrcset = <code>${filename}/m/${width}x${height}/filters:focal(${focus}) 1x</code>
  densitiesSrcset += density_2x ? <code>, ${filename}/m/${width &amp;#42; 2}x${height &amp;#42; 2}/filters:focal(${focus}) 2x</code> : ''
  densitiesSrcset += density_3x ? <code>, ${filename}/m/${width &amp;#42; 3}x${height &amp;#42; 3}/filters:focal(${focus}) 3x</code> : ''
}

let widthsPerSize = ''
if (responsive_widths) {
  const sizes = ['sm', 'md', 'lg', 'xl']
  widthsPerSize = responsive_widths.split(',').map((w, i) =&gt; <code>${sizes[i]}:${w}px</code>).join(' ')
}
&lt;/script&gt;
</code></pre>
</div>

<p>Looking at the code, you might think it’s not much different from the one we have created before, but the truth is that if tomorrow you consider changing the Image Service or you don’t define the <code>width</code> and <code>height</code> of the image, Nuxt Image will do the dirty work for you.</p>
Conclusion
<p>Image optimization, like web performance, is not a short-term task but constant work to progressively improve the website. That is why there are three things we must always keep in mind:</p>
<h3>1. Stay Up To Date</h3>
<p>The most important thing to keep your images in the best possible condition is to keep up with the latest trends in image optimization and web performance.</p>
<p>Following the work of expert authors in the field, such as <a href="https://www.smashingmagazine.com/author/addy-osmani/">Addy Osmani</a> and <a href="https://www.smashingmagazine.com/author/barry-pollard/">Barry Pollard</a>, can help you learn about new improvements in image optimization in advance. Likewise, renowned websites such as <a href="https://www.smashingmagazine.com/">Smashing Magazine</a>, <a href="https://web.dev/">web.dev</a>, and <a href="https://almanac.httparchive.org/es/2022/">Web Almanac</a> by Google, <a href="https://developer.mozilla.org/">Mozilla docs</a>, among others, will let you know the state of the web and the latest developments.</p>
<h3>2. Constantly Monitor The Status Of Your Images</h3>
<p>Another crucial point to keep our website in good shape is to <a href="https://developer.mozilla.org/en-US/docs/Learn/Performance/Measuring_performance">measure web performance</a> continuously, in this case, emphasizing metrics related to image loading. You can start now by visiting <a href="https://web.dev/measure/">Lighthouse</a> and <a href="https://pagespeed.web.dev/">PageSpeed Insights</a>.</p>
<blockquote>Web performance involves measuring the speeds of an app and then monitoring its performance, ensuring that what you’ve optimized stays optimized. This involves a number of metrics and tools to measure those metrics.<br /><br />— <a href="https://developer.mozilla.org/">MDN</a></blockquote>

<p>Some tools like <a href="https://webperformancereport.com/">WebPerformance Report</a> send you a weekly report by email on the performance status of your website. This can allow you to be aware of any changes in browsers or web performance techniques, as you have a report that corroborates the good status of your website over time.</p>
<p>Moreover, there are always tools out there that allow us to ensure that the optimization quality of our images is the best we can offer. For example, <a href="https://kornel.ski/dssim">RGBA Structural Similarity</a>, a tool that calculates the (dis)similarity between two or more PNG and/or JPEG images using an algorithm that approximates human vision, maintained by <a href="https://github.com/kornelski/">@kornelski</a>, can help us to check that we aren’t losing too much quality when compressing and thus better choose our compression parameters.</p>
<h3>3. Align With Your Team, Create Standards</h3>
<p>Most of the implemented solutions in this article are just possible proposals to optimize the images of our websites. Still, it is expected that you come up with new unique solutions agreed upon with your team of content creators, designers, and developers.</p>
<p>We must all be on the same page when creating a quality project; communication will allow us to solve problems more quickly when they occur. By creating standards or presets when uploading images and defining their size and different resolutions, we will simplify the work of our colleagues and ensure that it is a joint effort.</p>
<p>I hope the techniques presented will help or inspire you when dealing with images in current or future projects. Here are the main links to the demo project:</p>
<ul>
<li><a href="https://app.storyblok.com/#!/build/172320">Copy of the Storyblok space created</a></li>
<li><a href="https://github.com/Dawntraoz-Storyblok/sb-pokemon-gallery">GitHub repository</a></li>
<li><a href="https://sb-pokemon-gallery.dawntraoz.com/">Live demo site</a></li>
</ul>
<p><em>Many thanks to <a href="https://joanleon.dev/">Joan León</a> (<a href="https://twitter.com/nucliweb">@nucliweb</a>) and <a href="https://www.smashingmagazine.com/author/vitaly-friedman/">Vitaly Friedman</a> (<a href="https://twitter.com/vitalyf">@vitalyf</a>), for reviewing the article and giving me powerful feedback.</em></p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Alba Silvente)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a9dda06-3ade-4d24-8141-91d12660a174/guide-image-optimization-jamstack-sites.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Using Automated Test Results To Improve Accessibility]]></title>
            <link>https://smashingmagazine.com/2022/11/automated-test-results-improve-accessibility/</link>
            <guid>https://smashingmagazine.com/2022/11/automated-test-results-improve-accessibility/</guid>
            <pubDate>Wed, 16 Nov 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Noah Mashni and Mark Steadman share their approach to how to leverage the automated test results from the accessibility checks to drive change and reach sustainable digital accessibility transformation.]]></description>
            <content:encoded><![CDATA[<p>A cursory google search will return a treasure trove of blog posts and articles espousing the value of adding accessibility checks to the testing automation pipeline. These articles are rife with tutorials and code snippets demonstrating just how simple it can be to grab one’s favorite open-source accessibility testing library, jam it into a cypress project, and presto changeo, shifting left, and accessibility has been achieved… right?</p>
<p>Unfortunately, no, because actioning results in a consistent, repeatable process is the <em>actual</em> goal of shift-left, not just injecting more testing. Unlike the aforementioned treasure trove of blog posts about how to add accessibility checks to testing automation, there is a noticeable dearth of content focused on <strong>how to leverage the results from those accessibility checks to drive change and improve accessibility</strong>.  </p>
<p>With that in mind, the following article aims to fill that dearth by walking through a variety of ways to answer the question of “what’s next?” after the testing integration has been completed.</p>
Status Quo
<p>The confluence of maximum scalability and accessibility as requirements has brought most modern-day digital teams to the conclusion that the path to sustainable accessibility improvements requires a shift left with accessibility. Not surprisingly, the general agreement on the merits of shifting left has led to a tidal wave of content focused on how important it is to include accessibility checks in DevOps processes, like frontend testing automation, as a means to address accessibility earlier on in the product life cycle. </p>
<p>Unfortunately, there has yet to be a similar tidal wave of content addressing the important next steps of how to effectively use test results to fix problems and how to create processes and policies to reduce repeat issues and regression. This gap in enablement creates the problem that exists today:</p>
<p>The dramatic increase in the amount of accessibility testing performed in automation is not correlating to a proportional increase in the accessibility of the digital world.</p>
Problem
<p>The problem with the status quo is that without guidance on what to do with the results, increased testing does not correlate with increased accessibility (or a decrease in accessibility bugs).</p>
Solutions
<p>In order to properly tackle this problem, development teams need to be enabled and empowered to make the most of the output from automated accessibility testing. Only then can they effectively use the results to translate the increase in accessibility testing in their development lifecycle to a proportional decrease in accessibility issues that exist in the application. </p>
<p>How can we achieve this? With a combination of strategically positioned and mindfully structured quality gates within the CI/CD pipeline and leveraging freely available tools and technologies to efficiently remediate bugs when they are uncovered, your development team can be well on their way to effectively using automated accessibility results. Let’s dive into each of these ideas!</p>
<h3>Quality Gates</h3>
<p>Making a quality gate is an easy and effective way to automate an action on your project when committing your code. Most development teams now create gates to check if there are no linting errors, if all test cases have passed, or if the project has no errors. Automated accessibility results can fit right into this same model with ease!</p>
<h4>Where Do The Gates Exist?</h4>
<p>For the most part, the two primary locations for quality gates within the software development lifecycle (SDLC) are during pull requests (PRs) and build jobs (in CI).</p>
<p>With pull requests, one of the most commonly used tools is GitHub Actions, which allows development teams to automate a set of tasks that should be completed or checked when code is committed or deployed. In CI Jobs, the tools’ built-in functionality (Azure, Jenkins) is used to create a script that checks to see if test cases or scenario has passed. So, where does it make sense to have one for your team?</p>
<p>It all depends on what level development teams want to put a gate in place for accessibility testing results. If the team is doing more linting and component-level testing, the accessibility gate would make the most sense at a pull request level. If the automated test is at an integration level, meaning a full baked-out site ready for deployment, then the gate can be placed with a CI job. </p>
<h4>Types Of Gates</h4>
<p>There are two different ways that quality gates can operate: a soft check and a hard assertion. </p>
<p>A soft check is relatively simple in the definition. It looks at whether or not the accessibility tests were executed. That is it! If the accessibility checks were run, then the test passes. In contrast, assertions are more specific and stringent on what is allowed to pass. For example, if my accessibility test case runs, and it finds even ONE issue, the assertion fails, and the gate will say it has not passed. </p>
<p>So which one is most effective for your team? If you are looking to get more teams to buy into accessibility testing as a whole, a best practice is to not throw a hard assertion right away. Teams initially struggle with added tasks or requirements, and accessibility is no different. Starting with a soft gate allows teams to see what the requirement is going to be and what they are required to be doing. </p>
<p>Once a certain amount of time has passed, then that soft gate can switch to a hard assertion that will not allow a single automated issue out the door. However, if your team is mature enough and has been using accessibility automation for a while, a hard assertion may be used initially, as they already have experience with it. </p>
<h4>Creating Effective Gates</h4>
<p>Whether you are using a soft or hard gate, you have to create requirements that govern what the quality gate does with regard to accessibility automated results. Simply stating, “The accessibility test case failed,” is not the most effective way to make use of the automated results. Creation of gates that are data-driven, meaning they are based on a piece of data from the results, can help make a more effective gate that matches your development team or organization’s accessibility goals.</p>
<p>Here are three of the methods of applying assertions to govern accessibility quality:</p>
<ul>
<li><strong>Issue severity</strong><br />Pass or fail based on the existence or count of specific severity issues (Critical, Serious, and so on).</li>
<li><strong>Most common issues</strong><br />Pass or fail based on the existence or count of specific issue types which are known to be most common (either global or organization specific).</li>
<li><strong>Critical or Targeted UI /UX</strong><br />Do these bugs exist in high-traffic areas of the application, or do these bugs directly impede a user along a critical path through the UX?</li>
</ul>
<h3>Fixing Bugs</h3>
<p>The creation and implementation of quality gates is an essential first step, but unfortunately, this is only half the battle. Ultimately a development organization needs to be able to fix the bugs found at the various quality gate inspection points. Otherwise, the applications’ quality will never improve, and nothing will clear the gates that were just put in place. What a terrifying thought that is.</p>
<p>In order to translate the adoption of the quality gates into improved accessibility, it is vital to be able to make effective use of the accessibility test results and leverage tools and technologies whenever possible to help drive remediation, which eliminates accessibility blockers and ultimately creates more inclusive experiences for users.</p>
<h4>Accessibility Test Results</h4>
<p>There is a common adage that “there is no such thing as bug-free software,” and given that accessibility conformance issues are bugs, this axiom applies to accessibility as well. As such, it is absolutely necessary to be able to clearly prioritize and triage accessibility test results in order to apply limited resources to seemingly unlimited bugs to fix them in as efficient and effective a way as possible.  </p>
<p>It is helpful to have a few prioritization metrics to assist in the filtration and triage work when working with test results. Typically, <strong>context is an effective top-level filter</strong>, which is to say, attacking bugs and blockers that exist in high-traffic pages or screens or critical user flows is a useful way to drive maximal impact on the user experience and the application at large.</p>
<p>Another common filter, and one that is often secondary to the “context” filter mentioned above, is to <strong>prioritize bugs by their severity</strong>, which is to say, the impact on the user caused by the bug’s existence. Most free or open-source automated accessibility tools and libraries apply some form of <strong>issue severity</strong> or <strong>criticality label</strong> to their test results to help with this kind of prioritization.</p>
<p>Lastly, as a tertiary filter, some development teams are able to organize these bugs or tasks by thinking about the <strong>level of effort to implement a fix</strong>. This last filter isn’t something that will commonly be found in the test results themselves. Still, developers or product managers may be able to infer a level of effort estimation based on their own internal understanding of the application infrastructure and underlying source code.</p>
<p>Thankfully, accessibility test results, for the most part, share a level of consistency, regardless of which library is being used to generate the test results, in that they generally provide details about what specific checks failed, where the failures occurred in terms of page URL and sometimes even CSS or XPath as well as specific component HTML, and finally actionable recommendations on how to fix the components that failed the specific checks. That way, a developer always has a result that clearly states what’s wrong, where’s it wrong, and how to fix what’s wrong.</p>
<p>In the above ways, developers can clearly stack, rank, and prioritize tasks that result from automated accessibility test results. The test results themselves are typically designed to be clear and actionable so that each task can be remediated in a timely fashion. Again, the focus here is to be able to <strong>effectively deliver maximal impact with limited resources</strong>.</p>
<h4>Helpful Tools</h4>
<p>The above strategies are well and good in terms of having a clear direction for attacking known bugs within a project. Still, it can be daunting to figure out whether one’s remediation solution actually worked or further to figure out a path forward to prevent similar issues from recurring. This is where a number of free tools that exist in the community can come into play and support and empower development organizations to expedite remediation and enable validation of fixes, which ultimately improves downstream accessibility while maintaining development velocity. </p>
<p>One such family of free tools is the <strong>accessibility browser extension</strong>. These are free tools that can help teams locate, fix, and validate the remediation of accessibility bugs. It is likely that whatever accessibility library is being used in the CI/CD pipeline has an accompanying (and free) browser extension that can be used in local development environments. A couple of examples of browser extensions include: </p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US">Axe Browser Extension</a></li>
<li><a href="https://developer.chrome.com/docs/lighthouse/overview/">Google Lighthouse</a></li>
<li><a href="https://chrome.google.com/webstore/detail/ibm-equal-access-accessib/lkcagbfjnkomcinoddgooolagloogehp?hl=en-US">IBM Equal Access Accessibility Checker</a></li>
<li><a href="https://chrome.google.com/webstore/detail/wave-evaluation-tool/jbbplnpkjmmeebjpijfedlgcdilocofh?hl=en-US">Wave Tool</a></li>
</ul>
<p>The browser extensions allow a developer to quickly and easily scan a page in the browser, identify issues on the page, or as in the case described above, they can validate that an issue that was detected during the testing automation process, which they have since remediated, no longer exists (validation!). Browser extensions are also a fantastic tool that can be leveraged during active development to find and fix bugs before code gets committed. Often, they are used as a quality check during a pull request approval process, which can help prevent bugs from making their way downstream.</p>
<p>Another group of free tools that can help developers fix accessibility bugs is <strong>linters</strong> which can be integrated within the developers <strong>integrated development environment (IDE)</strong>and automatically identifies and sometimes automatically remediates accessibility bugs detected within the actual source code before it compiles and renders into HTML in a browser.</p>
<p>Linters are fantastic because they function similarly to a spell checker in a document editor tool like Microsoft Word. It’s largely fully automated and requires little to no effort for the developer. The downside is that linters typically have a limited number of reliable checks that can be executed for accessibility at the point of source code editing. Here are some of the top accessibility linters:</p>
<ul>
<li>ESLint Plugins:<ul>
<li><a href="https://www.npmjs.com/package/eslint-plugin-vuejs-accessibility">Vue Accessibility Plugin</a></li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y">JSX Accessibility Plugin</a></li>
<li><a href="https://www.npmjs.com/package/eslint-plugin-lit-a11y">Angular Accessibility Plugin</a></li>
</ul>
</li>
<li><a href="https://webhint.io/docs/user-guide/hints/accessibility/">Web Hint</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter">Axe-Linter</a></li>
</ul>
<p>Equipping a development team with browser extensions and linters is a free and fast way to empower them to find and fix accessibility bugs immediately. The tools are <strong>simple to use, and no special accessibility training is required</strong> to execute the tests or consume and action the results. If the goal is to get farther faster with regard to actioning automated accessibility test results and improving accessibility, the adoption of these tools is a great first step.</p>
The Next Level
<p>Now that we have strategies for how to use results to improve accessibility at an operational level, what’s next? How can we ensure that all of our organization knows that accessibility is a practical piece of our development lifecycle? How can we build out our regression testing to include accessibility so that issues may not be reintroduced?</p>
<h3>Codify it!</h3>
<p>One way we can truly ensure that what we have created above will be done on a daily basis is to bring accessibility into your organization’s policy (also known as code policy or policy of code) — establishing such means that accessibility will be included throughout the SDLC as a foundational requirement and not an optional feature. </p>
<p>Although putting accessibility into the policy can take a while to achieve, the benefits of it are immeasurable. It creates a set of accessible coding practices that are clearly defined and established for how accessibility becomes part of the acceptance criteria or definition of “done” at the company level. We can use the automated accessibility results to drive this policy of code and ensure that the teams are doing full testing, using gates, and fixing the issues set by the policy!</p>
<h3>Automate it!</h3>
<p>Most automated accessibility testing libraries are standard out-of-the-box libraries that test generically for accessibility issues that exist on the page. The typical amount of issues caught is around 40%, which is a good amount. However, there is a way in which we can write automated accessibility tests to go above and beyond even more!</p>
<p><strong>Accessibility regression scripts</strong> allow you to check accessibility functionality and markup to ensure that the contents of your page are behaving the way they should. Will this guarantee it works with a screen reader? Nope. But it will ensure that the accessible functionality of it is properly working. </p>
<p>For example, let’s say you have an expand/collapse section that shows extra details have you click the button. Automated accessibility libraries would be able to check to ensure the button has accessible text and maybe that it has a focus indicator. Writing a regression script, you could check to ensure the following: </p>
<ul>
<li>It works with a keyboard (Enter and Space);</li>
<li><code>aria-expanded=” true/false”</code> is properly set on the button;</li>
<li>The content in the expanded section is properly <a href="https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html#hiding-content-completely">hidden from screen readers</a>.</li>
</ul>
<p>Doing this on key components can help ensure that the markup is properly set for assistive technology, and if there is an issue, it can be easier to debug if the issue is in code or potentially a bug in the assistive technology.</p>
Conclusion
<p>The “shift left” movement within the accessibility industry over the last few years has done a lot of good in terms of generating awareness and momentum. It has helped engage and activate companies and teams to actually take action to impact accessibility and inclusion within their digital properties, which in and of itself is a victory.</p>
<p>Even so, the actual impact on the overall accessibility of the digital world will continue to be somewhat limited until teams are not only empowered to execute tests in efficient ways but also that they are enabled to <strong>effectively use the test results to govern the overall quality, drive rapid remediation, and ultimately put process and structure in place</strong> to prevent regression.</p>
<p>In the end, the goal is really more than simply shifting left with accessibility, which often ends up taking what a bottleneck of testing in the QA stage of the SDLC is and simply dragging it left and upstream and placing it into the CI/CD pipeline. What really is desired, if sustainable digital accessibility transformation is the goal, is to <strong>decentralize the accessibility work and democratize it across the entire development team</strong> so that everyone participates (and hopefully into the design as well!) in the process. </p>
<p>The huge increase in automated accessibility testing adoption is a wonderful first step, but ultimately its impact is limited if we don’t know what to do with the results. If teams better understand how they can use these test results, then the increase in testing will, by default, increase accessibility in the end product. Simple gatekeeping, effective tool use and a mindful approach can have a major impact and lead to a more accessible digital world for all.</p>
<h3>Related Reading on Smashing Magazine</h3>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/09/realities-myths-contrast-color/">The Realities And Myths Of Contrast And Color</a></li>
<li><a href="https://www.smashingmagazine.com/2022/09/unconscious-biases-inclusive-design/">Unconscious Biases That Get In The Way Of Inclusive Design</a></li>
<li><a href="https://www.smashingmagazine.com/2022/08/organization-improved-web-accessibility-case-study/">How Our Organization Improved Web Accessibility (Case Study)</a></li>
<li><a href="https://www.smashingmagazine.com/2022/05/smashing-podcast-episode-47/">Smashing Podcast Episode 47 With Sara Soueidan: Why Does Accessibility Matter?</a></li>
<li><a href="https://www.smashingmagazine.com/2022/06/voice-control-usability-considerations-partially-visually-hidden-link-names/">Voice Control Usability Considerations For Partially Visually Hidden Link Names</a></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Noah Mashni and Mark Steadman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/610e188c-5a93-432a-a156-cd9f3a674e7e/automated-test-results-improve-accessibility.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[A Guide To Keyboard Accessibility: HTML And CSS (Part 1)]]></title>
            <link>https://smashingmagazine.com/2022/11/guide-keyboard-accessibility-html-css-part1/</link>
            <guid>https://smashingmagazine.com/2022/11/guide-keyboard-accessibility-html-css-part1/</guid>
            <pubDate>Mon, 14 Nov 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Cristian Diaz covers how to use HTML and CSS to create an accessible experience for keyboard users while mentioning what WCAG criteria we should keep into consideration.]]></description>
            <content:encoded><![CDATA[<p>Keyboard accessibility is an important part of the user experience. There are multiple criteria in <strong>Web Content Accessibility Guidelines (WCAG)</strong> about this topic. Still, it’s somehow overlooked, affecting the experience of many users, mainly people with motor disabilities  — any condition that limits movement or coordination.</p>
<p>Certain conditions like having a broken arm, the loss or damage of a limb, muscular dystrophy, arthritis, and some others can make it impossible for a person to use a mouse to navigate a site. So, making a site navigable via keyboard is a very important part of ensuring the accessibility and usability of our websites.</p>
<p>The importance of making a site accessible for users with motor disabilities becomes even more evident when you learn that they have access to more assistive technology options. Keyboards are not even the main focus of motor disability assistance! There are tools like switches that you use with your hand (or even with your head) to work with any device, which helps a lot for people with more severe motor disabilities. You can see how those technologies work in <a href="https://www.youtube.com/watch?v=V1yoOLhx_qA">this demonstration made by Rob Dodson</a> or in <a href="https://www.youtube.com/watch?v=cSSgndQ5mVs">this video of Christopher Hills</a>.</p>
<p>In this article, I’ll cover how to use HTML and CSS to create an accessible experience for keyboard users while mentioning what WCAG criteria we should keep into consideration.</p>
HTML
<p>One of the basics of creating a website accessible site for keyboard users is knowing what elements should be navigable via keyboard. For this, a good HTML semantic is crucial because it’ll indicate the kind of elements we want to focus on with keyboard navigation.</p>
<h3>The Basics</h3>
<p>When a user presses the Tab key, it’ll let them select the next focusable element in the HTML, and when they press the keys Shift + Tab, it’ll take them to the last focusable element. With that said, what elements need to be focusable? Anything that requires user interaction. Between them, you can find the elements <code>button</code>, <code>a</code>, <code>input</code>, <code>summary</code>, <code>textarea</code>, <code>select</code>, and the controls of elements <code>audio</code>, and <code>video</code> (when you add the attribute <code>controls</code> to them). Additionally, certain attributes can make an element keyboard navigable, such as <code>contenteditable</code> or <code>tabindex</code>. In the case of Firefox, any area with a scroll will also be keyboard focusable.</p>
<p>Additionally to that, you can:</p>
<ul>
<li>Activate the <code>button</code>, <code>select</code>, <code>summary</code>, and <code>a</code> elements using the Enter Key. Keep in mind that except for the <code>a</code> element, you can activate them with the Space Key as well.</li>
<li>Use the arrow keys to navigate between different <code>input</code> with the type <code>radio</code> if they share the same <code>name</code> attribute.</li>
<li>Check those inputs using the Space key (keep in mind that when you navigate with the arrow keys <code>radio</code> inputs, it’ll be checked once the keyboard is focused, but that doesn’t happen with <code>checkbox</code> inputs).</li>
<li>Use the up and down keys to navigate between the different options of a <code>select</code> element.</li>
<li>Close the <code>select</code> element displayed list and multiple <code>input</code> popups.</li>
<li>Use the arrow keys to scroll vertically or horizontally a document.</li>
</ul>
<p>There are probably more interactions, some of which depend on differences between operating systems and browsers, but that covers mostly what you can do with the keyboard.</p>
<p>Does that mean those elements are automatically keyboard-accessible by default? A good HTML structure is very helpful, and it makes content <strong>mostly</strong> accessible by default, but you still need to cover some issues.</p>
<p>For example, certain input types like <code>date</code>, <code>datetime-local</code>, <code>week</code>, <code>time</code>, and <code>month</code> have popups that can work differently between browsers. Chrome, for example, allows you to open the date picker popup by pressing the Enter or Space key in a designated button in the input. However, with Firefox, you need to press Enter (or Space) in either the day, month, or year fields to open the popup and modify each field from there.</p>
<p>This lack of consistency can be a bit off-putting, and maybe it’s just a matter of personal preference. Still, I feel that the Firefox experience is not very intuitive, which leads to thinking that, arguably, one of those experiences is more keyboard-accessible than the other. So if you want to create a good, accessible, and consistent keyboard experience between browsers, you’d need more than HTML for that. If you're going to try it yourself, check this <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types">compilation of input types by MDN</a> and navigate them by yourself.</p>
<p>Additionally to the previous point, certain components require elements to be keyboard focusable without being natively selectable. In other cases, we need to manage keyboard focus manually, and our markup needs to help us with that. For both cases, we’ll need to use an HTML attribute that will help us with this task.</p>
<h3><code>tabindex</code> Attribute</h3>
<p>This attribute will greatly help us bring keyboard accessibility to more complex component patterns. This attribute receives an integer, and properly using it will help us make a DOM element keyboard focusable. With <code>tabindex</code>, we can find three different cases:</p>
<h4><code>tabindex="0"</code></h4>
<p>It causes the element to be keyboard focusable. You usually don’t want to add keyboard focus to an element unless it is not interactive, but some scenarios will require it.</p>
<p>One of them is when you have a component with a scroll beside the <code>body</code> element. Otherwise, keyboard users won’t be able to see the full extent of the content. Some components that could have this trouble are scroll-based carrousels, tables, and code snippets. Just to give an example, any code snippet created with the help of <a href="https://prismjs.com/">prism.js</a> has the attribute <code>tabindex="0"</code>. Open prism.js’ site and navigate it using the Tab key. You’ll be able to focus the snippets and control the vertical and horizontal scroll using the arrow keys.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/075fa253-5d60-4bf3-bf16-b6f6796a6b26/1-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>Some people who start with web accessibility think it is a good idea to add the attribute <code>tabindex="0"</code> to every element because they think it’ll help screen reader users navigate easily through a site. This is a terrible practice because of two reasons:</p>
<ol>
<li>Screen reader users have multiple ways to navigate a site. They can jump between headers, landmarks, or form elements, and they don’t need that extra help to create an accessible site as long as the markup is appropriate.</li>
<li>It can make keyboard navigation difficult because a user will have to press the Tab key many times to arrive at the desired content, and for certain motor disabilities, having too many focusable elements can create a physically painful experience.</li>
</ol>
<p>So, to summarize: it’s a useful technique for some components, but most of the time, you’ll be alright if you don’t use it, and certainly, you <strong>must not</strong> use it in every single element of your site.</p>
<h4>Negative <code>tabindex</code></h4>
<p>Before we start this section, we need to keep in mind two concepts: a DOM element is at the same time <strong>focusable</strong> (that means, you can programmatically focus on it with JavaScript) and <strong>tabbable</strong> (that means, being able to be selected with the Tab Key).</p>
<p>With that in mind, here is where negative <code>tabindex</code> comes into play because it’ll make an element unable to be tabbed (but you can still focus on it with JavaScript). This is important for specific components because, in some cases, we’ll need to make a normally tabbable element unable to be tabbed, or we’ll need an element to be focusable but not tabbable.</p>
<p>One example of that is tabs. A recommended pattern for this component is ensuring that when you press the Tab key when you’re located in the active <code>tab</code>, it goes to the active <code>tabpanel</code> instead of bringing the focus to the next tab. We can achieve that by adding a negative <code>tabindex</code> to all non-active tabs like this:</p>
<pre><code>&lt;ul role="tablist"&gt;
  &lt;li role="presentation"&gt;
    &lt;button role="tab" href="#panel1" id="tab1" aria-selected="true"&gt;Tab one&lt;/button&gt;
  &lt;/li&gt;
  &lt;li role="presentation"&gt;
    &lt;button role="tab" href="#panel2" id="tab2" tabindex="-1"&gt;Tab two&lt;/button&gt;
  &lt;/li&gt;
  &lt;li role="presentation"&gt;
    &lt;button role="tab" href="#panel3" id="tab3" tabindex="-1"&gt;Tab three&lt;/button&gt;
  &lt;/li&gt;
  &lt;li role="presentation"&gt;
    &lt;button role="tab" href="#panel4" id="tab4" tabindex="-1"&gt;Tab four&lt;/button&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>We’ll see more examples later about how a negative <code>tabindex</code> will help us to have more control over focus state management in different components, but keep in mind a negative <code>tabindex</code> will be important in those cases.</p>
<p>Finally, you can put any negative integer in the <code>tabindex</code> property, and it’ll work the same. <code>tabindex="-1"</code> and <code>tabindex="-1000"</code> will make no difference, but my mere convention is that we tend to use <code>-1</code> when we use this attribute.</p>
<h4>Positive <code>tabindex</code></h4>
<p>A positive <code>tabindex</code> will make the element keyboard focusable, but the order will be defined according to the used integer. That means that first, the keyboard will navigate all elements with the attribute <code>tabindex="1"</code>, then the ones with <code>tabindex="2"</code>, and after <strong>all</strong> elements with a positive <code>tabindex</code> have been navigated, it’ll take into account all interactive elements by default and those with the attribute <code>tabindex="0"</code>. This is known as the <a href="https://html.spec.whatwg.org/multipage/interaction.html#tabindex-ordered-focus-navigation-scope">tabindex-ordered focus navigation scope</a>.</p>
<p>Now, this is a pattern that you shouldn’t use. You’ll be better if you put the required focusable elements in your site in the order you need. Otherwise, you could create a very confusing experience for keyboard users, which would make a failure of the <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html">WCAG criterion 2.4.3: Focus order</a>.</p>
<blockquote>“If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability.”<br /><br />— <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-order.html">Success Criterion 2.4.3: Focus order</a></blockquote>

<p>It might be useful if you want keyboard users to focus on widgets before they reach the page content, but that’d be a bit confusing for assistive technology users (like screen readers). So again, you’d be better by creating a logical order in the DOM.</p>
<h4><code>inert</code> Attribute</h4>
<p>I have to quickly note an incoming attribute that will help us a lot with keyboard accessibility called <code>inert</code>. This attribute will make the content inaccessible by assistive technologies.</p>
<p>Now you might be asking yourself how this can be useful because if something removes keyboard accessibility, but in some cases, that’s a good thing! One component that will benefit from it is modals. Adding this attribute to all elements in the site except this modal will make it easy to create a focus trap. So you’ll ensure the user can’t accidentally navigate to other parts of the site using the Tab key unless they close that modal. Right now, creating a keyboard trap requires quite some thinking with JavaScript (I’ll explain how in the second part of this guide). So, having a way to make it easier with this attribute will be handy.</p>
<p>Sounds pretty cool, right? Well, unfortunately, this attribute is not recommended to be used yet. If you check the <a href="https://caniuse.com/?search=inert">caniuse.com entry about this attribute</a>, you’ll notice it’s very recent; Opera doesn’t have support for it yet. The most recent implementation of it was version 105 of Firefox, and at the moment of writing this article, it’s a beta version! So, it’s still very early to do it. There is a <a href="https://github.com/WICG/inert">polyfill for <code>inert</code> attribute</a>, but right now, it’s a bit performance costly. So, I seriously suggest not using it now for production. But once we have adequate support for this attribute, some component patterns will be easier to create.</p>
CSS
<p>CSS is an essential tool for keyboard accessibility because it allows us to create a level of customization of the experience, which is important for compliance with WCAG 2.2 criteria. Additionally, CSS has multiple selectors with different uses that will help to create a good keyboard experience, but be careful because a bad use of certain properties can be counterproductive. Let’s start diving into the use of this language to create an accessible experience for keyboard users.</p>
<h3>Focus Indicator</h3>
<p>When you use a mouse, you can see which element you can interact with it thanks to the cursor, and you wouldn’t remove the cursor from your user, right? That’d make them unable to know what element they want to use!</p>
<p>We have a similar concept for keyboard navigation, and it’s called a <strong>focus indicator</strong>, which by default is an outline that surrounds a keyboard-focusable element when it’s selected by it. Being sure all your keyboard-focusable elements have a focus indicator is essential to making a website keyboard accessible, according to WCAG criteria:</p>
<blockquote>“Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.”<br /><br />— <a href="https://www.w3.org/WAI/WCAG21/Understanding/focus-visible.html">Success Criterion 2.4.7: Focus Visible</a></blockquote>

<p>This style is different depending on the browser you’re using. You can see how it looks in the various browsers in those pictures by default and when you use the CSS property <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme"><code>color-scheme</code></a> set to <code>dark</code> just to check out how the default styles would behave in dark mode.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ed16ffc-94ab-49f3-b1d1-997c788d2a97/2-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9faf6328-9f41-4dd7-a35b-f1a2e7c65141/3-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/390df019-6443-4d44-b241-acebc0d8f75c/4-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>As you can notice, Chromium-based browsers like Chrome or Edge have a black and white outline, which works in light and dark mode. Firefox opted for a blue outline which is noticeable in both modes. And Safari (and Webkit-based browsers because right now, all iOS browsers use Webkit as their browser engine) looks almost the same as Firefox but with an even subtler outline for a dark color scheme.</p>
<h4>WCAG Criterion 2.4.11</h4>
<p>Now, default focus indicators are visible, but are they <em>enough</em>? The answer is “no”. While it can work in some cases, people with visual impairments will have problems noticing it, so WCAG created the <a href="https://w3c.github.io/wcag/understanding/focus-appearance.html">Success Criterion 2.4.11 — Focus appearance</a> to make an accessible focus indicator. Right now, this criterion is part of WCAG 2.2, which is a Candidate Recommendation. So it’s quite unlikely it will change before the final release, but keep in mind that it’s still subject to changes.</p>
<blockquote>When the keyboard focus indicator is visible, one or both of the following is true:<br /><ol><li>The focus indicator:<ul><li>encloses the visual presentation of the user interface component, and</li><li>has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states, and</li><li>has a contrast ratio of at least 3:1 against adjacent colors.</li></ul></li><li>An area of the focus indicator meets all the following:<ul><li>is at least as large as the area of a 1 CSS pixel thick perimeter of the unfocused component, or is at least as large as a 4 CSS pixel thick line along the shortest side of the minimum bounding box of the unfocused component, and</li><li>has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states, and</li><li>has a contrast ratio of at least 3:1 against adjacent non-focus-indicator colors, or is no thinner than 2 CSS pixels.</li></ul></li></ol><br />Where a user interface component has active sub-components, if a sub-component receives a focus indicator, these requirements may be applied to the sub-component instead.<br /><br />— <a href="https://w3c.github.io/wcag/understanding/focus-appearance.html">Success Criterion 2.4.11 Focus Appearance</a></blockquote>

<p>There is something important to consider here, and that’s the area of the focus indicator. This area needs to meet the contrast requirements of this criterion. To illustrate that, I’ll use an example Sara Soueidan made for her article “<a href="https://www.sarasoueidan.com/blog/focus-indicators/">A guide to designing accessible, WCAG-compliant focus indicators</a>.”</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d19b2f9b-1f9f-40d3-8e8b-f89340ef3168/5-guide-keyboard-accessibility-html-css-part1.jpeg" /></p>
<p>This example uses an outline, but remember that you can use other properties to determine the focus state, like <code>background-color</code> or some creative ways of using <code>box-shadow</code> as long as it’s compliant with the requirements. However, <strong>don’t use the property <code>outline: none</code> to eliminate the element’s outline.</strong></p>
<p>That’s important for Windows High Contrast Mode because when it’s active, your website colors will be replaced with ones chosen by the user. So depending on properties like <code>background-color</code> will have no effect there. Instead, use the CSS declaration <code>outline-color: transparent</code> with the appropriate thickness to comply with WCAG criteria. You can see examples of how it works in <a href="https://www.smashingmagazine.com/2022/06/guide-windows-high-contrast-mode/">my article about Windows High Contrast Mode</a>.</p>
<h4>The Optimal Outline Size</h4>
<p>An easy way to create a compliant focus indicator is using this method Stephanie Eckles suggested in her talk <a href="https://youtu.be/FfQ-JuaNO68">Modern CSS Upgrades To Improve Accessibility</a>. First, we set custom properties in the interactive elements. Remember you can add more elements to the rule depending on the complexity of your project:</p>
<pre><code>/* Add more selectors inside the :is rule if needed */

:is(a, button, input, textarea, summary) {
    --outline-size: max(2px, 0.08em);
    --outline-style: solid;
    --outline-color: currentColor;
}
</code></pre>

<p>And then, we use those custom properties to add a global focus rule:</p>
<pre><code>:is(a, button, input, textarea, summary):focus {
    outline:
      var(--outline-size)
      var(--outline-style)
      var(--outline-color);
    outline-offset: var(--outline-offset, var(--outline-size));
}
</code></pre>

<p>The use of <code>0.08em</code> here is to give it a bigger outline size if the font is bigger, helping to scale the element’s contrasting area better with the element’s font size.</p>
<p>Keep in mind that even when WCAG mentions that the focusing area “is at least as large as the area of a <code>1</code> CSS pixel thick perimeter of the unfocused component”, it also mentions that it needs to have “a contrast ratio of at least <code>3:1</code> against adjacent non-focus-indicator colors, or is <strong>no thinner than <code>2</code> CSS pixels.</strong>” So, a minimum thickness of <code>2px</code> is necessary to comply with WCAG.</p>
<p>Remember that you might need a thicker line if you use a negative <code>outline-offset</code> because it’ll reduce the perimeter of the outline. Also, using a dashed or dotted outline will reduce the focused area roughly by half, so you’ll need a thicker line to compensate for it.</p>
<p>The outline’s ideal area is related to the perimeter of the element. Sara Soueidan once again did a great job explaining how this formula works in <a href="https://www.sarasoueidan.com/blog/focus-indicators/#2.-minimum-contrasting-area">her article about focus indicators</a>. So check it out if you want to understand better the maths behind this matter and how to apply them.</p>
<h3>CSS Focus-related Selectors</h3>
<p>With CSS, you normally use the pseudo-class <code>:focus</code> to give style to an element when it’s being focused by a keyboard, and it does its job well. But modern CSS has given us two new pseudo-classes, one that helps us with a certain use case and the other that solves an issue that happens when we use the <code>focus</code> pseudo-class. Those pseudo-classes are <code>:focus-within</code> and <code>:focus-visible</code>. Let’s dive into what they do and how they can help us with keyboard accessibility:</p>
<h4><code>:focus-within</code></h4>
<p>This pseudo-class will add a style whenever the element is being focused <em>or</em> any of the element’s children is also being focused. Let’s make a quick example to show how it looks:</p>
<pre><code>&lt;form&gt;
  &lt;label for="name"&gt;
    Name: 
    &lt;input id="name" type="text"&gt;
  &lt;/label&gt;
  &lt;label for="email"&gt;
    Email:
    &lt;input for="email" type="email"&gt;
  &lt;/label&gt;
  &lt;button&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p><strong>Very quick tangent note</strong>: <em>Consider not using <code>label</code> to wrap the <code>input</code> element. While it works in all browsers, it doesn’t work well with <a href="https://www.nuance.com/dragon.html">Dragon speech recognition software</a> because it won’t be recognized appropriately.</em></p>
<pre><code>form {
  display: grid;
  gap: 1em;
}

label {
  display: grid;
  gap: 1em;
  padding: 1em;
}

label:focus-within {
  background-color: rebeccapurple;
  color: white
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b176acc-d35d-45a1-8d0e-4b14fae35c4a/6-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>This pseudo-class is interesting to enrich the styles of certain components, as previously shown, but in others, it helps a lot to make content accessible for keyboard users. For example, I created a card for <a href="https://www.smashingmagazine.com/2022/03/guide-hover-pointer-media-queries/">my article about media queries <code>hover</code>, <code>pointer</code>, <code>any-hover</code>, and <code>any-pointer</code></a>. This card shows the content when the user puts the cursor on it, but it also shows the content when you focus the button inside of it using the <code>:focus-within</code> pseudo-class by using the same rules that are triggered on hover. You can check out the code in the mentioned article as well as in this CodePen:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/132cf902-895d-42bf-9fea-1157e9c3636c/7-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>If you use keyboard navigation, you’ll notice the order is pretty straightforward. It reads from left to right and from top to bottom, and the navigation will be the same. Now let’s use grid properties to make some changes:</p>
<pre><code>ul li:where(:nth-child(1), :nth-child(5), :nth-child(7), :nth-child(9)) {
  grid-row: span 2;
  grid-column: span 2
}

ul li:where(:nth-child(1), :nth-child(5)) {
  order: 2;
}

ul li:where(:nth-child(7), :nth-child(8)) {
  order: -1;
}

ul li:nth-child(4) {
  grid-row: 3;
  grid-column: 2 / span 2;
}

ul li:nth-child(3) {
  grid-row: 5 / span 3;
  grid-column: 3;
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2a69f43-4a91-436c-bd77-8e9d7a62c2d5/8-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>Now it looks completely disarrayed. Sure, the layout looks funny, but when you start navigating it with the Tab key, it’ll have a very random order. There is some degree of predictability now because I used numbers as the button’s label, but what happens if they have different content? It’d be impossible to predict which would be the next button to be focused on with a keyboard.</p>
<p>This is the kind of scenario that needs to be avoided. It doesn’t mean you can’t explicitly order an element within a grid or use the <code>order</code> property. That means you need to be careful with managing your layouts and be sure the visual and DOM order matches as much as possible.</p>
<p>By the way, if you want to try it by yourself, you can see the demo of this code here and experience this chaotic keyboard navigation by yourself:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b41a92da-7a91-4505-a849-83959f7d18a4/9-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35f0308c-23dd-4d1a-9e6d-d2952304c742/10-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>Now let’s start styling this component! By default, this element uses this triangle to indicate if the <code>details</code> element is opened or closed. We can remove that by adding this rule to the <code>summary</code> element.</p>
<pre><code>summary {
  list-style: none;
}
</code></pre>

<p>But we’ll still need a visual indicator to show if it’s opened or closed. My solution is to add a second element as a child of <code>summary</code>. The important part is that this element will have the attribute <code>aria-hidden="true"</code>:</p>
<pre><code>&lt;summary&gt;
  &lt;p&gt;
    How much does shipping cost?
  &lt;/p&gt;
  &lt;span aria-hidden="true"&gt;&lt;/span&gt;
&lt;/summary&gt;
</code></pre>

<p>The reason why I hid this <code>span</code> element is that we’ll be modifying its content with CSS modifying the pseudo-element <code>::before</code>, and the content we add will be read by a screen reader unless, of course, we hide it from them.</p>
<p>With that said, we can change it because the browser manages the open state of the <code>details</code> element by adding the attribute <code>open</code> to the container. So we can add and change the content using those CSS rules:</p>
<pre><code>summary span[aria-hidden="true"]::before {
  content: "+";
}

details[open] summary span[aria-hidden="true"]::before {
  content: "-";
}
</code></pre>

<p>Now, you can add the styling you need to adapt it (remember to use adequate focus states!). You can check this demo I made to see how it works. Test it with a keyboard, and you’ll notice you can interact with it without a problem.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd9d381e-e1a8-4b18-a75e-6924849298d4/11-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>But there can be multiple skip links in a site that will lead you to various parts of the site, as Smashing Magazine does. When you use the Tab Key to navigate this website, you’ll notice there are three skip links, all of them taking you to important points of the page:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b05d3d1-3a09-4cfd-bc13-6c882db2febc/12-guide-keyboard-accessibility-html-css-part1.png" /></p>
<p>They’re usually located on the site’s header, but it’s not always the case. You can add them where needed, as Manuel Matuzović shows in this tweet. He added an inline skip link to a project because the interactive map has a lot of keyboard-focusable elements.</p>
<p></p><blockquote><p>Working on a feature that allows users to skip areas with many tab stops (inline skip link). 🔥<br /><br />Video alt: A page with a bunch of links followed by an embedded map. Pressing the Tab key reveals a link that, when activated, moves focus to the next tabbable element after the map. <a href="https://t.co/utSPgzs2Kh">pic.twitter.com/utSPgzs2Kh</a></p>— Manuel Matuzović (@mmatuzo) <a href="https://twitter.com/mmatuzo/status/1511744226463305733?ref_src=twsrc%5Etfw">April 6, 2022</a></blockquote> <p></p>
<p>Now, as the usefulness of skip links is clear, let’s create one. It’s very simple; we just need to create an <code>a</code> element that takes you to the desired element:</p>
<pre><code>&lt;header&gt;
  &lt;a class="skip-link" href="#main-content"&gt;Go to main content&lt;/a&gt;
&lt;/header&gt;
&lt;main id="main-content"&gt;&lt;/main&gt;
</code></pre>

<p>Next, we need to hide visually the <code>a</code> element. What I do there is use the <code>transform</code> CSS property to remove it from the visual range:</p>
<pre><code>.skip-link {
    display: block;
    transform: translate(-9999px);
}
</code></pre>

<p>Then, we move it to the needed position when the element is being focused:</p>
<pre><code>.skip-link:focus {
  transform: translate(0)
}
</code></pre>

<p>And that’s it! Creating a skip link is easy and offers a lot of help for keyboard accessibility.</p>
<h3>Tooltips</h3>
<p>Those little text bubbles that show extra information to an element can be done with pure CSS as well, but a little disclaimer here: it is suggested that you can close a tooltip by pressing the Escape key, which it’s only possible with JavaScript. I’ll explain how to add this feature in the second part of this article, but everything else can be done in a very simple way using HTML and CSS only.</p>
<p>A common problem with tooltips is that a keyboard user cannot see them, so we need to ensure the component that triggers it is a keyboard-focusable element. Our best bet here is using the <code>button</code> element. The semantics is really simple, as Heydon Pickering shows in his book <a href="https://inclusive-components.design/tooltips-toggletips/">Inclusive Components</a>.</p>
<pre><code>&lt;div class="tooltip-container"&gt;
  &lt;button&gt;
  &lt;/button&gt;
  &lt;div role="tooltip"&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>The container with the class <code>tooltip-container</code> is there just to allow us to manipulate the container’s position with the attribute <code>role="tooltip"</code> later using CSS. Speaking of this element, you would think this role adds enough semantics to make it work, but as a matter of fact, it doesn’t, so we’ll have to rely upon a couple of <code>aria</code> attributes to link it to our <code>button</code>.</p>
<p>This attribute depends of what’s the intention of the tooltip. If you are planning to use it to <strong>name</strong> an element, you need to use the attribute <code>aria-labelledby</code>:</p>
<pre><code>&lt;div class="tooltip-container"&gt;
  &lt;button aria-labelledby="tooltip1"&gt;
    &lt;svg aria-hidden="true"&gt;
      &lt;!--  SVG Content  --&gt;
    &lt;/svg&gt;
  &lt;/button&gt;
        &lt;div id="tooltip1" role="tooltip"&gt;Shopping cart&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>However, if you want to use the tooltip to <strong>describe</strong> what an element does, you’ll need to link it using the attribute <code>aria-describedby</code>:</p>
<pre><code>&lt;div class="tooltip-container"&gt;
  &lt;button aria-label="Shopping cart" aria-describedby="tooltip2"&gt;
    &lt;svg aria-hidden="true"&gt;
      &lt;!--  SVG Content  --&gt;
    &lt;/svg&gt;
  &lt;/button&gt;
  &lt;div id="tooltip2" role="tooltip"&gt;Check, modify and finish your purchase&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Be careful with this approach; use it only to give auxiliary descriptions, not to give information that is absolutely necessary to understand what this element does. That’s because when a screen reader user generates a list of the form elements (including buttons) in the site, the description won’t be displayed unless the user is focusing on the element, as Adrian Roselli shows in <a href="https://adrianroselli.com/2022/04/accessible-description-exposure.html">his test on <code>aria-description</code> attribute</a>.</p>
<p>Now, it’s time to talk about what concerns us in this article — keyboard accessibility! For this, we need to hide the tooltip and show it until the user is either focusing the pointer on the element or when it’s being focused with a keyboard. For this, we’ll use the <code>:hover</code> and <code>:focus</code> pseudo-classes in tandem with the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator">adjacent sibling combinator</a>.</p>
<p>Additionally, it’s important you can see the tooltip when you hover over it to comply with <a href="https://www.w3.org/TR/WCAG22/#content-on-hover-or-focus">WCAG Criterion 1.4.13: Content on Hover or Focus</a>. With those considerations in mind, this is how our code should look:</p>
<div>
<pre><code>[role="tooltip"] {
  position: absolute;
  bottom: 0;
  left: 50%;
  display: none;
  transform: translate(-50%, 100%);<br />}

button:hover + [role="tooltip"], button:focus + [role="tooltip"], [role="tooltip"]:hover {
  display: block;
}
</code></pre>
</div>

<p>And this is how you create a keyboard-accessible tooltip using HTML and CSS. You can check how both examples of tooltip behave in this demo. Remember, this is not fully ready for production. You need JavaScript to close the tooltip when you press the Esc key. We’ll cover that later in the next part of this article, so keep it in mind.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/Vwxdjbe">Tooltip demo - CSS only [forked]</a> by <a href="https://codepen.io/ItsCrisDiaz">Cristian Diaz</a>.</p>
<p>As Heydon mentions in his book, tooltips have a problem when you use them for devices that don’t have a pointer, like cellphones or tablets, then a different approach for them is required. You can use CSS for that using the <a href="https://www.smashingmagazine.com/2022/03/guide-hover-pointer-media-queries/">media queries <code>hover</code> and <code>pointer</code></a>, as I explain in my article.</p>
Wrapping Up
<p>Keyboard accessibility is an essential part of accessibility. I hope this article has helped you understand how vital HTML and CSS are to make keyboard navigation a good and accessible user experience. That’s not the end of keyboard accessibility, though! I’ll be covering how we can use JavaScript to manipulate keyboard navigation and how we can use it in more complex component patterns.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Cristian Díaz)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a4d5c21a-93d3-43e5-b64c-1c3d47305f42/guide-keyboard-accessibility-html-css-part1.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[How To Search For A Developer Job Abroad]]></title>
            <link>https://smashingmagazine.com/2022/11/search-developer-job-abroad/</link>
            <guid>https://smashingmagazine.com/2022/11/search-developer-job-abroad/</guid>
            <pubDate>Fri, 11 Nov 2022 09:00:00 GMT</pubDate>
            <description><![CDATA[Working abroad is a popular prospect, yet many people &mdash; including professionals in the tech sphere &mdash; don’t know where to start. In this article, Andrew Stetsenko gives you an ultimate step-by-step guide to finding and making international opportunities happen.]]></description>
            <content:encoded><![CDATA[<p>Many millions of people dream of flying the coop and spending time working abroad.</p>
<p>The opportunity to work abroad is a popular prospect, one undimmed by the years of restriction due to the pandemic and made only more accessible thanks to hybrid working and the rise of the digital native.</p>
<p>However, despite the still-growing desire to work abroad, many people — including professionals in the IT sphere — don’t know where to start. With that in mind, I wanted to write the ultimate guide for finding international employment opportunities.</p>
<p>The article primarily aims at seasoned developers, focusing on where to look for jobs, how to apply, and how to prepare a resume to get called for interviews. I will explore the <em>dos</em> and <em>don’ts</em> during international job interviews and hopefully provide the right sort of advice that should be able to help any IT professional, at any stage of their career, be able to seek out career options abroad.</p>
<p>So, let’s dive in!</p>
<p><strong>Table of Contents:</strong></p>
<ul>
<li><a href="#how-to-prepare-your-resume-for-getting-a-developer-job-abroad">How To Prepare Your Resume</a></li>
<li><a href="#where-do-you-find-an-international-developer-job">Where Do You Find An International Developer Job?</a></li>
<li><a href="#your-primary-considerations-when-looking-for-a-developer-job-abroad">Your Primary Considerations</a></li>
<li><a href="#relocation-preparation-and-moving-to-your-new-developer-job">Relocation, Preparation, And Moving</a></li>
</ul>
How To Prepare Your Resume For Getting A Developer Job Abroad
<p>Let’s start with the basics — your resume.</p>
<p>The critical thing to remember about creating a resume for an international employer is the relevance and flexibility of skills to match your target company’s needs and their specific market.</p>
<p>While there are some hard and fast rules to resume writing that apply no matter where you’re sending an application, <strong>your resume needs to be tailored to your new market</strong>. This is where a little research goes a long way.</p>
<p>I’ll give you an example: In Malaysia, it’s considered good practice to include your personal details like marital status or date of birth on your resume. However, in other markets, these sorts of details (especially around age, sex, or marital status) are unnecessary or, in some cases, considered inappropriate.</p>
<p>So choose the information you share wisely! Your resume has to reflect your desire to relocate to your chosen market/region, it has to be hyper-personalized in approach, and it needs to sound like you’re <em>passionate about your work</em>. </p>
<h3>Resume Length, Format, And Size</h3>
<ul>
<li>Depending on your skill set and experience, the details in a developer resume will vary, but I stand by my rule of not making a resume more than <strong>2 pages</strong>.</li>
<li>Your resume should be formatted in a <strong>simple, easy-to-read font</strong> (Lato, Merriweather, or Helvetica, for example).</li>
<li>You should also include <strong>succinct summaries</strong> in sections like <em>About Me</em> or <em>Key Achievements</em>. Keep it short, keep it direct, and don’t repeat information.</li>
</ul>
<h3>Achievements</h3>
<ul>
<li>Instead of giving generic lists of tasks/duties/responsibilities, I advise you to clearly communicate your <strong>achievements and accomplishments, with statistics to back them up</strong>. This will help you stand out from other applicants.  </li>
</ul>
<p><strong>For example</strong>, if you helped develop an app, make sure you include a variety of proven KPI deliverables, such as engagement KPI metrics, UX KPI metrics, and revenue metrics, rather than just a final product showcase:</p>
<p><em>Developed a social sharing feature using Android Studio, which increased downloads by 150% in the first three months.</em></p>
<h3>Language</h3>
<ul>
<li>Use <strong>strong action verbs</strong>, such as <em>built, led, deployed, reduced, developed, automated, managed, re-architected, implemented, designed, overhauled, and so on</em> to describe your experience/accomplishments. They will bring a confident tone to your resume.</li>
<li>Use <strong>industry-specific adjectives</strong> like <em>scalable</em>, <em>fault-tolerant</em>, <em>multi-threaded</em>, and <em>robust</em> (to name a few) to highlight your expertise.</li>
</ul>
<h3>Tailoring</h3>
<ul>
<li>Tailoring doesn’t mean changing every line of your resume. It means adapting the direction and desire of your resume for a specific employer and their market.</li>
<li>Tailoring your application can take many forms: you can write a personalized cover letter, adapt your introductory paragraph to reflect your desire to work at a specific company, add specific terminology used in the job listing you’re applying for, or angle your achievements to the market and needs of a particular employer. It shows you’ve done your research and are willing and able to adapt your skill set to the needs of an employer abroad.</li>
</ul>
<p>For some great advice on writing an effective developer resume, head to <a href="https://stackoverflow.blog/2020/11/25/how-to-write-an-effective-developer-resume-advice-from-a-hiring-manager/">Stack Overflow</a> and <a href="https://www.freecodecamp.org/news/how-to-write-a-developer-resume-recruiters-will-read/">FreeCodeCamp</a> for a further deep-dive.</p>
Where Do You Find An International Developer Job?
<p>My advice is to build a strategy based around four key international job-seeking means:</p>
<ul>
<li>Job boards and aggregators;</li>
<li>Networking and network news;</li>
<li>International recruitment agencies;</li>
<li>Boolean search logic on Google.</li>
</ul>
<p>Jumping onto Google and leaving your international career in the hands of algorithmic fate is not the way to approach getting a developer job abroad.</p>
<h3>Job Boards And Aggregators</h3>
<p>Job boards and job aggregators (the <a href="https://www.smartrecruiters.com/resources/glossary/job-aggregator/">differences between the two</a> are sometimes vague but transformative to the scale of your international job search) are a popular and effective first port of call for job hunters.</p>
<p>I suggest using job boards for <em>specificity</em> (specific markets and employers in certain countries) and aggregators as <em>overview searches</em> (a generalist overview of where employers are hiring the most and in what sectors).</p>
<p>It’s also important to utilize international job boards that have filters for “relocation” and “visa sponsorship.” In other words, fish in the right pond. Here are some sites I recommend:</p>
<ul>
<li><a href="https://angel.co/jobs">AngelList Talent</a> is now one of the go-to websites for finding a tech job with a startup.</li>
</ul>
<p>You need to sign up and complete the mandatory profile information in order to filter for positions that offer visa sponsorship. Once you’re all set up on the site, you can enter your search parameters at <a href="https://angel.co/jobs">https://angel.co/jobs</a>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e14ddae-3066-446d-9dc2-6c58e7e0a99e/1-search-developer-job-abroad.png" /></p>
<p>If you open the Filters tab, you’ll find a section called “Immigration.” Choose “Only show companies that can sponsor a visa” to narrow your search appropriately.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f536f367-7b07-4ffc-abd4-edce1ba5327b/2-search-developer-job-abroad.png" /></p>
<p>If you don’t turn on this filter, you’ll find all jobs that meet your other criteria, regardless of whether they offer visa sponsorship.</p>
<ul>
<li><a href="https://relocate.me/search/">Relocate.me</a> is a job board for IT professionals (mainly software engineers) that is designed with relocation in mind. </li>
</ul>
<p>You can see job opportunities in Europe, Asia, and North America from verified employers who offer relocation benefits. The listings include specific details about the relocation packages, making it easy to compare your options. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44b768f9-09d4-4667-82ef-0a92e1b81d06/8-search-developer-job-abroad.png" /></p>
<ul>
<li><a href="https://japan-dev.com/">Japan Dev</a> is a job board for finding a variety of tech jobs in Japan. </li>
</ul>
<p>This site features hand-curated jobs from companies that have immediate openings. You can search for positions that offer relocation benefits by clicking the “Jobs with Relocation” button on the home page. You’ll be taken to the Jobs page, where you can further refine your search.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f187aab-4f88-444b-ad27-70bf20ad0611/5-search-developer-job-abroad.png" /></p>
<p>Most of the listings are for software developers and programmers, but other positions for those who work directly with developers are listed as well. </p>
<ul>
<li><a href="https://www.tokyodev.com/">TokyoDev</a> is another site that helps foreign developers find positions in Japan. </li>
</ul>
<p>You’ll be able to filter your search with labels such as “No Japanese Required,” “Apply From Abroad,” “Residents Only,” and so on.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/70a6b13f-88ff-456b-a1ac-5da41c624829/11-search-developer-job-abroad.png" /></p>
<ul>
<li><a href="https://landing.jobs/jobs?page=1&amp;vs=true&amp;match=all&amp;hd=false&amp;t_co=false&amp;t_st=false">Landing.Jobs</a> is specifically for tech jobs in Europe, with a focus on Portugal. </li>
</ul>
<p>When you’re looking for jobs through this site, be sure to find the “Visa &amp; work permit” filter section and select the options you need.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/486e10dc-57b3-46f4-a05f-ef3a1c2224c2/6-search-developer-job-abroad.png" /></p>
<ul>
<li><a href="https://swissdevjobs.ch/">SwissDevJobs</a> is, as the name indicates, specifically for IT jobs in Switzerland. </li>
</ul>
<p>The site is well-designed, with a modern and easy-to-navigate UI. In the advanced filters, you can narrow your search down to only show jobs that provide visa sponsorship with a simple checkbox.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d40405a6-14f2-485a-9e55-799cc9b6910f/10-search-developer-job-abroad.png" /></p>
<ul>
<li><a href="https://www.arbeitnow.com/?search=&amp;tags=%5B%22visa+sponsorship%22%5D&amp;sort_by=relevance&amp;page=1">Arbeit<em>now</em></a> is based in Berlin and features positions in Germany. It makes it simple to filter for jobs that provide visa sponsorship and many other options.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/690403a6-e938-4a58-ba67-994aad6f33e7/3-search-developer-job-abroad.png" /></p>
<p><a href="https://www.indeed.com/worldwide">Indeed</a>, <a href="https://www.linkedin.com/jobs/">LinkedIn Jobs</a>, <a href="https://www.simplyhired.com/">SimplyHired</a>, and <a href="https://www.monster.com/geo/siteselection">Monster</a> are major job aggregators that can be very effective when searching for developer jobs abroad if you use the appropriate keywords.</p>
<p>When searching on LinkedIn, for example, you should <a href="https://www.linkedin.com/jobs/search/?currentJobId=3326521901&amp;geoId=101282230&amp;keywords=developer%20relocation&amp;location=Germany&amp;refresh=true">add “relocation,” “visa support,” or “visa sponsorship” into the keywords tab</a>, and select the city/country/region that’s your choice for relocation. Of course, some searches can come back with opportunities not quite suited to your situation, but using relevant keywords does a good job of filtering them out.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83dcd461-5749-47da-b7fb-f029fbd821dd/7-search-developer-job-abroad.png" /></p>
<p>The same method works for Indeed, Monster, and other similar aggregators. Include “relocation,” “visa sponsorship,” or “visa support” along with your job title (or other keywords) in your search.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6e0583b-5833-430b-b897-6a64a48f9e1e/9-search-developer-job-abroad.png" /></p>
<h3>Networking And Network News</h3>
<p>Networking takes time but is a highly effective source of referral recommendations. Utilizing social networks (LinkedIn, GitHub, Twitter, and even Instagram) is a highly personal and effective way of making connections with hiring teams and business leaders worldwide.</p>
<p>But I also urge the eagle-eyed developer to look at the market and network leaders like Hacker News’ <a href="https://hn.algolia.com/?dateRange=all&amp;page=0&amp;prefix=false&amp;query=Ask%20HN%3A%20Who%20is%20hiring%3F%202022&amp;sort=byDate&amp;type=story"> Ask HN: Who is hiring?</a> and <a href="https://techcrunch.com/">TechCrunch</a> to see where the movers and shakers are in the tech world and where upticks in hiring are occurring. You can then use these media-led referrals to directly approach companies and hiring managers online, via social media channels, and through their own websites.</p>
<h3>International Recruitment Agencies</h3>
<p>For a complete end-to-end application handling service, specialist developer support is available for those looking for a little more hands-on guidance via international recruitment agencies.</p>
<p>My suggested best first ports of call are international talent acquisition agencies like <a href="https://www.globalskills.io/">Global Skills Hub</a>, <a href="https://jobs.zerotoonesearch.com/careers">Zero to One Search</a>, <a href="https://www.toughbyte.com/positions">Toughbyte</a>, <a href="https://orange-quarter.com/">Orange Quarter</a>, and <a href="http://techbrainjobs.com/">TechBrainJobs</a>, amongst others.</p>
<p>Tech companies often outsource hiring international talent to recruitment agencies, so going through a recruitment agency can be very beneficial. In addition to helping you find the right position, a good recruiter can fill you in on all of the relevant information on a company, including company relocation policy, benefits, and more.</p>
<h3>Boolean Search</h3>
<p>The trick to finding unadvertised yet very alive jobs is by using a rarely-utilized search tool strategy called Boolean logic.</p>
<p>Boolean logic refers to an algebraic formula that creates a clear “true” or “false” value to a data type by using “operator” terms while searching for jobs. For job seekers, “data type” refers to a job vacancy query, and “operator” terms refer to the words used to search for the jobs!</p>
<p>So, applying Boolean logic to a job search very quickly gives you a highly relevant shortlist of live jobs from your chosen country, region, or industry and <a href="https://relocate.me/blog/job-search/how-to-find-unadvertised-tech-jobs/">even from targeted companies’ applicant tracking systems</a> like <a href="https://jobs.lever.co">Lever</a>, <a href="https://apply.workable.com">Workable</a>, and <a href="https://boards.greenhouse.io/">Greenhouse</a>!</p>
<p>It sounds complex (and the theory behind it is), but the search terms are super effective and simple to deploy. As Reed highlights in their piece on <a href="https://www.reed.co.uk/career-advice/boolean-searching-help-job-search">Boolean job searches</a>, “You can use keyword searching almost everywhere, ranging from big search engines through to search functions within smaller sites.”</p>
<p>So, how does it work?</p>
<p>You add the relevant “operator” terms into your search platform or site that refer to specific jobs, skills, or criteria you’re looking for. It’s not as complex as it sounds!</p>
<p>These operator terms are the following:</p>
<ul>
<li><code>AND</code>: for job searches containing multiple keywords, for example, <strong>developer AND javascript AND python</strong> will guarantee search results with only those primary keywords as priority indexed terms.</li>
<li><code>OR</code>: for job searches where one of several keywords are prioritized, but not all of them need to be. For example, <strong>web developer OR software developer</strong> will bring you back jobs with both web and software developer in the title or text, but no other jobs.</li>
<li><code>""</code> marks: used in searches for a particular phrase or term. For example, putting <code>"mobile developer"</code> into a job search will <em>only</em> bring back mobile rather than other developer roles.</li>
<li><code>*</code>: for searches where you want to start with a certain term. For example, <code>*Engineer</code> will return all jobs that <em>start</em> with the term <em>Engineer</em>, such as <em>Engineering Manager</em>.</li>
<li><code>( )</code>: when you want to group certain job criteria together. For example, <strong>software developer (startup and python)</strong> will only bring back specific jobs that fit the startup and tech stack mold you’re looking for.</li>
</ul>
<p><strong>Example:</strong> <em>(site:<a href="https://jobs.lever.co">https://jobs.lever.co</a> <code>OR</code> site: <a href="https://apply.workable.com">https://apply.workable.com</a>) (engineer OR developer) <code>AND</code> android <code>AND</code> (relocation assistance <code>OR</code> relocation support <code>OR</code> relocation package <code>OR</code> visa sponsorship <code>OR</code> visa support)</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8f46c9ce-d1a6-42c5-ba5f-641d4d6b9796/4-search-developer-job-abroad.png" /></p>
<p>Ex-Amazoner Kip Brookbank <a href="https://www.linkedin.com/pulse/using-boolean-searches-source-your-next-job-kip-brookbank/">has a great article on LinkedIn</a> about using Boolean searches to source a job. Make sure to check it out!</p>
<h3>Put It All Together</h3>
<p>The end result of using all four strategies above is a highly targeted, specific, niche, and personal job search that utilizes the best of digital job searching tools and the international recruitment consultant market.</p>
<p>But above all else, the above four points should drive home the feeling that you <em>can</em> get the perfect international tech job with a bit of patience and consideration using these very effective, free tools at your disposal.</p>
<p>By using each specific search platform’s own location tools, you can narrow down the right sort of opportunities for you. Recruiters offer advice, targeted recruitment support, and hands-on help finding a role. Through networking, you can get job referrals. Finally, using Boolean search removes a lot of the stress of sifting through hundreds of jobs.</p>
Your Primary Considerations When Looking For A Developer Job Abroad
<p>Now you’ve got your resume sorted, and you’re utilizing a raft of different strategies to source your new developer role abroad. So what are your primary considerations beyond clicking the “apply” button?</p>
<p>My advice is to start by building an application strategy (or multiple strategies) that will handle the complexity of relocation and which will keep you focused on building a foundation of credible, flexible professionalism in the eyes of your new employer.</p>
<p>These strategies include some of the points raised above and further details on referral systems, social media approaches, and watching out for red flags!</p>
<h3>Application Strategies</h3>
<p>My top 5 applications strategies are:</p>
<ol>
<li><strong>Apply through specific job boards or aggregators.</strong><br />As mentioned above, utilize all digital options at your disposal.</li>
<li><strong>Apply with information from company websites.</strong><br />Go directly to your chosen company or use Boolean search terms to shortlist your chosen jobs better.</li>
<li><strong>Seek referrals.</strong><br />One of the most versatile and personal job search channels, referrals are found via your network and network news.</li>
<li><strong>Contact your target companies’ HR departments through LinkedIn or email.</strong><br />Utilizing social media is no bad thing, and LinkedIn is your primary weapon.</li>
<li><strong>Watch out for red flags.</strong><br />Get yourself savvy about what constitutes a poor job advert (<a href="https://resources.workable.com/stories-and-insights/recruitment-fails-bad-job-ads">Workable</a> provides some eye-opening advice on bad job ads), and use <a href="http://glassdoor.com/">Glassdoor</a> and <a href="http://teamblind.com/">Blind</a> to sift through companies with bad reviews. You might dodge a career bullet by doing so.</li>
</ol>
<h3>Interview Preparation</h3>
<p>In my experience working with incredibly exacting tech talent, sometimes the basics of interview prep can get lost in the melting pot of assessment testing and high-value candidate handling.</p>
<p>There are some <em>absolutely crucial</em> dos and don’ts for getting a developer job abroad you <em>must</em> adhere to:</p>
<p><strong>Do:</strong></p>
<ul>
<li><strong>Learn about the company.</strong><br />Do your research, understand your employer’s journey, and get under the skin of their company’s purpose and mission.</li>
<li><strong>Look up interview questions that the company may ask and consider your answers.</strong><br />Prepare for any and every question, from coding to critical thinking, from teamwork to timekeeping.</li>
<li><strong>Prepare your own questions to ask to show your interest.</strong><br />Your research should guide the types of questions you want to ask your prospective new employer. This is your one chance to mine them for information!</li>
<li><strong>Be on time.</strong>
A basic interview <em>must</em> is not be late.</li>
<li><strong>Reiterate your desire to relocate and your plans to do so.</strong><br />Although I do go into more detail on this below, international employers will want to know how you plan to factor in a relocation into your application. Better to be prepared than caught out.</li>
</ul>
<p><strong>Don’t:</strong></p>
<ul>
<li><strong>Criticize or otherwise speak poorly about former or current employers.</strong><br />It’s not a good look, shows a lack of professionalism, and will reflect poorly on your exit strategies.</li>
<li><strong>Imply that your main interest in the job is relocation.</strong><br />Although relocation is important, it shouldn’t be <em>the</em> main reason for moving as it makes the job sound like a means to an end.</li>
<li><strong>Say “I don’t know” during the interview.</strong><br />Contrary to popular belief, you <em>are</em> allowed to make mistakes in an interview. But rather than so you don’t know, say you’d be happy to provide an answer for it in a follow-up interview or post-interview as you don’t have the right information to hand or something to that effect. In short, indicate you may not know <em>now</em>, but you can find out easily.</li>
<li><strong>Ask about salary, bonuses, and benefits during the interview.</strong><br />Interviews are designed to determine whether you have the character, skills, drive, and determination for a role. The salary and bonus conversation will come later. It’s not a conversation for now <em>unless</em> an interviewer asks you directly. My advice is to be prepared and know your worth!</li>
<li><strong>Forget details on your resume.</strong><br />You <em>will</em> be asked about certain points on your resume, and your interview will ask you to elaborate on key points. You must know your resume back to front. If you don’t, you run the risk of looking half-prepared and out of your depth.</li>
</ul>
<h3>How To Negotiate A Job Offer And Navigate Discussions About Your Salary</h3>
<p>Contract, salary, and compensation negotiation is a vital moment in your international developer job search. This discussion is not just about money alone; this is your opportunity to talk about everything from relocation packages to IP rights, expat taxes, and more.</p>
<ul>
<li><strong>First things first, do your research.</strong><br />Understand the expectations for tech talent in the market (and for the size of the company) you wish to relocate to, and formulate an idea of what you’d want from your pay packet commensurate with the situation of your ideal employer.</li>
<li><strong>Be careful about offering salary expectations.</strong><br />The best way to approach a discussion around salary is to ask for an offer first rather than put in your expectations based on your research. See if the offer meets your idea of fair pay and relocation package (if offered).</li>
<li><strong>Relocation packages</strong><br />Does your new employer help with relocation, and if so, by how much and at which stage?</li>
<li><strong>Negotiate perks and benefits</strong><br />From subsidized travel to commute costs, your employer needs to put a whole package in writing.</li>
</ul>
<p>Other negotiation considerations should be:</p>
<ul>
<li><strong>Factor in expat taxes</strong>: do you pay more tax while working abroad?</li>
<li><strong>Discuss intellectual property rights</strong>: do you retain any IP in the course of product creation, or are there other options available?</li>
<li><strong>Ensure agreement is enforceable</strong>: international employment contracts can be a foggy minefield to navigate through, so do your research regarding everything from employer’s rights to e-signing capability.</li>
</ul>
Relocation, Preparation, And Moving To Your New Developer Job
<p>Relocation is a complex, emotional, and risky endeavor, and never one a developer should take lightly. I advise relocating developer talent to run through a pre-travel hitlist to guarantee smooth sailing:</p>
<ul>
<li><strong>Learn everything you can about your destination.</strong><br />The first thing you should do is deep-dive into the place you’re moving to, from intercity travel to the nuances of the local language. It’ll help reduce the culture shock of the first few weeks and months in a new place.</li>
<li><strong>Visit your new location before your move.</strong><br />I appreciate international travel isn’t cheap, but if it’s possible to visit pre-move, you’ll benefit from a bit of a headstart with getting around and making some local connections. It’s also beneficial when it comes to meeting potential landlords, work colleagues, and so on.</li>
<li><strong>Determine the cost of living in your new location.</strong><br />Cost of living fact-finding will be done around the negotiation stage. Still, it’s worthwhile understanding how far your salary will stretch and any nuances around pay and tax bandings, cost of living, rent, food, travel, and the like. That’s where websites like <a href="https://www.numbeo.com/cost-of-living/">Numbeo</a> come in handy.</li>
<li><strong>Understand what’s included in your relocation package.</strong><br />This is vital. How much of your travel, accommodation, or relocation will be subsidized, if at all, by a new employer? This is a cornerstone of your financial planning arrangements.</li>
<li><strong>Consider your family’s requirements in your planning.</strong><br />Finally, although it should never be far from your mind and it no doubt won’t be, your family is an important factor in your relocation. I urge you to include them as much as possible in the process and remember the emotional toll of moving away from home to a new country, as much as the physical and financial.</li>
</ul>
<p>Finding a developer job abroad is a labor of love — one that has to take stock of everything from financial planning to tweaking and perfecting your resume for an international audience.</p>
<p>It takes a lot of preparation, but the results of a well-planned international job search are incredibly rewarding.</p>
<p>Moving abroad for work is one of the most rewarding and life-changing things you can do, especially if you’re a talented worker with an in-demand skill set like software development.</p>
<p>The world is your oyster!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Andrew Stetsenko)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b185412-0ec6-4926-8a15-a73bf00576e3/search-developer-job-abroad.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Design Systems: Useful Examples and Resources]]></title>
            <link>https://smashingmagazine.com/2022/11/design-systems-inspiration-resources-case-studies/</link>
            <guid>https://smashingmagazine.com/2022/11/design-systems-inspiration-resources-case-studies/</guid>
            <pubDate>Wed, 09 Nov 2022 07:00:00 GMT</pubDate>
            <description><![CDATA[Everything design systems on accessibility, enterprise design systems, Figma kits, data visualization, motion design, multi-lingual design, naming, ROI calculator and UX writing.]]></description>
            <content:encoded><![CDATA[<p>Design systems ensure alignment, reusability, and consistency across a project or brand. And while we have gotten very good at breaking down UIs into reusable components, a lot of design systems aren’t as useful and practical as they could be, or they aren’t even used at all. So how can you make sure that the work you and your team put into a design system really pays off? How can you <strong>create a design system that everyone loves to use</strong>?</p>
<p>In this post, we’ll take a closer look at <strong>interesting design systems</strong> that have mastered the challenge and at <strong>resources</strong> that help you do the same. We’ll explore how to deal with naming conventions, how motion and accessibility fit into a design system, and dive deep into case studies, Figma kits, and more. We hope that some of these pointers will help you create a design system that works well for you and your team.</p>
<h3>Table of Contents</h3>
<p>Below you’ll find quick jumps to real-world design systems and specific design system topics. Scroll down for a general overview. Or <a href="https://www.smashingmagazine.com/2022/11/design-systems-inspiration-resources-case-studies/#inspiring-real-world-design-systems">skip the table of contents</a>.</p>
<ul>
  <li><a href="#audi-visual-examples-of-do-s-and-don-ts">Audi Design System</a></li>
  <li><a href="#brand-estonia-custom-design-attributes">Brand Estonia Design System</a></li>
  <li><a href="#accessibility-in-design-systems">Carbon Design System</a></li>
  <li><a href="#shopify-if-and-more-data-visualization">Culture Amp Design System</a></li>
  <li><a href="#deutsche-bahn-content-guidelines-and-ux-writing">Deutsche Bahn Design System</a></li>
  <li><a href="#shopify-if-and-more-data-visualization">If Design System</a></li>
  <li><a href="#nord-accessibility-and-naming-conventions">Nord Design System</a></li>
  <li><a href="#olympic-brand-branding-and-multi-lingual-design">Olympic Brand Design System</a></li>
  <li><a href="#shopify-if-and-more-data-visualization">Shopify Design System</a></li>
  <li><a href="#workbench-comprehensive-live-examples">Workbench Design System</a></li>
  <li><a href="#accessibility-in-design-systems">accessibility</a></li>
  <li><a href="#brand-expression-in-design-systems">brand expression</a></li>
  <li><a href="#design-system-case-studies">case studies</a></li>
  <li><a href="#brand-estonia-custom-design-attributes">custom design attributes</a></li>
  <li><a href="#shopify-if-and-more-data-visualization">data visualization</a></li>
  <li><a href="#enterprise-design-system-101">enterprise design systems</a></li>
  <li><a href="#design-systems-for-figma">Figma kits</a></li>
  <li><a href="#workbench-comprehensive-live-examples">live examples</a></li>
  <li><a href="#measuring-a-design-system">measuring design systems</a></li>
  <li><a href="#motion-in-design-systems">motion</a></li>
  <li><a href="#olympic-brand-branding-and-multi-lingual-design">multi-lingual design</a></li>
  <li><a href="#design-system-naming-conventions">naming conventions</a></li>
  <li><a href="#design-system-roi-calculator">ROI calculator</a></li>
  <li><a href="#deutsche-bahn-content-guidelines-and-ux-writing">UX writing</a></li><br />  <li><a href="#audi-visual-examples-of-do-s-and-don-ts">visual examples</a></li>
  <li><a href="#design-system-in-90-days">workbook</a></li>
</ul>

Inspiring Real-World Design Systems
<h3>Nord: Accessibility And Naming Conventions</h3>
<p>Bringing together everything that’s required to manage a healthcare business digitally, Nordhealth creates software that aims to redefine healthcare. As such, their design system <a href="https://nordhealth.design/">Nord</a> is heavily focused on accessibility.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/86142247-6bf8-4405-8308-fa217201f2d7/nord-design-system-opt.png" /></p>
<p>Nord offers plenty of customization options, themes, and a fully-fledged CSS framework, plus dedicated guides to <a href="https://nordhealth.design/naming/">naming conventions</a> and <a href="https://nordhealth.design/localization/">localization</a>, for example. Unfortunately, the <a href="https://nordhealth.design/figma/">Nord Figma Toolkit</a> isn’t open-sourced yet.</p>
<h3>Workbench: Comprehensive Live Examples</h3>
<p>Gusto serves more than 200,000 businesses worldwide, automating payroll, employee benefits, and HR. To enable their team to <strong>develop cohesive and accessible experiences</strong> for Gusto’s platform, the <a href="https://workbench.gusto.com/">Workbench</a> design system encompasses Gusto’s design philosophy, design tokens, creative assets, React components, and utilities — and documentation to tie it all together.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0e0ef814-2122-4d87-b1e6-62ef78970666/workbench-design-system-opt.png" /></p>
<p>What really stands out in the Workbench system are the comprehensive live examples that explain exactly how components should be used in different contexts. Do’s and don’ts, visual explanations, and implementation details ensure that both designers and developers working with Workbench can <strong>use the design system effectively</strong>. For even more convenience, there’s also a <a href="https://marketplace.visualstudio.com/items?itemName=gusto-design-systems.workbench-vscode">Gusto Workbench VS Code Extension</a> with common snippets for UI components.</p>
<h3>Olympic Brand: Branding And Multi-Lingual Design</h3>
<p>The Olympic Games are probably one of the most widely recognized brands in the world. Since the birth of the modern Games more than 125 years ago, hundreds of people have grown and enhanced the Olympic brand. To <strong>increase consistency, efficiency and impact</strong> across all that they do, the IOC hired a Canadian agency to create a comprehensive design system that conveys the timeless values of the Olympic Games and propels the brand into the future.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbf44214-e73f-4103-90b7-497e781753cc/olympic-design-system-opt.png" /></p>
<p>The <a href="https://olympics.com/ioc/olympic-brand">Olympic design system</a> is focused on branding and identity design, but also provides examples of illustrations and graphic elements. It shows how to manage multi-lingual challenges and how to use typography, with plenty of good and not-so-good examples and guidance notes along the way.</p>
<h3>Brand Estonia: Custom Design Attributes</h3>
<p>Pure and contrasting nature, digital society, and smart, independent-minded people are the <strong>core values behind the brand</strong> Estonia. The <a href="https://brand.estonia.ee/?lang=en">Brand Estonia design system</a> maps the country’s strengths and shows how to express them through writing, designs, presentations, and videos.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7e8d5fb7-e81a-4651-9a92-9361a62dacdb/estonia-design-system-opt.png" /></p>
<p>Stories, core messages, facts, and plenty of examples and templates provide a solid foundation for creating texts and designs across the brand — be it on the web, in social media, or print. A special highlight of Estonia’s design system lies on authentic photos and custom <strong>design attributes</strong> such as wordmarks and boulders to underline the message.</p>
<h3>Audi: Visual Examples Of Do’s And Don’ts</h3>
<p>Audi UIs range from websites to applications for a particular service. The <a href="https://www.audi.com/ci/en/guides/user-interface/introduction.html">Audi design system</a> provides a joint set of components, modules, and animations to create a well-balanced, system-wide user experience — from the app to the vehicle.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b11a7bc5-74ea-415f-8799-6bd021fdd905/audi-design-system-opt.png" /></p>
<p>Along with brand appearance guidelines and UI components, a handy feature of the design system is its <strong>comprehensive set of visual examples</strong> of how a component should (and shouldn’t) be used in Audi’s interfaces. There is also a Audi UI Kit for Figma and a Sketch UI library that ensure that designers use the most up-to-date components and icons in their products.</p>
<h3>Deutsche Bahn: Content Guidelines And UX Writing</h3>
<p>Deutsche Bahn, the national railway company of Germany, is one of the most recognized brands in Germany. With the help of their <a href="https://marketingportal.extranet.deutschebahn.com/en/brandguide/homepage">DB Digital Product Platform</a>, the company enables developers, designers, and copywriters to build flexible digital experiences with an emphasis on mobility.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b6899d5-fc08-4e52-9131-51146a588e58/db-design-system-opt.png" /></p>
<p>The design system features content guidelines, accessibility considerations, code examples, components, and contextual examples of how to use them. It also provides <strong>guidelines around UX writing</strong> and helpful visual guides to accessibility and logo. Everything is open source on GitHub and NPM.</p>
<h3>Shopify, If, And More: Data Visualization</h3>
<p>Data is pretty much useless if we can’t make sense of it. Luckily, data visualization helps us tell the full story. But how to include data visualization in a design system? Here are some examples.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4f08796-d948-4a63-8666-2dcc7f54765d/if-colors-opt.png" /></p>
<p>Shopify’s design system <a href="https://polaris.shopify.com/design/data-visualizations">Polaris</a> maps out guidelines for how to approach data visualization and defines five core traits for successful data visualizations. Do’s and don’ts for different data visualizations deliver practical examples. <a href="https://cultureamp.design/guidelines/data-visualization/">Culture Amp</a> features helpful further reading <strong>resources for each type of data visualization</strong> they define in their design system. The <a href="https://design.if.eu/design/foundation/data-visualization">If Design System</a> shines a light on color in data visualizations, and the <a href="https://carbondesignsystem.com/data-visualization/getting-started/">Carbon Design System</a> comes with demos and ready-to-use code snippets for React, Angular, Vue, and Vanilla.</p>
<h3>Design Systems For Figma</h3>
<p>Atlassian, Uber, Shopify, Slack — these are just a few of the design systems you’ll find on <a href="https://www.designsystemsforfigma.com/">Design Systems For Figma</a>. Curated by Josh Cusick, the site is a growing repository of <strong>freely available Figma kits</strong> of design systems — grouped, organized, and searchable.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cee57740-8471-46b8-9de0-8aa6d00ca90f/design-systems-for-figma-opt.png" /></p>
<p>Not featured in the collection, but worth looking into as well, is the <a href="https://www.figma.com/community/file/946837271092540314">GOV.UK design system Figma kit</a>. It focuses specifically on complex user journeys and web forms. Lots of valuable insights and inspiration are guaranteed.</p>
Design System Resources
<h3>Design System Naming Conventions</h3>
<p>Let’s face it, naming things can be hard. Particularly in a design system, where you need to find names for your components, styles, and states that can be <strong>easily understood by everyone</strong> who works with it. But how to best tackle the task? Ardena Gonzalez Flahavin explores not only <a href="https://backlight.dev/blog/naming-conventions-for-design-systems/">why we should care about naming in our design systems</a> but also what we should keep in mind when doing so.</p>
<p>Shayna Hodkin also summarized <a href="https://www.invisionapp.com/inside-design/naming-conventions/">best practices for solid naming conventions</a> for the different categories in a design system — from colors and text styles to layer styles and components.</p>
<p>Another great read on the topic comes from Jules Mahe. To help you <strong>find the right balance</strong> between clarity, searchability, and consistency, Jules summarized <a href="https://zeroheight.com/blog/naming-conventions-for-your-design-system/">tips for naming your design files</a>, understanding what you need to name in a design system, and structuring it. Three useful resources for futureproofing your design system.</p>
<h3>Accessibility In Design Systems</h3>
<p>When building a design system, it’s a good idea to include guidelines and documentation for accessibility right from the beginning. By doing so, you reduce the need for repeat accessibility work and <strong>give your team more time to focus</strong> on new things instead of spending it on recreating and testing accessible color palettes or visible focus states again and again. In her <a href="https://tetralogical.com/blog/2022/06/24/accessible-design-systems/">article on accessible design systems</a>, Henny Swan explores what an accessible design system needs to include and how to maintain it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e8aa096-31e4-4f21-8bd2-7f3d10091703/accessibility-beyond-compliance-opt.png" /></p>
<p>To shift the understanding of accessibility from one of basic compliance to a truly inclusive, human-centered experience, the team at AdHoc released their <a href="https://adhoc.team/playbook-accessibility/">Accessibility Beyond Compliance Playbook</a>. It explores several ways to improve accessibility — from the immediate task of building accessible products to creating teams of people that underscore an Accessibility Beyond Compliance mindset.</p>
<p>Another handy resource to <strong>help you incorporate accessibility efforts</strong> comes from IBM. Their open-source <a href="https://carbondesignsystem.com/guidelines/accessibility/overview/">Carbon Design System</a> is based on WCAG AA, Section 508, and European standards to ensure a better user experience for everyone. It gives valuable insights into how users with vision, hearing, cognitive, and physical impairments experience an interface and what designers should think about to ensure their design patterns are operable and understandable.</p>
<p>For more <strong>practical tips</strong>, be sure to check out the <a href="https://www.ibm.com/able/requirements/requirements/">IBM Accessibility Requirements</a> checklist on which Carbon is based. It features detailed tips to make different components and design patterns comply with accessibility standards. A way forward to empowering your diverse user base.</p>
<h3>Brand Expression In Design Systems</h3>
<p>When it comes to visual elements like icons and illustrations, many companies have difficulties finding the right balance between being on-brand, useful, and scalable. The team behind <em>Design Systems For Figma</em> also faced this challenge and came up with a recipe for creating and scaling a system of visuals. Elena Searcy <a href="https://www.designsystemsforfigma.com/blog/brand-expression-in-design-systems-icons-illustrations">summarized how this system works</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b265783-402a-4bf9-b395-cd3a2c7c9434/design-system-illustrations-opt.png" /></p>
<p>In her blog post, Elena starts with the smallest visual element, an icon, explaining what her team aims for when choosing and creating icons to make them <strong>align with the brand</strong> and provide real value for the user. Elena also shares insights into how they handle illustrations, including a scalable way of creating them and considerations regarding anatomy, style, and color. A great example of how a set of established rules can help make visuals more meaningful.</p>
<h3>Motion In Design Systems</h3>
<p>Motion in design is powerful. It can help to reduce cognitive load, guide users through pages and actions, provide user feedback, improve the discoverability of features, and improve perceived response time. To <strong>make full use of motion</strong>, the design team at Salesforce created an end-to-end motion language for their products: the <a href="https://medium.com/salesforce-ux/what-you-need-to-know-about-the-new-salesforce-kinetics-system-ce10e9ae66a9">Salesforce Kinetics System</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f1de13e-ecc1-4061-8838-9bff19cd01c9/motion-design-systems-opt.png" /></p>
<p>As Pavithra Ramamurthy, Senior Product Designer at Salesforce, explains, the intention behind the Salesforce Kinetics System is to enable the evolution and scaling of kinetic patterns across products, with design system components that are pre-baked with motion right out-of-the-box.</p>
<p>But how do you scale these motion patterns from design system to product? How would teams <strong>actually use the artifacts in their daily workflows</strong>? Pavithra wrote a <a href="https://medium.com/salesforce-ux/how-we-brought-kinetics-to-salesforces-new-global-navigation-48d6193325db">case study</a> that takes a closer look to demonstrate the possibilities. Interesting insights guaranteed.</p>
<h3>Enterprise Design System 101</h3>
<p>Introducing an enterprise design system is a lot of work. But it is work that will pay off. Especially with large teams, multiple platforms, and numerous user interfaces to manage, having a single source of truth helps <strong>maintain a consistent user experience</strong>. So what do you need to consider when building your own? <a href="https://adamfard.com/blog/enterprise-design-system">Adam Fard takes a closer look</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/877d4883-420e-4b31-b35d-47d77096b81f/enterprise-design-systems-opt.png" /></p>
<p>As Adam explains, an enterprise design system is a system of best practices, reusable design elements, processes, usage guidelines, and patterns that help reinforce the brand, improve the UX design process, and optimize the user experience. He compares it to a box of Lego: the building blocks are the collection of code and design components, the building instructions that you’ll usually find inside the box correspond to <strong>a collection of guidelines</strong>, processes, and best practices that ensure that co-designing and cross-collaboration are seamless. If your enterprise traverses numerous sites or apps, Adam’s writeup is a great opportunity to get familiar with the concept of enterprise design systems.</p>
<h3>Measuring A Design System</h3>
<p>When you’ve built a design system or are just about to start working on one, metrics might not be the thing you’re concerned about at first sight. However, measuring your design system is more important than you might think. In his article “<a href="https://zeroheight.com/blog/how-to-measure-your-design-system/">How to measure your design system?</a>”, Jules Mahe dives deeper into why it’s worth the effort.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df549d2d-2a10-4012-a48b-355a90ca7065/measuring-design-system-opt.png" /></p>
<p>Jules explains how to define the KPIs for your design system and how to get quantitative data measurements to learn more about a design system’s efficiency. Qualitative data conducted with the help of surveys and interviews make the narrative more compelling. Of course, Jules also takes <strong>a closer look at how to use the data</strong>. As he concludes, measuring a design system is challenging and requires time, but it will be a goldmine and one of the essential levers for your design system’s growth and sustainability.</p>
<h3>Design System ROI Calculator</h3>
<p>Your boss is hesitant that the work you’ll put into a design system will eventually pay off? The <a href="https://www.knapsack.cloud/calculator">Design System ROI Calculator</a> might be just what you need to convince them that the time and money invested in a design system is a good investment.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd11dd9c-1682-401f-bc4f-c5f308269b97/roi-calculator-opt.png" /></p>
<p>The ROI calculator helps you understand and project cost savings when implementing a design system. It calculates total employee savings from implementing a design system, as well as <strong>time saving and efficiency gain</strong> by component or UI element. To estimate total savings, you can select between different scenarios based on team size and product calculation.</p>
<h3>Design System Case Studies</h3>
<p>Having robust components and patterns that can be reused in different situations is the essential idea behind every design system and often seems like the magical wand everyone has waited for to <strong>solve challenges and improve collaboration</strong>. Henry Escoto, UX &amp; Design at FOX Corporation, offers a perspective on design systems that is a bit different. He claims that it’s actually the practice which can truly make a difference.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ea23ac9-8603-45ff-87b9-cfc56b6de375/design-systems-case-studies-opt.png" /></p>
<p>In his case study “<a href="https://medium.com/fox-tech/our-design-system-journeys-a533c206f5ca">Our Design System Journeys</a>”, Henry shares in-depth insights into FOX Tech Design’s design systems Delta and Arches to find answers to the following questions: How will a design system truly help your product design? What does it take to <strong>build and execute a design system</strong> within an organization? How to inject the practice into existing workflows? And last but not least, what is the pay off of such an investment?</p>
<p>Another interesting case study comes from Jan Klever. Jan is a designer at Quero Educação and also fills the role of the organization’s Design System Ops. He shares from his team’s experience <a href="https://bootcamp.uxdesign.cc/ops-the-design-system-has-evolved-6f072696e828">how having a dedicated Design System Ops role can help when it comes to maintenance</a> and following up on the product.</p>
<h3>Design System In 90 Days</h3>
<p>When you’re starting to work on a design system, you do it with the intent to build something that lasts, a system that teams love to use and that saves them precious time in their daily work. However, many attempts to build a design system end up in great libraries that don’t get used as much as you had hoped. But how do you create <strong>a design system that becomes an established part</strong> of your organization’s workflow? SuperFriendly published a <a href="https://superfriendly.com/design-systems/books/design-system-90-days/">practical workbook</a> in which they take you and your team from zero to a design system that lasts — in 90 days.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd4bdec3-4b5e-464c-8370-082e8387b59b/90-days-design-system-opt.png" /></p>
<p>Written for cross-disciplinary teams of design, engineering, and product, the workbook consists of a 130-page PDF and FigJam prompts and Figma templates you’ll use to complete activities. No theory, <strong>only clear instructions</strong> on what to do and how to do it over a 90-day timeframe. At $349, the workbook isn’t cheap, but considering that it can save you about 6–9 months of figuring out what work to do, the investment is definitely worth considering.</p>
Wrapping Up
<p>Have you come across a design system you found helpful? Or a resource or case study that eased your work and that you’d like to share with others? We’d love to hear about it in the comments below.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/02e0d4d1-43d3-4d9d-8d3d-ad10bcc22b2c/design-systems-inspiration-resources-case-studies.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[What’s New In Next.js 13?]]></title>
            <link>https://smashingmagazine.com/2022/11/whats-new-nextjs-13/</link>
            <guid>https://smashingmagazine.com/2022/11/whats-new-nextjs-13/</guid>
            <pubDate>Mon, 07 Nov 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[Let’s talk about Next.js, one of the most well-known React frameworks used for production. From new components to font optimization, Atila shares a quick overview and invites you to join his [Advanced Next.js Masterclass](https://smashingconf.com/online-workshops/workshops/advanced-nextjs-atila-fassina) taking place later this month.]]></description>
            <content:encoded><![CDATA[<p>October has come and gone, and with it, Next.js has released a new major version packed (pun intended) with tons of new features — some of which can be seamlessly adopted from your Next.js 12 app, while others not so much.</p>
<p>If you’re just jumping on the bandwagon, it may be confusing to distinguish the hype, the misinformation, and what’s stable for your production apps, but fear not! I’m here to give you a nice overview and get you up to speed.</p>
What Misinformation?
<p>As with all Next.js releases, there are a few APIs that are moved into the stable core and for recommended use, and there are others still in the experimental channel. “Experimental” APIs are still up for debate. The main functionality is there, but the question of <strong>how these APIs behave and how they can be used</strong> is still susceptible to change as there may be bugs or unexpected side effects.</p>
<p>In version 13, the experimental releases were big and took over the spotlight. This caused many people to consider the whole release unstable and experimental — but it’s not. Next.js 13 is actually quite stable and <strong>allows for a smooth upgrade from version 12</strong> if you don’t intend to adopt any experimental API. Most changes can be incrementally adopted, which we’ll get into detail later in this post.</p>
Releases Summary
<p>Before we dig deeper into what each announcement entails, let’s check on a quick list and balance experiments and stable features.</p>
<h4>Experimental</h4>
<ul>
<li>App Directory;</li>
<li>New Bundler (Turbopack);</li>
<li>Font Optimization.</li>
</ul>
<h4>Stable</h4>
<ul>
<li>“New” Image Component to replace legacy <code>Image</code> component as default;</li>
<li>ES Module Support for <code>next.config.mjs</code>;</li>
<li>“New” <code>Link</code> component.</li>
</ul>
The App Directory
<p>This feature is actually a big architectural rewrite. It puts React Server Components front and center, leverages a whole new routing system and router hooks (under <code>next/navigation</code> instead of <code>next/router</code>), and flips the entire data-fetching story.</p>
<p>This is all meant to enable big performance improvements, like eagerly rendering each part of your view which doesn’t depend on data while <strong>suspending</strong> (you read that right!) the pieces which are fetching data and getting rendered on the server.</p>
<p>As a consequence, this also brings a huge mental model change to how you architect your Next.js app.</p>
<p>Let’s compare how things were versus how they will work in the App directory. When using the <code>/pages</code> directory (the architecture we have been using up to now), data is fetched from the page level and is cascaded down toward the leaf components.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2baebac0-1cfe-4ca8-a180-d3828a764978/visualization-architecture-app-directory-feature.png" /></p>
<p>In contrast, given that the app directory is powered by Server Components, <strong>each component is in charge of its own data</strong>, meaning you can now <em>fetch-then-render</em> every component you need and cache them individually, performing <a href="https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration">Incremental Static Regeneration (ISR)</a> at a much more granular level.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/647ff188-e91c-4864-9059-39f8455b1e61/visualization-fetch-then-render.png" /></p>
<p>Additionally, Next.js will carry on optimizations: Requests will be deduped (not allowing different components to fire the same request in parallel), thanks to a change in how the <code>fetch</code> runtime method works with the cache. By default, all requests will use strong cache heuristics (“force-cache”), which can be opted out via configuration.</p>
<blockquote>You read it right. Next.js and React Server Components both interfere with the <code>fetch</code> standard in order to provide resource-fetching optimisations.</blockquote>

<h3>You Don’t Need To Go "All-In"</h3>
<p>It is important to point out that the transition from the <code>/pages</code> architecture to <code>/app</code> can be done incrementally, and both solutions can coexist as long as routes don’t overlap. There’s currently <strong>no mention</strong> in Next.js’ roadmap about deprecating support for <code>/pages</code>.</p>
<p><strong>Recommended Reading</strong>: <em><a href="https://www.smashingmagazine.com/2021/07/isr-dpr-explained/">ISR vs DPR: Big Words, Quick Explanation</a> by Cassidy Williams</em></p>
New Bundler And Benchmarks
<p>Since its first release, Next.js has used <a href="https://webpack.js.org/">webpack</a> under the hood. This year, we have watched a new generation of bundlers, written in low-level languages, popping up, such as ESBuild (which powers Vite), Parcel 2 (Rust), and others. We have also watched Vercel setting the stage for a big change in Next.js. In version 12, they added <a href="https://swc.rs/">SWC</a> to their build and transpilation process as a step to replacing both <a href="https://babeljs.io/">Babel</a> and <a href="https://github.com/terser/terser">Terser</a>.  </p>
<p>In version 13, they announced Turbopack, a new bundler written in Rust with very <a href="https://nextjs.org/blog/next-13#introducing-turbopack-alpha">bold performance claims</a>. Yes, there has been controversy on Twitter about which bundler is the fastest overall and how those benchmarks were measured. Still, it’s beyond debate how much Turbopack can actually help large projects written in Next.js with way better ergonomics than any other tool (for starters, with built-in configuration).</p>
<blockquote>This feature is not only experimental but actually only works with <code>next dev</code>. You should not (and as of now <strong> can’t </strong>) use it for a production build.</blockquote>



Font Optimization
<p>The new <code>@next/font</code> module allows making performance optimization to your Web Fonts during build time. It will download the font assets during build-time and host them in your very own <code>/public</code> folder. This will save a round-trip to a further server, avoid an additional handshake, and ultimately deliver your font in the fastest way possible and cache it properly with the rest of your resources.</p>
<p>Remember that when using this package, the it's important to have a working internet connection when you run your development build the first time so it can cache it properly, otherwise it will fallback to system fonts if <a href="https://nextjs.org/docs/api-reference/next/font#adjustfontfallback"><code>adjustFontFallback</code> is not set</a>.</p>
<p>Additionally, <code>@next/font</code> has a special module for Google Web Fonts, conveniently available as they are widely used:</p>
<pre><code>import { Jost } from '@next/font/google';
// get an object with font styles:
const jost = Jost();
// define them in your component:
&lt;html className={jost.className}&gt;
</code></pre>

<p>The module will also work in case you use custom fonts:</p>
<pre><code>import localFont from '@next/font/local';
</code></pre>

<pre><code>const myFont = localFont({ src: './my-font.woff2' });
</code></pre>

<pre><code>&lt;html className={myFont.className}&gt;
</code></pre>

<p>Even though this feature is still in Beta, it is considered stable enough for you to use in production.</p>
New Image And Link Components
<p>Arguably the most important components within the Next.js package have received a slight overhaul. Next <code>Image</code> has been living a double life since Next.js 12 in <code>@next/image</code> and <code>@next/future/image</code>. In Next.js 13, the default component is switched:</p>
<ul>
<li><code>next/image</code> moves to <code>next/legacy/image</code>;</li>
<li><code>next/future/image</code> moves to <code>next/image</code>.</li>
</ul>
<p>This change comes with a codemod, a command that attempts to automigrate the code in your app. This allows for a smooth migration when upgrading Next.js:</p>
<pre><code>npx @next/codemod next-image-to-legacy-image ./pages
</code></pre>

<p>If you make this change and do not have visual regression tests set up, I'd recommend taking a good look at your pages in every major browser to see if everything looks correct.</p>
<p>For the new Link component, the change should also be smooth. The <code>&lt;a&gt;</code> element within <code>&lt;Link&gt;</code> is not necessary <em>nor recommended</em> anymore. The codemod will either remove it or add a <code>legacyBehavior</code> prop to your component.</p>
<pre><code>npx @next/codemod new-link ./pages
</code></pre>

<p>In case the codemod fails, you will receive a linting warning on dev, so keep an eye on your terminal!</p>
ES Modules and Automatic Module Transpilation
<p>There two upgrades have passed under the radar for most, but I consider them <strong>especially useful for people working with Monorepos</strong>. Up until now, it was not very ergonomic to share configuration between configuration files and other files that may be used in runtime. That’s because <code>next.config.js</code> is written with CommonJS as the module system, which can't import from ESM files. Now, Next.js supports ESM simply by adding <code>type: "module"</code> to your <code>package.json</code> and renaming <code>next.config.js</code> → <code>next.config.mjs</code>.</p>
<p><strong>Note</strong>: <em>The “m” stands for “module” and is part of the Node.js spec for ESM support.</em></p>
<p>For Monorepos using internal packages (JavaScript packages that are not published to NPM but instead are consumed from source by sibling apps within the monorepo), a special plugin was necessary to transpile those modules on build-time when consuming them. From Next.js 13 onwards, <strong>this can be arranged without a plugin</strong> by simply passing an (experimental) property to your <code>next.config.mjs</code>:</p>
<pre><code>const nextConfig = {
  experimental: {
    transpilePackages: ['@my-org/internal-package'],
  },
};
</code></pre>

<p>You can see an example in the <a href="https://github.com/atilafassina/apex-monorepo/blob/main/apps/web/next.config.mjs#L8">Apex-Monorepo template</a>. With these settings, it is possible to develop both the dependency component and your app simultaneously without any publishing or workaround.</p>
What’s <em>Next</em>?
<p>If you’re still interested in playing around and talking more about these features, I’ll be running a <a href="https://smashingconf.com/online-workshops/workshops/advanced-nextjs-atila-fassina">Advanced Next.js Masterclass</a> from Nov 30 – Dec 15, 2022 — I’d be super happy to welcome you there and answer all of your questions!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3109fc33-fce0-412e-99c2-da019c2eb6bb/workshops-advanced-nextjs-atila-fassina.png" /></p>
<p>Until then, let me know in the comments below or tweet over to me at <a href="https://atila.io/twitter">@AtilaFassina</a> on how your migration has been and your thoughts on the experimental features.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Atila Fassina)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48e8a36f-2bd6-4fdf-8a56-acec206c23c8/whats-new-nextjs-13.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Practical Steps To Build Transparency In Your Remote Business]]></title>
            <link>https://smashingmagazine.com/2022/11/practical-steps-build-transparency-remote-business/</link>
            <guid>https://smashingmagazine.com/2022/11/practical-steps-build-transparency-remote-business/</guid>
            <pubDate>Fri, 04 Nov 2022 09:00:00 GMT</pubDate>
            <description><![CDATA[Transparency is part of the fabric of many remote businesses. It doesn’t, however, come naturally to everyone, especially if you’ve only recently become remote. In this article, Siobhan takes you through some of the practical ways that you can build transparency within your organization.]]></description>
            <content:encoded><![CDATA[<p>It used to be the norm that businesses were opaque, with employees only having access to what they needed to get their work done. Over the past twenty years, though, there has been an increase in transparency in businesses: an <a href="https://hbr.org/2012/04/transparency-is-the-new-leader">article in HBR describes transparency as a leadership imperative</a>, and studies conducted by companies like <a href="https://slack.com/intl/en-gb/blog/transformation/trust-tools-and-teamwork-what-workers-want">Slack</a> and <a href="https://www.tinypulse.com/resources/employee-engagement-survey-2013">Tinypulse</a> highlight the importance of transparency to employees. </p>
<blockquote>“Transparency is the process of being open, honest, and straightforward about various company operations. Transparent companies share information relating to performance, small business revenue, internal processes, sourcing, pricing, and business values.”<br /><br />— <a href="https://www.forbes.com/sites/mikekappel/2019/04/03/transparency-in-business-5-ways-to-build-trust/">Forbes</a></blockquote>

<p>Companies can be transparent with their employees only; others take it further and are transparent with the world. In a remote organization, transparency is even more critical. When you rarely see your colleagues, <strong>transparency helps people feel connected to one another and to the business</strong>. It can also help to reduce timezone bias as it relies on asynchronous communication, which makes it easier for people at any timezone to participate. </p>
<p>In this article, I will share some tactics for improving transparency within your organization. Some of them are tactics I’ve implemented myself through my years as a remote worker and leading a remote company, and others are best practices and guidance shared by companies leading the pack in terms of remote work.</p>
Tactics To Improve Transparency
<h3>Default To Open</h3>
<p>Imagine signing in to your company’s Slack team, where little of the day-to-day work happens in public channels. Some people say hi in the morning or goodbye in the evening, but all the work happens in private channels and DMs. The <code>#general</code> channel is a dead zone. Work happens in silos, and it’s hard to know what is going on at any one time. Individuals have to ask for information when needed, and sometimes they don’t even know where to look. This can cause bottlenecks and slow down work. </p>
<p>At the opposite end of the spectrum is a remote team where everything is in the open: hundreds of channels cover the whole range of work done in the company, and personal interests are chucked in too. Just by looking at the list of channels in your work’s messaging platform, you’ll see the overall work and identity of the company, and anyone can jump into any channel and connect with what’s going on there. It <strong>makes people feel more connected to work across the company</strong> rather than restricting people to work silos. It also has the advantage of exposing questions and discussions to more people. You never know who might have the answer to your question, and by posting it in public, someone you wouldn’t expect might be able to help. </p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Onboard new employees on how to work in the open through their onboarding period</strong> and gently nudge them to post questions and work discussions in public channels.</li>
<li><strong>Create naming conventions for your teams’ channels</strong> because you will end up with a lot, and it helps with the organization if people can see them grouped together (e.g., <code>#marketing-content</code>, <code>#marketing-design</code>, <code>#dev-qa</code>, and so on).</li>
<li>Remember that <strong>some things that shouldn’t be public</strong>. Human Resources matters such as illness or performance and anything that is a <a href="https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/lawful-basis-for-processing/special-category-data#:~:text=personal%20data%20revealing%20religious%20or,used%20for%20identification%20purposes">special category data under GDPR</a> should not be shared by the company. You can, however, be transparent about what won’t be open. </li>
</ul>
<h3>Lean In To Asynchronous Communication</h3>
<p>Synchronous communication happens in real time, whether that’s on a video or voice call, messaging, teams, or in person. Asynchronous communication happens in your own time, and immediate responses are not requested or expected within the exchange. </p>
<p>There are many <a href="https://remote.com/blog/why-you-should-be-doing-async-work">reasons why asynchronous communication</a> is beneficial in a remote company:</p>
<ul>
<li>Reduces roadblocks as employees don’t need to be online at the same time;</li>
<li>Increases flexibility for employees as they can prioritize when to respond;</li>
<li><a href="https://language.work/research/killing-time-at-work/">Combats presenteeism</a>;</li>
<li>Demonstrates trust in employees;</li>
<li>Reduces timezone bias;</li>
<li>Increases transparency as it relies on written communication and documentation.</li>
</ul>
<p>Prioritizing asynchronous communication over synchronous communication doesn’t mean that you will never have a meeting or talk at the same time. Instead, it means that your first preference is tools such as documentation and shared issue trackers/task managers instead of having a call. <strong>Documentation</strong> is kept up to date so people can find what they need for themselves, and <strong>issue trackers</strong> capture what someone is doing and where they are at and provide spaces for collaboration that don’t require everyone to be online at the same time. By preferring these practices over synchronous practices, work carried out within the organization is always transparent and available.</p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Choose a tool that people love to use that they can use to keep track of their work.</strong> There are so many project management tools that you should be able to find one that suits your way of working.</li>
<li><strong>Keep your issue tracker updated with all of the most up-to-date information</strong> about where a task or project is, including links to works in progress, such as Google Docs, Slides, and spreadsheets.</li>
<li><strong>Create guidelines and onboard people to this way of working.</strong> Don’t just assume that people know how to work asynchronously. If they are from a traditional office, it’s unlikely that they will.</li>
<li><strong>Encourage everyone to ask, “do I need a meeting for this?”</strong> and make working in other spaces the default. This ensures full transparency of what’s happening, and people can engage in their own time.</li>
<li><strong>Make sure that decisions are documented</strong> so that everyone knows what action to take and why. </li>
</ul>
<h3>Document Processes And Continuously Improve</h3>
<p>Effective remote companies need to have great documentation. This is especially true as companies grow. When you’re a small number of people, with just a handful of people in each role, it can feel easier just to get on and do the work and not worry about documentation.</p>
<p>Without embedded, documented practices, different approaches to the same task will proliferate, and it will become difficult to know what is the }}best approach for the organization as a whole}}. The growth that is not managed leads to inefficiencies within the business because things spin up in new ways all the time. When new employees join, they are unclear about whose approach is the right approach, and interpersonal issues may surface just because people disagree about the best way to do things.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0e19928-c755-4df3-a8be-65a9525e42be/4-practical-steps-build-transparency-remote-business.png" /></p>
<p>Good documentation creates a shared expectation about how things should be done. A well-documented process should be a ladder rather than a cage. It should provide you with the steps to get to where you want to go, which you might need to adapt to your specific circumstance rather than being something fixed that you have to stick to rigidly. </p>
<p>For documentation to be useful, it has to be kept up-to-date. Out-of-date documentation is worse than no documentation at all, as it tells you the wrong way to go about doing something. Therefore, I advocate keeping documentation as straightforward and to the point as possible — only enough information so that a reader can achieve their goals. Anything else is just maintenance overhead that you don’t need. </p>
<p> Once you have good documentation in place, it means that all employees can find what they need by looking at the documentation.</p>
<p>Employees shouldn’t need to jump on a call for a walkthrough, ping lots of different people to find out what they need, or be confused by the different ways that they are told to do something. This is essential to enable everyone to work autonomously and reduce time wasted on calls because something isn’t written down. </p>
<h4>Practical Tips</h4>
<ul>
<li>Ensure that your <strong>documentation tool has everything you need to ensure that people can navigate and update it easily</strong>. We find built-in version control essential to see what has changed (spoiler: we use WordPress for documentation).</li>
<li><strong>Add dates to your documentation</strong>, so people know when it was written. If you want to embed practices of continuous improvement, you can add expiry dates to your documents, and process owners are expected to review and complete any updates. </li>
<li><strong>Provide clear expectations around documentation.</strong> If a process exists, it must be documented.</li>
<li>Gitlab sets the standard with their <a href="https://about.gitlab.com/company/culture/all-remote/handbook-first-documentation/"><strong>“handbook-first” approach</strong></a>. It’s worth reading how they approach documentation and adapting what is useful to your own context. </li>
</ul>
<h3>Manage The Noise</h3>
<p>An advantage of transparency is that information is there to be found. However, there needs to be the correct systems and processes in place so that people can find them. As someone from a company that has been remote for 10+ years, I’m amazed at the amount of documentation and communication that has built up over the years, not to mention the proliferation of tools. If you’re early in your remote journey, I highly recommend creating structures now that will enable you to keep on top of all the comms as you grow.</p>
<p><strong>You need to proactively manage your docs and tools</strong>. It’s like a garden: you plant flowers in the flower beds, maybe a few trees and shrubs, and get your lawn looking lovely. But over time, the weeds start to appear, the shrubs become overgrown, and the flowers need to be dead-headed. </p>
<p>Transparency can have a <a href="https://www.glassdoor.com/employers/blog/transparency-in-the-workplace/">positive impact on your company</a>, but if you don’t tend to your documentation and information, it can end up being like an overgrown garden, where you have to clamber through weeds to get what you want or find a path through it.</p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Create onboarding pathways for different roles</strong> so that when new people join the company, they know where to find what they need and are taken through it step by step.</li>
<li><strong>Stay on top of your information architecture</strong> and make sure it remains intuitive for employees. Ideally, keep your IA the same or similar across your different tools (e.g., GDrive for docs, handbooks, and so on).</li>
<li>Often, people will just search for what they need to make sure that you have a working search tool. </li>
<li><strong>Set expectations about what people need to stay on top of.</strong> It’s important that people are up-to-date on what’s happening in their areas, but do they need to read every piece of communication? </li>
<li>Create an announcements channel or blog, with the expectation that the only items posted are things that everyone has to read. This makes sure that nothing important gets missed.  </li>
</ul>
<h3>Record Meetings And Provide Useful Notes</h3>
<p>Preferencing asynchronous communication doesn’t mean ever communicating synchronously. There are times when meetings are inevitable and valuable. However, that doesn’t mean that what happens in the meeting needs to stay within the black box of that meeting. We have tools at our disposal to make these transparent, but as with all things, we want these to be as frictionless as possible.</p>
<p>Recording a meeting so that anyone who is not present can catch up on it can be helpful. Also, this <strong>reduces the need for detailed minutes</strong> as anyone who wants specific details can watch the recording or catch up on the transcript (zoom has built-in transcription features, which provide a good enough transcript to scan what’s going on). This may not be suitable for all meetings as it can have a knock-on effect on people’s behavior, making them more guarded. </p>
<p>Alongside that, there are the <strong>meeting notes</strong>. There are as many different ways of producing notes as there are people writing them. You need to determine the purpose of your notes to put them in the best format for your organization. When thinking about it, ask yourself what someone who hasn’t attended the meeting needs to know. If a video is available, do they need full minutes or just notes about decisions, actions, and deadlines? Who is going to take the notes? Are they always taken by a specific person, or is it a role that rotates? </p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Always have an agenda for a meeting</strong> and ensure that anyone who adds an item to the agenda also writes a summary with links to supporting documentation. This provides the basis for the notes and means the note taker doesn’t have to re-summarise.</li>
<li><strong>Make sure everyone knows what the expectations are around meeting notes.</strong> A standard meeting template means that everyone knows what they need to provide before and during the meeting and that everyone reading notes knows what to look for.</li>
<li><strong>Ask yourself if you need notes every time.</strong> Maybe a video suffices for a discussion, especially if all of your actions are captured in your issue tracker. Maybe it’s enough just to keep an activity log, so everyone stays on top of what’s next.</li>
</ul>
<h3>Onboard New Team Members To Transparency</h3>
<p>Something I have been guilty of is assuming that people will just be able to join the company and instantly normalize how transparent we are. Actually, it’s quite challenging for someone to go from an organization that is not transparent or doesn’t really think about it to one in which everything is out in the open. </p>
<p>It requires some empathy and imagination to recognize the experience of someone who has just joined the company. As there is a lot of noise, communication, and notifications, there is <strong>a mountain of information to climb</strong> and years of asynchronous communication stacked up. On top of that is the feeling of vulnerability that comes with being a new employee. When the expectation is that everything is discussed in public channels, it can make people feel reticent about putting themselves out there, asking the “stupid” questions that are so important to navigating your way around somewhere new.</p>
<p>That makes it essential to familiarise people with the concepts and tactics of transparency through the onboarding process and for managers and peers to support new starters with that. You can’t just assume someone will get it, so you need to support them to succeed. </p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Have clear expectations about what people should read and what they can let pass them by.</strong> Otherwise, some people will try to read everything. For most people, the work of their immediate team and essential company announcements suffice to begin with.</li>
<li><strong>Talk about transparency through the onboarding process</strong>, why it is important, and how you practice it within your company.</li>
<li><strong>Adjust to your new employee’s level of comfort.</strong> Some people will jump straight into public channels, but others will want to take their time. Work with them in DMs or private channels to begin, with the expectation that you’ll move to the public once they are onboarded.</li>
<li><strong>Create specific pathways or tables of contents for different roles</strong> to take them through the documentation and training they need to read.</li>
<li><strong>Provide guides and documentation on how to practice transparency</strong>, especially best practices for documentation and for using your issue tracker.</li>
</ul>
<h3>Make Use Of Integrations, APIs And Bots</h3>
<p>Integrations, APIs, and Bots let us automate work and prevent information from getting stuck in silos. One of the first things I look for when I’m sourcing a new tool is what integrations it has and whether it will integrate with my stack. If it doesn’t have a native integration, does it have an API so we can have a developer build an integration for us? Or, for simple integration, you can use a tool like <a href="https://zapier.com/">Zapier</a> to connect your tools together.</p>
<p> If you’ve been remote for a long time, you can have a proliferation of tools, and manually moving data between them leaves room for human error and creates a huge administrative burden.</p>
<p>However, if you don’t transfer your data, it can lead to information remaining in silos and not getting to where it needs to be. If you are building out a stack for your remote team, I highly recommend working with tools and apps that integrate with one another.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7c7404b4-e9d0-4d21-b62a-d4a02c4aeee8/8-practical-steps-build-transparency-remote-business.png" /></p>
<p>As well as integrations, bots can be massively helpful in automating tasks and removing the need for people to manually run different processes. Some tools that I have found to be useful are  <a href="https://geekbot.com/">geekbot</a>, which we use for standups, and <a href="https://www.donut.com/">donut</a>, which we use for <strong>social connections</strong> like pairing people up for a coffee. You can use integrations to pipe posts from other tools, such as GitHub or Hubspot, into your Slack Channel or MS Teams. Geekbot fatigue is real, though, so beware of having too many standups and bots running simultaneously because if they’re not used well, they can become a bureaucratic task that no one loves.</p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Figure out the bots which are right for your organization.</strong> Both Slack and Teams have a lot of bots available. </li>
<li><strong>When you are signing up for a new tool, look at the integrations that it currently has</strong> and think about how you might want to use the tool in the future.</li>
<li><strong>Connect your issue tracker and any other asynchronous tools to your messaging app</strong> so that any activity is piped into relevant channels.</li>
<li>If bots are causing too much noise, consider creating <strong>firehose channels</strong>, which are just for piping in information from a specific tool or project.</li>
</ul>
<h3>Equip Everyone To Give And Receive Feedback</h3>
<p>When your company is transparent, everything is out in the open all of the time. This means that <strong>a culture of transparency</strong> must go hand in hand with a culture of feedback. Drive-by feedback from people who don’t have context on a specific project is rarely helpful, nor are cryptic one-liners that say something isn’t great but don’t provide anything constructive about why.</p>
<p>This type of feedback can make people reticent about working in the open, and they can hold things back until they feel it is totally ready. Equally unhelpful are feedback requests that are just “what do you think?” or “can I have feedback?” These requests rarely elicit high-quality feedback.</p>
<p>When you equip your team to give feedback, you create a space where people are okay putting their half-finished projects out there because they know any feedback will be provided in good faith and will <strong>help them to achieve their goals</strong>. You also need to ensure that people are open to feedback, listen, and receive it in a non-defensive manner. Ultimately, it is up to the person who receives the feedback whether they should implement it or not, but you should always listen and try to understand the other person’s perspective.</p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Set company-wide expectations around feedback.</strong> Some companies might prefer a free-for-all where anyone can provide feedback all the time; others prefer to set the expectation that feedback should come only when it is asked for.</li>
<li><strong>Be very specific on what you are asking for feedback for</strong>: is it on the design, the content, the tone of voice, the structure, or the message? This will help you to get high-quality feedback.</li>
<li><strong>Research different feedback methodologies and adopt a few that are right for your company.</strong> <a href="https://www.radicalcandor.com/">Radical Candor</a> is a very popular technique; <a href="https://handbook.hmn.md/working-here/continuous-improvement/giving-feedback/">I like Situation, Behaviour, Impact</a> because of its simplicity, but <a href="https://getlighthouse.com/blog/give-feedback-team-sh-t-sandwich/">there are lots of options out there</a>. Whatever you use should be straightforward enough for anyone to use.</li>
</ul>
<h3>Build A Culture Of Transparency</h3>
<p>You can build transparency into your practices, but you also need to build it into your culture. A common way to do this is to write transparency into your values, which is great but rarely enough. You’ve got to embed transparency into everything you do, which I hope some of the practices above will help with.</p>
<p>One of the most powerful ways to become more transparent as a company is for people to role-model transparency, especially leaders. If a leader behaves in a particular way, others follow. It follows that if someone at the top does something, then it is acceptable behavior.</p>
<p>If a leader does everything in Direct Messages, brings people into meetings all the time, and works in silos, then others will do the same. If your leaders default to open communications, asynchronous practices, collaboration, and information sharing, then they create an environment where <strong>others will follow</strong>.</p>
<p> It’s not enough for a CEO or founder to say they want to be transparent — they have to practice it like everyone else.</p>
<p>And remember, full transparency isn’t for everyone or for every company. You can set limits on what you are transparent about: some organizations share salaries, others don’t, some share financial info, others don’t, some share everything publicly, and others don’t. Being transparent isn’t necessarily sharing everything; it’s being upfront about what you are going to share, what you aren’t, and why. But remember that some level of transparency in a remote organization will go a long way to helping you be successful.</p>
<h4>Practical Tips</h4>
<ul>
<li><strong>Role-modelling transparent behaviors should be built into the expectations of every leader</strong>. This could be written into role descriptions or behavior frameworks.</li>
<li>It’s easy to find yourself working on something in a DM or private space; when you do, gently suggest to others that a discussion is moved into a public channel.</li>
<li><strong>Acknowledge behavior and actions that are transparent.</strong> We have a kudos bot in our HRS which we can use to credit positive behavior, and transparency is a consideration within our career progression framework.</li>
</ul>
The Transparency Trap?
<p>Generally, I am a big advocate of transparency, but it’s <a href="https://www.mckinsey.com/business-functions/people-and-organizational-performance/our-insights/the-dark-side-of-transparency">not without its pitfalls</a>. If you want your organization to be more transparent, then you need to be aware of what these are so that you can work against them. Some examples are:</p>
<ul>
<li>Decision-making can take a lot longer because so many people can provide input.</li>
<li>Information overload can be a burden on employees, and they can feel fatigued by the amount of communication.</li>
<li>Employees can feel that they are constantly being observed, which can leave them feeling exposed and vulnerable.</li>
<li>Some employees will hide what they are doing just to get it right, even if there is nothing to hide.</li>
<li>People experiment less because they are afraid to take risks or be vulnerable in front of others.</li>
<li>There is an additional administrative burden as people have to produce meeting notes, update documentation and issue trackers, and generally perform what they are doing.</li>
<li>Access to a company’s financial information can cause anxiety when times are rocky.</li>
<li>Creative work may not always benefit from transparency as people can self-censor during the development process.</li>
<li>Sharing all meetings can lead to self-censorship, which can stifle debate.</li>
</ul>
<p>The researcher Ethan Bernstein <a href="https://hbr.org/2014/10/the-transparency-trap">talks about the <strong>“transparency trap”</strong></a> and explains how some organizations have “found the sweet spot between privacy and transparency, getting the benefits of both.” This means employing different types of boundaries to ensure that <strong>privacy is maintained in some areas without losing the benefits of transparency</strong>. However transparent you plan to be, it’s important to keep these challenges in mind so that you can work and don’t overwhelm or undermine your employees while still getting all of the benefits of transparency.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Siobhan McKeown)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9ac3481-4133-40fb-bb5c-6ddf9fe04c03/practical-steps-build-transparency-remote-business.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[New Smashing Front-End & UX Workshops]]></title>
            <link>https://smashingmagazine.com/2022/11/new-frontend-coding-ux-online-workshops/</link>
            <guid>https://smashingmagazine.com/2022/11/new-frontend-coding-ux-online-workshops/</guid>
            <pubDate>Thu, 03 Nov 2022 07:00:00 GMT</pubDate>
            <description><![CDATA[What’s the state of HTML Email, Vue.js and Next.js? Would you like to level up with modern CSS? What are new, smart interface design patterns we could use? Let’s figure it all out together with our [brand new online workshops](https://smashingconf.com/online-workshops/) alongside our free community meetups. ]]></description>
            <content:encoded><![CDATA[<p>You might know it already, but perhaps not yet: we regularly run <a href="https://smashingconf.com/online-workshops/">friendly online workshops</a> around <strong>front-end and design</strong>. We have a couple of workshops coming up soon, and we thought that, you know, you might want to join in as well. All workshops sessions are broken down into <strong>2.5h-segments</strong> across days, so you always have time to ask questions, share your screen and get immediate feedback.</p>

<a href="https://smashingconf.com/online-workshops/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4f0edf42-4421-4e65-9a71-0a8bf3dc41b0/online-workshops-2022.png" /></a>
Meet <a href="https://smashingconf.com/online-workshops/">Smashing Online Workshops</a>: live, interactive sessions on frontend &amp; UX.


<p><a href="https://www.smashingmagazine.com/2020/10/how-we-run-smashing-online-workshops/">Live discussions and interactive exercises</a> are at the very heart of every workshop, with group work, homework, reviews and live interaction with people around the world. Plus, you get all <strong>video recordings</strong> of all sessions, so you can re-watch at any time, in your comfy chair at your workspace.</p>


Upcoming Live Workshops (Nov 2022 – April 2023)
<div><a href="https://smashingconf.com/online-workshops/workshops/complex-css-amit-sheen/"><div>Pushing CSS To The Limit<img src="https://d33wubrfki0l68.cloudfront.net/5ddd7b1a95eeca16863b3f65c76a3c8c535fc687/d4f4f/images/speakers/amit-sheen.jpg" /></div><div>Amit Sheen</div><div>4 sessions Nov 2–10 css</div></a><a href="https://smashingconf.com/online-workshops/workshops/accessibility-testing-manuel-matuzovic/"><div>Deep Dive On Accessibility Testing<img src="https://d33wubrfki0l68.cloudfront.net/c1d36f89d4a5c001e965727accdf946d56098da0/60a6b/images/speakers/manuel-matuzovic.jpg" /></div><div>Manuel Matuzović</div><div>5 sessions Nov 14–28 dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/design-process-paul-boag/">Early birds!<div>Mastering the Design Process<img src="https://d33wubrfki0l68.cloudfront.net/39bace02eaa7e93d79299dc26b8f8e86123cbd4b/944c8/images/speakers/paul-boag.jpg" /></div><div>Paul Boag</div><div>4 sessions Nov 15–23 workflow</div></a><a href="https://smashingconf.com/online-workshops/workshops/figma-workflow-christine-vallaure/"><div>Figma Workflow Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/2f896c9d04b8bad14e2d70a6bad211ab30e7c8e2/8e637/images/speakers/christine-vallaure.jpg" /></div><div>Christine Vallaure</div><div>5 sessions Nov 17 – Dec 1 ux</div></a><a href="https://smashingconf.com/online-workshops/workshops/web-forms-vitaly-friedman/"><div>Designing The Perfect Web Forms<img src="https://d33wubrfki0l68.cloudfront.net/c21ac313bd003251245fe0ec848a83b26157fef5/a6b54/images/speakers/vitaly-friedman.jpg" /></div><div>Vitaly Friedman</div><div>2 sessions Nov 17–18 ux</div></a><a href="https://smashingconf.com/online-workshops/workshops/html-email-remi-parmentier/">Early birds!<div>Building Modern HTML Emails<img src="https://d33wubrfki0l68.cloudfront.net/b098bd83a08d63270dff50aaccc3a19fdb076dcc/cf933/images/speakers/remi-parmentier.jpg" /></div><div>Rémi Parmentier</div><div>4 sessions Nov 23 – Dec 1 dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/product-design-stephanie-walter/">Early birds!<div>Designing Better Products Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/9392ad46e51b4676d45cc64c876327f79389d0cc/c6d62/images/speakers/stephanie-walter.jpg" /></div><div>Stéphanie Walter</div><div>5 sessions Nov 28 – Dec 12 ux</div></a><a href="https://smashingconf.com/online-workshops/workshops/advanced-nextjs-atila-fassina/"><div>Advanced Next.js Masterclass<img src="https://d33wubrfki0l68.cloudfront.net/ad48a83a07a92f2e9b710f32d3ea5e5da4b59355/272bc/images/speakers/atila-fassina.jpg" /></div><div>Átila Fassina</div><div>6 sessions Nov 30 – Dec 15 dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/design-systems-brad-frost/">Early birds!<div>Creating and Maintaining Successful Design Systems<img src="https://d33wubrfki0l68.cloudfront.net/502cf7a10bd06fcb572acfb8b0592d9b28c50975/11b60/images/speakers/brad-frost.jpg" /></div><div>Brad Frost</div><div>5 sessions Jan 10–24 workflow</div></a><a href="https://smashingconf.com/online-workshops/workshops/interface-design-course-vitaly-friedman/">Early birds!<div>Interface Design Patterns UX Training<img src="https://d33wubrfki0l68.cloudfront.net/c21ac313bd003251245fe0ec848a83b26157fef5/a6b54/images/speakers/vitaly-friedman.jpg" /></div><div>Vitaly Friedman</div><div>8 sessions Mar 10 – Apr 7 ux</div></a><a href="/online-workshops/bundles"><div>5× Tickets Bundle<img src="https://d33wubrfki0l68.cloudfront.net/da6e9dee46f4008c7c1c3735e3571e77086b321a/8aa3f/images/events/online-workshops/summer-cat.png" /></div><div>Save $500 off the price.</div><div>5 tickets No expiry Smashing!</div></a></div>

What Are Workshops Like?
<p>Do you experience <strong>Zoom fatigue</strong> as well? After all, who really wants to spend more time in front of their screen? That’s exactly why we’ve <a href="https://www.smashingmagazine.com/2020/10/how-we-run-smashing-online-workshops/">designed the online workshop experience from scratch</a>, accounting for the time needed to take in all the content, understand it and have enough time to ask <em>just</em> the right questions.</p>
<p>Our online workshops take place <strong>live</strong> and span <strong>multiple days across weeks.</strong> They are split into 2.5h-sessions, and in every session there is always enough time to bring up your questions or just get a cup of tea. We don’t rush through the content, but instead try to create a welcoming, friendly and inclusive environment for everyone to have time to think, discuss and get feedback.</p>
<p>There are plenty of <a href="https://www.smashingmagazine.com/2021/02/smashing-workshop-form-design-masterclass/">things to expect from a Smashing workshop</a>, but the most important one is focus on <strong>practical examples</strong> and techniques. The workshops aren’t talks; they are <strong>interactive</strong>, with live conversations with attendees, sometimes with challenges, homework and team work.</p>
<p>Of course, you get all workshop materials and <strong>video recordings</strong> as well, so if you miss a session you can re-watch it the same day.</p>
<h3>TL;DR</h3>
<ul>
<li>Workshops span <strong>multiple days</strong>, split in <em>2.5h-sessions</em>.</li>
<li>Enough time for live Q&amp;A every day.</li>
<li>Dozens of <strong>practical examples</strong> and techniques.</li>
<li>You’ll get all workshop materials &amp; recordings.</li>
<li><a href="https://www.smashingconf.com/online-workshops/workshops">All workshops</a> are focused on frontend &amp; UX.</li>
<li><a href="https://smashingconf.com/online-workshops/bundles">Get a workshop bundle</a> and <strong>save $250</strong> off the price.</li>
</ul>
<div><a href="https://www.smashingconf.com/online-workshops/">Jump to all workshops →</a></div>

Bonus: Free Online Community Events
<p>Dive deep into discussions around accessibility and design systems with our upcoming online events — <strong>free for everyone</strong>, so please do bring your friends along!</p>
<ul>
<li><a href="https://ti.to/smashingmagazine/a-smashing-hour-sara-part5?mc_cid=36446bfb1f&amp;mc_eid=bfa05a2218">A Smashing Hour with Sara Soueidan</a>, a 1h-session speaking on everything from SVG and design systems to accessibility and pizza toppings.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4893299f-d4fb-40dc-b3ef-1e27690fa520/smashing-hour-sara-s.png" /></p>
<ul>
<li><a href="https://smashingconf.com/meets-design-systems">Smashing Meets on Design Systems</a>, a live event on theming and best practices around design systems. With Hayley Hughes, Brad Frost and Dan Mall.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4f9f8829-122e-402c-ad4e-a16d9daa946d/design-system-smashing-meets.png" /></p>
Thank You!
<p>We do our best to ensure that our online workshops are worth your time. We’d sincerely appreciate it if you could spread the word with your wonderful colleagues and friends.</p>
<p>Thanks for staying smashing and take good care of each other!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Iris Lješnjanin)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4f0edf42-4421-4e65-9a71-0a8bf3dc41b0/online-workshops-2022.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Designing The Perfect Mobile Navigation UX]]></title>
            <link>https://smashingmagazine.com/2022/11/navigation-design-mobile-ux/</link>
            <guid>https://smashingmagazine.com/2022/11/navigation-design-mobile-ux/</guid>
            <pubDate>Wed, 02 Nov 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[When designing navigation on mobile, we don’t have to rely on slide-in-menus or nested accordions. We can also use the curtain design pattern, and show multiple levels of navigation at once.]]></description>
            <content:encoded><![CDATA[<p>When it comes to <strong>complex navigation on mobile</strong>, we often think about hamburger menus, full-page overlays, animated slide-in-menus, and a wide range of nested accordions. Not all of these options perform well, and there are some alternative design patterns that are worth exploring. Let’s dive in!</p>


<p></p><p>This article is <strong>part of our ongoing series</strong> on <a href="/category/design-patterns">design patterns</a>. It’s also a part of the <a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-ux/">4-weeks live UX training</a> 🍣 and is available in our recently released <a href="https://smart-interface-design-patterns.com/">8h-video course</a>.</p>
1. Avoid Too Many Signposts In Your Navigation
<p>One of the most common strategies for navigation on mobile is to use a good ol’ <a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">accordion</a>. In fact, <strong>accordions work very well</strong> for multiple levels of navigation and are usually better than slide-in menus. However, since we open and collapse menus, we also need to indicate it with an icon. This often results in <strong>too many signs</strong> pulling user’s attention in too many directions.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35fd061c-5589-4045-8de4-d7c5bae0839a/15-vodafone.jpg" /></p>
<p>In the example above, <a href="https://www.vodafone.de">Vodafone</a> uses <strong>3 different icons</strong>, pointing either to the bottom (accordion collapsed), to the top (accordion open), or to the right. The latter indicates that the selection is a <em>link</em>, driving users to a category page. This is, however, not immediately obvious.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd7383bf-d083-4362-98b2-350ddad75c8c/vodafone-mock-up.jpg" /></p>
<p>An alternative — and perhaps a slightly more obvious way — is by <strong>adding a link underline</strong> to links and removing the icons next to them altogether. As a side effect, if we eventually have to mix collapsible menus and links to categories, it’s perhaps a bit more obvious which is which.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/212a87d1-425b-484a-ad43-3f57c868637f/11-swisscom.jpg" /></p>
<p>In general, pointing users in too many directions is often unnecessary. It’s quite likely that you’ll be able to achieve better results with <strong>just two icons</strong>, indicating whether an accordion is open or not. That’s how it’s done on <a href="https://www.swisscom.ch/">Swisscom</a> (pictured above), for example.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d40221d-6c67-4728-b1b4-0ca5a4c78a95/01-posturinn.jpg" /></p>
<p>Alternatively, <a href="https://posturinn.is">Icelandic Postal Service</a> uses <strong>just one single icon</strong>, and to indicate expansion of the accordion, changes the color of the heading of the section. This seems to be working fairly well, too.</p>
<p>It’s a good idea to avoid too many icons guiding users in too many directions. If we can get away without them, it’s a good idea to test what happens if we do.</p>
2. Don’t Overload Your Navigation With Multiple Actions
<p>Sometimes navigation menus combine <strong>two different functions</strong> in one single navigation bar. For example, what if you have <strong>categories</strong> that you want to link to directly, but then you also want to allow for quick jumps into <strong>sub-menu items</strong>?</p>
<p>Usually, this means adding two different actions to the same navigation bar. A tap on the title of the category would lead to the category; a tap on the icon would open an accordion or prompt a separate view. And to make this difference a bit more obvious, we often add a <strong>vertical separator</strong>. Unfortunately, in practice, that doesn't work too well.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/10ccbebd-e482-4ccb-82bb-efa5f5852d01/tivoli-separator.png" /></p>
<p>In the example above on <a href="https://www.tivoli.dk/en/">Tivoli Gardens Copenhagen</a>, each section title is linked to a standalone category page. A tap on the icon on the right, however, opens a separate sub-navigation. Indeed, a vertical separator does help to distinguish between the two actions, but it still <strong>causes plenty of mistakes</strong>.</p>
<p>Sometimes users want to just <em>assess</em> the navigation at a glance, and they aren’t yet committing to going to a dedicated page. Yet here they are, being <strong>pushed towards a page</strong> just when they aren’t ready to go there at all. And once they do, they then have to return back to the previous page and start all over again. Ideally, we’d avoid this problem altogether.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/47e6eb93-5dbe-46ed-853f-33c41b95ddda/04-mammut.jpg" /></p>
<p>On <a href="https://www.mammut.com/eu/en">Mammut</a>, the <strong>entire navigation bar</strong> drives the user to the second level of navigation. Their users can move to discover all items within the category or jump into a sub-category. Problems solved. Rather than overloading the navigation bar with separators and separate actions, we can help users <strong>move forward confidently and comfortably</strong> and prevent mistakes altogether. The next action is always just a tap away.</p>
<p>Always consider adding a link to the category page within the expanded accordion or in a separate view, and assign only a singular function to the entire bar — opening that view. </p>
3. Use The Billboard Pattern For Top Tasks
<p>Not every navigation item is equally important. Some items are more frequently used, and they might deserve a little bit more spotlight in your navigation. In fact, if some items are more important than others, we can use the <strong>billboard pattern</strong> and display them more prominently above the navigation.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c2e6130-e0be-4f69-af57-c54dbd70a981/billboard-pattern.png" /></p>
<p>In the examples above — <a href="https://www.otto.de">Otto</a>, <a href="https://www.koreapost.go.kr/">Korea Post</a> and <a href="https://deutschepost.de/">Deutsche Post</a> — we display the most important topics or features more prominently while the rest of the navigation is available, but gets a slightly less prominent presence.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21bcdebe-9d83-4ab5-aa4a-680381302cb2/otto-billboard-pattern.png" /></p>
4. Nested Accordions Work For Expert Users
<p>Just like we might have too many icons, we might end up with too many nested levels of navigation, neatly packaged within <strong>nested accordions</strong>. For complex sites, it seems like one of the few options to present a huge amount of navigation available on the site. In fact, we could argue that by allowing users to jump from any page to any page on the 4th or even 5th level of navigation, we can <strong>massively speed them</strong> up in their journeys.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52c77133-b31c-4574-add4-fa8c2f8e5b2b/08-european-central-bank.jpg" /></p>
<p>Surprisingly enough, this seems to be right. <strong>Expert users</strong> typically don’t have massive usability issues with multiple nested accordions. However, <strong>infrequent users</strong> often struggle to find the information that they need because they don’t understand how the information is organized.</p>
<p>In complex environments, navigation usually <strong>mirrors the way the organization is structured internally</strong>, and without that prior knowledge finding the right route to the right page is difficult at best. In that case, once a user is looking for something very specific, they seem to use search rather than traversing the navigation tree up and down. This becomes apparent especially when the contrast between levels isn’t obvious, such as on <a href="https://www.who.int/">WHO</a>, for example (pictured below).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ff18c03-1a35-49b7-9fae-980c2c4d4ab3/07-wto.jpg" /></p>
<p>If we need to include multiple levels of navigation within nested accordions, it’s a good idea to sparkle just a tiny bit of typographic and visual contrast to the menu so that <strong>every level of navigation is clearly distinct</strong>, and it’s also obvious when links to actual pages start appearing. Compare the quick mock-up below. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd2eadda-d19f-41fa-b48e-f501cee5e3fc/21-wto-optimized.jpg" /></p>
<p>Another way to indicate multiple levels of nesting is by <strong>adding different types of icons</strong> to make it more obvious where users currently are. This is how it’s done on the <a href="https://www.su.se/cmlink/stockholm-university">Stockholm University website</a>. Personally, I wasn’t able to verify how well this design pattern works, but when combined with better typographic contrast, this might be performing better and is definitely worth testing.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22bf791c-2ec4-42d2-b6e5-4bb5b0c3fd3a/18-stockholm-university.jpg" /></p>
<p><a href="https://dinoffentligetransport.dk/">DOT</a>, a public transportation website from Denmark, uses the <code>+</code> icon across multiple levels for their nested accordions. While the chevron is positioned on the left, the <code>+</code> are always positioned on the right. Thus, they display <strong>four levels of navigation</strong> with nested accordions. Perhaps it’s a bit too much navigation, but it seems to be working fairly well.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15569baf-1566-4344-b721-6c945f0bf4f8/dot-nested-accordions.png" /></p>
<p>On the other hand, it might not be needed at all. <a href="https://allianz.de/">Allianz</a> gets away with using a single icon (chevron up and down), but with <strong>clearly different designs</strong> for every navigation level. The first level is highlighted with white text on a blue background; the second level is designed in bold; and the third level is plain text (which could, of course, be links, too).</p>
<p>Plus, instead of showing all items at the same time, only <strong>four most important ones</strong> are displayed at first, and the others are available on a separate page. This a great example worth keeping in mind.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb1b6ecc-c2be-4ca8-855c-d9a0e980d4d5/12-allianz.jpg" /></p>
<p><strong>Nested accordions</strong> can work with enough contrast between each level. However, if you have more than three levels of navigation, making it work with a bit of indentation and various typographic styles will become quite difficult.</p>
5. Slide-In-Menus Don’t Perform Very Well
<p>Admittedly, many navigation menus on mobile aren’t accordions. Because each navigation section might contain dozens and dozens of sub-navigation items, it’s common to see the so-called <strong>slide-in menus</strong>, with navigation items sliding in horizontally and presenting users with a comprehensive menu of all options available on that level.</p>
<p>With that pattern, <strong>quick jumps</strong> from one level to another are impossible, as users always have to go back to the previous level to move forward.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a24c7fe-aa00-46c5-9260-ddcc40bf28a4/09-unilever.jpg" /></p>
<p><a href="https://www.unilever.com">Unilever</a> displays <strong>only one level of navigation at a time</strong>. As users navigate further down the rabbit hole, they are presented with only one level at a time. This does work well to fit all the items and all the levels that an organization might ever need. However, if a user isn’t quite sure where to go, the discovery of content tends to be slower. Also, it’s not necessarily clear where the “Back” button will go to.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3992eeba-9fba-4b61-8b99-b624a01ba7f4/02-deutsche-post.jpg" /></p>
<p>If we do use a slide-in menu, it’s a good idea to <strong>replace a generic “Back” button</strong> with a more contextual label, explaining to users where exactly they will be returning to. <a href="https://deutschepost.de/">Deutsche Post</a> (pictured above) does just that. Also, notice that the main page of the menu features some of the top tasks on the site, in additionally to the slide-in menu.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4bef334f-2bfa-49b1-8060-51fda008060c/13-new-england-journal-of-medicine.jpg" /></p>
<p>Additionally, <a href="https://www.nejm.org/">The New England Journal of Medicine</a> adds some typographic contrast to each section, so it’s a bit more obvious right away what would open up another section and what is a link driving to a new page. In fact, we can go quite far by just <strong>making links more obvious</strong> yet again, as displayed in the example of <a href="https://www.adac.de/">ADAC</a> below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f96101c2-26fa-490d-bb40-162c15be8b36/22-adac-optimized.jpg" /></p>
<p>It’s worth noting that <strong>animated slide-ins can be quite disorienting</strong>, distracting, and annoying for people who use the navigation a lot. Add to that the slow speed of content discovery, a few too many icons, and a bit too little contrast between the items, and you have a recipe for disaster.</p>
<p>A slide-in menu is an option but <strong>rarely the best one</strong>. It surely doesn’t perform as well as accordions where jumps between levels are faster and there is rarely a need to go back. However, accordions aren’t the only option we have — especially when we want to help users <strong>navigate between levels faster</strong>, not slower.</p>
6. The Navigation Stack Works For Quick Jumps
<p>As we move users from one level to another, we also need to provide a way for them to move back. But instead of just displaying a "Back" button, we can stack all the previous sections like a breadcrumb under each other. And so we get a <strong>navigation stack</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b57180fa-595b-4857-b513-a345912f0201/cool-blue-stacking.png" /></p>
<p>On <a href="https://www.coolblue.nl/en/mobile-phones/smartphones">Coolblue</a>, a Dutch retailer, as users keep exploring deeper levels of navigation, they can always return all the way to the previous levels that they’ve been coming from. This allows for <strong>faster jumps between levels</strong>, and is definitely a good idea when driving users from one-page overlay to another.</p>
7. Use Curtain Pattern To Show Multiple Levels of Navigation
<p>It shouldn’t be a big revelation that the speed of navigation is at its maximum when we display navigation options right away. This is why we see <strong>large buttons</strong> appearing as large clickable cards, filters, and bottom sheets. However, how do we use it in our navigation menus which barely have any place anyway?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9748d90c-dfbf-4d0c-83c6-442240efccaa/01-lcfc-vertical-split-navigation.jpg" /></p>
<p>We could make better use of the available space. For example, what if <strong>split the screen vertically</strong>, showing one level of navigation on each? Very much like a curtain that we’d pull to one side of a window. That’s what <a href="https://www.lcfc.com/">LCFC</a> (pictured above) does. To move between levels, we don’t need to close any menus or return back at all — instead, we click on large areas, move forward, and explore.</p>
<p>And what if you <strong>need slightly more space</strong> for your lengthy navigation labels? Well, the labels could <strong>wrap onto multiple lines</strong>, or we could reduce the width by replacing text labels with icons (as long as they are unambiguous). It might not work for every project, but it seems to work for <a href="https://www.playstation.com/en-us/">Playstation</a> (pictured below).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00619f8d-ced5-4aa1-bd38-66ccf64f3fa9/02-curtain-split-navigation-playstation.jpg" /></p>
<p>The entire first level of navigation collapses into <em>tabs</em>; yet moving from one level to the other doesn’t require any jumps back. You might be wondering what the three vertical lines represent — ideally, one could drag away the pane, but it doesn’t seem to be working as expected, unfortunately.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef2e3c73-80a0-410a-929a-4d28a4c7d4f6/espn-curtain-navigation.png" /></p>
<p><a href="https://espn.com/">ESPN</a> uses a very similar approach but reduces the amount of space for the first level to the minimum. It could be a little bit larger to prevent mistaps, but the idea is pretty much the same: showing <strong>two levels of navigation at the same time</strong>.</p>
<p>We could use the same approach in other contexts, such as filtering. We display <strong>all filter attributes on the left</strong>, and allow users to choose the specific values for these filters in the second vertical pane. That’s what the filtering experience looks like on <a href="https://www.myntra.com">Myntra</a>, an Indian eCommerce retailer pictured below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b367d3d9-40ea-451c-b599-1bf08e62071c/03-myntra-filter-selection-triple-view.jpg" /></p>
<p>If some filters don’t fit in the right pane, users can scroll to explore more or even <strong>search for a specific filter</strong> in the selection. Of course, the "Apply" button has to stay floating. It would be lovely to see the total number of results on that button, too.</p>
<p>We could take it even further, though. For example, sometimes users need to select filters that are relevant to them and define their values in the next step. In that case, we <strong>group all filters into a few categories</strong> (or even sub-categories), and then present all of the categories and filters as sub-categories side-by-side.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4b31635-2b04-4f21-b99f-0d15c5c90e66/04-ft-filter-constructor.jpg" /></p>
<p>With <a href="https://markets.ft.com/data/equities/results">FT Screener</a>, for example, users can add or change criteria by exploring multiple levels at the same time — both the labels for groups and the filters living within those groups. Once a filter has been chosen, it’s added to the overview on the top. That’s a <strong>simple filter constructor</strong> for sophisticated filtering on mobile.</p>
<p>The vertical split could be used to quickly select one important present or make a single choice. That would be the case for a language selector, for example. We could organize all supported countries and languages as cards or accordions, but they could also work as <strong>vertical tabs</strong>, as it’s done in the footer of <a href="https://www.oracle.com/">Oracle</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7240484-4a6b-419a-a8da-0718d1261197/05-oracle-country-selector.jpg" /></p>
<p>This way, we display <strong>only options that are relevant to users</strong>. They never have to go to irrelevant sections or pages since they get a preview and can navigate away from it quickly, should they wish to do so.</p>
<p>In general, the curtain pattern works well with a quite <strong>flat content architecture</strong>, but is difficult to manage with three or more levels. It shows its strengths when the speed of navigation matters and when users are likely to jump between sections a lot. </p>
<p>It’s <em>way</em> faster than slide-in-menus but less flexible than accordions. Still, a great lil’ helper to keep in mind to <strong>make better use of available space</strong> on mobile.</p>
8. You Might Not Need 3+ Levels of Navigation
<p>The curtain pattern works well for two levels of navigation, but you might have many more levels than that. In that case, it might be a good idea to test if it actually has to be this way. What if you <strong>show only two or three levels</strong> via your menu drawer, but then the rest would be available on standalone pages?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf8a342c-d254-48e6-b5cc-cbe54bf848e3/16-antwerp-university.jpg" /></p>
<p><a href="https://uantwerpen.be/">The University of Antwerp</a> gets away with just one level of navigation on mobile. All the sub-section exist on standalone pages as cards. In fact, there are dozens of links on each page, but as long as the <strong>navigation is obvious</strong>, this might be just what you need.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3483b7d-15f1-4296-a000-600107a5d1ca/17-gov-uk.jpg" /></p>
<p><a href="https://www.gov.uk">Gov.uk</a> isn’t a particularly small website, but it features <strong>only two main sections</strong> with plenty of subsections in its navigation on mobile. However, no third or fourth-level navigation is accessible from the menu drawer. Everything else is accessible via links and cards on separate pages.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/db36c09a-7d22-490e-ad5e-ffe8c32654f5/20-korean-post.jpg" /></p>
<p><a href="https://www.koreapost.go.kr/">Korea Post</a> follows along with an interesting twist to that idea. On tap in the menu, it shows all items living on the second level, but also <strong>automatically shows the options from the third level</strong>, too. Additionally, breadcrumbs include drop-downs allowing users to jump quickly between the siblings of each level. You can find out more about that pattern (<em>sideways breadcrumbs</em>) in <a href="https://www.smashingmagazine.com/2022/04/breadcrumbs-ux-design/">Designing A Perfect Breadcrumbs UX</a>.</p>
<p>Do you need to display more than two levels of navigation? Perhaps it is indeed necessary, but chances are high that it isn’t. So perhaps it’s worth testing a design that features <strong>only two levels</strong>. Additionally, we can add another feature to it to make navigation even faster.</p>
9. Query User’s Intent With Navigation Queries
<p>In addition to search and navigation, we could study some of the most frequently visited pages or some of the most popular tasks, and show them directly, as we saw in the <a href="https://deutschepost.de/">Deutsche Post</a> example earlier above.</p>
<p>We could also add <a href="https://www.smashingmagazine.com/2022/04/designing-better-navigation-ux-queries/">navigation queries</a> to <strong>ask users about their intent</strong>, and allow them to choose a topic relevant to them. Think about it as a mini-search engine for your navigation, designed as a seamless autocomplete experience. This would give users guidance toward the goal and help them navigate more reliably.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1df9fbaa-2e19-4b04-878c-8848cd815c6b/task-cosmos-direk.png" /></p>
<p><a href="https://www.cosmosdirekt.de/">Cosmos Direkt</a>, a German insurance company, features a &lt;select&gt;-menu that allows users to select a particular task that they’d like to perform on the site. This type of navigation exists additionally to search and classic navigation menu, but <strong>increases the speed to relevance</strong> significantly.</p>
Wrapping Up
<p>Just as a quick summary, here are a few things to keep in mind when dealing with complex multi-level navigation:</p>
<ul>
<li><strong><a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Accordions</a> work well</strong>, and for expert users, they work even if they are nested.</li>
<li><strong>Remove icons that you don’t need</strong>. Avoid icons pointing in more than two directions.</li>
<li><strong>Use the billboard pattern</strong> to highlight top tasks that users want to complete on the site.</li>
<li>For nested navigation levels, make sure that <strong>each level is distinct</strong> (indentation + type styles).</li>
<li>Whenever possible, <strong>make links obvious</strong> by underlining them.</li>
<li>Slide-in-menus <strong>don’t perform very well</strong>; they are slow and distracting. Accordions are likely to perform better.</li>
<li><strong>Keep the navigation stack</strong> of the levels that users browsed through to allow for quick jumps.</li>
<li><strong>Curtain navigation</strong> is fast! Consider using it when you have two, or at most three, levels of navigation.</li>
<li>Perhaps we don’t need to show all levels of navigation and instead can bring users to the relevant page to navigate from there.</li>
</ul>

Meet “Smart Interface Design Patterns”
<p>If you are interested in similar insights around UX, take a look at <a href="https://smart-interface-design-patterns.com/"><strong>Smart Interface Design Patterns</strong></a>, our shiny new <strong>8h-video course</strong> with 100s of practical examples from real-life projects. Plenty of design patterns and guidelines on everything from accordions and dropdowns to complex tables and intricate web forms — with five new segments added every year. <em>Just sayin’!</em> <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Check a free preview</a>.</p>
<a href="https://smart-interface-design-patterns.com/"><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cc4e1de-6921-474e-a3fb-db4789fc13dd/b4024b60-e627-177d-8bff-28441f810462.jpeg" /></a>Meet <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a>, our new video course on interface design &amp; UX.

<div><a href="https://smart-interface-design-patterns.com/">Jump to the video course →</a></div>

<p></p><p>100 design patterns &amp; real-life 
examples.<br />8h-video course + live UX training. <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Free preview</a>.</p>
Related UX Articles
<ul>
<li><a href="https://www.smashingmagazine.com/2022/04/breadcrumbs-ux-design/">Designing Perfect Breadcrumbs UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/04/designing-better-navigation-ux-queries/">Boosting Navigation UX With Navigation Queries</a></li>
<li><a href="https://www.smashingmagazine.com/2022/08/error-messages-ux-design/">Designing Better Error Messages UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/08/authentication-ux-design-guidelines/">Rethinking Authenticaiton UX</a></li>
<li><a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">Disabled Buttons UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/03/designing-better-infinite-scroll/">Designing A Perfect Infinite Scroll</a></li>
<li><a href="https://www.smashingmagazine.com/category/ux/">Design Patterns and UX on SmashingMag</a></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4f71534-99d6-4c67-866b-808017f4c3a5/navigation-design-mobile-ux.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Putting The Graph In GraphQL With The Neo4j GraphQL Library]]></title>
            <link>https://smashingmagazine.com/2022/11/graph-neo4j-graphql-library/</link>
            <guid>https://smashingmagazine.com/2022/11/graph-neo4j-graphql-library/</guid>
            <pubDate>Tue, 01 Nov 2022 11:00:00 GMT</pubDate>
            <description><![CDATA[If building a GraphQL API backed by a native graph database sounds interesting or at all helpful for the problems you’re trying to solve as a developer, perhaps you’d like to give the open-source [Neo4j GraphQL Library](https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGVUIVKKTTTTTTCT2NTYYTTTTTTI4BVH7U4JBCKQ466IDGV2IUWESGCV7WALL5QYYE) a try. Let’s take a closer look at the reasons why!]]></description>
            <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGPUIVKKTTTTTTCT2NTYYTTTTTTBSEP3H6KN4FKWYNLEZCVQAF5OZNFHIU4RPY27HE">Neo4j</a></p>
<p>GraphQL enables an API developer to model application data as a graph, and API clients that request that data to easily traverse this data graph to retrieve it. These are powerful game-changing capabilities. But if your backend isn’t graph-ready, these capabilities could become liabilities by putting additional pressure on your database, consuming greater time and resources.</p>
<p>In this article, I’ll shed some light on ways you can mitigate these issues when you use a graph database as the backend for your next GraphQL API by taking advantage of the capabilities offered by the open-source <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGKUIVKKTTTTTTCT2NTYYTTTTTTI4BVH7U4JBCKQ466IDGV2IUWESGCV7WALL5QYYE">Neo4j GraphQL Library</a>.</p>
What Graphs Are, And Why They Need A Database
<p>Fundamentally, a graph is a data structure composed of nodes (the entities in the data model) along with the relationships between nodes. Graphs are all about the connections in your data. For this reason, relationships are first-class citizens in the graph data model.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57e483d5-a44e-4a8d-953e-c47dc8dcbc80/2-graph-neo4j-graphql-library.jpg" /></p>
<p>Graphs are so important that an entire category of databases was created to work with graphs: graph databases. Unlike relational or document databases that use tables or documents, respectively, as their data models, the data model of a graph database is (you guessed it!) a graph.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fba15359-dfb1-4dbd-aa11-77fe6b01fcc4/3-graph-neo4j-graphql-library.png" /></p>
<p>GraphQL is not and was never intended to be a database query language. It is indeed a query language, yet it lacks much of the semantics we would expect from a true database query language like SQL or Cypher. That’s on purpose. You don’t want to be exposing our entire database to all our client applications out there in the world.</p>
<p>Instead, GraphQL is an API query language, modeling <em>application data</em> as a graph and purpose-built for exposing and querying that data graph, just as SQL and Cypher were purpose-built for working with relational and graph databases, respectively. Since one of the primary functions of an API application is to interact with a database, it makes sense that GraphQL database integrations should help build GraphQL APIs that are backed by a database. That’s exactly what the Neo4j GraphQL Library does — makes it easier to build GraphQL APIs backed by Neo4j.</p>
<p>One of GraphQL’s most powerful capabilities enables the API designer to express the entire data domain as a graph using nodes and relationships. This way, API clients can traverse the data graph to find the relevant data. This makes better sense because most API interactions are done in the context of relationships. For example, if we want to fetch all orders placed by a specific customer or all the products in a given order, we’re traversing the pattern of relationships to find those connections in our data.</p>
<p>Soon after GraphQL was open-sourced by Facebook in 2015, a crop of GraphQL database integrations sprung up, evidently in an effort to address the <em>n+1</em> conundrum and similar problems. Neo4j GraphQL Library was one of these integrations. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/08e50e67-d22d-45b3-ad80-aef7106f32e0/2-graph-neo4j-graphql-library.png" /></p>
Common GraphQL Implementation Problems
<p>Building a GraphQL API service requires you to perform two steps:</p>
<ol>
<li>Define the schema and type definitions.</li>
<li>Create resolver functions for each type and field in the schema that will be responsible for fetching or updating data in our data layer.</li>
</ol>
<p>Combining these schema and resolver functions gives you an executable GraphQL schema object. You may then attach the schema object to a networking layer, such as a Node.js web server or lambda function, to expose the GraphQL API to clients. Often developers will use tools like Apollo Server or GraphQL Yoga to help with this process, but it’s still up to them to handle the first two steps.</p>
<p>If you’ve ever written resolver functions, you’ll recall they can be a bit tedious, as they’re typically filled with boilerplate data fetching code. But even worse than lost developer productivity is <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTG5UIVKKTTTTTTCT2NTYYTTTTTTM3YK2QD5YPWCMVMCIIJ5MJW67DMP2ACLKJW277E">the dreaded <em>n+1</em> query problem</a>. Because of the nested way that GraphQL resolver functions are called, a single GraphQL request can result in multiple round-trip requests to the database. Addressing this typically involves a batching and caching strategy, adding additional complexity to your GraphQL application.</p>
Doubling Down On GraphQL-First Development
<p>Originally, the term <em>GraphQL-First Development</em> described a collaborative process. Frontend and backend teams would agree on a GraphQL schema, then go to work independently building their respective pieces of the codebase. Database integrations extend the idea of GraphQL-First development by applying this concept to the database as well. GraphQL-type definitions can now drive the database.</p>
<p>You can find the full code examples presented here on <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGEUIVKKTTTTTTCT2NTYYTTTTTTLBCVQW6KSLI2ASUKWD2PHP6AIZW2RUFPYSDV7YT">GitHub</a>.</p>
<p>Let’s say you’re building a business reviews application where you want to keep track of businesses, users, and user reviews. GraphQL-type definitions to describe this API might look something like this:</p>
<pre><code>type Business {
  businessId: ID!
  name: String!
  city: String!
  state: String!
  address: String!
  location: Point!
  reviews: [Review!]! @relationship(type: "REVIEWS", direction: IN)
  categories: [Category!]!
    @relationship(type: "IN_CATEGORY", direction: OUT)
}

type User {
  userID: ID!
  name: String!
  reviews: [Review!]! @relationship(type: "WROTE", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float!
  date: Date!
  text: String
  user: User! @relationship(type: "WROTE", direction: IN)
  business: Business! @relationship(type: "REVIEWS", direction: OUT)
}

type Category {
  name: String!
  businesses: [Business!]!
    @relationship(type: "IN_CATEGORY", direction: IN)
}
</code></pre>

<p>Note the use of the GraphQL schema directive <a href="https://neo4j.com/docs/graphql-manual/current/type-definitions/relationships/"><code>@relationship</code></a> in our type definitions. <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGBUIVKKTTTTTTCT2NTYYTTTTTTALHCHWDV5PI53DCKBZPC2LN4JSV5AAW6LIP23SE">GraphQL schema directives</a> are the language’s built-in extension mechanism and key components for extending and configuring GraphQL APIs — especially with database integrations like Neo4j GraphQL Library. In this case, the <code>@relationship</code> directive encodes the relationship type and direction (in or out) for pairs of nodes in the database.</p>
<p>Type definitions are then used to define the property graph data model in Neo4j. Instead of maintaining two schemas (one for our database and another for our API), you can now use type definitions to define both the API and the database’s data model. Furthermore, since Neo4j is schema-optional, using GraphQL to drive the database adds a layer of type safety to your application.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8eb8b29f-aeef-4b13-bb15-4f165737e8f0/5-graph-neo4j-graphql-library.jpg" /></p>
From GraphQL Type Definitions To Complete API Schemas
<p>In GraphQL, you use fields on special types (Query, Mutation, and Subscription) to define the entry points for the API. In addition, you may want to define field arguments that can be passed at query time, for example, for sorting or filtering. Neo4j GraphQL Library handles this by creating entry points in the GraphQL API for <code>create</code>, <code>read</code>, <code>update</code>, and <code>delete</code> operations for each type, as well as field arguments for sorting and filtering.</p>
<p>Let’s look at some examples. For our business reviews application, suppose you want to show a list of businesses sorted alphabetically by name. Neo4j GraphQL Library automatically adds field arguments to accomplish just this.</p>
<pre><code>{
  businesses(options: { limit: 10, sort: { name: ASC } }) {
    name
  }
}
</code></pre>

<p>Perhaps you want to allow the users to filter this list of businesses by searching for companies by name or keyword. <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGAUIVKKTTTTTTCT2NTYYTTTTTTMDQQQEIV2BFCJACWNPZPQAUCSPHQ3DUPIPK23VT">The <code>where</code> argument</a> handles this kind of filtering:</p>
<pre><code>{
  businesses(where: { name_CONTAINS: "Brew" }) {
    name
    address
  }
</code></pre>

<p>You can then combine these filter arguments to express very complex operations. Say you want to find businesses that are in either the Coffee or Breakfast category and filter for reviews containing the keyword “breakfast sandwich:”</p>
<pre><code>{
  businesses(
    where: {
      OR: [
        { categories_SOME: { name: "Coffee" } }
        { categories_SOME: { name: "Breakfast" } }
      ]
    }
  ) {
    name
    address
    reviews(where: { text_CONTAINS: "breakfast sandwich" }) {
    stars
    text
  }
 }
}
</code></pre>

<p>Using location data, for example, you can even search for businesses within 1 km of our current location:</p>
<pre><code>{
  businesses(
    where: {
      location_LT: {
        distance: 1000
        point: { latitude: 37.563675, longitude: -122.322243 }
      }
    }
  ) {
  name
  address
  city
  state
  }
}
</code></pre>

<p>As you can see, this functionality is extremely powerful, and the generated API can be configured through the use of GraphQL schema directives.</p>
We Don’t Need No Stinking Resolvers
<p>As we noted earlier, GraphQL server implementations require resolver functions where the logic for interacting with the data layer lives. With database integrations such as Neo4j GraphQL Library, resolvers are generated for you at query time for translating arbitrary GraphQL requests into singular, encapsulated database queries. This is a huge developer productivity win (we don’t have to write boilerplate data fetching code — yay!). It also addresses the <em>n+1</em> query problem by making a single round-trip request to the database.</p>
<p>Moreover, graph databases like Neo4j are optimized for exactly the kind of nested graph data traversals commonly expressed in GraphQL. Let’s see this in action. Once you’ve defined your GraphQL type definitions, here’s all the code necessary to spin up your fully functional GraphQL API:</p>
<pre><code>const { ApolloServer } = require("apollo-server");
const neo4j = require("neo4j-driver");
const { Neo4jGraphQL } = require("@neo4j/graphql");

// Connect to your Neo4j instance.
const driver = neo4j.driver(
  "neo4j+s://my-neo4j-db.com",
  neo4j.auth.basic("neo4j", "letmein")
);

// Pass our GraphQL type definitions and Neo4j driver instance.
const neoSchema = new Neo4jGraphQL({ typeDefs, driver });

// Generate an executable GraphQL schema object and start
// Apollo Server.
neoSchema.getSchema().then((schema) =&gt; {
  const server = new ApolloServer({
    schema,
  });
  server.listen().then(({ url }) =&gt; {
    console.log(`GraphQL server ready at ${url}`);
  });
});
</code></pre>

<p>That’s it! No resolvers.</p>
Extend GraphQL With The Power Of Cypher
<p>So far, we’ve only been talking about basic <code>create</code>, <code>read</code>, <code>update</code>, and <code>delete</code> operations. How can you handle custom logic with Neo4j GraphQL Library?</p>
<p>Let’s say you want to show recommended businesses to your users based on their search or review history. One way would be to implement your own resolver function with the logic for generating those personalized recommendations built in. Yet there’s a better way to maintain the one-to-one, GraphQL-to-database operation performance guarantee: You can leverage the power of the Cypher query language using the <a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTTGOUIVKKTTTTTTCT2NTYYTTTTTTM425HWWN74LVRVUV7D7Q7QCCOLEKYAF5IPF2Q3E"><strong><code>@cypher</code> GraphQL schema directive</strong></a> to define your custom logic within your GraphQL type definitions.</p>
<p><a href="https://srv.buysellads.com/ads/long/x/TCZPLYDDTTTTTTFR6JINCTTTTTT5TUIVKKTTTTTTCT2NTYYTTTTTTNL2KVYUCEZCPJC6K7S3PEAH4RDDC2YFWBDYQ34E">Cypher is an extremely powerful language</a> that enables you to express complex graph patterns using ASCII-art-like declarative syntax. I won’t go into detail about Cypher in this article, but let’s see how you could accomplish our personalized recommendation task by adding a new field to your GraphQL-type definitions:</p>
<pre><code>extend type Business {
  recommended(first: Int = 1): [Business!]!
    @cypher(
      statement: """
        MATCH (this)&lt;-[:REVIEWS]-(:Review)&lt;-[:WROTE]-(u:User)
        MATCH (u)-[:WROTE]-&gt;(:Review)-[:REVIEWS]-&gt;(rec:Business)
        WITH rec, COUNT(*) AS score
        RETURN rec ORDER BY score DESC LIMIT $first
      """
    )
}
</code></pre>

<p>Here, the <strong>Business</strong> type has a <strong>recommended</strong> field, which uses the Cypher query defined above to show recommended businesses whenever requested in the GraphQL query. You didn’t need to write a custom resolver to accomplish this. Neo4j GraphQL Library is still able to generate a single database request even when using a custom <strong>recommended</strong> field.</p>
GraphQL Database Integrations Under The Hood
<p>GraphQL database integrations like Neo4j GraphQL Library are powered by the <strong>GraphQLResolveInfo</strong> object. This object is passed to all resolvers, including the ones generated for us by Neo4j GraphQL Library. It contains information about both the GraphQL schema and GraphQL operation being resolved. By closely inspecting this object, GraphQL database integrations can generate database queries at the time queries are placed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc243776-bfb9-49ca-8959-6027b62e5de9/4-graph-neo4j-graphql-library.png" /></p>
<p>If you’re interested, <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQ4SDVKKTTTTTTVTWNTYYTTTTTTNDLKRYHKWIV5V7CNAJ72HVCWSSIQ3KC5W4KCJUT">I recently gave a talk at GraphQL Summit</a> that goes into much more detail.</p>
Powering Low-Code, Open Source-Powered GraphQL Tools
<p>An open-source library that works with any JavaScript GraphQL implementation can conceivably power an entire ecosystem of low-code GraphQL tools. Collectively, these tools leverage the functionality of Neo4j GraphQL Library to help make it easier for you to build, test, and deploy GraphQL APIs backed by a real graph database.</p>
<p>For example, <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQ6SDVKKTTTTTTVTWNTYYTTTTTT7DVPABF5JS62MK6624BPMS6Y7DVG3UM6JBCQ3MT">GraphQL Mesh</a> uses Neo4j GraphQL Library to enable Neo4j as a data source for data federation. Don’t want to write the code necessary to build a GraphQL API for testing and development? The <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQCSDVKKTTTTTTVTWNTYYTTTTTTJ77KRKIPB45GHLUWBZMCHJF5B3WVQ2C6MI62KSE">Neo4j GraphQL Toolbox</a> is an open-source, low-code web UI that wraps Neo4j GraphQL Library. This way, it can generate a GraphQL API from an existing Neo4j database with a single click.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1611fd63-879f-4a3b-946a-b00a694567c0/7-graph-neo4j-graphql-library.png" /></p>
Where From Here
<p>If building a GraphQL API backed by a native graph database sounds interesting or at all helpful for the problems you’re trying to solve as a developer, I would encourage you to give the Neo4j GraphQL Library a try. Also, the <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQVSDVKKTTTTTTVTWNTYYTTTTTTI4BVH7U4JBCKQ466IDGV2IUWESGCV7WALL5QYYE">Neo4j GraphQL Library landing page</a> is a good starting point for documentation, further examples, and comprehensive workshops.</p>
<p>I’ve also written a book <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQPSDVKKTTTTTTVTWNTYYTTTTTTYBWV7VC5NDPCRI66WP42W7WCEB25Q2FC2S6QMMT"><em>Full Stack GraphQL Applications</em></a>, published by Manning, that covers this topic in much more depth. My book covers handling authorization, working with the frontend application, and using cloud services like Auth0, Netlify, AWS Lambda, and Neo4j Aura to deploy a full-stack GraphQL application. In fact, I’ve built out the very business reviews application from this article as an example in the book! Thanks to Neo4j, this book is now available as a <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQKSDVKKTTTTTTVTWNTYYTTTTTTWIGK2NIEOPN2KANLLBICJKHLB3WQMBFL2S3KRVE">free download</a>.</p>
<p>Last but not least, I will be presenting a live session entitled “Making Sense of Geospatial Data with Knowledge Graphs” during the NODES 2022 virtual conference on Wednesday, November 16, produced by Neo4j. <a href="https://srv.buysellads.com/ads/long/x/TFIQNYDDTTTTTT6247INCTTTTTTQ5SDVKKTTTTTTVTWNTYYTTTTTTIZQF36FKI4VP27IKWDFVJZWAABJQJQW5N3J5HBT">Registration is free to all attendees</a>.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (William Lyon)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b51519f-b70b-41bf-9add-84c4f84cb126/neo4j-library-graphql.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[On The Edge Of November (2022 Desktop Wallpapers Edition)]]></title>
            <link>https://smashingmagazine.com/2022/10/desktop-wallpaper-calendars-november-2022/</link>
            <guid>https://smashingmagazine.com/2022/10/desktop-wallpaper-calendars-november-2022/</guid>
            <pubDate>Mon, 31 Oct 2022 09:00:00 GMT</pubDate>
            <description><![CDATA[November is just around the corner, and with it, a new collection of desktop wallpapers to celebrate the beginning of the month. Designed by creatives from all across the globe, they come in versions with and without a calendar. Let’s make November colorful!]]></description>
            <content:encoded><![CDATA[<p>November tends to be a rather gray month in many parts of the world. So what better remedy could there be as some colorful inspiration? To bring some good vibes to your desktops and home screens, artists and designers from across the globe once again tickled their creativity and designed <strong>beautiful and inspiring wallpapers</strong> to welcome the new month.</p>

<p>This <a href="https://www.smashingmagazine.com/category/wallpapers">monthly wallpapers challenge</a> has been going on for more than eleven years already, and we are very thankful to everyone who has put their creative skills to the test and contributed their artworks to it — back in the early days, just like today.</p>

<p>The wallpapers in this collection all come in versions with and without a calendar for <strong>November 2022</strong> and can be downloaded for free. As a little bonus goodie, we also compiled some timeless treasures from past November editions at the end of this post for you. Enjoy!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
<li><strong><a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>
</ul>

Anbani
<p>“<em>Anbani</em> means <em>alphabet</em> in Georgian. The letters that grow on that tree are the Georgian alphabet. It’s very unique!” — Designed by <a href="https://vlad.studio/">Vlad Gerasimov</a> from Georgia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nov-22-anbani-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9072044-e74a-4259-8b19-291d3382050a/nov-22-anbani-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nov-22-anbani-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1024x600.jpg">1024x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1440x960.jpg">1440x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1600x900.jpg">1600x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-2880x1800.jpg">2880x1800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-3072x1920.jpg">3072x1920</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-3840x2160.jpg">3840x2160</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/cal/nov-22-anbani-cal-5120x2880.jpg">5120x2880</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1024x600.jpg">1024x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1440x960.jpg">1440x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1600x900.jpg">1600x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-2880x1800.jpg">2880x1800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-3072x1920.jpg">3072x1920</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-3840x2160.jpg">3840x2160</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/anbani/nocal/nov-22-anbani-nocal-5120x2880.jpg">5120x2880</a></li>
</ul>

Cozy Autumn Cups And Cute Pumpkins
<p>“Autumn coziness, which is created by fallen leaves, pumpkins, and cups of cocoa, inspired our designers for this wallpaper. You can find more calendar options in <a href="https://masterbundles.com/best-november-calendar-collection/">our collection</a>.” — Designed by <a href="http://masterbundles.com/">MasterBundles</a> from Ukraine.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nov-22-cozy-autumn-cups-and-cute-pumpkins-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e75c400-1190-46fb-bd28-98d52a8b8a66/nov-22-cozy-autumn-cups-and-cute-pumpkins-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nov-22-cozy-autumn-cups-and-cute-pumpkins-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-320х480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-640х480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-800х480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-800х600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1024х768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1024х1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1152х864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1280х720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1280х800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1280х960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1280х1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1400х1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1440х900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1600х1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1680х1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1680х1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1920х1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1920х1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-1920х1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/cal/nov-22-cozy-autumn-cups-and-cute-pumpkins-cal-2560х1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-320х480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-640х480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-800х480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-800х600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1024х768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1024х1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1152х864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1280х720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1280х800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1280х960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1280х1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1366х768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1400х1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1440х900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1600х1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1680х1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1680х1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1920х1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1920х1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-1920х1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/cozy-autumn-cups-and-cute-pumpkins/nocal/nov-22-cozy-autumn-cups-and-cute-pumpkins-nocal-2560х1440.png">2560x1440</a></li>
</ul>

A Jelly November
<p>“Been looking for a mysterious, gloomy, yet beautiful desktop wallpaper for this winter season? We’ve got you, as this month’s calendar marks Jellyfish Day. On November 3rd, we celebrate these unique, bewildering, and stunning marine animals. Besides adorning your screen, we’ve got you covered with some jellyfish fun facts — they aren’t really fish, they need very little oxygen, eat a broad diet, and shrink in size when food is scarce. Now that’s some tenacity to look up to.” — Designed by <a href="https://www.popwebdesign.net/apps.html">PopArt Studio</a> from Serbia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nov-22-a-jelly-november-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3942e44a-2f5b-4d88-9317-ac9c6d6dc905/nov-22-a-jelly-november-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nov-22-a-jelly-november-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1440x1050.jpg">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/cal/nov-22-a-jelly-november-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1440x1050.jpg">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/a-jelly-november/nocal/nov-22-a-jelly-november-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Snoop Dog
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nov-22-snoop-dog-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c31fc93a-f537-4cce-b62d-0caf2f1fbdd7/nov-22-snoop-dog-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nov-22-snoop-dog-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/cal/nov-22-snoop-dog-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/snoop-dog/nocal/nov-22-snoop-dog-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Sunset On The Mississippi
<p>“After a long day, a walk along the Mississippi renews our soul, and more, if we do it in great company.” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela Jimenez</a> from Spain.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nov-22-sunset-on-the-mississippi-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a82f8d4c-d1cb-4c9a-b291-143b67837637/nov-22-sunset-on-the-mississippi-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nov-22-sunset-on-the-mississippi-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/cal/nov-22-sunset-on-the-mississippi-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/sunset-on-the-mississippi/nocal/nov-22-sunset-on-the-mississippi-nocal-2560x1440.png">2560x1440</a></li>
</ul>

No Shave November
<p>“The goal of No-Shave November is to grow awareness by embracing our hair, which many cancer patients lose, and letting it grow wild and free. Donate the money you typically spend on shaving and grooming to educate about cancer prevention, save lives, and aid those fighting the battle.” — Designed by <a href="https://themeselection.com/">ThemeSelection</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nov-22-no-shave-november-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a5254e6-dee5-4c53-b20d-68b3f1c42df6/nov-22-no-shave-november-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nov-22-no-shave-november-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/cal/nov-22-no-shave-november-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/cal/nov-22-no-shave-november-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/cal/nov-22-no-shave-november-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/cal/nov-22-no-shave-november-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/cal/nov-22-no-shave-november-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/cal/nov-22-no-shave-november-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nocal/nov-22-no-shave-november-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nocal/nov-22-no-shave-november-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nocal/nov-22-no-shave-november-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nocal/nov-22-no-shave-november-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nocal/nov-22-no-shave-november-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-shave-november/nocal/nov-22-no-shave-november-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Star Wars
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nov-22-star-wars-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ad82c914-312c-40a0-96e3-db3eabbe6e31/nov-22-star-wars-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nov-22-star-wars-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/cal/nov-22-star-wars-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/star-wars/nocal/nov-22-star-wars-nocal-3840x2160.png">3840x2160</a></li>
</ul>

NOvember
<p>“I created simple geometric lines which can refer to the month’s name. I chose sweet colors so the letter ‘o’ looks like a donut. It’s a nightmare, NO donut for NOvember!” — Designed by <a href="https://www.philippebrouard.fr">Philippe Brouard</a> from France.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nov-22-no-vember-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0e7d016-1f49-457e-b1e9-1e576399d5dd/nov-22-no-vember-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nov-22-no-vember-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/cal/nov-22-no-vember-cal-2880x1800.jpg">2880x1800</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/nov-22/no-vember/nocal/nov-22-no-vember-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>



Oldies But Goodies

<p>Umbrellas, autumn winds, mushrooms, and, well, cats, of course — a lot of things have inspired the design community to design a November wallpaper in the years we’ve been running our monthly series. Below you’ll find a selection of oldies but goodies <strong>from the archives</strong>. Please note that these wallpapers don’t come with a calendar.</p>

<p></p><h3>Colorful Autumn</h3><p></p>
<p></p><p>“Autumn can be dreary, especially in November, when rain starts pouring every day. We wanted to summon better days, so that’s how this colourful November calendar was created. Open your umbrella and let’s roll!” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7456c03e-565b-492c-968f-b30e92d5b6e6/nov-17-colorful-autumn-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8edeb776-d8d5-4b5b-867f-6964f7addcd6/nov-17-colorful-autumn-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8edeb776-d8d5-4b5b-867f-6964f7addcd6/nov-17-colorful-autumn-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/colorful-autumn/nocal/nov-17-colorful-autumn-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>The Kind Soul</h3><p></p>
<p></p><p>“Kindness drives humanity. Be kind. Be humble. Be humane. Be the best of yourself!” — Designed by <a href="https://www.colormean.ae/">Color Mean Creative Studio</a> from Dubai.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8f0fd84d-e496-435f-be91-5b2ecb580149/nov-17-the-kind-soul-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f00ee114-6db4-4f83-9877-1827113c2276/nov-17-the-kind-soul-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f00ee114-6db4-4f83-9877-1827113c2276/nov-17-the-kind-soul-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/the-kind-soul/nocal/nov-17-the-kind-soul-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Me And The Key Three</h3><p></p>
<p></p><p>“This wallpaper is based on screenshots from my latest browser game (I’m an indie games designer).” — Designed by <a href="https://www.bontegames.com">Bart Bonte</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a36659bc-3708-428a-99a8-14f9ecf7d1fd/key-three-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57fb0377-f0ca-4c86-b9ef-a7e70432e798/key-three-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57fb0377-f0ca-4c86-b9ef-a7e70432e798/key-three-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/pinguin-wallpapers/nocal/2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Time To Give Thanks</h3><p></p>
<p></p><p>Designed by <a href="https://www.tazi.com.au">Glynnis Owen</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2eb92368-cefd-4b28-9813-15deae3a363a/nov-16-time-to-give-thanks-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e00bfb70-c6a1-40d5-9753-c5e375e863c2/nov-16-time-to-give-thanks-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e00bfb70-c6a1-40d5-9753-c5e375e863c2/nov-16-time-to-give-thanks-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/time-to-give-thanks/nocal/nov-16-time-to-give-thanks-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Tempestuous November</h3><p></p>
<p></p><p>“By the end of autumn, ferocious Poseidon will part from tinted clouds and timid breeze. After this uneven clash, the sky once more becomes pellucid just in time for imminent luminous snow.” — Designed by <a href="https://www.creitive.com">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e17adda-4fc7-4ad5-9328-e364e52a0075/nov-17-tempestuous-november-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aa9d7e3-e1b8-48dd-9dcb-25eaf0ba1229/nov-17-tempestuous-november-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aa9d7e3-e1b8-48dd-9dcb-25eaf0ba1229/nov-17-tempestuous-november-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/tempestuous-november/nocal/nov-17-tempestuous-november-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Moonlight Bats</h3><p></p>
<p></p><p>“I designed some Halloween characters and then this idea came to my mind — a bat family hanging around in the moonlight. A cute and scary mood is just perfect for autumn.” — Designed by <a href="https://www.carmen-eisendle.com">Carmen Eisendle</a> from Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eb930008-f9f2-4640-9da7-8ec4961ef457/nov-16-moonlight-bats-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95ff8287-5ec2-4dd5-b3a8-0b7fc4002451/nov-16-moonlight-bats-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95ff8287-5ec2-4dd5-b3a8-0b7fc4002451/nov-16-moonlight-bats-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1680x1260.png">1680x1260</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/moonlight-bats/nocal/nov-16-moonlight-bats-nocal-2560x1600.png">2560x1600</a></li>
</ul>

<p></p><h3>Mushroom Season</h3><p></p>
<p></p><p>“It is autumn! It is raining and thus… it is mushroom season! It is the perfect moment to go to the forest and get the best mushrooms to do the best recipe.” — Designed by <a href="http://www.silocreativo.com/en/">Verónica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1775c95-1c88-47e9-abe3-010b7d9c4dc0/nov-15-mushroom-season-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f07e2f6-0387-44d5-b7c0-361acbb3f022/nov-15-mushroom-season-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f07e2f6-0387-44d5-b7c0-361acbb3f022/nov-15-mushroom-season-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/mushroom-season/nocal/nov-15-mushroom-season-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>On The Edge Of Forever</h3><p></p>
<p></p><p>“November has always reminded me of the famous Guns N’ Roses song, so I’ve decided to look at its meaning from a different perspective. The story in my picture takes place somewhere in space, where a young guy beholds a majestic meteor shower and wonders about the mysteries of the universe.” — Designed by Aliona Voitenko from Ukraine.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/51fb273b-4ce1-4ac6-bc34-c826a5646056/nov-14-on-the-edge-of-forever-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/10a5b406-757c-4534-9361-ecab1fb176de/nov-14-on-the-edge-of-forever-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/10a5b406-757c-4534-9361-ecab1fb176de/nov-14-on-the-edge-of-forever-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/on-the-edge-of-forever/nocal/nov-14-on-the-edge-of-forever-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Sad Kitty</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a74993b3-ef76-4fc9-aa5d-ba9756d64ab5/nov-18-sad-kitty-nocal-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f70d526a-2c93-4398-ba3c-74425f1f73d7/nov-18-sad-kitty-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f70d526a-2c93-4398-ba3c-74425f1f73d7/nov-18-sad-kitty-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/sad-kitty/nocal/nov-18-sad-kitty-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>November Nights On Mountains</h3><p></p>
<p></p><p>“Those chill November nights when you see mountain tops covered with the first snow sparkling in the moonlight.” — Designed by <a href="https://www.jovanadjokic.com/">Jovana Djokic</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ff16366b-8df6-4f3a-99ab-b6609aac06cd/nov-15-november-nights-on-mountains-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0395663-e5a3-4005-8da0-1c28011e8ccf/nov-15-november-nights-on-mountains-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0395663-e5a3-4005-8da0-1c28011e8ccf/nov-15-november-nights-on-mountains-preview-opt.png">preview</a></li><li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/november-nights-on-mountains/nocal/nov-15-november-nights-on-mountains-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Hello World, Happy November</h3><p></p>
<p></p><p>“I often read messages at Smashing Magazine from the people in the southern hemisphere ‘it’s spring, not autumn!’ so I’d like to design a wallpaper for the northern and the southern hemispheres. Here it is, northerners and southerns, hope you like it!” — Designed by <a href="http://agnesswart.nl">Agnes Swart</a> from the Netherlands.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/430130a6-25ab-42ea-a53f-b213c6663754/nov-14-hello-world-happy-november-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b7e62a7-e48e-419a-9ff1-00791771c006/nov-14-hello-world-happy-november-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b7e62a7-e48e-419a-9ff1-00791771c006/nov-14-hello-world-happy-november-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/hello-world-happy-november/nocal/nov-14-hello-world-happy-november-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Outer Space</h3><p></p>
<p></p><p>“This November, we are inspired by the nature around us and the universe above us, so we created an out-of-this-world calendar. Now, let us all stop for a second and contemplate on preserving our forests, let us send birds of passage off to warmer places, and let us think to ourselves — if not on Earth, could we find a home somewhere else in outer space?” — Designed by <a href="https://www.popwebdesign.de">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a22c060-701d-45e2-b929-e56fe19d1f00/nov-18-outer-space-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26c1a03-abab-4c75-9825-9c00172ae9a9/nov-18-outer-space-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a26c1a03-abab-4c75-9825-9c00172ae9a9/nov-18-outer-space-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-18/outer-space/nocal/nov-18-outer-space-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Captain’s Home</h3><p></p>
<p></p><p>Designed by Elise Vanoorbeek (Doud) from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7992aa7-576e-4bdb-9219-00c71f9aa330/nov-15-captains-home-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1674ac88-6294-46eb-a184-417dec461c3e/nov-15-captains-home-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1674ac88-6294-46eb-a184-417dec461c3e/nov-15-captains-home-preview-opt.png">preview</a></li><li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/captains-home/nocal/nov-15-captains-home-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Welcome Home Dear Winter</h3><p></p>
<p></p><p>“The smell of winter is lingering in the air. The time to be home! Winter reminds us of good food, of the warmth, the touch of a friendly hand, and a talk beside the fire. Keep calm and let us welcome winter.” — Designed by <a href="http://acodez.in/">Acodez IT Solutions</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50c9ea50-884f-473a-b3b1-14900d365355/nov-16-welcome-home-dear-winter-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3c0a650-20d1-4e84-a131-6c7625b75188/nov-16-welcome-home-dear-winter-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3c0a650-20d1-4e84-a131-6c7625b75188/nov-16-welcome-home-dear-winter-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/welcome-home-dear-winter/nocal/nov-16-welcome-home-dear-winter-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Deer Fall, I Love You</h3><p></p>
<p></p><p>Designed by <a href="http://www.mariaclaireporter.com/portfolio.html">Maria Porter</a> from the United States.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca26fac3-6827-4335-907c-efe1d306aa4b/nov-16-deer-fall-i-love-you-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1c1cdfb2-3f9a-4b3f-be45-df181ec5ac5e/nov-16-deer-fall-i-love-you-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1c1cdfb2-3f9a-4b3f-be45-df181ec5ac5e/nov-16-deer-fall-i-love-you-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-16/deer-fall-i-love-you/nocal/nov-16-deer-fall-i-love-you-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>Sailing Sunwards</h3><p></p>
<p></p><p>“There’s some pretty rough weather coming up these weeks. Thinking about November makes me want to keep all the warm thoughts in mind. I’d like to wish everyone a cozy winter.” — Designed by Emily Trbl. Kunstreich from Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/985ae63b-6d03-4b36-a8ec-efdea9047151/nov-15-sailing-sunwards-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1564afc-263b-45e7-9133-f896620736cd/nov-15-sailing-sunwards-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1564afc-263b-45e7-9133-f896620736cd/nov-15-sailing-sunwards-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-720x1280.png">720x1280</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1080x1920.png">1080x1920</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/sailing-sunwards/nocal/nov-15-sailing-sunwards-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>A Gentleman’s November</h3><p></p>
<p></p><p>Designed by <a href="https://ceeandimagine.be/">Cedric Bloem</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dbfa680e-e6b6-46cd-88af-10c686c610c4/nov-14-a-gents-november-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44b45307-6330-4e5a-bf33-9784777f2dda/nov-14-a-gents-november-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44b45307-6330-4e5a-bf33-9784777f2dda/nov-14-a-gents-november-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-14/a-gents-november/nocal/nov-14-a-gents-november-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Hold On</h3><p></p>
<p></p><p>“We have to acknowledge that some things are inevitable, like winter. Let’s try to hold on until we can, and then embrace the beautiful season.” — Designed by <a href="https://izhik.com">Igor Izhik</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc80a371-36d3-432f-a8cc-31a716756892/nov-15-hold-on-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57310a6a-e275-4ef7-a7b6-688aea9b93e9/nov-15-hold-on-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8fa90b55-d0b3-4e5f-aaa8-5a71deaa0c33/nov-15-hold-on-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-15/hold-on/nocal/nov-15-hold-on-nocal-2560x1600.jpg">2560x1600</a></li>
</ul>

<p></p><h3>The Collection Of Birds</h3><p></p>
<p></p><p>“The collection of birds are my travels. At each destination I buy a wood, bronze, stone bird, anything the local bazaars sell. I have all gathered at a modest vitrine in my house. I have so much loved my collection, that, after taking pictures of them, I designed each one, then created a wallpaper and overdressed a wall of my living room. Now my thought is making them as a desktop wallpaper and give them to you as a gift.” — Designed by <a href="https://www.graphium.gr">Natasha Kamou</a> from Greece.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b1a9807-d370-4a83-afed-73b88de158be/birds-nocal-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ddd26c20-f4cf-493b-ad67-d3c26ebfe90e/birds-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ddd26c20-f4cf-493b-ad67-d3c26ebfe90e/birds-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-13/the-collection-of-birds/nocal/2880x1800.jpg">2880x1800</a></li></ul>

<p></p><h3>November Fun</h3><p></p>
<p></p><p>Designed by <a href="https://www.behance.net/xenialatii">Xenia Latii</a> from Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7b3a66f-c138-46dc-8ae5-fd7ea6304785/nov-17-november-fun-nocal-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35567d83-49a9-48d9-aae9-7dc3697d4779/nov-17-november-fun-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35567d83-49a9-48d9-aae9-7dc3697d4779/nov-17-november-fun-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/nov-17/november-fun/nocal/nov-17-november-fun-nocal-2560x1440.jpg">2560x1440</a></li></ul>

]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9072044-e74a-4259-8b19-291d3382050a/nov-22-anbani-preview-opt.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How To Create Advanced Animations With CSS]]></title>
            <link>https://smashingmagazine.com/2022/10/advanced-animations-css/</link>
            <guid>https://smashingmagazine.com/2022/10/advanced-animations-css/</guid>
            <pubDate>Sat, 29 Oct 2022 12:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Yosra Emad explains how to create a rollercoaster path that a ball follows using cubic beziers and CSS transitions. You’ll also learn how the cubic-bezier function in CSS works in detail and how to stack multiple simple animations to create one complex one.]]></description>
            <content:encoded><![CDATA[<p>We surf the web daily, and as developers, we tend to notice subtle details on a website. The one thing I take note of all the time is how smooth the animations on a website are. Animation is great for UX and design purposes. You can make an interactive website that pleases the visitor and makes them remember your website.</p>
<p>Creating advanced animations sounds like a hard topic, but the good news is, in CSS, you can stack multiple simple animations after each other to create a more complex one!</p>
<p>In this blog post, you will learn the following:</p>
<ul>
<li>What cubic beziers are and how they can be used to create a “complex” animation in just one line of CSS;</li>
<li>How to stack animations after each other to create an advanced animation;</li>
<li>How to create a rollercoaster animation by applying the two points you learned above.</li>
</ul>
<p><strong>Note</strong>: <em>This article assumes that you have basic knowledge of CSS animations. If you don’t, please check out <a href="https://www.smashingmagazine.com/2011/09/the-guide-to-css-animation-principles-and-examples/">this link</a> before proceeding with this article.</em></p>
Cubic Beziers: What Are They?
<p>The cubic-bezier function in CSS is an easing function that gives you complete control of how your animation behaves with respect to time. Here is the <a href="https://www.w3.org/TR/css-easing-1/#cubic-bezier-easing-functions">official definition</a>:</p>
<blockquote>A cubic Bézier easing function is a type of <a href="https://www.w3.org/TR/css-easing-1/#easing-function">easing function</a> defined by four real numbers that specify the two control points, <code>P1</code> and <code>P2</code>, of a cubic Bézier curve whose end points <code>P0</code> and <code>P3</code> are fixed at (<code>0</code>, <code>0</code>) and (<code>1</code>, <code>1</code>) respectively. The <code>x</code> coordinates of <code>P1</code> and <code>P2</code> are restricted to the range [<code>0</code>, <code>1</code>].</blockquote>

<p><strong>Note</strong>: <em>If you want to learn more about easing functions, you can check out <a href="https://www.smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/">this article</a>. It goes behind the scenes of how linear, cubic-bezier, and staircase functions work!</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/edd8b473-78ae-4a1a-9460-d4bd266028f4/6-advanced-animations-css.png" /></p>
But What Is An Easing Function?
<h3>Let’s Start With A Linear Curve</h3>
<p>Imagine two points <em>P0</em> and <em>P1</em>, where <em>P0</em> is the starting point of the animation and <em>P1</em> is the ending point. Now imagine another point moving linearly between the two points as follows:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/26898019-0912-4ed4-b01d-8f138601b574/7-advanced-animations-css.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/26898019-0912-4ed4-b01d-8f138601b574/7-advanced-animations-css.gif" /></a>Source: <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B%C3%A9zier_curves:~:text=%5Bedit%5D-,Linear,-curves%5Bedit">Wikipedia</a>

<p>This is called a linear curve! It is the simplest animation out there, and you probably used it before when you started learning CSS.</p>
<h3>Next Up: The Quadratic Bezier Curve</h3>
<p>Imagine you have three points: <em>P0</em>, <em>P1</em> and <em>P2</em>. You want the animation to move from <em>P0</em> to <em>P2</em>. In this case, <em>P1</em> is a control point that controls the curve of the animation.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1bfb588-f075-4998-80a5-3861eaa2b34f/8-advanced-animations-css.png" /></p>
<p>The idea of the quadratic bezier is as follows:</p>
<ol>
<li>Connect imaginary lines between <em>P0</em> and <em>P1</em> and between <em>P1</em> and <em>P2</em> (represented by the gray lines).</li>
<li>Point <em>Q0</em> moves along the line between <em>P0</em> and <em>P1</em>. At the same time, Point <em>Q1</em> moves along the line between <em>P1</em> and <em>P2</em>.</li>
<li>Connect an imaginary line between <em>Q0</em> and <em>Q1</em> (represented by the green line).</li>
<li>At the same time <em>Q0</em> and <em>Q1</em> start moving, the point <em>B</em> starts moving along the green line. The path that point <em>B</em> takes is the animation path.</li>
</ol>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d3881be-db90-474b-bde1-5dd02e4de1bd/9-advanced-animations-css.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d3881be-db90-474b-bde1-5dd02e4de1bd/9-advanced-animations-css.gif" /></a>Source: <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B%C3%A9zier_curves:~:text=t%20in%20%5B0%2C1%5D-,Quadratic,-curves%5Bedit">Wikipedia</a>

<p>Note that <em>Q1</em>, <em>Q2</em> and <em>B</em> do not move with the same velocity. They must all start at the same time and finish their path at the same time as well. So each point moves with the appropriate velocity based on the line length it moves along.</p>
<h3>Finally: The Cubic Bezier Curve</h3>
<p>The cubic bezier curve consists of 4 points: <em>P0</em>, <em>P1</em>, <em>P2</em> and <em>P3</em>. The animation starts at <em>P0</em> and ends at <em>P3</em>. <em>P1</em> and <em>P2</em> are our control points.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c9ea13d-2386-4066-a6a6-6bc2303d9f0e/10-advanced-animations-css.png" /></p>
<p>The cubic bezier works as follows:</p>
<ol>
<li>Connect imaginary lines between (<em>P0</em>, <em>P1</em>), (<em>P1</em>, <em>P2</em>) and (<em>P2</em>, <em>P3</em>). This is represented by the gray lines.</li>
<li>Points <em>Q0</em>, <em>Q1</em> and <em>Q2</em> move along the lines (<em>P0</em>, <em>P1</em>), (<em>P1</em>, <em>P2</em>) and (<em>P2</em>, <em>P3</em>) respectively.</li>
<li>Connect imaginary lines between (<em>Q0</em>, <em>Q1</em>) and (<em>Q1</em>, <em>Q2</em>). They are represented by the green lines.</li>
<li>Points <em>R0</em> and <em>R1</em> move along the lines (<em>Q0</em>, <em>Q1</em>) and (<em>Q1</em>, <em>Q2</em>) respectively.</li>
<li>Connect the line between <em>R0</em> and <em>R1</em> (represented by the blue line).</li>
<li>Finally, Point <em>B</em> moves along the line connecting between <em>R0</em> and <em>R1</em>. This point moves along the path of the animation.</li>
</ol>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/473e4b21-e920-4501-a959-84f1b8350d14/11-advanced-animations-css.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/473e4b21-e920-4501-a959-84f1b8350d14/11-advanced-animations-css.gif" /></a>Source: <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Cubic_B%C3%A9zier_curves:~:text=t%20in%20%5B0%2C1%5D-,Higher,-%2Dorder%20curves%5B">Wikipedia</a>

<p>If you want to have a better feel for how cubic beziers work, I recommend checking out <a href="https://www.desmos.com/calculator/7arefxmgfb">this desmos link</a>. Play around with the control points and check how the animation changes through time. (Note that the animation in the link is represented by the black line.)</p>
Stacking Animations
<p>Big animations with lots of steps can be broken down into multiple small animations. You can achieve that by adding the <code>animation-delay</code> property to your CSS. Calculating the delay is simple; you add up the time of all the animations before the one you are calculating the animation delay for. </p>
<p><em>For example:</em></p>
<pre><code>animation: movePointLeft 4s linear forwards, movePointDown 3s linear forwards;
</code></pre>

<p>Here, we have two animations, <code>movePointLeft</code> and <code>movePointDown</code>. The animation delay for <code>movePointLeft</code> will be zero because it is the animation we want to run first. However, the animation delay for <code>movePointDown</code> will be four seconds because <code>movePointLeft</code> will be done after that time.</p>
<p>Therefore, the <code>animation-delay</code> property will be as follows:</p>
<pre><code>animation-delay: 0s, 4s;
</code></pre>

<p>Note that if you have two or more animations starting at the same time, their animation delay will be the same. In addition, when you calculate the animation delay for the upcoming animations, you will consider them as one animation.</p>
<p><em>For example:</em></p>
<pre><code>animation: x 4s linear forwards, y 4s linear forwards, jump 2s linear forwards;
</code></pre>

<p>Assume we want to start <code>x</code> and <code>y</code> simultaneously. In this case, the animation delay for both <code>x</code> and <code>y</code> will be zero, while the animation delay for the jump animation will be four seconds (not eight!).</p>
<pre><code>animation-delay: 0s, 0s, 4s;
</code></pre>

Creating The Rollercoaster
<p>Now that we have the basics covered, it’s time to apply what we learned!</p>
<h3>Understanding The Animation</h3>
<p>The rollercoaster path consists of three parts:</p>
<ol>
<li>The sliding part,</li>
<li>The loop part,</li>
<li>There will also be some animation to create horizontal space between the two animations above.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d97e9290-b3ee-4aec-8631-0d154f286f72/3-advanced-animations-css.jpg" /></p>
<h3>Setting Things Up</h3>
<p>We will start by creating a simple ball that will be our “cart” for the rollercoaster. </p>
<p>1. Add this to the body of your new HTML file:</p>
<pre><code>&lt;div id="the-cart" class="cart"&gt;&lt;/div&gt;
</code></pre>

<p>2. Add this to your CSS file:</p>
<pre><code>.cart {
  background-color: rgb(100, 210, 128);
  height: 50px;
  width: 50px;
  border: 1px solid black;
  border-radius: 50px;
  position: absolute;
  left: 10vw;
  top: 30vh;
}
</code></pre>

<p>I’ll use viewport width (<code>vw</code>) and viewport height (<code>vh</code>) properties to make the animation responsive. You are free to use any units you want.</p>
<h3>The Sliding Part</h3>
<p>Creating the part where the ball slides can be done using the cubic-bezier function! The animation is made up of 2 animations, one along the <code>x</code>-axis and the other along the <code>y</code>-axis. The <code>x</code>-axis animation is a normal linear animation along the <code>x</code>-axis. We can define its keyframes as follows:</p>
<pre><code>@keyframes x {
  to {
    left: 40vw;
  }
}
</code></pre>

<p>Add it to your animation property in the ball path as follows:</p>
<pre><code>animation: x 4s linear forwards
</code></pre>

<p>The <code>y</code>-axis animation is the one where we will use the cubic-bezier function. Let’s first define the keyframes of the animation. We want the difference between the starting and ending points to be so small that the ball reaches almost the same height.</p>
<pre><code>@keyframes y {
  to {
    top: 29.99vh;
  }
}}
</code></pre>

<p>Now let’s think about the cubic-bezier function. We want our path to move slowly to the right first, and then when it slides, it should go faster.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0284f860-b608-4390-a5bf-991f10ee496c/2-advanced-animations-css.png" /></p>
<ul>
<li>Moving slowly to the right means that $P1$ will be along the <code>x</code>-axis. So, we know it is at (<code>V</code>, <code>0</code>).<ul>
<li>We need to choose a suitable V that makes our animation go slowly to the right but not too much so that it takes up the whole space. In this case, I found that <code>0.55</code> fits best.</li>
</ul>
</li>
<li>To achieve the sliding effect, we need to move <code>P2</code> down the <code>y</code>-axis (negative value) so <code>P2=(X, -Y)</code>.<ul>
<li><code>Y</code> should be a big value. In this case, I chose <code>Y=5000</code>.</li>
<li>To get <code>X</code>, we know that our animation speed should be faster when sliding and slower when going up again. So, the closer <code>X</code> is to zero, The steeper the animation will be at sliding. In this case, let <code>X = 0.8</code>.</li>
</ul>
</li>
</ul>
<p>Now you have your cubic-bezier function, it will be <code>cubic-bezier(0.55, 0, 0.2, -800)</code>.</p>
<p>Let’s add keyframes to our animation property:</p>
<pre><code>animation: x 4s linear forwards,
    y 4s cubic-bezier(0.55, 0, 0.2, -5000) forwards;
</code></pre>

<p>This is the first part of our animation, so the animation delay is zero. We should add an <code>animation-delay</code> property because starting from the following animation, the animations will start at a different time than the first animation.</p>
<pre><code>animation-delay: 0s, 0s;
</code></pre>

<p>See the Pen <a href="https://codepen.io/smashingmag/pen/VwxXBQb">Rollercoaster sliding part [forked]</a> by <a href="https://codepen.io/yosracodes">Yosra Emad</a>.</p>
<h3>Adding Horizontal Space</h3>
<p>Before making the loop, the ball should move along the <code>x</code>-axis for a short while, so there is space between both animations. So, let’s do that!</p>
<ul>
<li>Define the keyframes:</li>
</ul>
<pre><code>@keyframes x2 {
  to {
    left: 50vw;
  }
}
</code></pre>

<ul>
<li>Add it to the animation property:</li>
</ul>
<pre><code>animation: x 4s linear forwards,
    y 4s cubic-bezier(0.55, 0, 0.2, -5000) forwards, x2 0.5s linear forwards;
</code></pre>

<p>This animation should start after the sliding animation, and the sliding animation takes four seconds; thus, the animation delay will be four seconds:</p>
<pre><code>animation-delay: 0s, 0s, 4s;
</code></pre>

<p>See the Pen <a href="https://codepen.io/smashingmag/pen/dyemExY">Rollercoaster horizontal space [forked]</a> by <a href="https://codepen.io/yosracodes">Yosra Emad</a>.</p>
<h3>The Loop Part</h3>
<p>To create a circle (loop) in CSS, we need to move the circle to the center of the loop and start the animation from there. We want the circle’s radius to be <code>100px</code>, so we will change the circle position to <code>top: 20vh</code> (30 is desired radius (<code>10vh</code> here)). However, this needs to happen after the sliding animation is done, so we will create another animation with a zero-second duration and add a suitable animation delay. </p>
<ul>
<li>Create the keyframes:</li>
</ul>
<pre><code>@keyframes pointOfCircle {
  to {
    top: 20vh;
  }
}
</code></pre>

<ul>
<li>Add this to the list of animations with duration = <code>0s</code>:</li>
</ul>
<pre><code>animation: x 4s linear forwards,
    y 4s cubic-bezier(0.55, 0, 0.2, -5000) forwards, x2 0.5s linear forwards,
    pointOfCircle 0s linear forwards;
</code></pre>

<ul>
<li>Add the animation delay, which will be <code>4.5s</code>:</li>
</ul>
<pre><code>animation-delay: 0s, 0s, 4s, 4.5s;
</code></pre>

<h4>The Loop Itself</h4>
<p>To create a loop animation:</p>
<ul>
<li>Create a keyframe that moves the ball back to the old position and then rotates the ball:</li>
</ul>
<pre><code>@keyframes loop {
  from {
    transform: rotate(0deg) translateY(10vh) rotate(0deg);
  }
  to {
    transform: rotate(-360deg) translateY(10vh) rotate(360deg);
  }
}
</code></pre>

<ul>
<li>Add the loop keyframes to the animation property:</li>
</ul>
<pre><code>animation: x 4s linear forwards,
    y 4s cubic-bezier(0.55, 0, 0.2, -5000) forwards, x2 0.5s linear forwards,
    pointOfCircle 0s linear forwards, loop 3s linear forwards;
</code></pre>

<ul>
<li>Add the animation delay, which will also be <code>4.5</code> seconds here:</li>
</ul>
<pre><code>animation-delay: 0s, 0s, 4s, 4.5s, 4.5s;
</code></pre>

<p>See the Pen <a href="https://codepen.io/smashingmag/pen/mdLxZdR">Rollercoaster loop [forked]</a> by <a href="https://codepen.io/yosracodes">Yosra Emad</a>.</p>
<h3>Adding Horizontal Space (Again)</h3>
<p>We’re almost done! We just need to move the ball after the animation along the <code>x</code>-axis so that the ball doesn’t stop exactly after the loop the way it does in the picture above.</p>
<ul>
<li>Add the keyframes:</li>
</ul>
<pre><code>@keyframes x3 {
  to {
    left: 70vw;
  }
}
</code></pre>

<ul>
<li>Add the keyframes to the animation property:</li>
</ul>
<pre><code>animation: x 4s linear forwards,
    y 4s cubic-bezier(0.55, 0, 0.2, -800) forwards, x2 0.5s linear forwards,
    pointOfCircle 0s linear forwards, loop 3s linear forwards,
    x3 2s linear forwards;
</code></pre>

<ul>
<li>Adding the suitable delay, here it will be <code>7.5s</code>:</li>
</ul>
<pre><code>animation-delay: 0s, 0s, 4s, 4.5s, 4.5s, 7.5s;
</code></pre>



The Final Output
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/wvjmLKp">Rollercoaster Final [forked]</a> by <a href="https://codepen.io/yosracodes">Yosra Emad</a>.</p>
Conclusion
<p>In this article, we covered how to combine multiple keyframes to create a complex animation path. We also covered cubic beziers and how to use them to create your own easing function. I would recommend going on and creating your own animation path to get your hands dirty with animations. If you need any help or want to give feedback, you’re more than welcome to send a message to any of the <a href="https://yosracodes.bio.link/">links here</a>. Have a wonderful day/night!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Yosra Emad)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6ff543a-4e47-4649-8e1d-fda5435d9a53/4-advanced-animations-using-css.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Motion Controls In The Browser]]></title>
            <link>https://smashingmagazine.com/2022/10/motion-controls-browser/</link>
            <guid>https://smashingmagazine.com/2022/10/motion-controls-browser/</guid>
            <pubDate>Fri, 28 Oct 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[If you've ever wanted to build a web app that you can control with hand gestures as if by magic, this article is for you. With a couple of APIs and some JavaScript, you can build apps that behave like sorcery.]]></description>
            <content:encoded><![CDATA[<p>In this article, I’m going to explain how to implement motion controls in the browser. That means you’ll be able to create an application where you can move your hand and make gestures, and the elements on the screen will respond.</p>
<p>Here’s an example:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b928505-2b2a-40be-95c7-b40213077631/1-motion-controls-in-browser.png" /></p>
<p>Here’s some boilerplate to get started (adapted from MediaPipe’s <a href="https://google.github.io/mediapipe/solutions/hands.html#javascript-solution-api">JavaScript API example</a>):</p>
<div>
<pre><code>&lt;script src="<a href="https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js&quot;">https://cdn.jsdelivr.net/npm/@mediapipe/camera_utils/camera_utils.js"</a> crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="<a href="https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js&quot;">https://cdn.jsdelivr.net/npm/@mediapipe/control_utils/control_utils.js"</a> crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="<a href="https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js&quot;">https://cdn.jsdelivr.net/npm/@mediapipe/drawing_utils/drawing_utils.js"</a> crossorigin="anonymous"&gt;&lt;/script&gt;
&lt;script src="<a href="https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js&quot;">https://cdn.jsdelivr.net/npm/@mediapipe/hands/hands.js"</a> crossorigin="anonymous"&gt;&lt;/script&gt;

&lt;video class="input_video"&gt;&lt;/video&gt;
&lt;canvas class="output_canvas" width="1280px" height="720px"&gt;&lt;/canvas&gt;

&lt;script&gt;
const videoElement = document.querySelector('.input_video');
const canvasElement = document.querySelector('.output_canvas');
const canvasCtx = canvasElement.getContext('2d');

function onResults(handData) {
  drawHandPositions(canvasElement, canvasCtx, handData);
}

function drawHandPositions(canvasElement, canvasCtx, handData) {
  canvasCtx.save();
  canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
  canvasCtx.drawImage(
      handData.image, 0, 0, canvasElement.width, canvasElement.height);
  if (handData.multiHandLandmarks) {
    for (const landmarks of handData.multiHandLandmarks) {
      drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,
                     {color: '#00FF00', lineWidth: 5});
      drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 2});
    }
  }
  canvasCtx.restore();
}

const hands = new Hands({locateFile: (file) =&gt; {
  return <code>https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}</code>;
}});
hands.setOptions({
  maxNumHands: 1,
  modelComplexity: 1,
  minDetectionConfidence: 0.5,
  minTrackingConfidence: 0.5
});
hands.onResults(onResults);

const camera = new Camera(videoElement, {
  onFrame: async () =&gt; {
    await hands.send({image: videoElement});
  },
  width: 1280,
  height: 720
});
camera.start();

&lt;/script&gt;
</code></pre>
</div>

<p>The above code does the following:</p>
<ul>
<li>Load the library code;</li>
<li>Start recording the video frames;</li>
<li>When the hand data comes in, draw the hand landmarks on a canvas.</li>
</ul>
<p>Let’s take a closer look at the <code>handData</code> object since that’s where the magic happens. Inside <code>handData</code> is <code>multiHandLandmarks</code>, a collection of 21 coordinates for the parts of each hand detected in the video feed. Here’s how those coordinates are structured:</p>
<pre><code>{
  multiHandLandmarks: [
    // First detected hand.
    [
      {x: 0.4, y: 0.8, z: 4.5},
      {x: 0.5, y: 0.3, z: -0.03},
      // ...etc.
    ],

    // Second detected hand.
    [
      {x: 0.4, y: 0.8, z: 4.5},
      {x: 0.5, y: 0.3, z: -0.03},
      // ...etc.
    ],

    // More hands if other people participate.
  ]
}
</code></pre>

<p>A couple of notes:</p>
<ul>
<li>The first hand doesn’t necessarily mean the right or the left hand; it’s just whichever one the application happens to detect first. If you want to get a specific hand, you’ll need to check which hand is being detected using <code>handData.multiHandedness[0].label</code> and potentially swapping the values if your camera isn’t mirrored.</li>
<li>For performance reasons, you can restrict the maximum number of hands to track, which we did earlier by setting <code>maxNumHands: 1</code>.</li>
<li>The coordinates are set on a scale from <code>0</code> to <code>1</code> based on the size of the canvas.</li>
</ul>
<p>Here’s a visual representation of the hand coordinates:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/be31d316-6994-408d-a5fa-b4288fbb7371/2-motion-controls-in-browser.jpg" /></p>
<p>Now that you have the hand landmark coordinates, you can build a cursor to follow your index finger. To do that, you’ll need to get the index finger’s coordinates.</p>
<p>You could use the array directly like this <code>handData.multiHandLandmarks[0][5]</code>, but I find that hard to keep track of, so I prefer labeling the coordinates like this:</p>
<pre><code>const handParts = {
  wrist: 0,
  thumb: { base: 1, middle: 2, topKnuckle: 3, tip: 4 },
  indexFinger: { base: 5, middle: 6, topKnuckle: 7, tip: 8 },
  middleFinger: { base: 9, middle: 10, topKnuckle: 11, tip: 12 },
  ringFinger: { base: 13, middle: 14, topKnuckle: 15, tip: 16 },
  pinky: { base: 17, middle: 18, topKnuckle: 19, tip: 20 },
};
</code></pre>

<p>And then you can get the coordinates like this:</p>
<pre><code>const firstDetectedHand = handData.multiHandLandmarks[0];
const indexFingerCoords = firstDetectedHand[handParts.index.middle];
</code></pre>

<p>I found cursor movement more pleasant to use with the middle part of the index finger rather than the tip because the middle is more steady.</p>
<p>Now you’ll need to make a DOM element to use as a cursor. Here’s the markup:</p>
<pre><code>&lt;div class="cursor"&gt;&lt;/div&gt;
</code></pre>

<p>And here are the styles:</p>
<pre><code>.cursor {
  height: 0px;
  width: 0px;
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: 10;
  transition: transform 0.1s;
}

.cursor::after {
  content: '';
  display: block;
  height: 50px;
  width: 50px;
  border-radius: 50%;
  position: absolute;
  left: 0;
  top: 0;
  transform: translate(-50%, -50%);
  background-color: #0098db;
}
</code></pre>

<p>A few notes about these styles:</p>
<ul>
<li>The cursor is absolutely positioned so it can be moved without affecting the flow of the document.</li>
<li>The visual part of the cursor is in the <code>::after</code> pseudo-element, and the <code>transform</code> makes sure the visual part of the cursor is centered around the cursor’s coordinates.</li>
<li>The cursor has a <code>transition</code> to smooth out its movements.</li>
</ul>
<p>Now that we’ve created a cursor element, we can move it by converting the hand coordinates into page coordinates and applying those page coordinates to the cursor element.</p>
<div>
<pre><code>function getCursorCoords(handData) {
  const { x, y, z } = handData.multiHandLandmarks[0][handParts.indexFinger.middle];
  const mirroredXCoord = -x + 1; /* due to camera mirroring */
  return { x: mirroredXCoord, y, z };
}

function convertCoordsToDomPosition({ x, y }) {
  return {
    x: <code>${x &amp;#42; 100}vw</code>,
    y: <code>${y &amp;#42; 100}vh</code>,
  };
}

function updateCursor(handData) {
  const cursorCoords = getCursorCoords(handData);
  if (!cursorCoords) { return; }
  const { x, y } = convertCoordsToDomPosition(cursorCoords);
  cursor.style.transform = <code>translate(${x}, ${y})</code>;
}

function onResults(handData) {
  if (!handData) { return; }
  updateCursor(handData);
}
</code></pre>
</div>

<p>Note that we’re using the CSS <code>transform</code> property to move the element rather than <code>left</code> and <code>top</code>. This is for performance reasons. When the browser renders a view, it goes through a <a href="https://web.dev/rendering-performance/#the-pixel-pipeline">sequence of steps</a>. When the DOM changes, the browser has to start again at the relevant rendering step. The <code>transform</code> property responds quickly to changes because it is applied at the last step rather than one of the middle steps, and therefore the browser has less work to repeat.</p>
<p>Now that we have a working cursor, we’re ready to move on.</p>
Step 3: Detect Gestures
<p>The next step in our journey is to detect gestures, specifically <strong>pinch gestures</strong>.</p>
<p>First, what do we mean by a pinch? In this case, we’ll define a pinch as a gesture where the thumb and forefinger are close enough together.</p>
<p>To designate a pinch in code, we can look at when the <code>x</code>, <code>y</code>, and <code>z</code> coordinates of the thumb and forefinger have a small enough difference between them. “Small enough” can vary depending on the use case, so feel free to experiment with different ranges. Personally, I found <code>0.08</code>, <code>0.08</code>, and <code>0.11</code> to be comfortable for the <code>x</code>, <code>y</code>, and <code>z</code> coordinates, respectively. Here’s how that looks:</p>
<div>
<pre><code>function isPinched(handData) {
  const fingerTip = handData.multiHandLandmarks[0][handParts.indexFinger.tip];
  const thumbTip = handData.multiHandLandmarks[0][handParts.thumb.tip];
  const distance = {
    x: Math.abs(fingerTip.x - thumbTip.x),
    y: Math.abs(fingerTip.y - thumbTip.y),
    z: Math.abs(fingerTip.z - thumbTip.z),
  };
  const areFingersCloseEnough = distance.x &lt; 0.08 &amp;&amp; distance.y &lt; 0.08 &amp;&amp; distance.z &lt; 0.11;

  return areFingersCloseEnough;
}
</code></pre>
</div>

<p>It would be nice if that’s all we had to do, but alas, it’s never that simple.</p>
<p>What happens when your fingers are on the edge of a pinch position? If we’re not careful, the answer is chaos.</p>
<p>With slight finger movements as well as fluctuations in coordinate detection, our program can rapidly alternate between pinched and not pinched states. If you’re trying to use a pinch gesture to “pick up” an item on the screen, you can imagine how chaotic it would be for the item to rapidly alternate between being picked up and dropped.</p>
<p>In order to prevent our pinch gestures from causing chaos, we’ll need to introduce a slight delay before registering a change from a pinched state to an unpinched state or vice versa. This technique is called a <a href="https://davidwalsh.name/javascript-debounce-function"><code>debounce</code></a>, and the logic goes like this:</p>
<ul>
<li>When the fingers enter a pinched state, start a timer.</li>
<li>If the fingers have stayed in the pinched state uninterrupted for long enough, register a change.</li>
<li>If the pinched state gets interrupted too soon, stop the timer and don’t register a change.</li>
</ul>
<p>The trick is that the delay must be long enough to be reliable but short enough to feel quick.</p>
<p>We’ll get to the debounce code soon, but first, we need to prepare by tracking the state of our gestures:</p>
<pre><code>const OPTIONS = {
  PINCH_DELAY_MS: 60,
};

const state = {
  isPinched: false,
  pinchChangeTimeout: null,
};
</code></pre>

<p>Next, we’ll prepare some <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent">custom events</a> to make it convenient to respond to gestures:</p>
<pre><code>const PINCH_EVENTS = {
  START: 'pinch_start',
  MOVE: 'pinch_move',
  STOP: 'pinch_stop',
};

function triggerEvent({ eventName, eventData }) {
  const event = new CustomEvent(eventName, { detail: eventData });
  document.dispatchEvent(event);
}
</code></pre>

<p>Now we can write a function to update the pinched state:</p>
<pre><code>function updatePinchState(handData) {
  const wasPinchedBefore = state.isPinched;
  const isPinchedNow = isPinched(handData);
  const hasPassedPinchThreshold = isPinchedNow !== wasPinchedBefore;
  const hasWaitStarted = !!state.pinchChangeTimeout;

  if (hasPassedPinchThreshold &amp;&amp; !hasWaitStarted) {
    registerChangeAfterWait(handData, isPinchedNow);
  }

  if (!hasPassedPinchThreshold) {
    cancelWaitForChange();
    if (isPinchedNow) {
      triggerEvent({
        eventName: PINCH_EVENTS.MOVE,
        eventData: getCursorCoords(handData),
      });
    }
  }
}

function registerChangeAfterWait(handData, isPinchedNow) {
  state.pinchChangeTimeout = setTimeout(() =&gt; {
    state.isPinched = isPinchedNow;
    triggerEvent({
      eventName: isPinchedNow ? PINCH_EVENTS.START : PINCH_EVENTS.STOP,
      eventData: getCursorCoords(handData),
    });
  }, OPTIONS.PINCH_DELAY_MS);
}

function cancelWaitForChange() {
  clearTimeout(state.pinchChangeTimeout);
  state.pinchChangeTimeout = null;
}
</code></pre>

<p>Here's what <code>updatePinchState()</code> is doing:</p>
<ul>
<li>If the fingers have passed the pinch threshold by starting or stopping a pinch, we’ll start a timer to wait and see if we can register a legitimate pinch state change.</li>
<li>If the wait is interrupted, that means the change was just a fluctuation, so we can cancel the timer.</li>
<li>However, if the timer is <em>not</em> interrupted, we can update the pinched state and trigger the correct custom change event, namely, <code>pinch_start</code> or <code>pinch_stop</code>.</li>
<li>If the fingers have not passed the pinch change threshold and are currently pinched, we can dispatch a custom <code>pinch_move</code> event.</li>
</ul>
<p>We can run <code>updatePinchState(handData)</code> each time we get hand data so that we can put it in our <code>onResults</code> function like this:</p>
<pre><code>function onResults(handData) {
  if (!handData) { return; }
  updateCursor(handData);
  updatePinchState(handData);
}
</code></pre>

<p>Now that we can reliably detect a pinch state change, we can use our custom events to define whatever behavior we want when a pinch is started, moved, or stopped. Here’s an example:</p>
<pre><code>document.addEventListener(PINCH_EVENTS.START, onPinchStart);
document.addEventListener(PINCH_EVENTS.MOVE, onPinchMove);
document.addEventListener(PINCH_EVENTS.STOP, onPinchStop);

function onPinchStart(eventInfo) {
  const cursorCoords = eventInfo.detail;
  console.log('Pinch started', cursorCoords);
}

function onPinchMove(eventInfo) {
  const cursorCoords = eventInfo.detail;
  console.log('Pinch moved', cursorCoords);
}

function onPinchStop(eventInfo) {
  const cursorCoords = eventInfo.detail;
  console.log('Pinch stopped', cursorCoords);
}
</code></pre>

<p>Now that we’ve covered how to respond to movements and gestures, we have everything we need to build an application that can be controlled with hand motions.</p>
<p>Here are some examples:</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/WNybveM">Beam Sword - Fun with motion controls! [forked]</a> by <a href="https://codepen.io/yaphi1">Yaphi</a>.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/OJEPVJj">Magic Quill - Air writing with motion controls [forked]</a> by <a href="https://codepen.io/yaphi1">Yaphi</a>.</p>
<p>I’ve also put together some other motion control demos, including <a href="https://magic-hand.vercel.app/cards.html">movable playing cards</a> and an <a href="https://magic-hand.vercel.app/floor_plan.html">apartment floor plan</a> with movable images of the furniture, and I’m sure you can think of other ways to experiment with this technology.</p>
Conclusion
<p>If you’ve made it this far, you’ve seen how to implement motion controls with a browser and a webcam. You’ve read camera data using browser APIs, you’ve gotten hand coordinates via machine learning, and you’ve detected hand motions with JavaScript. With these ingredients, you can create all sorts of motion-controlled applications.</p>
<p>What use cases will you come up with? Let me know in the comments!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Yaphi Berhanu)</author>
            <enclosure url="http://res.cloudinary.com/indysigner/image/upload/v1666964645/motion-controls-browser_eenha4.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Typographic Hierarchies]]></title>
            <link>https://smashingmagazine.com/2022/10/typographic-hierarchies/</link>
            <guid>https://smashingmagazine.com/2022/10/typographic-hierarchies/</guid>
            <pubDate>Wed, 26 Oct 2022 15:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Alma Hoffmann discusses six basic variables to establish a typographic hierarchy, explains how to look at each differently, and in turn, designs pieces by intentionally modifying each variable to create a typographic hierarchy effectively.]]></description>
            <content:encoded><![CDATA[<p>Simply defined, the concept of typographic hierarchies refers to the <strong>visual organization of content in terms of their relative importance</strong>. In other words, the manner in which we organize the text, the headers, the subheaders, the columns, the paragraphs, the callouts, and others on the page or space signify their importance.</p>
<p>That sounds easy enough, right? Yes, it does. The problem is that visually accomplishing this is more challenging than it sounds, especially for those unfamiliar with the nuances of typography. Everything in typography behaves like a domino effect causing a chain reaction of changes by the designer. That is why when a client asks for a “small change,” it is never small and never linear. Typography is symbiotic. Each element contributes to the other, even in a very small way.</p>
<p>These two words: <strong>typographic</strong> and <strong>hierarchies</strong> are not familiar concepts to those outside our field. In fact, even in the art and design field, fellow artists do not necessarily understand typographic hierarchy. The term <em>typographic</em> refers to matters related to typography: type choice, sizes, weights, how far or close we set the letters, and others. The term <em>hierarchy</em> refers to levels of priority or importance: what comes first, second, and third. Thus, when these two terms are put together, we mean to arrange content in levels of importance with the intention of communicating to the reader.</p>
<p>Choosing typefaces, arranging content in terms of visual importance, and organizing elements (title, subtitles, body copy, images, space, and so on) on the page evoke responses from the reader. When things are in competition on a page, we might feel confused. We all have a sense of it, and we can even recall moments of disgust when we see a printed note with bloody type or a website in which the typography is all jumbled up. However, learning to use typography is elusive. It is a matter of constant practice and honing visual acumen.</p>
<p>While it is true that the advent of the computer to our field has expedited the design and printing process, it is also true that typographic proportions do not look the same when looking at things online versus printing. The relationship between the reader and their monitor differs from the relationship between the reader and anything printed, whether hand-held or seen at a distance.</p>
<p>To provide an example, let me share my experience with typography. Before becoming a designer, I graduated with a BA in Art Education. I understood color, research, composition, contrast, drawing, images, sketching, painting, and so on. When I went back to school to study design and specifically graphic design, I was lost.</p>
<p>My biggest challenge was that I could not see the letters as something other than the semantic symbols of language. Questions constantly flooded my mind. For instance, <em>“What do you mean that the letters have a grid? What do you mean I am doing too much? And what is too much? How is this too big?”</em> The questions were endless and excruciating. My beginner’s typography was, to put it mildly, a prime example of what not to do. I did not know any better, but I also did not understand any better.</p>
<p>My “aha” moment came when another instructor explained to me that typography was like auditioning for a part in a play that I wanted really badly. She suggested that I enunciate the words as if I was playing in the theater. Mind you, I had no experience in theater whatsoever but somehow, the idea resonated with me. It was then that I realized, in a very experiential way, that <strong>typography was the spoken language in visual form</strong>.</p>
<p>That, somehow, the letters, words, titles, typeface choices, size, weight, color, spacing — all conspired together to emanate a visual language. The page was the stage. The letters, words, titles, paragraphs, and so on were performers on that stage. Another instructor used to say that the typographic hierarchy was like a ballet company where only one was the prima ballerina, and everything else bowed to her. Having a cultural background where music and dance were vital, I started to get the idea.</p>
<p>After I made it into graduate school, my exploration of typography intensified, leading to my thesis work. My graduate thesis combined two things that were special to me: dance, specifically ballroom dancing, and my newfound love for typography. To develop a body of work for my thesis, I used one of my classes’ undergraduate projects — Typographic Hierarchies. Since then, I have been teaching typography and hierarchy using this project.</p>
<p>The typographic hierarchies project is based on two books by professor <a href="https://www.linkedin.com/in/rob-carter-91975433">Rob Carter</a> from Virginia Commonwealth University. These books are <a href="https://www.amazon.com/Typographic-Design-Communication-Rob-Carter/dp/1119312566"><em>Typographic Design: Form and Communication</em></a> and <a href="https://www.amazon.com/EXPERIMENTAL-TYPOGRAPHY-Working-Computer-Type/dp/2880462797"><em>Experimental Typography</em></a>. The latter is out of print now. The objective of the project is to isolate six basic variables to establish a typographic hierarchy. These variables are:</p>
<ul>
<li>Proximity or space,</li>
<li>Weight,</li>
<li>Size,</li>
<li>Size and weight,</li>
<li>Color,</li>
<li>Visual punctuation.</li>
</ul>
<p>When we look at a typographic composition, a poster, a brochure, or a web page, what we see is the application of these variables together. We don’t often think of dissecting the composition in front of us to say, “How many sizes are there?” Even as designers, we are not accustomed to dissecting design work. Imagine a non-designer, even less, right? Yet, when we come to school or start as designers, we are all non-designers and need to retrain our brains to look at content as a relationship of shapes in a context, format, or space.</p>
<p>In this article, we will discuss the variables mentioned above, learn how to look at each differently, and in turn, design pieces by intentionally modifying each variable to <strong>create a typographic hierarchy effectively</strong>. Let’s get started with proximity or space.</p>
<p><strong>Note</strong>: <em>These are studies done in a university class intended to expose the students to a series of compositional exercises. These exercises will provide students with a skill set to innovate and push the boundaries when appropriate. It will also help them to acquire a good understanding of compositional parameters. Therefore, use your discernment and consider the project’s needs when applying and/or breaking these principles and variables.</em></p>
Proximity Or Space
<p>This variable requires us to briefly discuss the grid. The grid is an underlying tool that helps us organize elements on a page. It is so foundational that there are books dedicated to it. For example, the book by designer and design educator <a href="https://www.purchase.edu/live/profiles/365-timothy-samara">Timothy Samara</a>, titled <a href="https://www.amazon.com/Making-Breaking-Second-Updated-Expanded/dp/163159284X"><em>Making and Breaking the Grid</em></a> is one of the most eloquent discussions of it.</p>
<h3>A Short Discussion About The Grid</h3>
<p>A grid is simply an underlying structure used to organize elements in a context. This context can be a page, printed or web, an app, a brochure, a poster, a book, a newspaper, a building, furniture, and so on. Though this article is not a study of the grid, it is important to understand that the variables we will learn work within a grid. A grid allows us to break up the space into modules or smaller chunks like pieces in a puzzle that must come together to create the bigger picture. There are usually two ways to approach the application of a grid: <strong>predetermined</strong> or <strong>improvisational</strong> (also known as a visual or linear association).</p>
<h3>Predetermined Grid</h3>
<p>A predetermined grid is the <strong>division of the space into a certain amount of columns</strong>. There is even a one-column grid, also commonly called a manuscript grid (commonly seen in wedding invites and perhaps the first page of an article in a magazine).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/65cdaec7-f891-4cd5-b7d1-d46a5206905e/1-typographic-hierarchies.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6585eda7-3f4a-4b13-8fe6-3c4a229ffadc/2-typographic-hierarchies.png" /></p>
<p>We can keep adding columns to our grids and have two, three, four, five, and sometimes more. Software such as <a href="https://www.adobe.com/">Adobe InDesign</a>, <a href="https://affinity.serif.com/en-gb/">Affinity Publisher</a>, and others come equipped with the ability to determine what type of grid we want to use. It is usually easy to spot the grid used in a design piece. For example, if we look at a web page, we can usually spot the type of grid used — two, three, or four columns.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/00c8cc31-6833-4521-b1d4-26cd7f10e7cc/3-typographic-hierarchies.jpg" /></p>
<p>Perhaps the best examples of predetermined grids come from Modernist design and the <a href="https://swissgrid.posterhouse.org/">Swiss Typography</a> schools of thought.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c044ad5-26ba-4a2a-8da6-3046b29963da/4-typographic-hierarchies.png" /></p>
<p>Later on, <a href="https://academic.oup.com/jdh/issue/26/4">Post Modern</a> typography came along. Characterized by the juxtaposition of graphic elements, typography, and page use in a more organic way, it sought to find alternative typographic organizational arrangements. John Choi, a former student at NYUAD, wrote on the blog <a href="https://wp.nyu.edu/typesofartspring2019/2019/03/09/on-aesthetic-and-postmodern-typography/#:~:text=Postmodern%20typography%20would%20be%20born,such%20as%20neutrality%20or%20legibility.">NYUAD Types of Art</a> the following:</p>
<blockquote>“Postmodern typography would be born out of the rejection of the modernist idea that certain forms, due to their inherent characteristics, are able to perform certain objective functions such as neutrality or legibility.”</blockquote>

<p>As a result, the grid became a more organic and playful tool.</p>
<h3>Improvisational Grid</h3>
<p>Alternatively to a predetermined grid, an improvisational grid can be used. An improvisational grid is created when we <strong>lay down one element, perhaps in a very large size, and use it to extend its lines to organize elements around it</strong>. Thus, visual alignments or associations are emphasized or highlighted by placing elements following invisible lines emanating from them. For example, the image below does not feature the traditional vertical and horizontal modules that are common on a column grid. The image and the pattern created for the <a href="https://evincediagnostics.com/">Evince Diagnostics</a> logo at the top are the foundation for the organization of the type on the banner.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ff30ea24-1c01-46f7-9f5b-3b40d107e9f3/6-typographic-hierarchies.png" /></p>
<p>It is one of the funniest ways to create hierarchy because it allows for playful and unexpected results. However, it calls for attention to detail and sensitivity to the composition as a whole. Thus, it is both easy and difficult to master. It is frequently achieved by a large letter, but it can also be done with images or graphics.</p>
<p>Now that we have a basic understanding of the grid, let’s discuss our first variable or principle of hierarchy — proximity — in more detail.</p>
<h3>Proximity</h3>
<p>Proximity refers to the relative distance between elements, right? An easy metaphor is to think of friends, close friends, and strangers. The closer the friend, the closer the distance. The stranger the person, the farthest we stand from them. Our proximity or space shrinks or grows depending on our familiarity with things or people. Because it is usually easier for the students to refer to it as space, we will refer to proximity as space throughout the article.</p>
<p>When we discuss or think of space in a typographic hierarchy, we refer to things like space between letters, words, titles, paragraphs, margins, and how and where we place elements on the page.</p>
<p>In order to really understand proximity or space, we need to set some limits:</p>
<ul>
<li>All type has to be 8-12 point size depending on the typeface; </li>
<li>It all has to be one size (even the titles);</li>
<li>No color;</li>
<li>A grid should be used from two to five columns, or an improvisational grid can be used. <em>Please note that though we discussed the use of an improvisational grid based on size, when we leave elements at the same size, an improvisational grid can be used based on space or alignments.</em></li>
</ul>
<p>The goal of this variable is to explore only the distance between any elements we choose and where we place our paragraphs and titles. You might be wondering, “how does space work in relation to typographic hierarchies? To answer this question, we will discuss some examples.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/177dfaf3-fa93-42d4-b8f2-a180b6ed115e/7-typographic-hierarchies.png" /></p>
<p>In the example above, we have a set of instructions, <em>How to Fold a Crane</em>, written by Chrissy Pk. As we can see, the columns of text are diagonally arranged. The grid, then, has been set before any other element has been placed on the page. By using diagonals, we create a sense of movement and energy around the composition.</p>
<p>Repetition of the title has been applied to create a sense of framing the page, and it serves to anchor the eye. Otherwise, we might feel that our eyes want to wander away from the page. Having the title repeated creates a kind of loop around the page and helps us keep our eyes contained. The type size is all consistent. The sense of movement and hierarchy comes from the title set in uppercase. To indicate each new step, instead of numbers or bullets, space and upper case letters in the first three words of the sentence are used.</p>
<p>Below are two analyses of the grid. The first one lets us see that the designer has probably divided the page into a four-column grid. In the second example, we can see that the diagonal grid has been applied over the four-column one.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d6abb53-6e54-4ecd-86b0-8681be4cf253/8-typographic-hierarchies.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c1edb76-b857-4291-8617-16ddd2fe78c5/9-typographic-hierarchies.png" /></p>
<p>To summarize what we see in this example:</p>
<ul>
<li>We can <strong>use diagonal columns</strong> in place of vertical columns.</li>
<li>We can <strong>use uppercase</strong> to create a sense of hierarchy.</li>
<li>We can <strong>add spaces between items</strong> that follow a sequence instead of numbers or bullets.</li>
<li>We can <strong>repeat one element</strong> as long as it supports the purpose and conceptually keeps our eyes and mind focused on the subject.</li>
</ul>
<p>In my experience, my students find that thinking of only the space or proximity is the hardest aspect of this study. But it is all about looking at the paragraphs, sentences, columns, and pages as shapes. If we think of each component in the example above as only shapes, we will see something like this below:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea426f8a-7f4c-422d-98c7-5bf92eb8b690/10-typographic-hierarchies.png" /></p>
<p>The page, space, and background, whether two or three-dimensional, is a shape. It can be a rectangle in portrait or landscape orientation or something more circular, or something organic like the shape of a guitar like this one titled <a href="https://www.amazon.com/MTV-Unplugged-SARAH-ED-MALARKEY/dp/B00AQ5D8WQ/ref=sr_1_1?crid=1T8ZQZ9WB7KGU&amp;keywords=mtv+unplugged+book&amp;qid=1664829777&amp;qu=eyJxc2MiOiIxLjMzIiwicXNhIjoiMC41NCIsInFzcCI6IjAuMDAifQ%3D%3D&amp;sprefix=mtv+unpuggled+book%2Caps%2C87&amp;sr=8-1"><em>MTV Unplugged</em></a>, First Edition by Sarah Maralkey published in 1995:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4e792908-b071-4fa3-b977-0f51efbc859f/11-typographic-hierarchies.png" /></p>
<p>The text in one of the spreads follows the gentle curve of the book:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/59651099-8d2b-466f-b3e1-3acfdeeb5c5d/12-typographic-hierarchies.png" /></p>
<p>If we consider the area we are using to organize our design as a shape, then the rest is a matter of subdividing that space in interesting ways. Thus, we always need to take the format into consideration.</p>
<p>Here is an interesting example of how to use a simple two-column grid:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75362393-0249-40c5-b843-a511ade8f411/13-typographic-hierarchies.jpg" /></p>
<p>As we move forward to the next variables, it is essential to note that how we treat the space will continue to be something we experiment with. We do not leave it behind. Let’s see how only changing the weight (bold versus regular + space) changes things around.</p>
Weight
<p>Weight refers to changes in the typeface as bold, regular, italic, heavy, medium, and so on. In this variable, we keep the sizes all even. In other words, we do not change the size at all.</p>
<p>It is worth mentioning that a typeface with no weight options will not be helpful in our exploration, as well as funky or heavily ornamental typefaces. Those are great for one instance or for display purposes such as a poster. However, in creating a hierarchy, it is best to stick to typefaces with well-proportioned shapes and multiple font options in their family.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a9412a0-f4ec-4013-a38c-3b1070bcb815/14-typographic-hierarchies.png" /></p>
<p>In the image above, the layout is more traditional — a two-column grid with the text aligned to the left. The bold weight is used on the word <em>Fold</em> on the title and in the rest of the content each time the word <em>Fold</em> is used. This visual detail helps with establishing a conceptual and visual connection as well as a hierarchy. It is a visual reminder that these instructions are about learning to fold a crane.</p>
<p>In the following example, we have a much less traditional layout. The designer used a circular grid to subdivide the format or the space in the composition. The bold weight is more delicate here since the typeface is also more delicate. The text’s organization resembles a clock. The design requires more participation from the reader as they would need to turn the page around.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cb23aa4-152c-4b11-9969-55ca37f020d2/15-typographic-hierarchies.png" /></p>
<p>In addition to our first summary, we can add the following:</p>
<ul>
<li>We can <strong>use organic shapes</strong> to subdivide the format.</li>
<li>We can <strong>follow a logical system to establish a visual hierarchy</strong>: bold a word and consistently bold the same word throughout the text.</li>
</ul>
<p>Now, let’s move on to applying size but without weight.</p>
Size
<p>We understand that size refers to, well, sizes. How large or small the font used is displayed. For the purposes of this exercise, we will limit ourselves to three sizes, and we will refer to them in categories:</p>
<ul>
<li><strong>Body copy</strong><br />Depending on the typefaces’ x-height, anywhere from 8 points to 12. Never over 12.</li>
<li><strong>Titles</strong><br />Here you can have some fun and play with contrast — very, very large. Anything over 14 points is considered a display, but you will find that it is still too small to make an impact.</li>
<li><strong>Subheaders or accents</strong><br />Depending on what sizes you are using for the titles, you can select something in between the body copy size and the titles.</li>
</ul>
<p>Something worth mentioning: these parameters are not solely mathematical. There is much to learn about how things look (regardless of size) once something is printed.</p>
<p>Along those lines, let’s discuss a note about titles. The best way to think of titles is to see them as a group of little cousins or a group of best friends who are really tight. The spaces (again, proximity) you create between each word on the title affect how the title is seen. In other words, do the words go together? If so, should there be a gap? This will become more clear in the discussion of the examples below:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15b7ad9a-2c53-4243-9f9c-1026949b95c1/16-typographic-hierarchies.png" /></p>
<p>We can see how the designer decided to create a sense of upward direction by setting the title along the column pointing towards the beginning of the text. The designer not only used size to create emphasis on the word CRANE but cleverly led the reader to the top. The rest is pretty straightforward, as we can see — using bullet points and space between the steps to conform to the sequential nature of the content.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3dc69c1e-7e16-422a-8d28-8155ad3ae9c0/17-typographic-hierarchies.png" /></p>
<p>Here we have three sizes used following the expected pattern (title, numbers to indicate sequence, and the text). But, notice how the numbers are not the same size as the text. They are a size in between the title and the text, indicating read the title first and then read in order.</p>
<p>In addition to the items we have added to our summary, we can add the following:</p>
<ul>
<li>We can <strong>set one word of the title much larger than the rest</strong>.</li>
<li>We can direct the reader with the title to the beginning of the content by <strong>setting the title in an upwards orientation</strong>.</li>
<li>We can <strong>set numbers slightly larger than the text</strong> to indicate the reading order.</li>
</ul>
<p>Now we will discuss variables in combination.</p>
Size And Weight
<p>We start here by combining two variables and still using proximity to create a hierarchy. We are still limiting ourselves to three size changes. In terms of weight, we can change the weight of words we think need to be seen but are not as important as the title or things like that. We can certainly make a word very large and bold. But, as you are experimenting, keep an eye on the balance of the page. Are things too heavy on one side? Is the page too busy on one side versus the other?</p>
<p>Size and weight experimentation also allow you to start playing with an improvisational grid. When making a letter or word really large, you may use it to establish visual alignments from it.</p>
<p>The example below is a page from a calendar I designed last Christmas holiday. Calendars are a great playground to explore sizes and weights. In this instance, I opted for the number of the month, the largest element on the page, while also increasing its weight, but right under the name — April — is very light or thin, creating a nice contrast between the two. The year is smaller but bold, as bold as the number above it. Though the contrast is sharp, the three pieces together create a nice typographic unit working together to create the focal point of the piece. The right side is the list of the month’s dates in bold. The holidays are stated in lightweight.</p>
<p>Of particular note is that if you notice, the words April and 2022 are tucked in under the vertical line of the number. This typeface has serifs (the little eyelashes at the bottom of the number). I aligned the two words under the number within its serifs. By doing this, I reinforce the visual alignment and implied vertical lines of the number.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e4dd84-7db0-4828-9103-ef353be0abdf/29-typographic-hierarchies.jpg" /></p>
<p>In addition to the items we have added to our summary, we can add the following:</p>
<ul>
<li>We can <strong>make a word very large on the page</strong>. If you go big, go big.</li>
<li>We can <strong>bold the largest element</strong>. Though not always necessary, it can sometimes create a nice and juicy hierarchy.</li>
<li>We can <strong>create units or groupings by keeping the type contained within an imaginary box</strong>.</li>
<li>We can <strong>use visual alignments or improvised grids</strong> to reinforce the typographic grouping.</li>
</ul>
<p>With what we have learned so far, we will move on to color.</p>
Color
<p>Discussing color can be an article all by itself. There are many resources available both online and printed about color. Indeed, here are a few Smashing articles by Cameron Chapman covering the subject more broadly:</p>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2010/01/color-theory-for-designers-part-1-the-meaning-of-color/">Color Theory For Designers, Part 1: The Meaning of Color</a>”</li>
<li>“<a href="https://www.smashingmagazine.com/2010/02/color-theory-for-designers-part-2-understanding-concepts-and-terminology/">Color Theory For Designers, Part 2: Understanding Concepts And Color Terminology</a>”</li>
<li>“<a href="https://www.smashingmagazine.com/2010/02/color-theory-for-designer-part-3-creating-your-own-color-palettes/">Color Theory for Designers, Part 3: How To Create Your Own Color Schemes</a>”</li>
</ul>
<p>In this article, however, we will focus on how color enhances or emphasizes hierarchy, how it helps to create a composition that keeps the eye inside of itself, and how it helps the eye navigate the page. For these reasons, when studying this variable, we limit the use of color to two or three colors. By limiting the use of color, we can focus on how it helps to establish a hierarchy in typography.</p>
<h3>Factors That Affect The Use And Application Of Color</h3>
<p>I do not mean we use color arbitrarily. It is important to read the content to establish a sense of the article. In other words, let’s assume we are designing a leaflet for a school-aged children’s birthday party. We would probably use vibrant colors and convey a sense of fun. Alternatively, if we are designing a leaflet for hospital patients with instructional material, perhaps the colors we use might be less vibrant, softer, and aimed to provide a sense of calm. There are usually three essential aspects to consider when using color and designing in general:</p>
<ul>
<li>Content,</li>
<li>Audience,</li>
<li>Context.</li>
</ul>
<p>The audience determines not only how the content is written but also the typefaces, sizes, weights, and overall design of the content. The context of the content also determines how we design: is the content meant to be read at a distance, as in a poster, or is the content meant to be read closer to us, as in a mobile device or a book? Because color affects how we perceive the content, we must become familiar with that content. Thus, reading the content given to us by our clients helps us make smart design decisions.</p>
<p>Now that we discussed factors that are important for the use of color, let’s look at examples of the use of color as it pertains to this exercise:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6245f09-02fc-4350-b0e7-f6362696529d/18-typographic-hierarchies.png" /></p>
<p>In the example above, we can see how all the colors and attention have been dedicated to the title. It has also been added to the name of the author of the instructions, but because of its small size, it does not create conflict. The layout takes advantage of once making everything on the title large; it creates a nice pocket of space where the instructions can be easily tucked in. In this way, even though there is no color used on the body copy, it does not matter because we have no choice but to land our eyes on the beginning of the text.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ec6d746-0c43-4189-b816-102814f78d55/19-typographic-hierarchies.png" /></p>
<p>Above, we see how the background has been turned black. Once you read the title and read a little bit of the text, it makes sense. The text has a pessimistic and somber tone to it. Thus, no cheerful colors. With that, notice how the column of text is concentrated to the right side, creating asymmetry, once again creating a sense of visual instability to enhance the text’s meaning.</p>
<p>Below is a greeting card for Mother’s Day in the United States. I designed this card to honor my best friend’s mom. Though I am using a picture, it is used in a way that helps the text come together in the lowercase a. The lowercase a is the largest element on the page. Its bowl or empty space creates a nice place to tuck something in — a picture, pattern, letters, and so on. The rest of the letters are capitalized, but the lowercase a continues to be the focal point. We can also notice that there are four sizes here. I broke the rule of using only three sizes… but it does not feel that there is competition. The colors are vibrant because, in this case, Cuquin was a vibrant person, and the colors are needed to honor her.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8021b511-56f1-4b59-9f0c-cc03e51d1d20/20-typographic-hierarchies.jpg" /></p>
<p>In addition to the items we have added to our summary, we can add the following:</p>
<ul>
<li>We can <strong>use color to convey personality and tone</strong>.</li>
<li>We can <strong>break a rule</strong> as long as it works within the system we have established and does not compete with the focal point.</li>
<li>We can <strong>create spaces within the letters or words to tuck in text, patterns, or pictures</strong>.</li>
</ul>
<p>Our last variable to discuss is visual punctuation. Let’s take a look at how everything comes together in this variable.</p>
Visual Punctuation
<p>A common question I often hear from my students is, “What is visual punctuation?” We see it all the time but don’t think about it. Visual punctuation refers to the <strong>use of lines, shapes, symbols, and other geometric elements to enhance the hierarchy</strong>. Remember, the goal is always to enhance the hierarchy and help the reader’s eye move around the space.</p>
<p>Let’s see some examples of how visual punctuation is actually frequently used and applied in typographic compositions:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9c0da127-9086-43fc-9b72-d1184620a719/21-typographic-hierarchies.png" /></p>
<p>The example above uses visual punctuation in the form of the crane to cleverly point to the title. Then it repeats the use of white in the text at the beginning of the instructions. The similarity established creates unity, and the word FOLD pulls our eye back to the top. Notice how the designer also bolded the beginning of each instruction. We saw this before in the weight discussion. The use of the bold weight on each instruction helps us move from one to the other sequentially. It also helps to signal each new step without numbers.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0541631d-3da8-4381-8a53-390bd9e288e4/22-typographic-hierarchies.png" /></p>
<p>The above example was designed to undermine the sometimes unnecessary rules and regulations that we find in places of worship. The point is not to follow all the rules but rather to focus on the object of affection. Here, a visual point is made to emphasize the conceptual point:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50cd4016-3594-4355-8830-8a4d794ccc5e/23-typographic-hierarchies.jpg" /></p>
<p>Circles are a great way to call attention to something. And so are the dotted lines. In this example, the dotted and playful line is colored in the same color as the circle on the top left. It points to the new number in the address aligned or set on the imaginary line the base of the number 2 provides. The rest of the address is provided following the same color palette. It creates a type of triangular movement from the top left to the middle right to the bottom left. Notice the sizes too. The numbers are the largest item on the card. There is a nice relationship between the numbers and the top left circle.</p>
<p>In addition to the items we have added to our summary, we can add the following:</p>
<ul>
<li>We can and should <strong>use visual punctuation to enhance the meaning, the concept, or the message</strong>.</li>
<li>We <strong>can use only one color and one shape</strong>.</li>
<li>We can also <strong>use more than one color to create a hierarchy</strong>.</li>
</ul>
<p>Now that we have discussed all the variables, it would be a good idea to see them all used together.</p>
All Variables In Examples
<p>We have discussed the variables of proximity, weight, size, size and weight, color, and visual punctuation. Take a look at the following examples and see how many you can identify:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/184521d6-2f28-47bf-8947-af1817b8829c/24-typographic-hierarchies.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d2ffd1c-7c4b-40dc-bd17-39c48216ac0e/25-typographic-hierarchies.jpg" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0daa278f-a742-4a9e-be2f-96de8bbe1a12/26-typographic-hierarchies.png" /></p>
<p>Like these, we can find more examples of the variables used together. In fact, they are used and applied so ubiquitously that we don’t really see them independently from each other. When starting out with typography, it is a good idea to isolate what we see. This is true for any discipline: isolate and then combine them. Learn each one well and then start adding and mixing.</p>
<p>The poster below was designed for a youth program called Empowered. It was a research-based project led by Dr. Krista Mehari with the goal of empowering marginalized young teens to make effective and productive decisions. When she asked me to work with them, we had several brainstorming sessions. The <em>Watch, Wave, and Wait</em> is a poster intended to help the kids memorialize the process of dealing with emotions. In this poster, I broke some rules. While still sticking to the three sizes rule, I managed to create a pattern using repetition of the outline words mimicking the internal thought process we engage in when upset: calm down, calm down, or counting or something similar.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9924584c-81ac-49ef-8581-0c9facfa67f8/27-typographic-hierarchies.png" /></p>
Your Turn!
<p>At this point, after reading this article, you might want to give this process a try. If so, I have prepared a simple table for you to use. Below are some instructions:</p>
<ul>
<li><strong>Pick content that isn’t too long.</strong> For example, a two-page editorial would be too long. But a set of ten-step instructions would be better suited. An excerpt from an essay would be good too.</li>
<li><strong>Do not use letter-size pages.</strong> Think smaller: eight inches by eight inches format would be best. We do this to focus on the content and not feel strange if the page does not look “full.” Your sketches, which should be small, will also be square.</li>
<li><strong>Always do your sketches.</strong> Always do sketches first. It is the best way to literally think outside the box since you are outside the box, that is, the computer. Do as many sketches as you can think.</li>
<li>For each of the variables, <strong>sketch several</strong>. Maybe think of four options for each.</li>
<li>Then, <strong>take the best two or three</strong> for each variable and put them on the computer.</li>
<li>When you print, and you should always print to “see” how the proportions are working, <strong>use crop marks to cut the page</strong>.</li>
<li>Once you have printed them, tape them to a wall away from you. But <strong>tape them upside down</strong>. It is the best way to assess proportions, space, hierarchy, balance, tension, and so on.</li>
<li>After you do this, <strong>revise them on the computer, print them again, and tape them upside down again</strong>.</li>
<li>Once you are certain you have attained a good typographic hierarchy, you can make a small booklet out of them. Below you can see the booklet my former student Anh Dang did for her project, <em>How to Fold a Crane</em>. Or you can create a <a href="https://issuu.com/">virtual flipbook</a> showing your masterpieces!</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2e25257-7d41-4943-b946-0a34d6dbf3fd/28-typographic-hierarchies.png" /></p>
<p>And you needn’t stop there. As you get comfortable with the process, perhaps you want to try designing a poster. Or tackle that two-page editorial layout? Give it a try!</p>
Conclusion
<p>So far, we have seen how these six variables can powerfully transform the content in any format. It is all about how creative we are about organizing things within the parameters. After all, that is what design is about — <strong>creative solutions within a set of parameters</strong>. The more you practice, the better you get at something, right?</p>
<p>This old adage has proven itself to be true consistently. It applies to typography and anything design. Fine-tuning our senses comes with exposure and repetition. Take any opportunity to design and establish a hierarchy. Even small things like a business card can look incredible when you add a contrast of space, weight, size, size and weight, color, and visual punctuation. If we think about it, we are exposed to these variables daily and constantly. We just don’t look at them as isolated variables that can affect the entire composition. But they do. And once we know how to use them, we can push the boundaries and create pieces with more impact and intention.</p>
<p>Below I am listing resources to look at for more inspiration.</p>
<h3>Resources</h3>
<ul>
<li>Freebie to help you experiment (see below)</li>
<li><a href="https://fonts.ilovetypography.com/">I Love Typography</a></li>
<li>I have a very healthy and juicy <a href="https://pin.it/1ONgdXS">Pinterest board</a> on all things typography</li>
<li><a href="https://www.typotheque.com/blog">Typotheque</a></li>
<li><a href="http://luna.library.cmu.edu/luna/servlet/CMUccm~3~3">Carnegie Mellon Swiss Posters Collection </a></li>
<li>“<a href="http://webtypography.net/">The Elements of Typographic Style Applied to the Web</a>,” a practical guide to web typography</li>
<li><a href="https://labs.jensimmons.com/">Web Design Experiments</a>, Jen Simmons</li>
<li><a href="http://www.typography101.net/">Typography 101</a></li>
<li>“<a href="https://www.toptal.com/designers/typography/typographic-hierarchy">How to Structure an Effective Typographic Hierarchy</a>,” Cameron Chapman</li>
<li>“<a href="https://www.fonts.com/content/learning/fyti/typographic-tips/typographic-hierarchy">Typographic Hierarchy</a>,” Ilene Strizver</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Alma Hoffmann)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ed9186f-f287-412d-a930-0cd2ae7ae196/typographic-hierarchies.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[State Of CSS Survey: Influence The Future Of CSS]]></title>
            <link>https://smashingmagazine.com/2022/10/state-css-survey-2022/</link>
            <guid>https://smashingmagazine.com/2022/10/state-css-survey-2022/</guid>
            <pubDate>Mon, 24 Oct 2022 19:00:00 GMT</pubDate>
            <description><![CDATA[The annual survey for anyone who writes CSS, [State of CSS](https://stateofcss.com/en-us/?source=smashing_magazine_css_survey), is nearing the end of its response period for 2022. The survey is available in many different languages and all questions are optional.]]></description>
            <content:encoded><![CDATA[<p>This year, I joined the team and <a href="https://lea.verou.me/2022/07/help-design-the-state-of-css-survey-2022/">helped design the survey together with the community</a> which led to a <a href="https://lea.verou.me/2022/10/state-of-css-2022-now-open/">number of improvements</a>. If you write CSS frequently, investing a few minutes to fill it in could come back to you hundredfold, since implementers make decisions on what to work on based on the developer pain points identified through the survey every year. In fact, Chrome is funding work on the survey for this very reason.</p>
Past Surveys
<p>So, how did past surveys help web developers? Let’s look at the impact in Chrome, as described to us by <a href="https://twitter.com/stubbornella">Nicole Sullivan</a>, Product Manager for Chrome at Google:</p>
<blockquote>“I showed the <a href="https://2019.stateofcss.com/opinions/#missing-features?source=smashing_magazine_css_survey">‘Missing features’ section</a> to my team before the pandemic and we got to work on it. Several things on that list are underway.”</blockquote>

<p>Indeed, literally everything in that list is now being worked on or finished unless there was no (stable) specification for it:</p>
<ul>
<li>✅ <strong>Container queries</strong><br />Size queries have <a href="https://caniuse.com/css-container-queries">shipped in Chrome 106</a> , style queries behind a flag.</li>
<li>✅ <strong>Parent selector/:has selector</strong><br /><a href="https://caniuse.com/css-has">Shipped in Chrome 105</a>.</li>
<li>✅ <strong>Nesting</strong><br />Currently underway, delayed a bit due to discussions in the CSS Working Group about last minute changes to the syntax.</li>
<li>🟡 <strong>Functions</strong><br />No specification to implement yet, but is being worked on in the CSS WG.</li>
<li>✅ <strong>Scoping</strong><br />Experimental implementation in Chrome 105 behind a flag.</li>
<li>🟡 <strong>Mixins</strong><br />No specification to implement yet, but ideas are being explored in the CSS WG.</li>
<li>✅ <strong>Subgrid</strong><br />Implementation underway.</li>
</ul>
<p>Let’s look at the <a href="https://2020.stateofcss.com/en-US/opinions/#currently_missing_from_css?source=smashing_magazine_css_survey?source=smashing_magazine_css_survey">corresponding section in the 2020 results</a>. A lot of overlap, but some additional items:</p>
<ul>
<li>✅ <strong>Form elements styling</strong><br />Work is underway on a <a href="https://hidde.blog/custom-select-with-selectmenu/">stylable &lt;selectmenu&gt; element</a> to replace &lt;select&gt;, and an <a href="https://open-ui.org/prototypes/selectmenu">experimental implementation exists in Chrome</a> behind a flag.</li>
<li>🟡 <strong>Conditional logic</strong><br />No specification to implement, but several proposals are being explored in in the CSS WG.</li>
<li>✅ <strong>Masonry layout</strong><br /><a href="https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/">Already worked on</a>, experimental implementation in Firefox Nightly.</li>
</ul>
<p>The <a href="https://2021.stateofcss.com/en-US/opinions/#currently_missing_from_css_wins?source=smashing_magazine_css_survey">2021 corresponding section</a> includes roughly the same items, with one new thing: <strong>color functions</strong>. And lo and behold, the color functions for which there is a stable specification are being implemented in Chrome as we speak, and Chrome has funded specification work on the rest. </p>
<p>And it’s not just Chrome. The focus of <a href="https://web.dev/interop-2022/">Interop 2022</a> was largely shaped by these results.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea87f3fc-d587-446b-a80b-524d55f245ec/currently-missing-from-css.png" /></p>
What’s Next?
<p>We’re taking on the world of styles and selectors to try and identify upcoming trends, and figure out what featurs and tools to learn next. What’s more, the survey results will also help browser vendors prioritize their roadmaps and work towards better compatibility between browsers. </p>
<p>What do you want to see more of in CSS? Better typography? New responsive layout features? New features to improve maintainability? Layout? Components? Something else? The sky is the limit! Make sure to <a href="https://stateofcss.com/en-us/?source=smashing_magazine_css_survey">share your CSS dreams with us in the survey</a>, and they may well start coming true.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Lea Verou)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72b32b88-9b48-4c44-95f3-d51b26923bde/state-css-survey-2022.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Futuristic CSS]]></title>
            <link>https://smashingmagazine.com/2022/10/futuristic-css/</link>
            <guid>https://smashingmagazine.com/2022/10/futuristic-css/</guid>
            <pubDate>Fri, 21 Oct 2022 12:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Sacha Greif tries to anticipate future CSS trends and takes a look at some far-fetched and futuristic CSS features that might one day make their way to the browser.]]></description>
            <content:encoded><![CDATA[<p>I run the yearly State of CSS survey, asking developers about the CSS features and tools they use or want to learn. The survey is actually open right now, so <a href="https://survey.devographics.com/survey/state-of-css/2022?source=smashing_magazine_futuristic_css">go take it</a>!</p>
<p>The goal of the survey is to help anticipate future CSS trends, and the data is also used by browser vendors to inform their roadmap. </p>
<p>This year, Lea Verou pitched in as lead survey designer to help select which CSS features to include. But even though we added many new and upcoming features (some of which, like <a href="https://caniuse.com/css-nesting">CSS nesting</a>, aren’t even supported yet), some features were so far off, far-fetched, and futuristic (or just plain made-up!) that we couldn’t in good conscience include them in the survey. </p>
<p>But it’s fun to speculate. So today, let’s take a look at some CSS features that might one day make their way to the browser… or not!</p>
CSS Toggles
<p>The CSS checkbox hack has been around for <a href="https://css-tricks.com/the-checkbox-hack/">over ten years</a>, and it still remains the only way to achieve any kind of “toggle effect” in pure CSS (I actually used it myself recently for <a href="https://sachagreif.com/work-with-me/">the language switcher on this page</a>).</p>
<p>But what if we had <em>actual</em> toggles, though? What if you could handle tabs, accordions, and more, all without writing a single line of JavaScript code?</p>
<p>That’s exactly what Tab Atkins and Miriam Suzanne’s <a href="https://tabatkins.github.io/css-toggle/">CSS Toggles</a> proposal wants to introduce. The proposal is quite complex, and the number of details and edge cases involved makes it clear that this will be far from trivial for browser vendors to implement. But hey, one can dream, and in fact, an experimental implementation <a href="https://twitter.com/yisibl/status/1581324896310681600">recently appeared in Chrome Canary</a>!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8cb3f85-97c3-4bff-b343-ccbd60a0032d/3-futuristic-css.png" /></p>
CSS Switch Function
<p>A major trend in recent years — not only in CSS but in society at large — has been recognizing that we’ve often done a poor job of serving the needs of a diverse population. In terms of web development, this translates into building websites that can adapt not only to different devices and contexts but also to different temporary or permanent disabilities such as color blindness or motion sickness. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf67cb23-9587-476f-a8fa-25f6958e2cc2/4-futuristic-css.png" /></p>
<p>The result is that we often need to target these different conditions in our code and react to them, and this is where Miriam Suzanne’s <a href="https://css.oddbird.net/rwd/switch/"><code>switch</code> proposal</a> comes in:</p>
<pre><code>.foo {
  display: grid;
  grid-template-columns: switch(
    auto /
     (available-inline-size &gt; 1000px) 1fr 2fr 1fr 2fr /
     (available-inline-size &gt; 500px) auto 1fr /
   );
}
</code></pre>

<p>While the initial proposal focuses on testing <code>available-inline-size</code> as a way to set up grid layouts, one can imagine the same <code>switch</code> syntax being used for many other scenarios as well, as a complement to media and container queries. </p>
Intrinsic Typography
<p><a href="https://css-tricks.com/intrinsic-typography-is-the-future-of-styling-text-on-the-web/">Intrinsic typography</a> is a technique coined by Scott Kellum, who developed the type-setting tool <a href="https://typetura.com/">Typetura</a>. In a nutshell, it means that instead of giving the text a specific size, you let it set its own size based on the dimensions of the element containing it: </p>
<blockquote>Instead of sizing and spacing text for each component at every breakpoint, the text is given instructions to respond to the areas it is placed in. As a result, intrinsic typography enables designs to be far more flexible, adapting to the area in which it is placed, with far less code.</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2bd59246-ada5-427a-8220-0b2f4c528b2b/5-futuristic-css.png" /></p>
<p>This goes beyond what the already quite useful <a href="https://utopia.fyi/type/calculator">Utopia Type Scale Calculator</a> can offer, as it only adapts based on viewport dimensions — not container dimensions. </p>
<p>The only problem with Typetura is that it currently requires a JavaScript library to work. As is often the case, though, one can imagine that if this approach proves popular, it’ll <a href="https://github.com/w3c/csswg-drafts/issues/6245">make its way to native CSS</a> sooner or later. </p>
<p>We can already achieve a lot of this today (or pretty soon, at least) with <a href="https://ishadeed.com/article/container-query-units/">container query units</a>, which lets you reference a container’s size when defining units for anything inside it. </p>
Sibling Functions
<p>It’s common in Sass to write loops when you want to style a large number of items based on their position in the DOM. For example, to progressively indent each successive item in a list, you could do the following:</p>
<pre><code>@for $i from 1 through 10 {
  ul:nth-child(#{$i}) {
    padding-left: #{$i * 5px}
  }
}
</code></pre>

<p>This would then generate the equivalent of 10 CSS declarations. The obvious downside here is that you end up with ten lines of code! Also, what if your list has more than ten elements?</p>
<p>An elegant solution currently in the works is <a href="https://github.com/w3c/csswg-drafts/issues/4559">the <code>sibling-count()</code> and <code>sibling-index()</code> functions</a>. Using <code>sibling-index()</code>, the previous example would become:</p>
<pre><code>ul &gt; li {
  padding-left: calc(sibling-index() * 5px); 
}
</code></pre>

<p>It’s an elegant solution to a common need!</p>
CSS Patterns
<p>A long, long time ago, I made a little tool called <a href="http://www.patternify.com/">Patternify</a> that would let you draw patterns and export them to base64 code to be dropped inline in your CSS code. My concept was to let you use patterns inside CSS but with <a href="https://css-doodle.com/">CSS Doodle</a>. Yuan Chuan had the opposite idea: what if you used CSS to <em>create</em> the patterns?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0e3fd70f-49e0-4059-94f4-df2c84ae5f44/2-futuristic-css.png" /></p>
<p>Now pure-CSS pattern-making <a href="https://projects.verou.me/css3patterns/#">has been around for a while</a> (and recently got more elaborate with the introduction of <a href="https://css-tricks.com/background-patterns-simplified-by-conic-gradients/">conic gradients</a>), but Yuan Chuan definitely introduced some key new concepts, starting with the ability to randomize patterns or easily specify a grid. </p>
<p>Obviously, CSS Doodle is probably far more intricate than a native pattern API would ever need to be, but it’s still fun to imagine what we could do with just a few more pattern-focused properties. The <a href="https://github.com/w3c/csswg-drafts/issues/6807"><code>@image</code> proposal</a> might be a step in that direction, as it gives you tools to define or modify images right inside your CSS code. </p>
Native HTML/CSS Charts
<p>Now we’re really getting into wild speculation. In fact, as far as I know, no one else has ever submitted a proposal or even blogged about this. But as someone who spends a lot of their time working on <a href="https://2021.stateofcss.com/">data visualizations</a>, I think native HTML/CSS charts would be amazing!</p>
<p>Now, most charts you’ll come across on the web will be rendered using SVG or sometimes Canvas. In fact, this is the approach we use for the surveys through the DataViz library <a href="https://nivo.rocks/">Nivo</a>. </p>
<p>The big problem with this, though, is that neither SVG nor Canvas are really responsive. You can scale them down proportionally, but you can’t have the same fine-grained control that something like CSS Grid offers. </p>
<p>That’s why some have tried to lay out charts using pure HTML and CSS, like <a href="https://chartscss.org/">charting library <code>Charts.css</code></a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55914b8f-bbc3-42eb-b905-5f8a2ebde89d/6-futuristic-css.png" /></p>
<p>The problem here becomes that once you go past simple blocky bar charts, you need to use a lot of hacks and complex CSS code to achieve what you want. It can work, and libraries like <code>Charts.css</code> do help a lot, but it’s not easy by any means. </p>
<p>That’s why I think having native chart elements in the browser could be amazing. Maybe something like:</p>
<pre><code>&lt;linechart&gt;
  &lt;series id="series_a"&gt;
    &lt;point x="0" y="2"/&gt;
    &lt;point x="1" y="4"/&gt;
    &lt;point x="2" y="6"/&gt;
  &lt;/series&gt;
  &lt;series id="series_b"&gt;
    &lt;point x="0" y="6"/&gt;
    &lt;point x="1" y="4"/&gt;
    &lt;point x="2" y="2"/&gt;
  &lt;/series&gt;
&lt;/linechart&gt;
</code></pre>

<p>You would then be able to control the chart’s spacing, layout, colors, and so on by using good old CSS — including media and container queries, to make your charts look good in every situation.</p>
<p>Of course, this is something that’s already possible through web components, and many are experimenting in this direction. But you can’t beat the simplicity of pure HTML/CSS. </p>
And Also…
<p>Here are a couple more quick ones just to keep you on your toes:</p>
<h3>Container Style Queries</h3>
<p>You might already know that container queries let you define an element’s style based on the width or height of its containing element. <a href="https://www.w3.org/TR/css-contain-3/#container-style-query">Container style queries</a> let you do the same, but based on that container’s — you guessed it — style, and there’s actually already an experimental implementation for it in Chrome Canary. </p>
<p>As <a href="https://css-tricks.com/early-days-of-container-style-queries/">Geoff Graham points out</a>, this could take the form of something like:</p>
<pre><code>.posts {
  container-name: posts;
}

@container posts (background-color: #f8a100) {
  /* Change styles when `posts` container has an orange background */
  .post {
    color: #fff;
  }
}
</code></pre>

<p>This is a bit like <code>:has()</code>, if <code>:has()</code> lets you select based on styles and not just DOM properties and attributes, which, now that I think about it, might be another cool feature too!</p>
<h3>Random Numbers</h3>
<p>People have tried to simulate a random number generator in CSS for a long time (using the <a href="https://lea.verou.me/2020/07/the-cicada-principle-revisited-with-css-variables/">“Cicada Principle” technique</a> and <a href="https://uxdesign.cc/creating-randomness-with-pure-css-a990dafcd569">other hacks</a>), but having true built-in randomness would be great. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d9d4458-59ce-4497-b08b-fbdadfac383d/1-futuristic-css.png" /></p>
<p>A <strong>CSS random number generator</strong> would be useful not just for pattern-making but for any time you need to make a design feel a little more organic. There is <a href="https://github.com/w3c/csswg-drafts/issues/2826#issuecomment-1204305712">a fairly recent proposal</a> that suggests a syntax for this, so it’ll be interesting to see if we ever get CSS randomness!</p>
<h3>Grid Coordinates Selector</h3>
<p>What if you could target grid items based on their position in a grid or flexbox layout, either by styling a specific row or column or even by targeting a specific item via its <code>x</code> and <code>y</code> coordinates? </p>
<p>It might seem like a niche use case at first, but as we use Grid and Subgrid more and more, we might also need new ways of targeting specific grid items. </p>
<h3>Better Form Styling</h3>
<p>Styling form inputs has traditionally been such a pain that many UI libraries decide to abstract away the native form input completely and recreate it from scratch using a bunch of <code>div</code>s. As you might imagine, while this might result in nicer-looking forms, it usually comes at the cost of accessibility. </p>
<p>And while things have been getting better, there’s certainly still a lot we could improve when it comes to forming input styling and styling native widgets in general. The new <a href="https://hidde.blog/custom-select-with-selectmenu/"><code>&lt;selectmenu&gt;</code> element</a> proposal is already a great start in that direction.</p>
<h3>Animating To Auto</h3>
<p>We’ve all run into this: you want to animate an element’s height from <code>0</code> to, well, however big it needs to be to show its contents, and that’s when you realize CSS doesn’t let you animate or transition to <code>auto</code>. </p>
<p>There are <a href="https://css-tricks.com/using-css-transitions-auto-dimensions/">workarounds</a>, but it would still be nice to have this fixed at the browser level. For this to happen, we’ll also need to be able to use <code>auto</code> inside <code>calc</code>, for example <code>calc(auto / 2 + 200px / 2)</code>.</p>
Predicting The Future
<p>Now let’s be real for a second: the chances of any of these features being implemented (let alone supported in all major browsers) are slim, at least if we’re looking at the next couple of years.  </p>
<p>But then again, people thought the same about <code>:has()</code> or native CSS nesting, and it does look like we’re well on our way to being able to use those two — and many more — in our code sooner than later. </p>
<p>So let’s touch base again five years from now and see how wrong I was. Until then, I’ll keep charting the course of CSS through our yearly surveys. And I hope you’ll help us by <a href="https://survey.devographics.com/survey/state-of-css/2022?source=smashing_magazine_futuristic_css">taking this year’s survey</a>!</p>
<p><em>Thanks to Lea Verou and Bramus Van Damme for their help with this article.</em></p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Sacha Greif)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57790dc2-f3f7-474d-b84e-531a37a1aa5e/futuristic-css.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[What’s New In DevTools: Halloween Edition 🎃]]></title>
            <link>https://smashingmagazine.com/2022/10/devtools-updates-halloween-edition/</link>
            <guid>https://smashingmagazine.com/2022/10/devtools-updates-halloween-edition/</guid>
            <pubDate>Thu, 20 Oct 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Patrick Brosset gives an update on the most impactful new features that are now available in DevTools, across Firefox, Chrome, Safari, and Edge.]]></description>
            <content:encoded><![CDATA[<p>I can’t believe it’s already been nine months since I last wrote about <a href="https://www.smashingmagazine.com/2022/01/devtools-updates-2022/">the new DevTools features</a> across browsers! You folks are due for an update. And what an update this is going to be!</p>
<p>Our friendly DevTools teams at Mozilla, Google, Microsoft, and Apple have once again been hard at work. And in this article, I’ll attempt to summarize the most impactful new features that are now available in browser developer tools.</p>
<p>So much has happened over these past few months that I may have missed a few things, but hopefully, you’ll find something that helps you in this article. There should be a little bit for everyone, whatever your level of experience with web development is, and whatever browser you use.</p>
<p>So, without further ado, let’s jump right in.</p>
<p><strong>Note</strong>: <em>Because Edge is based on Chromium, the open-source browser engine that also powers Chrome, all of the Chrome features listed below are also available in Edge (unless otherwise noted).</em></p>
CSS Debugging
<p>We’ve got a lot of long-awaited and profoundly impacting new features in CSS lately.</p>
<p>To name just a few: </p>
<ul>
<li><a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Container_Queries">Container Queries</a> help us style components based on the size of their containers,</li>
<li>The <a href="https://developer.mozilla.org/docs/Web/CSS/:has"><code>:has()</code></a> pseudo-class lets us style elements based on what they contain, and </li>
<li><a href="https://developer.mozilla.org/docs/Learn/CSS/Building_blocks/Cascade_layers">CSS Cascade Layers</a> make it easy to gracefully handle increasing complexity in our websites’ code.</li>
</ul>
<p>But, although these features are amazing, shipping support for them in browsers is only part of the story. For people to comfortably use them, documentation and tooling are necessary too.</p>
<p>We’re in luck because both Container Queries and CSS Cascade Layers have associated DevTools features now.</p>
<p>Specifically, Container Queries are supported in Safari WebInspector and Chrome DevTools where information about the corresponding <code>@container</code> at-rules is displayed when viewing CSS in the Styles sidebar.</p>
<p>Here is an example in Safari WebInspector:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca81b6e3-aa8f-4f9a-860b-6bcf0e4b6bff/safari-container-queries-code.png" /></p>
<p>Chrome, Safari, and Firefox DevTools also now have support for CSS Cascade layers in their Elements (or Inspector) tools. The layer to which a particular rule belongs is now displayed next to that rule:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2b86cbb-1cac-427b-b945-7ba736347165/18-devtools-updates-halloween-edition.png" /></p>
<p>Maybe a little less popular, but still very useful, the <a href="https://developer.mozilla.org/docs/Web/CSS/color_value/hwb"><code>hwb()</code></a> CSS function makes it possible to express colors in a more natural way based on hue and an amount of whiteness and blackness.</p>
<p><code>hwb()</code> is now supported in all major browsers, and Chrome (and Chromium-based browsers), as well as Firefox, both have support for it in DevTools. That means they will show <code>hwb</code> in the autocomplete list when editing CSS in the Styles (or Rules) sidebar and will show the same color swatch used for other color formats too.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e194a91a-c8d5-419e-9cc4-eaae4f7cb0cf/16-devtools-updates-halloween-edition.png" /></p>
<p>Next, it has also become easier to edit CSS in the Styles sidebar and get meaningful autocompletion results across browsers.</p>
<p>Chrome now previews all CSS variable values when autocompleting the <code>var()</code> function, not just colors, and it also displays <code>@supports</code> and <code>@scope</code> at-rules.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca9f2972-5960-4d95-a474-9856795ed882/1-devtools-updates-halloween-edition.png" /></p>
<p>Safari now uses fuzzy matching when auto-completing CSS, making it much faster to type property names and values.</p>
<p>And Firefox added support for the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix"><code>color-mix()</code></a> function in its auto-complete too.</p>
<p>Talking about Firefox, the browser has had the amazing <strong>Inactive CSS</strong> feature <a href="https://hacks.mozilla.org/2019/10/firefox-70-a-bountiful-release-for-all/#developertools">since 2019</a>, which lets you know when a particular CSS declaration doesn’t have an impact on the current element.</p>
<p>Firefox continued to improve this feature over time and recently added more coverage for use cases such as warning when <code>border-image-*</code> is used on elements within a table with <code>border-collapse</code> or warning when width or height are used on ruby elements.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82e91f9d-366a-4729-a300-d2960e864fb0/10-devtools-updates-halloween-edition.png" /></p>
<p>And, while we’re on the topic of inactive CSS, the Chrome team is actually working on a similar feature. In fact, it’s <a href="https://devtoolstips.org/tips/en/find-inactive-styles/">already available in Chrome</a> (and all Chromium-based browsers) by enabling the <strong>CSS authoring hints</strong> experiment under <code>Settings (F1) &gt; Experiments</code> in DevTools and should become available by default with Chrome 108.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f52f9b62-910a-4ea8-9a39-af09a1cbca53/11-devtools-updates-halloween-edition.png" /></p>
<p>Over the past few years, browser DevTools has gotten fantastic layout debugging tools to inspect, understand, and tweak grid and flex layouts. More recently, Safari has been adding more features in this area as well.</p>
<p>You can now use CSS alignment controls in the <em>Styles</em> sidebar and inspect Flexbox layouts too.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1b88dbca-94b7-4196-8757-a878928766f0/17-devtools-updates-halloween-edition.png" /></p>
JavaScript Debugging
<p>Let’s change gears a bit and talk about JavaScript debugging.</p>
<p>It’s very common to use external libraries and frameworks in a JavaScript codebase, to avoid having to re-implement things that have already been solved. For some years already, DevTools have allowed users to ignore third-party scripts when debugging (see docs for <a href="https://developer.chrome.com/docs/devtools/javascript/reference/#ignore-list">Chrome</a>, <a href="https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/javascript/guides/mark-content-scripts-library-code">Edge</a>, <a href="https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/ignore_a_source/index.html">Firefox</a>).</p>
<p>Hiding scripts makes it easier to debug your code. It avoids ending up in foreign-looking library code when stepping through your own logic.</p>
<p>Recently, Firefox shipped a new feature that builds on top of this. You can now ignore <strong>pieces of code within a file</strong>. If you have a function that keeps getting called all the time but isn’t interesting for what you’re trying to debug, you can simply ignore that one function now.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c23f6d6c-d8a6-4e9a-8bab-ed1e4645f568/7-devtools-updates-halloween-edition.png" /></p>
<p>Over in Chrome (and Chromium), a whole lot of small and not-so-small JavaScript debugging improvements were made:</p>
<p>The Page source tree was improved, and there’s now a way to group sources by authored (to show the original source files, thanks to source maps) or deployed (to show the actual files on the server).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b63e2fde-eb8a-4fa2-8479-86e89986bfab/20-devtools-updates-halloween-edition.png" /></p>
<p>It is now also possible to live edit the code of a function while debugging. If you’re paused at a breakpoint inside a function and want to test a quick fix, you can edit the code right there and save the file. The function will be restarted with the new code.</p>
<p>Next, stack traces for asynchronous operations are now reported entirely, showing you the full story of what happened before your current breakpoint, even if those things happened asynchronously.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9e7729cb-b97e-4e3c-bb11-dc6f34a0ab36/9-devtools-updates-halloween-edition.png" /></p>
<p>Stack traces now also automatically ignore known third-party scripts, making it much easier to debug your own code.</p>
Performance Investigation
<p>Web performance is probably an area where we depend on tools even more than in other areas. You can’t really guess what’s running slow or eating too much memory until you profile your webpage. Fortunately, we keep on getting new options to investigate performance and memory problems, making our lives easier.</p>
<p>In fact, Chrome shipped an entirely new panel dedicated just to this! </p>
<p><strong>Note</strong>: <em>This panel is available in Chrome only and not in other Chromium-based browsers.</em></p>
<p>The <a href="https://developer.chrome.com/docs/devtools/performance-insights/"><strong>Performance Insights</strong></a> panel shipped with Chrome 102 and has gradually gotten better and better, with recent additions like <strong>First Contentful Paint</strong>, <strong>Last Contentful Paint</strong>, <strong>Time To Interactive</strong> metrics and <strong>text flashes</strong> identification.</p>
<p>Think of the Performance Insights panel as a simpler version of the (sometimes scary) Performance panel:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d89e536-f185-4599-bcac-ad3713ab1272/19-devtools-updates-halloween-edition.png" /></p>
<p>Talking about the Performance panel, it recently got a brand new <a href="https://developer.chrome.com/docs/devtools/evaluate-performance/reference/#interactions"><strong>Interactions track</strong></a> in Chromium-based browsers, giving you a way to know when user events occur and how long they last, making it easier to debug responsiveness issues.</p>
<p>Edge has also been busy shipping new features in this area.</p>
<p>In the Performance tool, source maps can now be used to display original function names, even when sharing recorded profiles with other people:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/70c3bf36-d680-439e-ac60-758c19805a82/21-devtools-updates-halloween-edition.png" /></p>
<p>In the Memory tool, you now get a summary of your <a href="https://learn.microsoft.com/microsoft-edge/devtools-guide-chromium/memory-problems/heap-snapshots">heap snapshots</a> organized by node types. Heap snapshots are hard to dig through, and these node types make it easier to see what is using the most memory on your webpage. There are also new ways to filter memory retainers to find memory leak culprits quickly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab8190cb-3509-496f-85cf-d96ae922f2e3/13-devtools-updates-halloween-edition.png" /></p>
<p>Finally, Firefox has also been active in this area over the past few months. A number of years ago, Firefox created a brand new <a href="https://profiler.firefox.com/">Performance tool</a> for its own use. The idea, at the time, was to have a tool to debug performance problems in the browser code itself. But over time, the tool was adapted to become useful to web developers too.</p>
<p>And now, the final changes have been made, and the old Firefox DevTools’ Performance panel has fully been replaced with the new one:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/abc943ba-91c4-4679-851a-5f82088bb850/8-devtools-updates-halloween-edition.png" /></p>
Network Debugging
<p>Debugging your frontend code is important, but sometimes problems can happen in the network layer of your app when communicating with your server. Thankfully, a few very useful features were recently added to the Network tools in various browsers.</p>
<p>In Edge, a new column was added to the Network log. The <strong>Fulfilled by</strong> column makes it easier to debug your service worker logic and Progressive Web Apps.</p>
<p>You can now discover straight away whether a request was handled by the service worker, the browser cache, or your server.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd080aaa-77f2-4442-82de-88fa5318e33e/15-devtools-updates-halloween-edition.png" /></p>
<p>Firefox just shipped a completely redesigned version of its <strong>Edit and Resend</strong> feature. This feature has been available in Firefox for a long time already and is a great way to debug your server-side APIs or just test something quickly.</p>
<p>With it, you can right-click on any HTTP request displayed in the Network tool, select <code>Edit and Resend</code>, then manipulate the request parameters, headers, and body, and finally send the modified request.</p>
<p>Firefox completely redesigned it recently. It’s now much easier to edit the parameters before sending a new request.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/acc5b5a0-8f29-47ec-bcf7-b13344fb2ebb/24-devtools-updates-halloween-edition.png" /></p>
<p>And finally, Safari has added quite a few great features in this area too. You can now block network requests entirely, and you can also locally override requests by using regular expressions.</p>
Editor Integration
<p>Microsoft also does VSCode, which is a very popular code editor amongst web developers, and some time ago, the Edge team released <a href="https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.vscode-edge-devtools">the Edge Tools extension for VS Code</a>. The extension gives you an embedded browser and the browser DevTools right in VS Code alongside your code.</p>
<p>This year, the team continued to work on the extension and added more features. In particular, the following things are now possible:</p>
<ul>
<li>The extension now has the <strong>Console</strong> and <strong>Application</strong> tools available. Previously, only the <strong>Elements</strong> and <strong>Network</strong> tools were available. Console logs used to go to VSCode’s output, but now they also go to the Console tool in the embedded DevTools.</li>
<li>The embedded browser has been completely redesigned and features a lot of emulation and rendering options to test your webpage under different conditions. For example, you can emulate different media types or the prefers-code-scheme media feature. You can also emulate different color vision deficiencies.</li>
<li>Next, you can launch the embedded browser and DevTools simply by right-clicking an HTML file in VS Code.</li>
<li>Finally, you can use VS Code’s <strong>Quick Fix</strong> options to automatically fix a number of issues reported by the extension in your code.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9fe7485c-9493-486a-90b2-807ca647dd69/4-devtools-updates-halloween-edition.png" /></p>
<p>One more thing, if you like using Visual Studio (not VS Code), note that the team released an extension for it too. Check out the <a href="https://marketplace.visualstudio.com/items?itemName=ms-edgedevtools.VisualStudioEdgeDevTools">Edge Developer Tools for Visual Studio</a> extension.</p>
Test Automation
<p>It’s possible to automate browsers nowadays, and it can be very useful for testing. With browser automation libraries such as <a href="https://webdriver.io/">WebDriver</a>, <a href="https://pptr.dev/">Puppeteer</a>, and <a href="https://playwright.dev/">Playwright</a>, you can write tests that mimic what users would do on your website and verify that these scenarios continue working over time, as you make changes to your product.</p>
<p>This area is in constant evolution; in particular, the WebDriver spec is evolving with a new <a href="https://w3c.github.io/webdriver-bidi/">bi-directional</a> version. Also, the Chrome DevTools team has been innovating quite a lot lately. They shipped a new tool called the <a href="https://developer.chrome.com/docs/devtools/recorder/"><strong>Recorder</strong></a> last year and have been improving it over time.</p>
<p>Here are some of the new features that got added to the panel in recent months:</p>
<ul>
<li>It’s now possible to wait until elements are visible and clickable before continuing a recording.</li>
<li>Element selectors are better supported.</li>
<li>You can import and export recorded flows as JSON.</li>
<li>Double-click, mouse over, and right-click events can be recorded too.</li>
<li>There’s also an option to replay a recording slowly or step-by-step.</li>
<li>And, finally, the Recorder tool now supports extensions to export recordings to a variety of test automation formats, such as <strong>Cypress</strong>, <strong>WebPageTest</strong>, <strong>Nightwatch</strong>, or <strong>WebdriverIO</strong>.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71088936-4fcc-426f-a0b4-ed378b28d09f/23-devtools-updates-halloween-edition.png" /></p>
Miscellaneous Updates
<p>Phew, that was a lot! But we’re not done. Let’s wrap this up with a list of somewhat random but very useful features.</p>
<p>Chrome made a lot of source maps and stack traces improvements, providing a more stable and easier-to-use debugging experience. If you usually debug your JavaScript code with logs, now may be a good time to give <a href="https://developer.chrome.com/docs/devtools/javascript/">breakpoint debugging</a> a try and see if it speeds things up for you.</p>
<p>Talking about logging, they also made it possible to properly style logs with <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape codes</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5fac6de0-f25a-4c87-98b8-dcb301fa1ee5/3-devtools-updates-halloween-edition.png" /></p>
<p>Next, you can now pick colors from anywhere on your screen when changing colors in the Styles sidebar. </p>
<p><strong>Note</strong>: <em>This was made possible thanks to the <a href="https://developer.mozilla.org/en-US/docs/Web/API/EyeDropper_API">EyeDropper API</a>, which you can also use on your web pages.</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/050f11ca-ae01-4e11-b464-f521a06efdd4/12-devtools-updates-halloween-edition.png" /></p>
<p>Edge shipped a feature to publish and retrieve production source maps from Azure, making it much easier to securely debug your code in production even when you don’t want to publish source maps and original source code to your server.</p>
<p>Read more about <a href="https://learn.microsoft.com/en-gb/microsoft-edge/devtools-guide-chromium/javascript/publish-source-maps-to-azure">publishing your source maps</a> and <a href="https://learn.microsoft.com/en-gb/microsoft-edge/devtools-guide-chromium/javascript/consume-source-maps-from-azure">consuming them from DevTools</a>.</p>
<p>The team also opened a <a href="https://github.com/MicrosoftEdge/DevTools">new public feedback repository on GitHub</a> which you can use to report ideas, issues, and features or just discuss them.</p>
<p>Finally, they shipped a redesigned <strong>Welcome</strong> tool where you can find all sorts of useful videos and links to documentation.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e857c21c-ab2e-4c29-a7b5-91f8733a8b48/6-devtools-updates-halloween-edition.png" /></p>
<p>Switching to Firefox, the DevTools team continued to keep their <strong>Compatibility</strong> panel up to date with new <a href="https://github.com/mdn/browser-compat-data">browser compatibility data</a>, so you can get relevant cross-browser support issues right when debugging your CSS.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bb686ebd-a76b-4943-b4b1-22694531771b/5-devtools-updates-halloween-edition.png" /></p>
<p>The team also made it possible to disable and re-enable any event listener for a given element in the Inspector.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/879b4dbb-ead9-4f62-8315-176e9e437762/14-devtools-updates-halloween-edition.png" /></p>
<p>Finally, Edge just shipped a cool new experimental feature that enables one to type commands and access common browser and DevTools features from one keyboard shortcut.</p>
<p><a href="https://learn.microsoft.com/en-gb/microsoft-edge/devtools-guide-chromium/experimental-features/edge-command-palette">The Command palette experiment</a> lets you enter commands in the browser by pressing Ctrl+Q (note that prior to Edge 108, the shortcut was Ctrl+Shift+Space).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14592039-7182-4ea9-9a35-4193c740b696/2-devtools-updates-halloween-edition.png" /></p>
<p>And that’s it for today. I hope you found a few things that will be useful for your web development projects.</p>
<p>DevTools has gotten impressively full of features over the years, and it’s <a href="https://www.smashingmagazine.com/2022/05/whats-that-dev-tool/">hard to keep track</a>, but here are a few pointers that I hope will make it easier to discover new features:</p>
<ul>
<li>The <a href="https://www.youtube.com/playlist?list=PLNYkxOF6rcIBDSojZWBv4QJNoT4GNYzQD">Chrome DevTools What’s New</a> video playlist on YouTube.</li>
<li>The <a href="https://www.youtube.com/watch?v=LJxjFo4DuA0&amp;list=PL4z1-7pjJU6wCla3QZuWuWjsCB2hCnTvr">Edge DevTools What’s New</a> video playlist on YouTube.</li>
<li>The <a href="https://twitter.com/firefoxdevtools">@FirefoxDevTools</a> Twitter, where new features are often announced.</li>
<li>The <a href="https://webkit.org/blog/category/web-inspector/">WebInspector category</a> on the WebKit blog.</li>
</ul>
<p>And with this, thanks for reading, and if you have great DevTools tips you want to share with everyone, please drop us a comment!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Patrick Brosset)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dbfdc666-af60-48cf-9c7c-c9a1eb8ecb34/devtools-updates-oct-2022.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Understanding Privacy: A New Smashing Book Is Here]]></title>
            <link>https://smashingmagazine.com/2022/10/understanding-privacy-book-release/</link>
            <guid>https://smashingmagazine.com/2022/10/understanding-privacy-book-release/</guid>
            <pubDate>Wed, 19 Oct 2022 12:45:00 GMT</pubDate>
            <description><![CDATA[Meet <em>Understanding Privacy</em>, our brand new Smashing Book to <strong>make sense of privacy</strong>, and learn how to create inclusive, safe and privacy-aware digital experiences. eBook now available, print shipping in late November.]]></description>
            <content:encoded><![CDATA[<p>To many of us, privacy might feel like a complex, abstract concept. We can’t hold <strong>privacy</strong> in our hands, we can’t touch it, we can’t explore its volume or shape with our eyes or our fingertips. Surely it’s a <strong>part of each of us</strong>, yet it feels so intangible and so invisible — beyond reach and out of view.</p>
<p>So what <em>is</em> privacy? What exactly does it mean? How do we consider, manage and maintain privacy? And how dow do we design and build experiences that have privacy at their heart? That’s exactly what <em>Understanding Privacy</em> is all about: a <strong>practical guide to privacy on the web</strong>, from data collection and use of personal data to creating safe, inclusive experiences for everyone. <a href="#table-of-contents"><strong>Jump to table of contents ↓</strong></a></p>
<ul>
<li><strong>eBook now available</strong>.</li>
<li><strong>Printed books</strong> start shipping in <strong>late November 2022</strong>.</li>
<li><a href="https://www.smashingmagazine.com/provide/eBooks/understanding-privacy/understanding-privacy-sample-chapter.pdf">Download a free PDF sample</a> (11MB)</li>
<li><a href="/printed-books/understanding-privacy/"><strong>Get the book (Print Hardcover + eBook)</strong></a></li>
</ul>


    <a href="https://www.smashingmagazine.com/provide/eBooks/understanding-privacy/understanding-privacy-sample-chapter.pdf">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3509bd84-1307-4bb5-a00f-1b9da09b8acb/understanding-privacy-banner-opt.png" />
    </a>




About The Book
<p><em>Understanding Privacy</em> is a practical guide to the concepts and ideas that inform privacy on the web. It’s about all the fundamental values of privacy <em>as a concept</em>, which precede privacy <em>as a legal compliance issue</em>. It’s about the ways these concepts impact your work as a designer, a developer, or a project manager. And it’s about the ways you can adopt these principles to create a <strong>healthy, user-centric approach to privacy</strong> in everything you do.</p>

<p><a href="https://webdevlaw.uk/about/">Heather Burns</a>, a tech policy and regulation specialist, explains what she has experienced working on <strong>privacy from every angle</strong> — human rights, law, policy, and web development — in the simplest way possible, and in the most positive way possible, in ways you can <strong>understand, use, and adapt in your work</strong> on the web right away.</p>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5957a0ae-b5e1-4772-86cc-ccc8a797bb11/privacy-book-cover-tilted.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5957a0ae-b5e1-4772-86cc-ccc8a797bb11/privacy-book-cover-tilted.jpg" />
    </a>



    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee946184-9fbb-40b3-9fc0-e061e5043d6b/privacy-page-01.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee946184-9fbb-40b3-9fc0-e061e5043d6b/privacy-page-01.jpg" />
    </a>All chapters in the book have custom illustrations, highlighting the topic of the book.


<p>This book is <strong>not a legal reference manual</strong>. After reading it, you will have shifted your understanding from a negative view of privacy as a scary legal compliance obligation to a <em>positive view of privacy</em> as an opportunity to build and design a better web. <a href="https://www.smashingmagazine.com/provide/eBooks/understanding-privacy/understanding-privacy-sample-chapter.pdf"><strong>Download a free PDF sample</strong></a> (11MB).</p>

<p><em>288 pages. Written by Heather Burns. Cover design by Espen Brunborg. eBook now available, print shipping in late November.</em></p>

You’ll Learn:
<ul>
<li><strong>Fundamental concepts</strong>, definitions and frameworks behind privacy and data protection,</li>
<li><strong>Healthy approach to user privacy</strong> into everything you build and design,</li>
<li><strong>Common privacy issues</strong> and how you can make a difference,</li>
<li><strong>How to lay the ground</strong> for future developers, designers, and project managers to build a better web for tomorrow,</li>
<li><strong>The obligations we have</strong> to safeguard user privacy and health data.</li>
</ul>

<h3>Who Is This Book For?</h3>
<p><em>Understanding Privacy</em> is for <strong>designers</strong>, <strong>developers</strong>, and <strong>project managers</strong> who want to understand what privacy really is about and who want to integrate a healthy approach to user privacy into everything they do  not only to put their users first today but also to help build a better web for tomorrow.</p>



    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8168020-4fd7-4ca1-8c22-193d9e4b0d6e/privacy-page-03.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b8168020-4fd7-4ca1-8c22-193d9e4b0d6e/privacy-page-03.jpg" />
    </a>A double-spread of Understanding: an honest, practical and clear guide to privacy.



Table Of Contents
<div>
    
          
              <div>
                <div>
                  1. Privacy and You
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>In the book’s first section, “Privacy and You,” Heather reviews the <strong>fundamental concepts, definitions and frameworks</strong> behind privacy and data protection.</p>
             </div>
         
          
              <div>
                <div>
                  2. Privacy and Your Work
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>In the second section, “Privacy and Your Work,” Heather discusses how to <strong>integrate a healthy approach to user privacy</strong> into everything you do, whether you are a designer, a developer, or a project manager.</p>
             </div>
         
          
              <div>
                <div>
                  3. Privacy and Your Users
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>“Privacy and Your Users” covers issues around <strong>user privacy</strong> where you can make a difference. We’re going to learn how to consider the power dynamics of what you create, regardless of the role you play.</p>
             </div>
         
          
              <div>
                <div>
                  4. Privacy and Your Future
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>In “Privacy and Your Future,” Heather suggests a few <strong>critical areas</strong> that make the web a better place and lay the ground for future developers, designers, and project managers to build a better web for tomorrow’s users.</p>
             </div>
         
          
              <div>
                <div>
                  Postscript: Privacy and Health Data
                </div>
              </div>
              <div>
                  +
              </div>
          
          
              <div>
                <p>In the final section, “Privacy and Health Data,” Heather addresses an even more pressing recent issue: the obligations we have to safeguard user privacy and health data, and how to do it as best we can.</p>
             </div>
         
    
</div>

<p>288 pages. <strong>eBook now available, print shipping in late November.</strong> Written by Heather Burns. Cover design by Espen Brunborg.</p>

About the Author
<p><a href="https://twitter.com/WebDevLaw"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e0e633f8-d459-419c-9b2a-b60a828f9886/heather-burns-200px.jpg" /></a><em>Heather Burns</em> (<a href="https://twitter.com/WebDevLaw">@WebDevLaw</a>) is a <strong>tech policy professional</strong> and an advocate for an open Internet which upholds the human rights to privacy, accessibility, and freedom of expression. She’s been passionate about privacy since she built her first web site in 1996, and has educated thousands of professionals worldwide on the fundamentals of a healthy approach to protecting people and their data. She lives in Glasgow, Scotland.</p>


    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca0d2d65-3cb4-4f8e-9b15-1a5c6ed250d4/privacy-page-02.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca0d2d65-3cb4-4f8e-9b15-1a5c6ed250d4/privacy-page-02.jpg" />
    </a>The book comes with practical guidelines and checklists to keep in mind when designing and building with privacy in mind.


Reviews and Testimonials
<blockquote><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22df5559-41e1-4929-9bc2-31fe6a2d2c3b/mike-little-200px-opt.png" />“Heather's broad knowledge, experience, and ability to articulate these complex matters is nothing short of astounding. I’ve learned an amazing amount from her. She always <strong>informs and entertains</strong>, and she does so from the heart.”<br /><br /> <a href="https://twitter.com/mikelittlezed1">Mike Little</a>, Co-Founder of WordPress</blockquote>

<blockquote><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c56dfd7-f70b-41b3-8620-b638bbef6fa5/natasha-lomas-200px-opt.png" />“No more excuses for overlooking privacy: Heather’s guide is an <strong>essential toolbox</strong> for user-centric product developers and for anyone interested in building a better web. Expect the full sweep, from historical context and core concepts in US and EU privacy practice, to <strong>practical tips and advice</strong> — dispensed in highly readable style.”<br /><br /> <a href="https://www.twitter.com/riptari/">Natasha Lomas</a>, Senior Reporter, Techcrunch.com</blockquote>

<blockquote><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8bb9ec7-9ed0-47b1-8a3a-db97f38580e3/morten-rand-hendriksen-200px-opt.png" />“Privacy is an oft-talked about and rarely understood part of our modern digital lives. Heather has been on the forefront for the battle of our privacy for decades. In this book she makes the case for why privacy is one of the <strong>foundational pillars</strong> on which our society rests, and why eroding our privacy means eroding a cornerstone of our lives, our communities, and our democracy. A <strong>must-read for anyone</strong> working on or with the web.”<br /><br /> <a href="https://www.twitter.com/mor10/">Morten Rand-Hendriksen</a>, Senior Staff Instructor, LinkedIn Learning</blockquote>

<blockquote><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd7c0587-54c1-4f51-98a2-3e966f767854/robin-berjon-200px-opt.png" />“Privacy can seem complicated but it doesn’t need to be. Heather covers all that you need to know with <strong>astonishing clarity</strong>. This book gives you all you need to understand and handle privacy work, and makes for <strong>great teaching material</strong> that experts could rely on.”<br /><br /> <a href="https://www.twitter.com/robinberjon/">Robin Berjon</a>, former Head of Data Governance at The New York Times</blockquote>

Technical Details
<ul>
<li>ISBN: 978-3-945749-64-7 (print)</li>
<li><strong>Quality hardcover</strong>, stitched binding, ribbon page marker.</li>
<li>Free worldwide <strong>shipping from Germany, starting in late November 2022</strong>.</li>
<li><strong>eBook is already available</strong> as PDF, ePUB, and Amazon Kindle.</li>
<li><a href="/printed-books/understanding-privacy/"><strong>Get the book (Print Hardcover + eBook)</strong></a></li>
</ul>



    <a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea305ed3-2a87-4480-898a-4d18893e1291/thanks-1.jpg">
    <img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea305ed3-2a87-4480-898a-4d18893e1291/thanks-1.jpg" />
    </a>



Community Matters ❤️
<p>Producing a book takes quite a bit of time, and we couldn’t pull it off without the support of our wonderful <strong>community</strong>. A huge shout-out to Smashing Members for the kind, ongoing support. The eBook is and always will be <a href="https://www.smashingmagazine.com/membership">free for <em>Smashing Members</em></a>. Plus, Members get a friendly discount when purchasing their printed copy. Just sayin’! ;-)</p>

More Smashing Books &amp; Goodies
<p>Promoting best practices and providing you with practical tips to master your daily coding and design challenges has always been (and will be) at the <strong>core of everything we do</strong> at Smashing.</p>

<p>In the past few years, we were very lucky to have worked together with some talented, caring people from the web community to publish their wealth of experience as <a href="/printed-books/">printed books that stand the test of time</a>. Steven and Stefan are two of these people. Have you checked out their books already?</p>

<div>

<div><a href="/printed-books/touch-design-for-mobile-interfaces/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b14658fc-bb2d-41a6-8d1a-70eaaf1b8ec8/touch-design-book-shop-opt.png" /></a></div><h4><a href="/printed-books/touch-design-for-mobile-interfaces/">Touch Design for Mobile Interfaces</a></h4><p>How touchscreen devices work and how people use them.</p><p><a href="/printed-books/touch-design-for-mobile-interfaces/">Add to cart $44</a></p>

<div><a href="/printed-books/typescript-in-50-lessons/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2f2c6d6-4e85-449a-99f5-58bd053bc846/typescript-shop-cover-opt.png" /></a></div><h4><a href="/printed-books/typescript-in-50-lessons/">TypeScript In 50 Lessons</a></h4><p>Everything about TypeScript, its type system and its benefits.</p><p><a href="/printed-books/typescript-in-50-lessons/">Add to cart $44</a></p>

<div><a href="/printed-books/checklist-cards/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/efffa8a0-82a0-415a-8aa5-8684a32083eb/checklist-cards-box-opt.png" /></a></div><h4><a href="/printed-books/checklist-cards/">Smart Interface Design Patterns</a></h4><p>Deck of 166 cards with common UX questions to ask.</p>
<p><a href="/printed-books/checklist-cards/">Add to cart $39</a></p>

</div>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3509bd84-1307-4bb5-a00f-1b9da09b8acb/understanding-privacy-banner-opt.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[WordPress Full-Site Editing: A Deep Dive Into The New Feature]]></title>
            <link>https://smashingmagazine.com/2022/10/wordpress-full-site-editing/</link>
            <guid>https://smashingmagazine.com/2022/10/wordpress-full-site-editing/</guid>
            <pubDate>Mon, 17 Oct 2022 12:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Nick Schäferhoff will take a deep dive into WordPress Full-Site Editing, examine the tools it provides for theme development, and provide a tutorial on how to use it to make changes to your site.]]></description>
            <content:encoded><![CDATA[<p>Full-Site Editing is one of the main improvements added to the WordPress platform with <a href="https://wordpress.org/support/wordpress-version/version-5-9/">version 5.9</a>. It allows users to make sweeping changes to their website design and layout via a graphic interface, thus moving WordPress closer to the experience of a page builder. In addition, it offers new ways to create and customize themes.</p>
<p>These drastic changes have great consequences not only for the WordPress user experience but also for large parts of the platform’s ecosphere. For that reason, in this post, I am planning to take a deep dive into <strong>WordPress Full-Site Editing</strong> (or <strong>FSE</strong> for short, there are also <a href="https://make.wordpress.org/core/2022/07/27/giving-fse-a-more-user-friendly-name/">discussions about changing the name</a> because it’s a bit of a mouthful).</p>
<p>In the following, I will first talk about what Full-Site Editing is and provide a tutorial on how to use it to make changes to your site. I will also examine the tools it provides for theme development and close with a discussion of how the arrival of this feature will impact developers, theme authors, and existing page-builder plugins.</p>
<p><strong>Table of Contents</strong></p>
<ul>
<li><a href="#what-is-wordpress-full-site-editing">What Is WordPress Full-Site Editing?</a></li>
<li><a href="#how-to-use-full-site-editing-to-customize-wordpress">How To Use Full-Site Editing To Customize WordPress</a></li>
<li><a href="#full-site-editing-for-developers-and-designers">Full-Site Editing for Developers And Designers</a></li>
<li><a href="#consequences-of-full-site-editing-for-the-wordpress-ecosphere">Consequences Of Full-Site Editing For The WordPress Ecosphere</a></li>
<li><a href="#full-site-editing-further-resources">Further Resources</a></li>
<li><a href="#final-thoughts-on-wordpress-full-site-editing">Final Thoughts</a></li>
</ul>
<p>Let’s get started.</p>
<p><strong>Quick note</strong>: <em>While FSE was first added to WordPress in version 5.9, it has since been further enhanced by <a href="https://wordpress.org/support/wordpress-version/version-6-0/">WordPress 6.0</a>. This post includes the latest changes.</em></p>
What Is WordPress Full-Site Editing?
<p>In a nutshell, Full-Site Editing means that WordPress now offers the ability to create and edit page templates and elements like headers and footers in a block-based graphic user interface.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4909b291-8632-444c-a4ee-903d1445ea36/58-wordpress-full-site-editing.jpg" /></p>
<p>This is part of phase two of the Gutenberg project and the preliminary culmination of a development that saw its beginning with the introduction of the <a href="https://www.smashingmagazine.com/2018/08/complete-anatomy-gutenberg-wordpress-editor/">WordPress block editor</a> in WordPress 5.0. Since its initial release, the block workflow has branched out to other parts of the WordPress user interface. For example, you can now also use it for widget management.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/57eb0d7b-ba93-4909-a4af-91eef8e1b63f/23-wordpress-full-site-editing.jpg" /></p>
<p>One of the main goals of Full-Site Editing is to provide users with a singular workflow for making changes to their WordPress sites. In the past, you often needed to know several different systems to create a new menu, compose a page or post content, populate the sidebar, or adjust the color scheme. Even more complex changes required you to know <a href="https://www.smashingmagazine.com/2015/06/wordpress-custom-page-templates/">how to edit page template files</a> or write CSS. With Full-Site Editing, you can now make changes to everything in pretty much the same way (even if much of it still happens in different menus).</p>
<p>For everyday users, the benefit is reduced dependence on front-end developers. Site owners can now do a lot by themselves that, in the past, would require technical chops or professional help, such as making changes to page templates. Plus, those changes are now visible in the editor right away instead of having to go back and forth between the front end and back end of your site or even a code file.</p>
<p>At the same time, Full-Site Editing makes it easier for theme developers and designers to create markup and allows for quicker templating.</p>
<h3>Main Features</h3>
<p>Here are the main building blocks that Full-Site Editing consists of:</p>
<ul>
<li><strong>Page templates and template parts</strong><br />The central attractions are two new editor interfaces that allow you to customize page layouts similar to the normal content editor. You can move page elements around, change their design (colors, fonts, alignment, and so on), and add or remove them at will. The same is also possible for single template parts such as headers and footers. It’s even possible to edit them separately. Plus, you can export your templates to use and distribute them as themes.</li>
<li><strong>Global styles and <code>theme.json</code></strong><br />A common feature in WordPress page builder plugins, Full-Site Editing allows you to define global styling for your entire site, such as colors and typography, in a central place. In the past, you would have to change the styling in different locations (e.g., the Customizer and block editor). FSE also introduces the <code>theme.json</code> file, which acts as a nexus for different APIs and contains the majority of styling information in block-based themes.</li>
<li><strong>Template blocks and block patterns</strong><br />Full-Site Editing adds new block types to WordPress and the WordPress editor. These include static blocks like the site logo but also dynamic elements such as blocks for navigation, post titles, and featured images. These change according to settings in other places. There is even a full-fledged query block that’s basically the WordPress PHP loop. It lets you display a list of posts anywhere on the page. Each block also comes with its own design and configuration options.</li>
</ul>
<p>Sounds exciting? Then let’s dive into how to use this new WordPress feature practically.</p>
How To Use Full-Site Editing To Customize WordPress
<p>In the following, I will first go over how to take advantage of Full-Site Editing as a user. Later, we will also examine what makes this a useful feature for developers and theme designers.</p>
<h3>Prerequisites For Using FSE</h3>
<p>In order to take advantage of Full-Site Editing, the most important thing is that you have a WordPress site running at least version 5.9. You can also use a lower version, but then you need to have the <a href="https://wordpress.org/plugins/gutenberg/">Gutenberg plugin</a> installed and up to date.</p>
<p>The second thing you require is a block theme. That’s a theme that can take advantage of the new feature. We will go over how these are different from classic themes later. For now, a good option is <a href="https://wordpress.org/themes/twentytwentytwo/">Twenty Twenty-Two</a>, which also came out with WordPress 5.9. I will be using it for this Full-Site Editing tutorial. Refer to the resources section at the end for other options.</p>
<p>Finally, if you are giving WordPress Full-Site Editing a spin for the first time, I recommend using a staging site or <a href="https://www.smashingmagazine.com/2018/04/wordpress-local-development-beginners-setup-deployment/">local development environment</a> for it. That way, you can make all the mistakes you want without anyone knowing.</p>
<h3>Overview Of The User Interface</h3>
<p>When you are logged into your test site, you can access Full-Site Editing via <strong><em>Appearance &gt; Editor</em></strong> (also notice that the widget and Customizer options are missing).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1c63ccdd-06d2-4758-b177-c4a4e96e2b00/44-wordpress-full-site-editing.jpg" /></p>
<p>An alternative way to get there is via the <strong><em>Edit Site</em></strong> link in the WordPress admin taskbar on the front end. Either will land you on the main editor interface. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6200923d-09cf-4ff1-a1c8-07b58bf02bd7/60-wordpress-full-site-editing.jpg" /></p>
<p>Let’s walk through all the options available here:</p>
<ol>
<li><strong>Top left corner:</strong> Let’s start here because it’s easy to overlook. A click on the WordPress logo opens up a menu to edit templates and template parts. It also has a link to return to the WordPress dashboard.</li>
<li><strong>Top bar:</strong> This should look familiar to anyone who has used the Gutenberg editor before. It contains the option to add blocks and block patterns, toggle between editing and selecting blocks, and undo/redo buttons. You can also open a list view of the current page, select different template parts, and jump directly to them.</li>
<li><strong>Top right corner:</strong> Contains the buttons to save changes and preview the design on different screen sizes. The gear icon opens up settings for templates as a whole and individual blocks. Besides, that is the option to customize Global Styles. The three-dot icon contains display options for the editor, the ability to export templates and template parts, and access to the welcome guide.</li>
<li><strong>Center:</strong> In the middle is the main editing screen. Here is where you will make changes to page templates and work with blocks. It is also an accurate representation of what your design will look like and contains some controls to add blocks and other elements to the page.</li>
</ol>
<p>Most of these are togglable, so you can only have those options open that you really need and want.</p>
<h3>Global Style Presets</h3>
<p>As mentioned above, you can access this menu by clicking the half-black, half-white circle in the top right corner. It offers two types of styling options: for the entire website and for individual blocks. What exactly is available here depends on your theme.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/41971280-0ee3-458c-a785-6bdcd504c6a4/6-wordpress-full-site-editing.png" /></p>
<p>For Twenty Twenty-Two, you have options for typography, colors, and layout. We will get to those below. For now, let’s turn to the most exciting part of the Global Styles menu — the preset color themes. You can find them when you click on <strong><em>Browse styles</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d31581b2-88ca-4442-ac1c-19961e273ed6/19-wordpress-full-site-editing.png" /></p>
<p>In this menu, developers have the possibility to offer styling presets for the entire theme. Hover over one of the options to see a preview of its color and font scheme, and then adopt the look for your entire theme with a single click.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c861bfc7-9610-46e9-8b33-0c99f9b35576/64-wordpress-full-site-editing.jpg" /></p>
<p>I really like this feature as it offers users different versions of the same theme that they can easily use as jump-off points for their own creations. It’s a bit like themes shipping together with a number of their own <a href="https://www.smashingmagazine.com/2016/01/create-customize-wordpress-child-theme/">child themes</a>. You can also go back to the previous state by clicking the three dots at the top and choosing <strong><em>Reset to defaults</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/997dfd9d-15a7-4737-8379-a0a2fc9967e2/54-wordpress-full-site-editing.png" /></p>
<h3>Global Styles: Typography</h3>
<p>When you click on <strong><em>Typography</em></strong>, you get to a submenu where you can choose whether to customize the styling for general text or links.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ee1f896-eb04-491b-a573-aec0e9146193/43-wordpress-full-site-editing.png" /></p>
<p>Another click gets you to a subsection where you can make the actual changes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8714915f-e8d7-436c-b5a6-d80c40c184a2/55-wordpress-full-site-editing.png" /></p>
<p>As you can see, it’s possible to customize the font family, size, line height, and appearance, meaning font-weight and slant. Options here depend on the theme as well. For example, under <strong><em>Font family</em></strong>, you can only choose <strong><em>System Font</em></strong> and <strong><em>Source Serif Pro</em></strong> as these are the only options Twenty Twenty-Two ships with.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/518d8982-a6f8-49dc-b0ee-87413de23659/16-wordpress-full-site-editing.png" /></p>
<p>However, this is also due to the fact that full support for (local) web fonts only became available in WordPress 6.0, and this theme came out before that.</p>
<p>Likewise, the numbers under <strong><em>Size</em></strong> represent defaults set by the theme authors. You also have the option to click on the little icon in the upper right corner to set a custom value.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8493b12a-23d9-45a0-a2a3-b0f55712769f/7-wordpress-full-site-editing.png" /></p>
<p><strong><em>Line height</em></strong> should be self-explanatory. The <strong><em>Appearance</em></strong> drop-down menu lets you choose font variations from a list.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/99a9ed3e-ef5d-4c77-8806-bac8baeb4232/48-wordpress-full-site-editing.png" /></p>
<p>If you pick any of these options, changes will automatically become visible on the editing screen.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf204293-1392-487e-a6ea-cb2781daf0f0/45-wordpress-full-site-editing.jpg" /></p>
<p>If you don’t like the modifications you have made, you can always reset to defaults, as mentioned above.</p>
<h3>Global Colors And Layout</h3>
<p>Under <strong><em>Colors</em></strong>, you can change the hue of different elements (duh!).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6940e4d3-5cd4-4f0e-bd6d-da7f63039230/10-wordpress-full-site-editing.png" /></p>
<p>What’s interesting here is the <strong><em>Palette</em></strong> option, where the theme can provide its own color palette, including gradients. This is besides the default options Gutenberg offers and custom colors that users can create.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05f70897-f972-4e98-990c-20b6065d33ab/3-wordpress-full-site-editing.png" /></p>
<p>Besides that, just like for typography, the theme provides different options for elements for which you can change colors. In Twenty Twenty-Two, that’s <strong><em>Background</em></strong>, <strong><em>Text</em></strong>, and <strong><em>Links</em></strong>.</p>
<p>After choosing any of these, you get to a screen where you can easily pick a color or gradient from available options or create your own. When you do, your pick automatically translates to what you see on the editing screen.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14b4130d-de51-447d-8a4b-9c444b5cc63e/63-wordpress-full-site-editing.jpg" /></p>
<p>There is even a color picker that lets you set custom hues or enter color codes in RGB, HSL, or HEX format.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52a1ea42-5a43-47d2-b525-fc84228e4d0c/62-wordpress-full-site-editing.jpg" /></p>
<p>Finally, in this theme, the <strong><em>Layout</em></strong> option only allows you to add padding around the homepage.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1372202-d0ab-4628-a92d-0bd23bb16218/25-wordpress-full-site-editing.jpg" /></p>
<h3>Changing Styles For Individual Blocks</h3>
<p>Styling defaults are not only available for the website as a whole, but you can also set them for individual blocks. For that, you find an option in Global Styles at the bottom where it says <strong><em>Blocks</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8792f474-3a02-43e9-923e-ec260e555fe6/14-wordpress-full-site-editing.png" /></p>
<p>When you click it, you find a list of all the WordPress default blocks.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2e37aace-e0d1-479c-931e-c13255aa2327/35-wordpress-full-site-editing.png" /></p>
<p>Click those in turn to find similar options to customize their design on a per-block basis. For example, below, I have set the link color globally to blue but set the color for the <strong><em>Post Title</em></strong> block (which is also a link) to orange. As a consequence, orange overwrites the initial value, and the title comes out in that color.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2af2285d-c09a-4f2c-bfc7-8a68a86bcf34/37-wordpress-full-site-editing.jpg" /></p>
<p>If you have ever worked with CSS, this principle should be very familiar. Set some site-wide standards at the top of the style sheet and then overwrite them with customizations further down in the <a href="https://www.smashingmagazine.com/2022/01/introduction-css-cascade-layers/">cascade</a>. It’s the same thing here.</p>
<h3>Moving Blocks Around</h3>
<p>Making layout changes works the same way as in the main WordPress block editor. Everything you see on the screen is made up of blocks. Some may be combined as groups or block patterns, but they are blocks nevertheless.</p>
<p>As such, you can move and customize them however you want. For example, the main part of the homepage is the <strong><em>Query Loop</em></strong> block, whose function is to serve up the latest blog posts. However, it, too, is made up of different blocks, namely <strong><em>Post Title</em></strong>, <strong><em>Post Featured Image</em></strong>, <strong><em>Post Excerpt</em></strong>, <strong><em>Post Date</em></strong>, <strong><em>Spacer</em></strong>, and <strong><em>Pagination</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33eef055-92e6-4185-95fc-ff5da40bb52d/38-wordpress-full-site-editing.jpg" /></p>
<p>If you want to change something about the way it looks, you can very easily do so. For example, you may click on the <strong><em>Post Featured Image</em></strong> block and then use the arrows in the toolbar to move it below or above the post title.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73b828d0-3e64-4c33-b8be-bf9c2caad832/46-wordpress-full-site-editing.jpg" /></p>
<p>Alternatively, hover over the block and then use the Drag button (which looks like six dots) to move it to another position. If you hit Save after this, it will translate to the design on your site.</p>
<h3>Using Block Options</h3>
<p>In addition to the ability to move them around, every block also comes with its own settings. Like in the Gutenberg content editor, you can access those via the gear icon in the upper right corner. When a block is selected, you will see its customization options there.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30d07c2e-8013-4f7c-bf06-33cf30aa5918/30-wordpress-full-site-editing.jpg" /></p>
<p>What’s available in this place depends on the block you are working with. For example:</p>
<ul>
<li><strong>Post Featured Image</strong>: Has options to add the margin, padding, and configure image dimensions.</li>
<li><strong>Pagination</strong>: Control the justification and orientation of its elements, wrapping, colors, and whether to show arrows, chevrons, or nothing as indicators.</li>
<li><strong>Post Title</strong>: Besides setting colors, you can decide if the title should be a link, open in a new tab, or have a <code>rel=</code> attribute. You can also control colors and typography (including the ability to use <strong><em>Title Case</em></strong>) and add a margin.</li>
</ul>
<p>You get the gist. Be aware that there are often more settings hidden that you can access via a plus or three-dot icon within the sections.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05d03f1f-99f3-40fe-a8a1-218fd4ad8aae/42-wordpress-full-site-editing.png" /></p>
<p>In addition, there are settings in the toolbar atop blocks when they are selected. You should not forget those as they can be decisive. For example, in the case of the <strong><em>Post Title</em></strong> block, it’s where you determine what order of heading (h1-h6) it takes, an important factor for <a href="https://www.smashingmagazine.com/smashing-guide-search-engine-optimization/">SEO</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f1520811-c801-48fc-ae90-b92a7890cc23/18-wordpress-full-site-editing.jpg" /></p>
<h3>Adding And Removing Blocks</h3>
<p>Of course, you can not just customize the available blocks, but you are also able to add your own. This works the same way as in the content editor and comes with different options:</p>
<ol>
<li>Hover over an empty space in the template until a plus button appears, and click it. Then search or choose what you want from a list of blocks.</li>
<li>Click existing blocks and use the options button in the top bar to pick <strong><em>Insert before</em></strong> and <strong><em>Insert after</em></strong>.</li>
<li>Use the plus button in the upper left corner to see and search the full list of available blocks, then drag and drop them where you want.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eb248392-5941-4973-a976-12754cadaccc/47-wordpress-full-site-editing.jpg" /></p>
<p>In some places and existing blocks, you will also find icons to add more blocks. Plus, you have the ability to add block patterns, but we will talk about this further below.</p>
<p>Leaves the question, how is any of this helpful?</p>
<p>Well, it means you can easily add both static and dynamic content to the homepage. An example would be a heading and paragraph above the <strong><em>Query Loop</em></strong> block as an introduction to your blog.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cae44414-06bb-490c-a884-21f23c777962/34-wordpress-full-site-editing.jpg" /></p>
<p>Naturally, you can also remove blocks you don’t want just as easily. Simply select one and hit the Del or backspace button on your keyboard, or remove it via the block options.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8035323-7def-4f02-ba5f-9dc7a2226a37/5-wordpress-full-site-editing.jpg" /></p>
<p>You also have the ability to open a list view at the top (the icon with three staggered lines) and navigate to blocks from there or choose to delete them right away.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4a382fa-065d-4658-88ce-bf8d8e125667/4-wordpress-full-site-editing.jpg" /></p>
<p>This option also gives you a great overview of the block structure of whatever part of the site you are currently editing.</p>
<h3>Exchanging And Editing Template Parts</h3>
<p>Template parts are entire sections inside templates that you can exchange as a whole and modify separately. In the case of Twenty Twenty-Two, that is the header and footer. You can see this in the template options on the right or when you click the arrow in the top bar.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/515f77d2-b3c0-4775-8b38-df8f2c70951c/27-wordpress-full-site-editing.jpg" /></p>
<p>Template parts are just groups of blocks on the page, so you can edit them as described above. However, what’s special about them is that themes can offer variations that allow you to change the entire part with one click.</p>
<p>For example, when you select the header in the example, it will show a <strong><em>Replace</em></strong> option in the settings bar at the bottom.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3c92ade-7566-43b3-8e5f-7a988ab2c828/33-wordpress-full-site-editing.jpg" /></p>
<p>When you click it, you can see the variations the theme offers for this template part, as well as fitting block patterns.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/92f8db23-1200-4e14-b645-2913f4a67ce3/53-wordpress-full-site-editing.jpg" /></p>
<p>Twenty Twenty-Two has several default options to choose from. Click any of them, and Full-Site Editing will automatically replace the entire header with the new option.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2300801f-dde4-4cf8-82d8-6c3aed0ffe76/21-wordpress-full-site-editing.jpg" /></p>
<p>The same works for the footer, of which Twenty Twenty-Two also has a few to offer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/20842738-183d-40f6-a90d-cd99753d5791/17-wordpress-full-site-editing.jpg" /></p>
<h3>Customizing And Creating Template Parts</h3>
<p>To edit template parts separately, click on the WordPress logo in the upper left corner to open the following menu.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82bbaf4b-3cc1-4f19-9a77-50529d31a3a8/13-wordpress-full-site-editing.jpg" /></p>
<p>At the bottom, you will find a menu item called <strong><em>Template Parts</em></strong>. Click it to see a list of all available template parts on your site.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5aebea1-6e4e-46bb-b25a-aab9811ff2ac/15-wordpress-full-site-editing.jpg" /></p>
<p>Alternatively, you can also select a template part and choose to edit it from its options.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0d4a7094-8932-4b7f-9fd8-e494822ac855/26-wordpress-full-site-editing.jpg" /></p>
<p>In the <strong><em>Template Parts</em></strong> menu, click <strong><em>Add New</em></strong> in the upper right corner to create additional ones. This is useful if you want to make another version of the footer, for example. The cool thing is when you click it, besides asking for a name, WordPress automatically gives you templates for both header and footer, so you don't have to start from scratch (unless you want to).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fcc71ff-d844-42e2-b8b7-3d68af957755/40-wordpress-full-site-editing.jpg" /></p>
<p>Besides that, you may also just click on existing parts in the list to edit them. This works the same way as in the main editor. The only thing that is different for template parts is that you have handles on the left and right that you can use to shrink and expand the size in order to check its behavior on smaller screens, i.e., mobile devices.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9e8ed588-8e71-422d-bda3-229684243527/39-wordpress-full-site-editing.jpg" /></p>
<p>Just like a template file, anything you change and save here will translate to all pages and templates that use this part.</p>
<p>Finally, if you have set up a group of blocks on the main screen, you can turn them into a template part as well. Click the options in the main screen or in the list view and pick <strong><em>Make template part</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8f6656e-1408-4409-8307-fff8fa91e301/51-wordpress-full-site-editing.jpg" /></p>
<p>You need to give it a name and choose what area it belongs to. When you then save it, it is available as a template part.</p>
<h3>Editing Page Templates</h3>
<p>In the WordPress logo menu, there is also an item called <strong><em>Templates</em></strong>. Unsurprisingly, it contains a list of all page templates available on your site, from the 404-page over archives and single pages to single posts.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d08f215-4cbe-465c-9ec5-a92c2463877d/49-wordpress-full-site-editing.jpg" /></p>
<p>Page templates are usually files that control the basic layout of different types of content. If you change the template, all content of that type changes, too. With Full-Site Editing, you can edit existing templates and create your own in the user interface instead of a code editor.</p>
<p>Note, however, that FSE only lets you create standard page templates via <strong><em>Add New</em></strong>. More on that soon.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/229c6e85-3aa2-48a1-960e-849163e99c5d/24-wordpress-full-site-editing.png" /></p>
<p>Something that comes especially handy here (and also for template parts) is block patterns. These are predesigned layouts consisting of several blocks you can add to website pages to instantly create entire sections. Examples include newsletter sign-up forms, pricing tables, and event lists, but also simple things like a styled divider or an image with a quote or caption.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1691d53-95e5-463d-bdae-711b00b4b941/57-wordpress-full-site-editing.jpg" /></p>
<p>Patterns allow you to put together entire designs quickly. They are easy to use, too! When editing a template, simply click the plus symbol in the upper left and go to the <strong><em>Patterns</em></strong> tab.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/be39afa1-e279-47a6-8cf4-60a2bda5ca74/41-wordpress-full-site-editing.jpg" /></p>
<p>Filter the patterns via the drop-down menu at the top, e.g., by featured patterns, footers, pages, or buttons. If you find something you like, simply drag and drop it on the page. You can also search for something specific, like a “header” at the top, which will even show blocks from the <a href="https://wordpress.org/support/article/block-directory/">WordPress block directory</a>.</p>
<p>For a better overview, it helps to click on <strong><em>Explore</em></strong> to access the block pattern explorer.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1be62dac-758e-43a7-8562-ad7dbbb098d8/52-wordpress-full-site-editing.jpg" /></p>
<p>This shows the block patterns in a larger window with the ability to search and filter them on the left. A click on a pattern you like automatically adds it to the template editor, where you can position and customize it as usual.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6dd1947-d6c5-415c-ac17-2db2685e5458/22-wordpress-full-site-editing.jpg" /></p>
<p>By the way, you can clear all customizations you have made for individual templates by clicking the three-dot icon in the <strong><em>Template</em></strong> menu and choosing so.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/985fa90e-5948-47de-9dbe-f7f3ed9b259c/2-wordpress-full-site-editing.jpg" /></p>
<h3>Adding New Block Patterns</h3>
<p>Besides using what’s available, you also can add external block patterns from the <a href="https://wordpress.org/patterns/">pattern directory</a>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9580619-f362-4b41-a68d-ede4426609f0/31-wordpress-full-site-editing.jpg" /></p>
<p>Search and filter to your needs. If you find something you like, simply use the Copy Pattern button on the pattern page to get it on your site.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/768ec223-89e2-47ed-aa32-ec58376269d6/20-wordpress-full-site-editing.jpg" /></p>
<p>After that, go back to the Full-Site Editing editor and paste it. The pattern will then show up there.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c48a6ca6-b880-42ce-98d6-39216d52571e/32-wordpress-full-site-editing.jpg" /></p>
<p>If you like it and likely want to use it again, click the three dots in the options bar and choose <strong><em>Add to Reusable blocks</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32a6744c-0dde-4b9b-8afd-521212b701fa/56-wordpress-full-site-editing.jpg" /></p>
<p>That way, it will, from now on, be available in the block menu under <strong><em>Reusable</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/40582956-ae89-4e1f-a659-480033930e31/9-wordpress-full-site-editing.jpg" /></p>
<h3>Using The Standalone Templates Editor</h3>
<p>There is a second way to edit and create page templates, which happens in the normal Gutenberg content editor. It offers less complexity than the site editor interface (e.g., no access to other templates) but works similarly.</p>
<p>Simply create a new post or page, then, in the document settings sidebar, locate the <strong><em>Template</em></strong> panel below <strong><em>Status &amp; visibility</em></strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c517526f-5b69-4f63-bf8a-f30c50645c47/1-wordpress-full-site-editing.jpg" /></p>
<p>Here, it lists your current template and makes other options available in the drop-down menu. You can edit what’s already there via the <strong><em>Edit</em></strong> button or create a new template by selecting <strong><em>New</em></strong>. Each opens the more limited template editing experience.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23e920c0-a48c-4be4-b33b-4a643eec8bee/11-wordpress-full-site-editing.jpg" /></p>
<p>Edit and save the template in the same way as in the site editor. Anything you create this way will also show up in the list of templates in the Full-Site Editing editor.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5549ef0-e1d2-404e-b629-17afb0d21280/65-wordpress-full-site-editing.jpg" /></p>
<h3>Available Blocks For Templating</h3>
<p>To make templating in FSE possible, the developers have added a number of dynamic blocks that can pull content from the database depending on the following:</p>
<ul>
<li>Site title, tagline, and logo;</li>
<li>Post title, featured image, content, excerpt, author, avatar, author biography, date, tags, categories, next and previous post, read more;</li>
<li>Post comments, single comment, comments query loop, author, date, content, count, comment form, and link;</li>
<li>Archive title and term description;</li>
<li>Query loop, post list, post template, pagination;</li>
<li>Template part.</li>
</ul>
<p>These are also available in the normal WordPress editor. There are more to come in future versions, and you can get early access to them via the Gutenberg plugin.</p>
<h3>Preview And Save Changes</h3>
<p>When you have made all the changes you want, you have the option to preview them in different screen sizes by clicking <strong><em>Preview</em></strong> in the upper right corner.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5f0013de-7ae8-4081-b66e-94b33c49fd91/8-wordpress-full-site-editing.jpg" /></p>
<p>If you are satisfied, a click on Save will make the modifications permanent. WordPress will also list which templates and template parts your changes will affect.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ce0fb1f4-2830-4001-a15d-6dec239d44f3/36-wordpress-full-site-editing.png" /></p>
<p>That way, if you want to discard them in one place but keep them elsewhere, you can do so. Simply uncheck those components where you don’t want to save your changes. Click Save again, and your choices will translate to the front end of your site.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4562e844-9196-4be3-98cc-cf7885cf9680/61-wordpress-full-site-editing.png" /></p>
Full-Site Editing For Developers And Designers
<p>Full-Site Editing is also a useful tool for developers. You can use the interface to create templates and then export them as files to add to and publish as themes.</p>
<h3>A Quick Primer On Block Theme Architecture</h3>
<p>To take advantage of this, you need to be aware that FSE-ready block themes have a different architecture than classic WordPress themes. For one, the template and template-part files for Full-Site Editing no longer contain PHP but are HTML files with block markup.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a51ac91c-0739-4544-bb05-797fd4d457cc/28-wordpress-full-site-editing.jpg" /></p>
<p>Instead of <code>style.css</code>, styling is mostly taken over by <code>theme.json</code>. Here is where you set up styles for the block editor and individual blocks, styling presets, as well as CSS defaults (both for the front-end and backend editor). In fact, <code>theme.json</code> is so powerful that, by modifying it, you can change the style of an entire website. </p>
<p></p><blockquote><p>Last week I created a quick demo of how the visual aesthetic of Twenty Twenty-Two can be drastically changed through its theme.json settings. This example swaps the default json file for one with different font, color, duotone, and spacing values. <a href="https://t.co/ab9tyGwLOS">pic.twitter.com/ab9tyGwLOS</a></p>— kjellr (@kjellr) <a href="https://twitter.com/kjellr/status/1451536195616395272?ref_src=twsrc%5Etfw">October 22, 2021</a></blockquote> <p></p>
<p>This also allows you to switch between different sets of global styles (i.e., <code>theme.json</code> files) in the same theme. It’s a feature that only arrived in WordPress 6.0.</p>
<p>Relying mostly on <code>theme.json</code> greatly reduces CSS in other places. For example, Twenty Twenty-Two’s <code>style.css</code> is only 148 lines long. For comparison, its predecessor Twenty Twenty-One has almost 6,000 lines in its style sheet.</p>
<p>In addition, <code>theme.json</code> uses a whole different kind of markup. Yet, you could write an entire article just on this one file, so you are better served to start with the <a href="https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-json/">documentation</a> for details. </p>
<p>The minimum requirements for a block theme are to have an <code>index.php</code>, <code>style.css</code>, and an <code>index.html</code> file in a <strong><em>templates</em></strong> folder. The latter is what marks the theme as a block theme to WordPress.</p>
<p>If you want to add template parts, you will place those in a <strong><em>parts</em></strong> folder. Having a <code>functions.php</code> and <code>theme.json</code> files is optional. Finally, you can also include a <strong><em>styles</em></strong> folder for global style presets. For example, this can include different color schemes for the theme.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/939b4152-5f64-4942-b7fc-8d29991fd802/29-wordpress-full-site-editing.png" /></p>
<p>Besides the changed structure, you also have different ways of creating template files when using a block theme. While you can still do it manually, using the new WordPress interface is also possible.</p>
<h3>Using FSE Or The Template Editor To Create Theme Files</h3>
<p>If you want to use the page editors to create templates, the first step is to simply set up your templates as described in the first part of this article. One important option here is to know that you can use the <strong><em>Advanced</em></strong> settings for template-part blocks to change their type of HTML element.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5020bdd0-26ff-413b-9e1e-488b9ea6b9c3/59-wordpress-full-site-editing.png" /></p>
<p>When satisfied, you can download all your theme files at once. The option for that is available in the <strong><em>More tools &amp; options</em></strong> menu, which you access by clicking the three dots in the upper right corner of the Full-Site Editing screen.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f407e26b-a352-4265-b476-74e0655763d8/50-wordpress-full-site-editing.jpg" /></p>
<p>Here, locate the <strong><em>Export</em></strong> option. It will automatically download all template and template part files as a zip. Simply unpack them, and you can use them for your theme.</p>
<h3>Manually Creating Block Theme Templates</h3>
<p>Of course, it’s also possible to create template files by hand. For that, you just need to be familiar with block markup.</p>
<p>For the most part, these are just HTML comments that contain the name of a block prepended with <code>wp:</code>. Some of them are self-containing. For example, here’s how to add a site-title block to the template:</p>
<pre><code>&lt;!-- wp:site-title /--&gt;
</code></pre>

<p>Others, like paragraphs, function like brackets:</p>
<pre><code>&lt;!-- wp:paragraph --&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;
</code></pre>

<p>You can also call template parts by stating the file name via <code>slug</code>. Here’s how to call <code>footer.html</code>:</p>
<pre><code>&lt;!-- wp:template-part {"slug":"footer"} /--&gt;
</code></pre>

<p>You can even customize the HTML tag (default: <code>div</code>) via the <code>tagName</code> attribute:</p>
<pre><code>&lt;!-- wp:group {"tagName":"main"} --&gt;

&lt;!-- /wp:group --&gt;
</code></pre>

<p>Here, too, it’s possible to use one of the editors above to create blocks and then simply copy the markup over if you are not sure. Plus, if you save a file and then add it to the respective location in the theme directory, it will also show up in the FSE editor.</p>
<p>For more details, refer to the resource list below.</p>
Consequences Of Full-Site Editing For The WordPress Ecosphere
<p>Besides providing a tutorial on how to use Full-Site Editing, I also want to talk about what its arrival means for the WordPress environment and those working there.</p>
<h3>Job Opportunities For Developers And Designers</h3>
<p>As is to be expected, an important question is whether this kind of feature will eliminate the need for professional developers and designers. Are they still needed when users can seemingly do everything themselves?</p>
<p>The short answer is “yes.”</p>
<p>Neither the emergence of WordPress itself nor page builders or page builder plugins, or any other technology that makes it easier for laypeople to build their own websites have eradicated the need for professional help. And it won’t happen this time, either.</p>
<p>While these days, users don’t need help for every little thing (like changing colors or fonts), there are still lots of tasks that non-technical site owners simply can not do with the available tools and where they need someone to do it for them. Plus, if you want a unique design and not rely on a template that hundreds or thousands of other people might also be using, you still need a designer and/or developer.</p>
<p>Plus, with great power also comes a great opportunity to screw things up (to loosely quote Spiderman). Just because everyone has the tools at their disposal to make a well-designed website, that doesn’t mean everyone can. Design is more than mere technical ability.</p>
<p>What’s more, not everyone actually wants to do the work. They’d rather hire someone with the skills than acquire them from scratch. Finally, there is so much more to a successful website than “just” design, such as SEO, performance, security, and maintenance.</p>
<p>So, even if there are fewer obstacles to building websites, there is no need to think that designers and developers are a dying breed. In contrast, the switch to new tools offers plenty of opportunities to build services and products around them.</p>
<h3>What Does FSE Mean For The Theme Market And Theme Designers?</h3>
<p>So what about theme creators? Does everyone have to switch to block themes now?</p>
<p>Here, it’s first important to keep in mind that many themes have not yet switched to the Gutenberg block editor and that there are still many users on the Classic Editor. The latter will also continue to work for a while as the plugin will still be supported until <a href="https://wptavern.com/wordpress-classic-editor-support-extended-for-at-least-another-year">at least the end of 2022</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f494e0a4-4b48-4287-b93c-5c23f96c5d31/12-wordpress-full-site-editing.jpg" /></p>
<p>Also, all of the features described above are optional, not mandatory. Therefore, the switch does not have to be immediate. You can even build hybrid themes that are not complete block themes but are able to use block templates. This option exists by default unless you specifically <a href="https://developer.wordpress.org/block-editor/how-to-guides/themes/block-theme-overview/#classic-themes">switch it off</a>.</p>
<p>Nevertheless, in the long run, it’s probably a good idea to move your existing themes over to FSE capabilities. It’s something that WordPress users will likely grow to expect as it gives them more flexibility and power to customize themes on their own.</p>
<p>At the same time, as described above, you can also use Full-Site Editing to create themes with less coding, which can speed up development time. Plus, it offers new economic opportunities. Besides themes, theme authors can now offer extensions like blocks and block patterns, opening up whole new business models and opportunities.</p>
<h3>Full-Site Editing vs. Page Builder Plugins</h3>
<p>The existing page builder plugins are probably one of the biggest question marks. Will the likes of Divi, Elementor, and Co survive when WordPress can do a lot of what they were created to provide?</p>
<p>First of all, it’s unlikely that everyone will immediately switch away from the tools they are used to working with, so page builder plugins will likely stay around for a while. Also, many of them are currently more powerful than what Full-Site Editing is capable of in its present form. Another reason to stay with what you have.</p>
<p>Overall, these types of plugins have become very established over the last years, to the point that they sometimes ship packaged with themes. For that reason, it’s improbable that they will suddenly lose all their market share. Despite that, Full-Site Editing will likely eat into it over time, especially with new users who get to know it as a normal part of WordPress.</p>
<p>Just like everyone else, page builder plugins will have to evolve so that they offer things that FSE doesn’t to stay competitive. One way would be to offer kind of hybrid plugins that extend WordPress’ native page editor. Similar things already exist for Gutenberg and for the Classic Editor.</p>
<h3>Full-Site Editing: Further Resources</h3>
<p>If you want to get even deeper into the topic of WordPress Full-Site Editing, I recommend you start with these resources:</p>
<ul>
<li><a href="https://developer.wordpress.org/block-editor/">Block Editor Handbook</a><br />The Block Editor Handbook is generally a good place to start for anything related to the Gutenberg editor and project. Don’t miss the primer on block themes, how they work, and how to create them in the <a href="https://developer.wordpress.org/themes/block-themes/">Theme Developer Handbook</a>.</li>
<li><a href="https://fullsiteediting.com/">Fullsiteediting.com</a><br />A dedicated resource site and free online course for FSE created by <a href="https://twitter.com/carolinapoena">Carolina Nymark</a>. It has chapters on every part of Full-Site Editing, from basics over how to use <code>theme.json</code> to even a <a href="https://fullsiteediting.com/block-theme-generator/">starter block theme generator</a>. Plus, it has a list of <a href="https://fullsiteediting.com/themes/">available block themes</a>.</li>
<li><a href="https://wordpress.org/themes/tags/full-site-editing/">WordPress Theme Directory: Block Themes</a><br />Speaking of block themes, the official WordPress directory now has a tag for themes compatible with Full-Site Editing. This way, you can easily find some to give the feature a spin. More are being added all the time.</li>
</ul>
Final Thoughts On WordPress Full-Site Editing
<p>Full-Site Editing is an exciting new chapter in the evolution of WordPress. It makes the design process easier and more uniform across the entire platform, offering new opportunities for content creators and users to customize their pages.</p>
<p>At the same time, FSE comes with interesting challenges for developers and theme designers. It changes the architecture of themes as well as introduces new markups and workflows. However, the feature also offers rewards in terms of new opportunities and a faster way for prototyping and creating themes that require less coding.</p>
<p>Above, we have gone over everything FSE has to offer in detail. My personal impression is that it is a well-thought-out feature, and I am impressed by how much it can already do. I’d definitely recommend adding it to your <a href="https://nickschaeferhoff.com/wordpress-skills/">WordPress skill set</a>.</p>
<p>Sure, there is room for improvement. For example, I could not find an option to change the hover or active color for links and other elements. Also, it is not as powerful as existing page builder plugins though I am sure that new features will close the gap in the future. Yet, I really like its modularity and the ability to customize different theme parts in different ways. I’ll surely consider using it more in the future. How about you?</p>
<p><em>What are your thoughts on WordPress Full-Site Editing? How do you think it will impact users, developers, and the WordPress sphere as a whole? Please share your opinion in the comments!</em></p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Nick Schäferhoff)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e92a7c2c-7748-4eb9-8ab8-6a534ad201e0/wordpress-full-site-editing.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Effective Communication For Everyday Meetings]]></title>
            <link>https://smashingmagazine.com/2022/10/effective-communication-everyday-meetings/</link>
            <guid>https://smashingmagazine.com/2022/10/effective-communication-everyday-meetings/</guid>
            <pubDate>Thu, 13 Oct 2022 15:00:00 GMT</pubDate>
            <description><![CDATA[In this article about conducting productive meetings, Andrii Zhdan will give you a step-by-step guide on preparing a solid meeting structure that will let you follow the original plan and reach the meeting goals, and he will also share a few tips based on his design experience.]]></description>
            <content:encoded><![CDATA[<p>Good communication is not about forcing everyone to say “Yes” or to sell something to people that they don’t want to buy. Good communication is about sharing your ideas as clearly as possible during the time you have allocated to the meeting. To do this well, you need to have a suitable structure based on the timing and people’s background knowledge.</p>
<p>In the following article, I will try to explain how to prepare this structure and give you some tips based on my own design experience.</p>
<p>We all like to listen to good stories. Good stories involve us and don’t need additional efforts to follow the ideas they present. There is no simple answer as to what makes a story <em>good</em>, but we can subconsciously tell what makes it <em>bad</em>, such as illogical storytelling structure, unclear motivation of the main hero, lengthy descriptions of some obvious things, and so on. All those aspects impede us from understanding what is going on. I can often observe something similar during regular meetings. At first, everybody goes with their communication plan, but in the end, it often turns into a flow of random sentences and abbreviations, and then at the end of the meeting, everyone tries to keep their initial opinions. </p>
<p>If you want to avoid such poor meeting outcomes, follow me along. Here is a guide based on my personal experience, and I hope it will help you conduct more effective meetings, too.</p>
Сonscious Participation Or Conduction
<p>There are two reasons why meetings happen:</p>
<ol>
<li>You want to present or discuss something with a few people.</li>
<li>Somebody thinks inviting you to a conference/meeting is a good idea.</li>
</ol>
<p>Each one of these reasons dictates a different preparation strategy.</p>
<h3>Reason 1: You Are The Initiator</h3>
<p>Start with the question, “Why does this meeting have to take place?” </p>
<p>Don’t get me wrong, but I haven’t actually met people who actually <em>like</em> meetings.</p>
<p>The truth is that people do their work in-between sessions. When you are in a meeting, you can’t do your work. You are distracted when you get a reminder about a meeting starting in 15 minutes. And after a one-hour session, you also need time to get back to work and to switch your mind to the things you were doing before the meeting. And being constantly distracted by meetings affects <a href="https://dev.to/_bigblind/are-interruptions-really-worse-for-programmers-than-for-other-knowledge-workers-2ij9">not only programmers</a> but also designers.</p>
<p>So, rule No.1 is:</p>
<blockquote>In 99% of the cases, a meeting takes more working hours than the time preallocated to it.</blockquote>

<p><strong>What can we do to improve the situation?</strong></p>
<ul>
<li>Invite people whose work is <em>directly related</em> to your meeting’s key topic.</li>
<li>Prepare and share the agenda in advance. People must understand why they should be there and what you will expect from them.</li>
<li>Describe the goal and the expected results so participants can prioritize the information they get during the meeting.</li>
<li>Plan the timeslots based on the agenda and the number of participants. If you have twenty people for a 30 minutes meeting, then everyone would have a 90 seconds timeslot. Just remember this fact.<br /><strong>Note</strong>: <em>Here, I don’t mean a presentation when you deliver some information to a group of people without the need for receiving feedback or just for hearing “yes” or “no” once the presentation ends.</em></li>
</ul>
<p>Sometimes it’s hard to stop inviting people to a meeting because they may all look involved in the topic. So, ask yourself, “Will I cancel this meeting if that person cannot participate?” If the answer is “No,” then just go to the next participant in the list, and so on.</p>
<p>Rule No. 2:</p>
<blockquote>The meeting is mainly for the tasks and decisions you cannot fulfill alone.</blockquote>

<p>Of course, you can say that meetings keep the team together and help understand other project areas better. There are approaches based on regular meetings, such as Scrum, and I agree with that. But we talk about <strong>effective meetings</strong> now. Because if you invited ten people with an hourly rate of $ 50, the one-hour meeting session would cost you $500. Is this a reasonable price for a one-hour small talk?</p>
<h3>Reason 2: You Are Invited As A Participant</h3>
<p>In this case, you are on the opposite side. It means that you can (and should): </p>
<ul>
<li>Ask in advance for the agenda and the goal of that session if this info is missing.</li>
<li>Clarify what would happen if you could not join, and then decide on joining the meeting (or not).</li>
<li>Prepare your communication plan based on the timeslot you have.</li>
<li>Investigate the documentation available on the topic so you can have some background and ask the right questions.</li>
</ul>
Preparing The Communication Plan
<blockquote>“If you don’t know where you’re going, any road will get you there.”<br />— <a href="https://philosiblog.com/2011/07/13/if-you-dont-know-where-youre-going/">Said once the Cheshire Cat to Alice in Wonderland</a><br /><br />Or<br /><br />“Having no destination, I am never lost.”<br />— <a href="https://www.goodreads.com/quotes/7335878-having-no-destination-i-am-never-lost">Ikkyu</a></blockquote>

<p>A <strong>communication plan</strong> is like a lantern that helps you keep the right track in the darkness of routine. When everything gets worse, you can count only on this communication plan, or at least on plan “B,” which you should have. And, unlike the Cheshire Cat, you <em>definitely</em> need to have a plan <strong>where you want</strong> to go!</p>
<p><strong>Before starting, you need to ask yourself a few questions:</strong></p>
<ul>
<li>What do I want to get as a result of this meeting? Why do I go there?</li>
<li>How did I come up with the idea I want to present? </li>
<li>Why are other ideas, approaches, or alternative ways not so good? Have I explored all the options?</li>
<li>If I understand the weak side of my ideas, what strategy should I follow? Should we touch upon them in this meeting? </li>
</ul>
<p>Answering these questions will help you clarify your vision first, as it’s impossible to communicate an idea effectively to somebody else if it is even unclear to you. </p>
<p>So, let’s get back to the things you want to communicate. Do you want approval for a new feature/mockup/technology, or do you want to gather various opinions and vote for the best option? Have you tried to solve it in a few different ways, and can you argue why other methods would work worse than this one? Are you open to discussing advice about improving your proposal, or do you think it’s already good enough?</p>
<p>Knowing the answers to these questions would make it much easier to move communication in the right, more productive direction. Otherwise, you will spend some time finding out the answers directly during the meeting.</p>
<p>Also, keep in mind the personal goals of the participants. When I was twenty, I was a freelancer and needed to chase projects. I completed over one hundred projects (mainly small-sized) and had a hundred kick-off meetings. When you are a freelancer, it means that during such kick-offs, you are trying to sell your service. At first, I was trying to explain the value of my designs, the excellent conversion of my landing pages, and how happy the users would be. Sometimes this approach worked, sometimes not.</p>
<p>I asked for feedback from a few people who <em>didn’t</em> want to buy my services. Once, I got honest feedback from a manager along these lines, “I’m a manager. I don’t care about customers or conversion rates. My goal is to complete the project on time and get my bonuses at the end of the year. Can you do it on time?”</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e96915a8-3889-4357-ad33-9ea09b367f66/1-effective-communication-everyday-meetings.png" /></p>
<p>When you double-check your communication plan, make sure it matches closely with <em>the goals of the people</em> you want to communicate with.</p>
Conduction Of The Meeting
<h3>A smooth start</h3>
<p>The worst thing you can do is go to a meeting, show something during the first minute and say, “This is it! Is it looking great?”</p>
<p>It’s like if you were trying to explain the movie <a href="https://www.imdb.com/title/tt0120338/"><em>Titanic</em></a> as a man keeping a little cold piece of wood afloat in the Atlantic ocean and a woman trying to fit on that ice-cold piece of wood. Yes, that’s the scene when we usually cry during the movie, but we are not crying because of this scene —  but because of the long and important set of events that brought Rose and Jack there.</p>
<p>So, start with <strong>the story</strong> that will help your audience dive into the right atmosphere. It could be the context of using the product, the moment when somebody meets the problem you are attempting to solve or something else that can help build a smooth way to the first piece of visual information or thesis. Don’t let people use their explanations about what they see now. Human imagination works faster than your talk, so getting them back to what you are saying will be challenging. </p>
<p>Also, it’s always good to deconstruct the idea and explain what was before. What is the reason why we do this? What did we discuss during the previous meeting, and where did we stop? What limitations do we have? What kind of information did we learn about the market, users, or competitors that should be shared here? The people around you should have these pieces of background knowledge to better understand the potential of your ideas. You shouldn’t tell everything you know. Remember that this is just an intro, and you need time for the “main dish.”</p>
<h3>Switching Between Scenes And Ideas</h3>
<p>When you move between details or screens, also tell your audience about the ways which may potentially lead to some dead-ends during your progress. The filament bulb may have looked small and simple when it was ready for mass production, but Thomas Edison (<a href="https://en.wikipedia.org/wiki/Incandescent_light_bulb#Early_pre-commercial_research">and not only he</a>) conducted more than 1500 experiments before reaching that success. Tell people also about the failures to show the broader scope of work, and when you do so, this will give people the answers to the unasked questions — why you turned this way and not some other way. Those things might not be obvious at all to the people not as deeply involved in the project as you are. </p>
<p>The right side of the following illustration nicely demonstrates the way product designers work. I also strongly recommend talking about the “underwater side” during meetings. It helps to unfold the final result.  </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/51fd0dad-0a5d-4421-901c-1e798c5382d5/2-effective-communication-everyday-meetings.png" /></p>
<p>The most sensitive thing is to be able to present complex ideas during a conversation. You need some time to outline a basic concept, yet people may start asking questions even before you end up with the explanation. Most of the questions won’t be asked if the participants can see the whole picture, and the solution to this is pretty easy.</p>
<p>Warn that first, you will only <em>outline</em> the idea or the solution, and after that, you will go through that again <em>step by step</em>, answering all the questions in the proper context. It allows you to talk to an audience that understands your idea but can ask questions in the appropriate context. Using this approach, you can smoothly move from topic to topic and not make people wait till the end of the meeting to ask questions. </p>
<p>Depending on your <a href="https://www.thebalancemoney.com/what-are-soft-skills-2060852">soft skills</a>, you will have different levels of engagement with your audience. So I recommend from time to time checking this through a dialogue with the audience. The simplest way is to ask, “Are you still following me?” But it’s a bit too direct, and there are many other, more subtle ways of ensuring you have an audience that follows you. We want every minute of the meeting to be valuable, right? </p>
<h3>A Few Hints As To How To Keep People Involved:</h3>
<p><strong>Ask people to highlight the aspects they know better than you.</strong><br />It can be a few words about using the product in real life, market information, limitations, and so on. </p>
<p><strong>Ask people to express their expectations about the next presentation slide.</strong><br />It helps you focus on the crucial things for the participants. Then, even if those expectations are not reflected in your solution, you have already been informed. So you can explain why you didn’t cover them or propose a plan for how to do that. </p>
<p><strong>Use questions that can be answered with a “Yes,” “No,” or only a few words.</strong><br />“Does this feature make sense?”, “Are we happy with the positioning of this red button?”, “Is it clear what would happen if I click here?” and so on.</p>
<p><strong>If it’s an online meeting, ask people to turn on their cameras (if possible).</strong><br />It’s easier to understand what’s happening if you see the people’s eyes. But, for many different reasons, people do not always like using cameras. So, be polite and explain why it is important to you and be honest. Here is a list of reasons that I compiled:</p>
<ul>
<li>“I feel uncomfortable if I don’t see the people I am talking to.”</li>
<li>“I think I sound like a radio DJ. Could you please turn your camera on?”</li>
<li>“I’m a bit nervous when talking to the empty screen.” </li>
<li>And so on.</li>
</ul>
<p>It’s better to say this while still inviting the people so they have time to prepare their cameras and backgrounds (real or virtual) in advance.</p>
<p>Sometimes your questions will meet the silence on the other side. There can be a lot of reasons why this happens, but it usually means that people don’t understand what you mean or maybe that you have invited introverts to the meeting. :-)</p>
<p>You need feedback that helps you understand the situation and get out of this corner. And if nobody wants to provide some feedback and critique, you must become your first critic. We do not live in an ideal world, and you probably know your idea’s weak sides and limitations. So speak about them loudly and show people that it’s OK for you (and for them!) to point out the wrong things if they happen because of your design decisions.</p>
<p>I don’t remember the name of the book where I read about this curious fact, but one company always included paid provocateurs in the focus groups to help people start talking about the issues in the company’s product. As a result, people provided a few times more feedback than before.</p>
<h3>Managing Contexts</h3>
<p>When everything looks fine, and your meeting appears on the right track, don’t forget to check whether all people are in the same context. For example, when you say, “On this page, the user makes a route from A to B,” everybody thinks about his own experience. So you have to take a step back and clarify how users do this and what obstacles they will encounter because your stakeholders usually are <em>not</em> your users; they stand on the business side. </p>
<p>Also, don’t forget about emotions. Here in Ukraine, we have a proverb, “The well-fed will never understand the hungry.” So, to understand the user, you should try to walk in his shoes. Help stakeholders understand the user through emotions as well. What’s going on when a user opens your app? Does the user have enough time to learn how to complete his task? What would happen if not? All those things will not be apparent to people looking at the static design image from your slide. Tell the story! We all like stories.</p>
Conclusion
<p>Before wrapping things up, a note about meeting notes. There is a common practice to take meeting notes, but personally, I’m not a fan of this. Of course, taking notes is OK if you have time or if somebody can write down the main ideas discussed. But don’t allow this to dictate the pace of the discussion. The goal is to <em>move forward</em> but not to make pauses because you need to time a few sentences. </p>
<p>Meeting notes are about the past, and in order to go ahead, you need the action plan. The action plan is the list of actions that need to be done before a few predefined deadlines are reached. All items in that list should be measurable and split into a few simple, understandable steps.</p>
<p><strong>An example of an ineffective action plan:</strong></p>
<ul>
<li>Finalize the concept.</li>
<li>Think about better navigation.</li>
<li>Discuss the design concept with the users.</li>
</ul>
<p><strong>An example of an effective action plan:</strong></p>
<ul>
<li>Add a full search flow and a “Contact Us” page.</li>
<li>Create a minimum of two versions of the design concept with navigation based on best practices.</li>
<li>Conduct unmoderated user testing with at least five users.</li>
</ul>
<p>Also, every item in the list should have a person assigned to it — an “action person.” It allows avoiding a situation where something is not done just because everybody thinks it’s not in their direct area of responsibility or a list of to-do items.</p>
<p>I hope this article will help you organize more productive meetings, save everyone’s time, and be more efficient. And if you have questions, I’d happily reply to them in the comments below.</p>
<p><strong>A few extra tips:</strong></p>
<ul>
<li>The initiator is responsible for achieving the meeting results. So if you see that the discussion moves in the wrong direction, <em>you</em> are the person who should get it back onto the right track.</li>
<li>Sometimes, somebody may say, “As we are all here, can we also discuss...” Nope, it doesn’t work like that. The correct thing to do is to cover the agenda first, and then, if everyone agrees (and there’s some meeting time left!), you can discuss something else.</li>
<li>If you invite people who don’t know each other, it’s best to start by introducing everybody.</li>
<li>You can record the meeting; it’s a good option for people who can’t join. But before the recording is made, ensure everybody is OK with that. </li>
<li>Don’t make people <em>ask</em> about dropping off the meeting if/when the time is up. Instead, if you need more time, ask about a possible extension 5-10 minutes before the end of the scheduled timeslot and then adjust your plan accordingly. Discussing ideas with people who are late somewhere else is a bad idea, especially if the topic is complex and rather important! Make sure that it’s comfortable for everyone to extend the meeting a bit; if it is not, leave some of the topics and discussions for another time.</li>
<li>The traditional approach dictates you should invite <em>all people</em> related to one or more of the topics on the meeting agenda. But if you can discuss and resolve some of the questions in smaller groups or one-to-one meetings, please go this way; it’s much better. Ideally, every participant has to be involved in <em>every aspect</em> of the meeting plan. (It doesn’t feel right to join the forum only because of a five-minute question that concerns you, placed at the end of the meeting time.)</li>
<li>Try to <em>hear the others</em>. Unfortunately, sometimes we are so focused on our vision and following a plan that we can ignore the voices around us. As a result, good ideas may not get a chance to be heard and evaluated at the right time.</li>
</ul>
<h3>Further Reading</h3>
<p>Here are a few additional resources on the topic of conducting effective meetings:</p>
<ul>
<li>“<a href="https://writingcooperative.com/the-anatomy-of-an-amazon-6-pager-fc79f31a41c9">The Anatomy of an Amazon 6-pager</a>,” Jesse Freeman<br /><em>How Amazon conducts its meetings? Amazon is well known for its lack of using PowerPoint. This works because before a meeting, you print out enough copies for everyone in the room, and you’re not allowed to read the document from your computer unless you are remote. This long read will share plenty of details about how Amazon and their meetings work.</em><br /><strong><em>Note:</em></strong> <em>During the pre-pandemic times, things were much different from what they are today, meetings included. People worked in offices and in person much more often.</em></li>
<li><a href="https://bigtimer.net/">Big Timer</a><br /><em>Some teams choose a very specific duration of the meeting, e.g., 18 minutes or 23 minutes, with a large countdown displayed in front of everybody to bring the meeting to the point and right on time.</em></li>
<li>“<a href="http://www.cameronmoll.com/journal/mental-health-at-work">Mental Health at Work (leverage focus blocks)</a>,” Cameron Moll<br /><em>In some teams, employees are allowed to block out hours for “focus work,” and no meetings can be scheduled during that time.</em></li>
<li>“<a href="https://medium.com/@padday/meetings-e27767bcf6b6">Meetings</a>,” Paul Adams<br /><em>After a fantastic meeting, everyone feels like progress was made, that things are clearer than before, and that there is continued momentum. At the same time, meetings are also expensive. Consider the opportunity cost of people being at a meeting, as they could all be doing other important things.</em> </li>
<li>“<a href="https://modus.medium.com/lets-have-better-meetings-92d18c2c8825">Let’s Have Better Meetings!</a>,” Laurel Hechanova &amp; Patrick DiMichele<br /><em>How to run a tighter ship and make better use of everyone’s time.</em></li>
<li>“<a href="https://medium.com/unusual-ventures/why-standups-are-useless-and-how-to-run-great-product-team-meetings-278f000ea64f">Why Standups are Useless and How to Run Great Product Team Meetings</a>,” Andy Johns<br /><em>There’s probably one flavor of a meeting that tops the charts in uselessness, and it’s the “status update” meeting.</em></li>
<li>“<a href="https://www.ics.uci.edu/~gmark/chi08-mark.pdf">The Cost of Interrupted Work: More Speed and Stress</a>,” Gloria Mark (University of California, Irvine), and Daniela Gudith &amp; Ulrich Klocke (Humboldt University, Berlin) [PDF document]<br /><em>This is a paper about productivity, namely about meetings that “steal” from people because of interruptions.</em></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Andrii Zhdan)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c62052-4769-4a7d-8473-828a3e05ff74/effective-communication-everyday-meetings.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Sustainable Web Development Strategies Within An Organization]]></title>
            <link>https://smashingmagazine.com/2022/10/sustainable-web-development-strategies-organization/</link>
            <guid>https://smashingmagazine.com/2022/10/sustainable-web-development-strategies-organization/</guid>
            <pubDate>Tue, 11 Oct 2022 15:30:00 GMT</pubDate>
            <description><![CDATA[Climate change and sustainability are increasing concerns for digital organizations, as well as individuals working in tech. In this article, we’ll explore some of the ways we can raise awareness and effect change within an organization to create a more positive environmental impact.]]></description>
            <content:encoded><![CDATA[<p>Sustainability is rightly becoming more widely discussed within the web development industry, just as it is an increasing concern in the wider public consciousness. Many countries around the world have committed to ambitious climate goals, although many have some way to go if they are to meet their targets.</p>
<p>All industries have a part to play, and that includes web design and development. The internet accounts for an estimated <a href="https://www.bbc.com/future/article/20200305-why-your-internet-habits-are-not-as-clean-as-you-think">3–4% of global emissions</a> — equivalent to some countries. That means we, as tech workers, are in a position to make choices that contribute to reducing the environmental impact of our industry. Not only that, but as a well-connected industry, one that builds digital products often used by thousands or millions of people, we are also relatively well-positioned to influence the behavior of others.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/91749330-21f3-40bd-8e13-193a2ea8c8ab/global-carbon-emissions-internet.png" /></p>
<p>In this article, we’ll explore some of the ways that we, as individuals, can use our skills to have a positive environmental impact within a digital organization.</p>
Presenting The Case For Sustainability
<p>One of the first hurdles to implementing sustainable practices within an organization (or on a project) is convincing stakeholders that it is worth the investment. Any change of practice, however small, will probably require some time investment by employees. Being able to present a business case, and demonstrate that the benefits outweigh the costs, will help justify focusing resources in the area of sustainability.</p>
<h3>Cost-Effectiveness</h3>
<p>It would be great to think that for every company, the idea of building a better world trumps financial concerns. Unfortunately, with some exceptions, that’s generally not the case. But there are plenty of actions we can take that reduce our environmental impact and reduce costs (or increase revenue) at the same time.</p>
<p>For example, changing our database architecture to be more efficient could save on server costs. Making performance improvements to a client’s site could result in happier clients who send more business our way. Identifying where sustainability and cost savings overlap is a good place to start.</p>
<h3>Regulation</h3>
<p>Despite financial impact being a fairly obvious incentive, it’s not the only one, and perhaps not even the most significant. In his recent <a href="https://smashingconf.com/freiburg-2022">Smashing Conference</a> talk, green software expert <a href="https://asim.dev/">Asim Hussain</a> mentioned that the biggest shift he is seeing is as a result of regulation — or the threat of regulation.</p>
<p>With many countries publicly committed to <a href="https://netzeroclimate.org/what-is-net-zero/">Net Zero</a> goals, it is increasingly likely that companies will need to submit to the regulation of their carbon emissions. The UK’s commitment is enshrined into law, with <a href="https://www.theccc.org.uk/about/our-expertise/advice-on-reducing-the-uks-emissions/">carbon budgets</a> set over many years. Many companies are already taking the long view and looking to get ahead of the competition by reducing their emissions early.</p>
<p>Being able to demonstrate as a company that you are committed to sustainability can open up a greater number of opportunities. Organizations working with the UK government to build new digital services, for example, are required to meet standards defined in their <a href="https://www.gov.uk/government/publications/greening-government-ict-and-digital-services-strategy-2020-2025">Greening Government ICT and Digital Services Strategy</a>.</p>
<h3>Accreditation</h3>
<p>Companies that can demonstrate their environmental credentials may be eligible for certification, such as <a href="https://www.iso.org/iso-14001-environmental-management.html">ISO14001</a> standard in the UK. In the case of <a href="https://www.ada-mode.com/">Ada Mode</a>, the company I work for, this has directly contributed to winning us more work and has enabled us to partner with much larger organizations.</p>
<p>Businesses that achieve <a href="https://www.bcorporation.net/en-us/">BCorp</a> status can benefit (according to the website) from “committed and motivated employees, increased customer loyalty, higher levels of innovation, and market leadership”.</p>
<p>Certainly, organizations positioning themselves as environmentally conscious increase their chances of attracting sustainability-minded candidates for recruitment as more and more people seek meaningful work.</p>
<h3>It’s All In The Branding</h3>
<p>Another great bit of advice from Asim’s talk at the Smashing Conference was on branding. The “Eco” movement has long been associated with being somewhat spartan, taking away something, using or consuming less. Rather than giving our users a reduced experience, reducing the environmental impact of our digital products has the opportunity to deliver our users <strong>more</strong>. Asim talked about <a href="https://techcommunity.microsoft.com/t5/discussions/introducing-performance-mode-in-microsoft-edge-new-feature/m-p/2270856">Performance Mode</a> in Microsoft Edge: switching on Performance Mode means users get a faster website, while also saving resources. “Performance Mode” sounds a lot more appealing than “Eco Mode”, which sounds like something is being taken away.</p>
<h3>The Bigger Picture</h3>
<p>When presenting the case for investing time in sustainability efforts in an organization, it can be helpful to explain the relevance of small actions on a bigger scale. For example, Smashing’s editor, Vitaly Friedman, makes a case for reducing the size and quality of images on a site by explaining the overall cost and CO2 savings when taking into account page views over an entire year.</p>
<blockquote>On the Fact Sheets page, we can save approx. 85% of images’ file sizes without a noticeable loss of image quality. With approx. 1,300,000 annual page views…this makes for <strong>5.2 Terabyte</strong> of wasted traffic.</blockquote>

<blockquote>The difference is approx. <strong>EUR 1000–1650 in costs</strong> (on one single page!). Notably, this makes for <strong>17.28 tons of CO2</strong>, which requires <strong>925 trees</strong> to be planted, and that’s enough to drive an electric car for 295,000km — annually.</blockquote>



Get Organized
<p>Affecting change at an organizational level is nearly always easier when you build consensus.</p>
<h3>Forming A Team</h3>
<p>Forming a green team within your organization enables you to support each other to achieve climate goals and identify new opportunities. ClimateAction.tech has some resources on <a href="https://climateaction.tech/actions/starting-a-green-team/">starting a green team</a> at your place of work.</p>
<p>If your organization is small, or there is a lack of interest, then finding a supportive community outside of work (such as <a href="https://climateaction.tech">ClimateAction.tech</a>) can help you stay motivated and lend their advice.
It’s also a great idea to connect with teams working on sustainability in other businesses.</p>
<h3>Planning</h3>
<p>Once you have a team, you’ll be in a good position to plan your actions. It can be hard to know where to focus your efforts first. One way we could do this is by drawing a diagram and sorting potential actions according to their impact and effort.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18c40869-8908-4722-adbf-46177d9b2840/effort-impact-diagram-sustainability-actions.png" /></p>
<p>For example, switching to a green hosting provider could be a small-to-medium effort but result in a high impact. Re-writing your web app to use a more lightweight JS framework could be an extremely high effort for a relatively low impact.</p>
<p>The goal is to identify the areas where your efforts would be best focused. Low-effort/high-impact actions are easy wins and definitely worth prioritizing. Achieving a few aims early on is great for moral and helps keep the momentum going. High-effort/high-impact actions are worth considering as part of your long-term strategy, even if you can’t get to them right away. Low-effort/low-impact tasks might also be worth doing, as they won’t take up too much time and effort. High-effort/low-impact actions are generally to be avoided.</p>
<p>This isn’t the only way to prioritize, however. Other factors to consider include workload, resources (including financial), and the availability of team members. For example, if your development team are particularly stretched thin, it may be more prudent to focus on goals within the areas of design or project management or prioritize actions that can be easily integrated with the development workflow in a current project. </p>
<p>It’s not always the case that every sustainability effort needs to be meticulously planned and scheduled. <a href="https://www.linkedin.com/in/jaime-thompson-2430045b/">Jamie Thompson</a> from intelligent energy platform <a href="https://www.kaluza.com/">Kaluza</a> explained in a recent talk how a developer spent just 30 minutes of spare time removing database logs, resulting in a large reduction in CO2 emissions — enough to offset Jamie’s train journey to the event.</p>
<p><em>Watch the video of <a href="https://greentechsouthwest.org/insights/sep-hybrid/">Jamie’s talk</a> from Green Tech South West.</em></p>
Measuring The Impact
<p>Measuring the impact of your sustainability efforts is a thorny subject and depends on what exactly you want to measure. To get some idea of the impact of changes to our websites, we can use tools such as <a href="https://www.websitecarbon.com/">Website Carbon Calculator</a>, <a href="https://ecoping.earth/">EcoPing</a>, and <a href="https://digitalbeacon.co/">Beacon</a>. These tools are especially helpful in making the impact more tangible by comparing the amount of CO2 emitted to common activities such as traveling by car, boiling the kettle, or watching a video. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/632ae32c-5c3a-4d14-b97a-a82a2e4f970e/website-carbon-calculator.jpeg" /></p>
<p>Where sustainability goals align with cost-saving (such as reducing server load), we may be able to measure the impact of the financial savings we’re making. But we should be careful not to conflate the two goals.</p>
Some Areas To Consider
<p>If you’re not sure where to start when it comes to making your digital organization more sustainable, here are a few areas to think about.</p>
<h3>Green Your Website</h3>
<p>There are many ways we can reduce the environmental impact of the websites and digital products we build, from reducing and optimizing our images to minimizing the amount of data we transfer to implementing a low-energy color scheme. Tom Greenwood’s book, <a href="https://abookapart.com/products/sustainable-web-design">Sustainable Web Design</a> is packed with advice for building low-carbon websites.</p>
<p>When the architectural website Dezeen discovered how polluting their website was, they <a href="https://www.dezeen.com/2021/09/14/dezeen-website-massive-carbon-emissions-reduction/">took steps to massively reduce its carbon footprint</a>, resulting in some huge savings — according to their measurements, equivalent to the carbon sequestered by 96,600 mature trees.</p>
<h3>Green Hosting</h3>
<p>Our choice of web host can have a big impact on our organization’s carbon emissions. Consider switching to a host that uses renewable energy. <a href="https://www.thegreenwebfoundation.org/directory/">The Green Web Foundation</a> has a directory.</p>
<h3>Switch Your Analytics</h3>
<p>Do you really need Google Analytics on every site you build? How about switching to a lower-carbon alternative like <a href="https://usefathom.com/">Fathom</a> or <a href="https://withcabin.com/">Cabin</a> instead? As a bonus, you might not need that cookie banner, either.</p>
<h3>Developer Toolchain</h3>
<p><a href="https://twitter.com/ericwbailey">Eric Bailey</a> writes in <a href="https://thoughtbot.com/blog/so-you-wanna-create-an-eco-friendly-website">this article</a> for Thoughtbot:</p>
<blockquote>“If I was a better programmer, I’d write a script that shows you the cumulative CO₂ you’ve generated every time you type npm install.”</blockquote>

<p>Clean up your dependencies and remove the ones you no longer need, especially if you’re working on a project or package that will be installed by a lot of developers. Consider whether a static site might serve your needs better than a bloated WordPress project in some instances.
(Eric’s article also includes a bunch of other great tips for building more sustainably.)</p>
<h3>Hardware And E-Waste</h3>
<p><a href="https://circularcomputing.com/news/carbon-footprint-laptop/">Several tonnes of carbon</a> go into producing our MacBooks, PCs, tablets, and mobile devices, even before we start using them. Do we really need to upgrade our devices as regularly as we do? We must also consider their disposal, which also produces generates carbon emissions and produces harmful waste. It might be possible to repair the device or, if we need to upgrade, to sell or donate the old ones to someone who needs them, extending their useful life.</p>
<p><a href="https://gerrymcgovern.com/">Gerry McGovern</a> has written and spoken extensively about the problem of e-waste, including his book, <a href="https://gerrymcgovern.com/books/world-wide-waste/">World Wide Waste</a>.</p>
<h3>Electricity Use</h3>
<p>It’s probably fairly obvious, but reducing our electricity consumption by switching off or powering devices when we don’t need them and switching to a green electricity supplier could make a big difference.</p>
<h3>Travel</h3>
<p>Does your team regularly drive or fly for work? It might be helpful to set some organization-level targets for reducing carbon-intensive travel and looking for sustainable alternatives where possible. Driving and flying are among the most polluting activities an individual can engage in.</p>
Larger Organizations
<p>If you work for a big corporation, the battle to get climate action on the agenda may be uphill — but, on the flip side, your efforts could have a far more wide-ranging impact. Small changes to improve the carbon footprint of a site can have a big impact when that site is used by millions of people. And in an organization of thousands, corporate policies on sustainable travel and electricity use can save a lot of carbon emissions.</p>
<p>Many of the big tech companies have the potential to use their lobbying power for the greater good. As tech workers, we can help push it up the agenda. Check out <a href="https://climatevoice.org/">Climate Voice</a> for some of the ways tech workers are attempting to use their influence.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7744fb2-c5f0-47e5-a9ce-0885b228fe24/climate-voice-policy.jpeg" /></p>
Spread The Word
<p>A common argument people make against action on climate change is that individual actions don’t make a difference. There’s a great podcast episode in the <a href="https://gimletmedia.com/shows/howtosaveaplanet/">How To Save a Planet</a> series called <a href="https://gimletmedia.com/shows/howtosaveaplanet/llh8gxg/is-your-carbon-footprint-bs">Is Your Carbon Footprint BS?</a> which confronts exactly this dilemma. You could argue that when taken individually, our actions are of little consequence. But all of our actions have the potential to spark action in others and ripple outwards. Dr. Anthony Leiserowitz, who runs the <a href="https://climatecommunication.yale.edu/">Yale Center for Climate Change Communication</a> is quoted in the episode saying:</p>
<blockquote>“One of the single most important things that anyone, anyone can do. When people say, ‘What can I do about climate change?’ My answer, first and foremost, is to talk about it.”</blockquote>

<p>By taking action at an organizational level, you’ve already extended your sphere of influence beyond just yourself. Encourage the people working at your company to be vocal about your climate commitments. We have the power to inspire action in others.</p>
Inclusivity, Accessibility And Climate Justice
<p>However we choose to take action on climate change and sustainability, it’s imperative to <strong>exclude no one</strong>. We should make sure our actions don’t overtly or covertly place undue burdens on already-marginalized people, including those with disabilities, people of color, those living in developing countries, people with below-average incomes, or LGBTQ+ people. Climate change is already exacerbating inequalities, with the people causing the least pollution the ones at the most risk from its effects. We must ensure that whatever climate action we take, we’re making fair and equitable decisions that include everyone.</p>
<h3>Resources</h3>
<ul>
<li><a href="https://www.linkedin.com/in/jongibbins/">Jon Gibbins</a>, founder and director of As It Should Be, a UK-based agency helping digital teams design and build accessible and sustainable products and services, recently delivered a talk about accessibility and sustainability. You can <a href="https://greentechsouthwest.org/insights/sep-hybrid/">watch his talk</a>, Leave No One Behind, on the Green Tech South West website.</li>
<li>The Environment Variables podcast from the Green Software Foundation has an episode on <a href="https://podcast.greensoftware.foundation/e/lnqrrk98-accessibility-and-green-software">Accessibility and Sustainability</a>. </li>
<li><a href="https://www.carbonbrief.org/in-depth-qa-what-is-climate-justice/">Read more about climate justice</a> in this article from Carbon Brief.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Michelle Barker)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9507c0d1-3621-43ae-9996-0f85fe77dbef/sustainable-web-development-strategies-organization.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Delightful UI Animations With Shared Element Transitions API (Part 2)]]></title>
            <link>https://smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part2/</link>
            <guid>https://smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part2/</guid>
            <pubDate>Mon, 10 Oct 2022 09:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Adrian Bece will show how to create same-document page transitions for Single Page Apps using Shared Element Transitions API and check out its future implementation and potential for creating cross-document transitions in Multi-Page Apps.]]></description>
            <content:encoded><![CDATA[<p>In the <a href="https://www.smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part1/">first part of this article</a>, we covered <strong>Shared Element Transitions API (SET API)</strong> and how we can use it to effortlessly create complex transitions for various UI elements, which would usually require a lot of JavaScript code or an animation library to achieve.</p>
<p>But what about smooth and delightful transition animations between individual pages? This is probably one of the most often requested features in the past few years because even with all the frameworks like React and Svelte and animation libraries like GSAP and Framer Motion, transitions between pages are still really difficult to do.</p>
<p>In this article, we’re going to showcase same-document page transitions commonly found in Single Page Applications and talk about the future of the Shared Element Transitions API for cross-document (Multi Page Application) transitions. I’ll also showcase some awesome React, Astro, and Svelte implementation examples from the dev community.</p>
<p><strong>Note</strong>: <em>Shared Element Transitions API is currently supported only in <a href="https://chromestatus.com/feature/5193009714954240">Chrome version 104+ and Canary</a> with the</em> <strong><em>document-transition</em></strong> <em>flag enabled.</em> <strong><em>Examples will be accompanied by a video,</em></strong> <em>so you can easily follow along with the article if you don’t have the required browser installed.</em></p>
<p>In case you haven’t checked out my previous article on the topic, here is a quick rundown of this exciting new API so you can follow along with the article.</p>
Shared Element Transitions API
<p>With Shared Element Transitions API, the browser does a lot of heavy lifting when it comes to animations allowing us to create complex UI animations in a more streamlined way. The main part of the API is a <strong>JavaScript function that takes screenshots of the UI state before and after the DOM update</strong> and apples a crossfade animation:</p>
<pre><code>const moveTransition = document.createDocumentTransition();
await moveTransition.start(() =&gt; {
  /* Take screenshot of an outgoing state */
  /* Update the DOM - move item from one container to another */
  targetContainer.append(activeItem);
  /* Take screenshot of an incoming state and crossfade the states */
});
</code></pre>

<p>Just by calling the <code>start</code> function, we get a neat and simple crossfade animation between the outgoing and incoming states.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c65fa5e8-0993-4521-96e8-4cd77a7db8f4/1-ui-animations-shared-element-transitions-api-part2.png" /></p>
<p>As you can see, we can still navigate between the pages; DOM is updated with the new content, and the URL in the browser changes. We are intercepting the browser’s default navigation behavior and handling the page loading and DOM updates all by ourselves while we remain on the same page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f48ee89a-ecb9-4c5b-ac5a-7134ec77bd54/2-ui-animations-shared-element-transitions-api-part2.png" /></p>
<p>By just passing the DOM <code>update</code> function as a callback to the SET API <code>start</code> function, we get a neat crossfade transition between pages right out of the box!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bc48ae8e-0a79-4c27-8855-6e209400047b/3-ui-animations-shared-element-transitions-api-part2.png" /></p>
<p>With just a few lines of CSS and JavaScript, we’ve created this beautiful transition animation. All we had to do was to identify the shared element (item image) on a clicked link using a <code>page-transition-tag</code> and signal the browser to keep track of its dimension and position.</p>
<p>We get a crossfade animation on a shared element on backward navigation for free because the selector we used <code>document.querySelector(<code>a[href="${url.pathname}"] .card__image</code>)</code> runs on the current page, so when we navigate back to items list page the tag doesn’t get applied and browser cannot match the shared element.</p>



<p>If we want to have the same animation on the shared element when navigating back to the item list page, we have to apply the tag to the correct image element in the grid after we fetch the contents of a target page.</p>
<h3>Customizing Page-Transition Animation With CSS</h3>
<p>Let’s use CSS animation properties to fine-tune the crossfade and item image animation. We want the crossfade animation to be quick and more subtle, and the more elaborate image animation to be more noticeable and have a nice custom easing function:</p>
<pre><code>/* Speed up crossfade animations */
::page-transition-outgoing-image(*),
::page-transition-incoming-image(*) {
    animation-timing-function: ease-in-out;
    animation-duration: 0.25s;
}

/* Fine-tune shared element position and dimension animation */
::page-transition-container(product-image) {
    animation-timing-function: cubic-bezier(0.22, 1, 0.36, 1);
    animation-duration: 0.5s;
}
</code></pre>

<p>We also need to keep in mind that some users might prefer browsing the site without the complex animations with a lot of movement, so we want to either turn them off or provide more appropriate animation:</p>
<pre><code>@media (prefers-reduced-motion) {
  ::page-transition-container(*),
  ::page-transition-outgoing-image(*),
  ::page-transition-incoming-image(*) {
    /* Or add appropriate animation alternatives */
    animation: none !important; 
  }
}
</code></pre>

<p>Crossfade animations now run faster, and the sizing and position animation runs a bit slower and with a different timing function.</p>
<p>In this example, I’ve only showcased code snippets relevant to creating page transition and SET API. If you are curious about the complete source code or want to check the demo in detail, feel free to <a href="https://github.com/codeAdrian/11ty-vinyl-emporium">check out the project repository</a> and inspect the <a href="https://vinyl-emporium.vercel.app/">demo page</a>.</p>
Upcoming Cross-document Transitions
<p>Proper Shared Element Transitions API support for MPAs is still a work in progress, but we can get a general idea of how it’s supposed to work from a <a href="https://github.com/WICG/shared-element-transitions/blob/main/explainer.md#future-work">rough draft by WICG</a>.</p>
<p>In same-document transitions, we would use <code>pageTransition.start(/* … */)</code> function to let the browser keep track of the DOM updates. As for the cross-document transitions, we need to run the transition request function on the outgoing page before it’s unloaded and run the transition on the incoming page once it’s ready.</p>
<p>The following code snippets are copied from the WICG draft:</p>
<pre><code>// In the outgoing page
document.addEventListener("pagehide", (event) =&gt; {
  if (!event.isSameOriginDocumentSwap) return;
  if (looksRight(event.nextPageURL)) {
    // This signals that the outgoing elements should be captured.
    event.pleaseLetTheNextPageDoATransitionPlease();
  }
});
</code></pre>

<pre><code>// In the incoming page
document.addEventListener("beforepageshow", (event) =&gt; {
  if (
    event.previousPageWantsToDoATransition &amp;&amp;
    looksRight(event.previousPageURL)
  ) {
    const transitionReadyPromise = event.yeahLetsDoAPageTransition();
  }
});
</code></pre>

<p>Shared Element Transitions API for cross-document transitions would also need to be heavily restricted for security reasons.</p>
Framework Implementation Examples
<p>During the past few weeks, I saw some jaw-dropping examples of using Shared Element Transitions API for page navigation, added with progressive enhancement to various frameworks like React and Svelte.</p>
<p>Adding page transitions with SET API in frameworks can be tricky. In this example, we’ve had control over the DOM update functions, but this is not usually the case with front-end frameworks. Hopefully, as this API gets proper browser support and traction in the dev community, frameworks and router libraries will follow suit and provide better ways to integrate Shared Element Transitions API in navigation.</p>
<p>So, I would like to highlight some awesome examples of framework implementations from the community, especially those that provide reusable functions and hooks.</p>
<h3>React / Preact</h3>
<p><a href="https://twitter.com/jaffathecake">Jake Archibald</a> created a great <a href="https://http203-playlist.netlify.app/">video playlist example</a> using Preact, TypeScript, and a custom <a href="https://github.com/jakearchibald/http203-playlist/blob/main/src/client/utils.ts">page transition hook</a>. This example uses a custom router implementation to apply class names to the <code>html</code> element to customize the animation and toggle different types of animation depending on the navigation direction.</p>
<h3>Astro</h3>
<p><a href="https://twitter.com/charca">Maxi Ferreira</a> implemented page transitions similarly as in our example with Navigation API but with Astro and <a href="https://www.maxiferreira.com/blog/astro-page-transitions/">explained the process in great detail</a> on top of building a stunning <a href="https://astro-movies.netlify.app/">movie database app</a>. </p>
<p>He also worked with <a href="https://twitter.com/BenDMyers">Ben Myers</a> on this <a href="https://t.co/YnhgQIXlGQ">awesome guitar shop example</a> with cool animations on both the guitar image and item background, which expands into a full description background container. This is also a good example of how to create elaborate but seamless and tasteful animations that add to the user experience.</p>
Svelte
<p>Moving onto Svelte, <a href="https://twitter.com/geoffrich_">Geoff Rich</a> built this neat <a href="https://sveltekit-shared-element-transitions-codelab.vercel.app/fruits">fruit nutritional data app</a> and explained the whole process in great detail in <a href="https://geoffrich.net/posts/page-transitions-1/">his article</a>. SvelteKit has a built-in <code>navigating</code> store, and Geoff created a <a href="https://github.com/geoffrich/sveltekit-shared-element-transitions/blob/21f894b8e4339fb5e00801cc8e0feabe6ecdbaa5/src/lib/page-transition.js">handy util function</a> for intercepting page transitions and applying the Shared Element Transitions API depending on its browser support.</p>
Conclusion
<p>Shared Element Transitions API allows us not only to implement complex UI animations on a component level but also on a page level. Same-document transitions in Single Page Applications can be implemented today with progressive enhancement, and we can achieve impressive app-like page transitions with just a few lines of JavaScript and CSS. And all that without a JavaScript animation library! More popular and more complex cross-document transitions for Multi Page Applications are still a work in progress, and I can see it being a massive game-changer once it’s released and gains wider browser support. </p>
<p>Judging from the impressive examples we’ve seen online, some of which are featured in this article, we can safely say that the community is more than excited about this API. If you’ve built something awesome using Shared Element Transitions API, feel free to reach out on <a href="https://twitter.com/AdrianBeceDev">Twitter</a> or <a href="https://www.linkedin.com/in/adrianbece/">LinkedIn</a> and share your work.</p>
<p><em>Many thanks to <a href="https://www.linkedin.com/in/crowake13/">Nikola Vranesic</a> for reviewing the article for technical accuracy.</em></p>
<h3>References</h3>
<ul>
<li><a href="https://github.com/WICG/shared-element-transitions/blob/main/explainer.md">Shared Element Transitions</a>, WICG</li>
<li>“<a href="https://developer.chrome.com/blog/shared-element-transitions-for-spas/">Smooth and simple page transitions with the shared element transition API</a>,” Jake Archibald</li>
<li><a href="https://drafts.csswg.org/css-shared-element-transitions-1/">CSS Shared Element Transitions Module Level 1</a>, W3C</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Adrian Bece)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/24c75fda-847f-4fc5-b9c2-9118523bda6b/ui-animations-shared-element-transitions-api.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[A Roadmap For Building A Business Chatbot]]></title>
            <link>https://smashingmagazine.com/2022/10/roadmap-building-business-chatbot/</link>
            <guid>https://smashingmagazine.com/2022/10/roadmap-building-business-chatbot/</guid>
            <pubDate>Fri, 07 Oct 2022 08:00:00 GMT</pubDate>
            <description><![CDATA[Owing to tremendous advancements in Machine Learning and other technologies, chatbots have increased in popularity in the past few years. This article will show you, step by step, how to build a chatbot that meets your business goals.]]></description>
            <content:encoded><![CDATA[<p>The widespread adoption of chatbots was imminent with the stellar rise and consolidation of instant messaging. However, the accelerated pace at which chatbots have evolved from accepting scripted responses to holding natural-sounding conversations has been unprecedented. According to <a href="https://trends.google.com/trends/explore?date=today%205-y&amp;q=ai%20chatbot">Google Trends</a>, the interest in AI Chatbots has increased ten-fold over the last five years!</p>
<p>With chatbots getting smarter, value-driven, and user-friendly, it has fueled customer-led demand for chatbot-driven interaction at every touchpoint. As a result, businesses are scrambling to keep up with this requirement and investing aggressively in chatbot development; so much so that the market for chatbots is expected to reach a valuation of USD 10.2.29 in 2026 with an impressive CAGR of 34.75%.</p>
<p>On that note, it makes absolute sense to hop aboard this chatbot train. In fact, it is believed that about <a href="https://www.accenture.com/_acnmedia/PDF-157/Accenture-The-Future-Customer-Conversations.pdf">80% of CEOs</a> plan on revamping customer engagement with conversational chatbots. So, if you are looking for a way to get started, here is a step-by-step guide for chatbot creation!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d10855b5-6c1d-4b3c-a7c4-0a9a7200bdc7/roadmap-for-building-a-business-chatbot.jpg" /></p>
What Is A Chatbot? And Why Does It Matter?
<p>In its simplest sense, a “chatbot” is a portmanteau of human “chatter” as conducted by a “bot.” It is a software application or computer program that can simulate human conversations through speech or text.</p>
<p>Such a service can rake in the following advantages:</p>
<ul>
<li>Unlike the unidirectional view of chatbots as customer service agents, they are <strong>highly versatile</strong>. Regardless of the industry, businesses can leverage chatbots for sales and marketing activities, HR and personnel management, IT service helpdesk, knowledge management, and more!</li>
<li>Chatbots can <strong>help with collecting and qualifying leads, booking product demos, and engaging audiences</strong> which can increase sales by a whopping <a href="https://www.intercom.com/blog/the-state-of-chatbots/">67%</a>!</li>
<li>Almost <a href="https://www.drift.com/blog/state-of-conversational-marketing/?utm_source=salesforce&amp;utm_medium=blog">88%</a> of consumers reported a positive or neutral experience with a chatbot, thereby paving the way for <strong>customer satisfaction and retention</strong>.</li>
<li><a href="https://d1eipm3vz40hy0.cloudfront.net/pdf/cxtrends/cx-trends-2020-full-report.pdf">69%</a> of consumers attempt to resolve any issue by themselves, but only a third of companies offer this facility. Chatbot fills this gap by offering <strong>self-servicing options</strong> 24/7 and without depending on human resources!</li>
<li>About <a href="https://blog.hubspot.com/sales/live-chat-go-to-market-flaw">67%</a> of buyers expect an immediate response to their marketing, sales, or customer service inquiry — “immediate” being 10 minutes or less. With chatbots in the picture, businesses can set up <strong>live communication channels</strong> and cater to this need nearly 3x faster!</li>
<li>Apart from lending scalability to business operations, it can <strong>reduce costs</strong> by <a href="https://chatbotslife.com/chatbot-2019-trends-and-stats-with-insider-reports-fb71697deee4">30%</a>. The banking, retail, and healthcare industries are expected to save <a href="https://www.juniperresearch.com/press/chatbots-to-deliver-11bn-cost-savings-2023">2.5 billion hours</a> and USD 11 billion through the implementation of chatbots by 2023.</li>
<li>They will <strong>not only keep businesses relevant with the current times but also future-proof them</strong> by laying the foundation for conversational marketing, automation, and so on.</li>
<li>Speaking of <strong>automation</strong>, chatbots can singularly handle  <a href="https://www.comm100.com/platform/analytics/reports/">68.9%</a> of end-to-end customer interactions and <a href="https://www2.deloitte.com/content/dam/Deloitte/nl/Documents/financial-services/deloitte-nl-fsi-chatbots-adopting-the-power-of-conversational-ux.pdf">80%</a> of standard, repetitive tasks, thereby <strong>reducing the personnel load</strong> by 65%. More importantly, they can deliver these results without any errors or bias.</li>
<li>In addition to increasing customer satisfaction levels through maximum engagement, <strong>omnichannel chatbots can reduce churn</strong> by plugging in leakage in a multi-touchpoint environment.</li>
<li>The personification of chatbots can humanize brands and help them foster <strong>emotional and meaningful customer relationships</strong>.</li>
</ul>
<p>Given the whole suite of advantages listed above, the role of chatbots boils down to empowering businesses by making them human, accessible, responsive, and reliable. For some businesses, it can also function as a competitive differentiator that sets them apart from others. And as a culmination of these qualities, your organization can achieve the highest level of customer approval and satisfaction. Who doesn’t want that?</p>
Roadmap For Building A Business Chatbot
<p>Now that we’ve established that a chatbot can be a valuable addition to your business allow us to lead the way. We have formulated a detailed step-by-step guide on how to build a business chatbot — from identifying when it is the right fit, understanding the different types of chatbots, and defining goals, to launching and improving the chatbot. The following is your almanac to building a business chatbot:</p>
<h3>Identifying Whether A Chatbot Is A Right Fit</h3>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2a27eb6-e9a2-4ea8-aa10-919a82b9f606/identifying-whether-a-chatbot-is-a-right-fit.jpg" /></p>
<p>While chatbots offer a plethora of advantages, it is not advisable for <em>all</em> businesses to hop on this trend. After all, the process of building a business chatbot from scratch is not easy on the pocket. Plus, it is a time-consuming and resource-intensive process.</p>
<p>Therefore, it would be wise for business leaders and C-suite executives to involve the crucial stakeholders and ask probing questions, such as those illustrated below, to audit the business processes and identify the need for a chatbot as a solution:</p>
<ul>
<li>Is the workforce heavily engaged in routine, repetitive tasks?</li>
<li>Do customers often consult on similar topics?</li>
<li>Is the business looking to reduce the customer service load and corresponding costs?</li>
<li>Is the business a multilingual customer base spread across time zones?</li>
<li>Does the business want to streamline sales and marketing activities?</li>
<li>Is the business anticipating peak internal and/or external interactions during specific seasons?</li>
<li>Is the business looking for ways to delight customers and stand out from the competitors?</li>
</ul>
<p>If the answer is a resounding <em>yes</em> to the above questions, then it is time to give it serious thought. Apart from the intangible and non-monetary benefits, a cost-to-benefit analysis and <strong>Return on Investment (ROI)</strong> calculation can be performed to justify the impending financial implications.</p>
<h3>Understanding The Different Types Of Chatbots</h3>
<p>As cliche as it may sound, not all chatbots are created alike. Depending on various factors (some of which we discussed in the previous section), businesses can settle for something as simple as a menus-based chatbot. Alternatively, businesses with resources and bandwidth could create something as elaborate as a conversational chatbot with sentiment analysis and <strong>Natural Language Processing (NLP)</strong> capabilities. Frankly, that’s your decision to make. However, to help you in this direction here’s a quick overview of some of the commonly available options:</p>
<ul>
<li><strong>Menu-Based Chatbots</strong><br />Being one of the simplest forms of chatbots, these are essentially decision tree hierarchies presented in a chatbot form. Users can select the appropriate options that will eventually lead to the answer. They are often employed to answer FAQs.</li>
<li><strong>Rule-Based or Linguistic Chatbots</strong><br />These chatbots construct conversational flows along the if-then-else logic. Developers often embed business rules in the form of algorithms, and accordingly, the chatbots will navigate the conversation. However, do bear in mind that the research stage of this chatbot development would have to be exhaustive as one has to account for every permutation and combination of questions that may be asked.</li>
<li><strong>Keyword Recognition-Based Chatbots</strong><br />Unlike menu-based chatbots that participate passively, keyword recognition-based chatbots seek customized trigger words to respond appropriately. These chatbots often employ NLP, a subset of Artificial Intelligence (AI), to hybridize menu-based chatbots with keyword recognition.</li>
<li><strong>Contextual Chatbots</strong><br />These chatbots are a powerhouse of possibilities. They combine a blend of Machine Learning and Artificial Intelligence to understand context, learn from previous iterations, and improve with use and time. They also retain user preferences to make the experience more personalized and customer-centric.</li>
<li><strong>Hybrid Chatbots</strong><br />Hybrid chatbots feature cherry-picked models, architectures, and frameworks from any or some of the chatbot types discussed above, to cater to specific business requirements.</li>
<li><strong>Voice Bots</strong><br />As smart speakers gain more traction amongst end-users and digital assistants like Siri and Alexa become more popular, businesses are harnessing their capabilities to dive into voice bot development. The vernacular approach is found to be more in demand, as evident by a <a href="https://www.oberlo.in/blog/voice-search-statistics#:~:text=if%20not%20more.-,2.,typing%20(PricewaterhouseCoopers%2C%202018">PwC survey</a>.) that highlighted how 71% of consumers prefer voice searches over typing.</li>
</ul>
<p>Knowing these basics will help one understand what is right for the business. Once that is out of the way, you can define the chatbot goals, as discussed in the subsequent section. (Or the following sections may shed light on how to make this decision. It works both ways!)</p>
<h3>Defining The Chatbot Goals</h3>
<p>Chatbots are as versatile as they are diverse. One could use them in lead generation activities, closing deals, upselling or cross-selling during sales, offering technical support, and more! As such, businesses must define their goal right at conception to stay focused on the outcomes.</p>
<p>To understand the primary objective of the chatbot, ask the beneficiary team or department the following questions:</p>
<ul>
<li>What problem will the chatbot solve?</li>
<li>How will the chatbot solve the problem?</li>
</ul>
<p>Outline the answer according to the <a href="https://corporatefinanceinstitute.com/resources/knowledge/other/smart-goal/">SMART</a> (Specific, Measurable, Achievable, Relevant, and Time-Bound) format, and one can stay laser-focused on the results and workflows during development. As an illustration, say that one wants to develop a chatbot to help with customer service requests. The SMART goal in this regard could be that the chatbot will automate 30% of customer queries regarding product details and specifications within the first three months of implementation.</p>
<p>Upon defining the roles and responsibilities of the chatbot, you can then move on to fleshing out additional details using the following steps.</p>
<h3>Selecting The Chatbot Channels And Languages</h3>
<p>Once the basics of the chatbot are outlined t, it is time to make a few strategic decisions, namely the channel and the language. Though chatbots are commonly found on websites and landing pages, they can also be implemented across instant messaging platforms like WhatsApp or Messenger. As such, businesses must identify the viable channels they wish to target. </p>
<p>One will have to gather user data to make a well-rounded decision in this regard. For instance, determine the following: </p>
<ul>
<li>What channels do the employees or customers prefer while availing of chatbot services? </li>
<li>How do the <strong>Key Performance Indicators (KPIs)</strong>, such as response rates, <strong>Net Promoter Score (NPS)</strong>, and so on, reflect across these environments? </li>
</ul>
<p>Based on these findings, shortlist about three to five media for a truly multichannel experience. Follow a similar approach while deciding on the language support offered by the chatbot. After determining the channels and languages, you can move on to assimilating such a solution within your business infrastructure.</p>
<h3>Addressing The Integrations</h3>
<p>Chatbots do not operate in a vacuum; they have to function in harmony with other tools and systems employed by your business. Making such provisions right at the design and development stage will lend immense flexibility and scalability to the chatbot and make it future-proof to some degree. Given this fact, one will have to work out integrations between the chatbot environment and disparate systems, such as the <strong>Customer Relationship Management (CRM)</strong> platform, calendar, cloud storage, maps, payment systems, and more. Again, one will have to take a call on the impact and importance of certain integrations and prioritize them over the others. </p>
<h3>Hiring Talent</h3>
<p>Businesses taking on the mammoth task of in-house chatbot development will have to put together a robust team that can lead the mission to success. Start by treating the process as any other digital transformation project. Prepare a requirement report containing all the features, specifications, and outcomes expected from the chatbot; one may have already done that by following the preceding steps.</p>
<p>After completing the homework, one will need to add the following members to the chatbot development team:</p>
<ul>
<li><strong>Project Manager</strong>: to oversee the chatbot development process, manage resources, budget, and timelines, and handle risks.</li>
<li><strong>Flow Designer</strong>: to orchestrate the chatbot conversation flow.</li>
<li><strong>User Researcher</strong>: to understand the needs and preferences of the target audience.</li>
<li><strong>Copywriter</strong>: to work with the flow designer and create responses that are appropriate, branded, and consistent.</li>
<li><strong>Developer</strong>: to carry out all the under-the-hood chatbot building by creating databases, building APIs, establishing protocols, and so on.</li>
<li><strong>AI/ML trainer</strong>: to teach the AI/ML engine to understand user inputs better and make smarter decisions.</li>
<li><strong>Data analyst</strong>: to extract meaningful, data-driven insights, whether related to chatbot performance or user.</li>
</ul>
<p>Put together your A-team by handpicking experts from various fields, or we have another shortcut approach that you can try — outsourcing!</p>
<h3>Outsourcing Chatbot Development</h3>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/db18d4d2-39d8-4478-a108-70e39185d171/outsourcing-chatbot-development.jpg" /></p>
<p>Building a chatbot development team and maintaining them can be costly, especially when complexities get involved. Not to mention, it is also a hassle to recruit and retain talent, sustain engagement and productivity, and keep everyone motivated towards the goal. In this scenario, outsourcing appears to be a viable alternative. </p>
<p>That being said, choosing the right chatbot development agency is key to the project’s success. Here’s how one can find the right fit:</p>
<ul>
<li>Find an agency that can operate as the developer, strategist, partner, and tech enabler. In other words, they should have the business’s best interests in mind.</li>
<li>Explore their main services, target industries, typical clients, area of expertise, channels, languages, etc.</li>
<li>Seek recommendations from the networks or get in touch with agencies that may have developed chatbots for the business’s competition.</li>
<li>Make it a point to conduct thorough background research on the shortlisted agencies by checking out customer testimonials and feedback.</li>
<li>Request portfolios or past projects to establish credibility and have them vetted too.</li>
<li>Screen in agencies that understand business’s custom requirements and possess the skill and competencies to realize a unique chatbot.</li>
<li>Discuss the budget by comparing chatbot development packages. Account for any additional charges relating to integration, maintenance, post-development support, and so on.</li>
<li>Ask questions related to chatbot and source code ownership.</li>
</ul>
<h3>Sharing Project Requirements</h3>
<p>Once a chatbot development team has been put together, or the expertise of an agency has been engaged, it is time to get down to business. Whatever chatbot-related details that one has collected, such as expectations, desired outcomes, and project deliverables, will have to be shared with the developer/development team. This information will act as a baseline for them and allow them to ideate and innovate without losing focus on the primary goal. At this point, the team might also refine the ideas or negotiate on certain terms so that your chatbot is realistically possible.</p>
<p>Upon discussing all these nitty-gritty, prepare a roadmap with well-defined Key Performance Indicators (KPIs), milestones, deliverables, timelines, and so on.</p>
<p>Now that you’ve laid down the complete foundation, you can start chatbot development!</p>
<h3>Developing The Chatbot</h3>
<p>Based on all the inputs, the development team will work on creating the chatbot as per the business requirements. One may be required to actively participate in the development process, so be prepared to step up! </p>
<h3>The Dry Run</h3>
<p>Rather than delivering a fresh, out-of-the-box chatbot solution, the development team will first deliver a <strong>Proof of Concept (POC)</strong> or a <strong>Minimum Viable Product (MVP)</strong>. This prototype, of sorts, will help to test the chatbot’s performance in real-world conditions.</p>
<p>A prototype gives the opportunity to identify and fix issues before they turn catastrophic. As such, the typical chatbot performance assessment will evaluate across the following spheres:</p>
<ul>
<li><strong>Personality</strong>: Does the chatbot communicate per the brand’s voice and tone?</li>
<li><strong>Onboarding</strong>: How do new users respond to the chatbot, and how fast do they adopt it?</li>
<li><strong>Understanding</strong>: How effectively can the chatbot understand customer requests?</li>
<li><strong>Answering</strong>: What are the elements of a typical response? Are they relevant and contextual?</li>
<li><strong>Navigation</strong>: How easily can chatbots go through an end-to-end conversation? What is its impact on engagement?</li>
<li><strong>Error management</strong>: What is the fallback rate? How efficient is the chatbot in handling the resulting errors and recovering from them?</li>
<li><strong>Security</strong>: How secure is the conversation? Is the chatbot compliant with any data security and privacy regulations?</li>
<li><strong>Intelligence</strong>: Can the chatbot retain any information, and does it use it to gain context about the user?</li>
<li><strong>Response times</strong>: How quickly can the chatbot resolve queries?</li>
</ul>
<p>Of course, this list is purely indicative, and you will have to modify it according to your industry, chatbot type, roles and responsibilities, and other variables.</p>
<h3>Launch</h3>
<p>After the beta testing is a success, the development team will start creating the full version of the chatbot. All the necessary changes will be implemented, additions will be incorporated, and integrations will be tested. Once the chatbot performs to expectations, it is time to launch it into the real world!</p>
<p>Bup bup bup! Hold your horses because that’s not all! You have one final consideration to make for the continuous improvement of your chatbot. We discuss that in the final section.</p>
<h3>Testing, Measuring, Tracking</h3>
<p>Simply launching a chatbot is not enough. After all, chatbots are not “build it and forget it” things.</p>
<p>Businesses need to vigilantly monitor their performance to pave the way for continuous growth. First, the business will have to define certain KPIs and corresponding parameters that serve as benchmarks to analyze the chatbot’s performance. Next, businesses will have to take note of every anomaly or discrepancy and find justification for the same. Then, perform corrections are required to get the performance back to optimal values. Finally, the business will have to detect any underlying patterns.</p>
<p>In the meantime, one will also find opportunities to scale and expand your chatbot capabilities based on market conditions, ongoing trends, customer feedback, and metrics like satisfaction rates. Such a holistic approach will allow your chatbot to improve at every iteration!</p>
Tips And Tricks To Master Chatbot Development
<p>Now that we have indulged in some heavyweight reading about chatbot development, let’s polish this knowledge with a few important tips and tricks to make the process fun:</p>
<ul>
<li>For a cash-strapped startup or a small business looking for a DIY approach, they might <strong>find some chatbot builder platforms online</strong>.</li>
<li><strong>Grant a unique name and personality</strong> to the chatbot and maintain it consistently on all fronts.</li>
<li>Humans want to connect with humans. So, put in the effort to <strong>humanize the chatbot</strong> and make it friendly and approachable.</li>
<li>Train the chatbot to <strong>communicate in simple language</strong> so that they are easily understood by various users.</li>
<li>Delegate complex and repetitive tasks to chatbots but also grant users the <strong>opportunity to switch to a human agent</strong>.</li>
<li><strong>Evaluate and optimize the bot regularly</strong>, but avoid overwhelming audiences by unveiling all features at once. Follow a graded approach.</li>
</ul>
Closing Thoughts
<p>Considering that nearly <a href="https://www.intercom.com/blog/the-state-of-chatbots/">3 out of 4 customers</a> expect to encounter a chatbot while visiting a business website, chatbots have become more of a necessity than a “nice-to-have” feature. Fortunately, the business already has a head-start in meeting this expectation, given that it has reached the end of this manual. </p>
<p>As a treat for your perseverance, here’s a quick recap of the detailed 10-step process:</p>
<ol>
<li>Start by identifying whether or not a chatbot is a right fit for your business model.</li>
<li>Understand the different types of chatbots and identify the ones you need.</li>
<li>After settling on a type, give your chatbot a purpose by defining its goals.</li>
<li>Once the end goal is in view, iron out the details surrounding the language, channels, and so on.</li>
<li>Work out the different integrations that will be required and find out ways to accommodate them.</li>
<li>Recruit a team of experienced professionals or outsource the entire job (you do you)!</li>
<li>Regardless of your choice above, document and share defined project requirements so you can get a chatbot as per your expectations.</li>
<li>Get started with the chatbot development, and once ready, send the prototype on a dry run.</li>
<li>Finally, when you have worked out the kinks, gear up for D-day as you launch the chatbot.</li>
<li>Round up the chatbot development process with continuous testing, measuring, and tracking its progress so that it continues delivering value to your business.</li>
</ol>
<p>Sure, the process seems overwhelming, but it is well worth the effort. All it takes is a little initiative to get the ball rolling, and once such an ambitious project gains momentum, it would put your business on the fast track to customer-friendliness.</p>
<p>So, get started with building the business chatbot now!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Devansh Bansal)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2bd63d9c-b78d-4900-8a7c-3539bf497433/roadmap-building-business-chatbot.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Node.js Authentication With Twilio Verify]]></title>
            <link>https://smashingmagazine.com/2022/10/nodejs-authentication-twilio-verify/</link>
            <guid>https://smashingmagazine.com/2022/10/nodejs-authentication-twilio-verify/</guid>
            <pubDate>Fri, 07 Oct 2022 06:00:00 GMT</pubDate>
            <description><![CDATA[Integrate two-factor authentication into your Express.js app by building an application that authenticates users using password-based authentication and OTPs powered by the Twilio Verify service.]]></description>
            <content:encoded><![CDATA[<p>Building authentication into an application is a tedious task. However, making sure this authentication is bulletproof is even harder. As developers, it’s beyond our control what the users do with their passwords, how they protect them, who they give them to, or how they generate them, for that matter. All we can do is get close enough to ensure that the authentication request was made by our user and not someone else. OTPs certainly help with that, and services like <em>Twilio Verify</em> help us to generate secured OTPs quickly without having to bother about the logic. </p>
<h3>What’s Wrong With Passwords?</h3>
<p>There are several problems faced by developers when using password-based authentication alone since it has the following issues:  </p>
<ol>
<li>Users might forget passwords and write them down (making them steal-able);</li>
<li>Users might reuse passwords across services (making all their accounts vulnerable to one data breach);</li>
<li>Users might use easy passwords for remembrance purposes, making them relatively easy to hack.</li>
</ol>
<h3>Enter OTPs</h3>
<p>A <strong>one-time password</strong> (<strong>OTP</strong>) is a password or PIN valid for only one login session or transaction. Once it can only be used once, I’m sure you can already see how the usage of OTPs makes up for the shortcomings of traditional passwords.</p>
<p>OTPs add an extra layer of security to applications, which the traditional password authentication system cannot provide. OTPs are randomly generated and are only valid for a short period of time, avoiding several deficiencies that are associated with traditional password-based authentication.</p>
<p>OTPs can be used to substitute traditional passwords or reinforce the passwords using the two-factor authentication (2FA) approach. Basically, OTPs can be used wherever you need to ensure a user’s identity by relying on a personal communication medium owned by the user, such as phone, mail, and so on.</p>
<p>This article is for developers who want to learn about: </p>
<ol>
<li>Learn how to build a Full-stack express.js application;</li>
<li>Implement authentication with passport.js;</li>
<li>How to <a href="https://www.twilio.com/verify">Twilio Verify</a> for phone-based user verification.</li>
</ol>
<p>To achieve these objectives, we’ll build a full-stack application using <a href="https://nodejs.org/">node.js</a>, <a href="https://expressjs.com/">express.js</a>, <a href="https://ejs.co/">EJS</a> with authentication done using <a href="http://www.passportjs.org/">passport.js</a> and  protected routes that require OTPs for access. </p>
<p><strong>Note</strong>: <em>I’d like to mention that we’ll be using some 3rd-party (built by other people) packages in our application. This is a common practice, as there is no need to re-invent the wheel. Could we create our own node server? Yes, of course. However, that time could be better spent on building logic specifically for our application.</em></p>
Table Of Contents
<ol>
<li>Basic overview of Authentication in web applications;</li>
<li>Building an Express server;</li>
<li>Integrating <a href="https://www.mongodb.com/">MongoDB</a> into our Express application;</li>
<li>Building the views of our application using EJS templating engine;</li>
<li>Basic authentication using a passport number;</li>
<li>Using Twilio Verify to protect routes.</li>
</ol>
Requirements
<ul>
<li>Node.js</li>
<li>MongoDB</li>
<li>A text editor (e.g. VS Code)</li>
<li>A web browser (e.g. Chrome, Firefox)</li>
<li>An understanding of HTML, CSS, JavaScript, Express.js</li>
</ul>
<p>Although we will be building the whole application from scratch, here’s the <a href="https://github.com/oviecodes/authwithTwilioVerify">GitHub Repository</a> for the project.</p>
Basic Overview Of Authentication In Web Applications
<h3>What Is Authentication?</h3>
<p><strong>Authentication</strong> is the whole process of identifying a user and verifying that a user has an account on our application.</p>
<blockquote>Authentication is not to be confused with authorization. Although they work hand in hand, there’s no authorization without authentication.</blockquote> 

<p>That being said, let’s see what authorization is about.</p>
<h3>What Is Authorization?</h3>
<p><strong>Authorization</strong> at its most basic, is all about user permissions — what a user is allowed to do in the application. In other words:  </p>
<ol>
<li>Authentication: Who are you?</li>
<li>Authorization: What can you do?</li>
</ol>
<blockquote>Authentication comes before Authorization. <br /> There is no Authorization without Authentication.</blockquote>

<p>The most common way of authenticating a user is via <code>username</code> and <code>password</code>. </p>
Setting Up Our Application
<p>To set up our application, we create our project directory:</p>
<pre><code>mkdir authWithTwilioVerify
</code></pre>

Building An Express Server
<p>We’ll be using <a href="https://expressjs.com/">Express.js</a> to build our server.</p>
<h3>Why Do We Need Express?</h3>
<p>Building a server in <code>Node</code> could be tedious, but frameworks make things easier for us.
<code>Express</code> is the most popular <code>Node</code> web framework. It enables us to:</p>
<ul>
<li>Write handlers for requests with different <code>HTTP</code> verbs at different <code>URL</code> paths (routes);</li>
<li>Integrate with <code>view</code> rendering engines in order to generate responses by inserting data into templates;</li>
<li>Set common web application settings — like the <code>port</code> used for connecting, and the location of templates used for rendering the response;</li>
<li>Add additional request processing <code>middleware</code> at any point within the request handling pipeline.</li>
</ul>
<p>In addition to all of these, developers have created compatible middleware packages to address almost any web development problem.</p>
<p>In our <code>authWithTwilioVerify</code> directory, we initialize a <code>package.json</code> that holds information concerning our project.</p>
<pre><code>cd authWithTwilioVerify
npm init -y
</code></pre>

<p>In Keeping with the Model View Controller(MVC) architecture, we have to create the following folders in our <code>authWithTwilioVerify</code> directory:</p>
<pre><code>mkdir public controllers views routes config models
</code></pre>

<p>Many developers have different reasons for using the MVC architecture, but for me personally, it’s because:  </p>
<ol>
<li>It encourages separation of concerns;</li>
<li>It helps in writing clean code;</li>
<li><p>It provides a structure to my codebase, and since other developers use it, understanding the codebase won’t be an issue.  </p>
</li>
<li><p><code>Controllers</code> directory houses the controllers;</p>
</li>
<li><code>Models</code> directory holds our database models;</li>
<li><code>Public</code> directory holds our static assets e.g. CSS files, images e.t.c.;</li>
<li><code>Views</code> directory contains the pages that will be rendered in the browser;</li>
<li><code>Routes</code> directory holds the different routes of our application;</li>
<li><code>Config</code> directory holds information that is peculiar to our application.  </li>
</ol>
<p>We need to install the following packages to build our app:</p>
<ul>
<li><code>nodemon</code> automatically restarts our server when we make changes;</li>
<li><code>express</code> gives us a nice interface to handle routes;</li>
<li><code>express-session</code> allows us to handle sessions easily in our express application;</li>
<li><code>connect-flash</code> allows us to display messages to our users.</li>
</ul>
<pre><code>npm install nodemon -D
</code></pre>

<p>Add the script below in the <code>package.json</code> file to start our server using <code>nodemon</code>.</p>
<pre><code>"scripts": {
    "dev": "nodemon index"
    },
</code></pre>

<pre><code>npm install express express-session connect-flash --save
</code></pre>  

<p>Create an <code>index.js</code> file and add the necessary packages for our app.</p>
<p>We have to <code>require</code> the installed packages into our <code>index.js</code> file so that our application runs well then we configure the packages as follows:</p>
<pre><code>const path = require('path')
const express = require('express');
const session = require('express-session')
const flash = require('connect-flash')

const port = process.env.PORT || 3000
const app = express();

app.use('/static', express.static(path.join(__dirname, 'public')))
app.use(session({ 
    secret: "please log me in",
    resave: true,
    saveUninitialized: true
    }
));

app.use(express.json())
app.use(express.urlencoded({ extended: true }))

// Connect flash
app.use(flash());

// Global variables
app.use(function(req, res, next) {
    res.locals.success_msg = req.flash('success_msg');
    res.locals.error_msg = req.flash('error_msg');
    res.locals.error = req.flash('error');
    res.locals.user = req.user
    next();
});

//define error handler
app.use(function(err, req, res, next) {
    res.render('error', {
        error : err
    })
})

//listen on port
app.listen(port, () =&gt; {
    console.log(`app is running on port ${port}`)
});
</code></pre>

<p>Let’s break down the segment of code above.</p>
<p>Apart from the <code>require</code> statements, we make use of the <code>app.use()</code> function — which enables us to use application level <code>middleware</code>. </p>
<p>Middleware functions are functions that have access to the request object, response object, and the next middleware function in the application’s request and response cycle.</p>
<blockquote>Most packages that have access to our application’s state (request and response objects) and can alter those states are usually used as middleware. Basically, middleware adds functionality to our express application.</blockquote>

<p>It’s like handing the application state over to the middleware function, saying here’s the state, do what you want with it, and call the <code>next()</code> function to the next middleware.</p>
<p>Finally, we tell our application server to listen for requests to port 3000.</p>
<p>Then in the terminal run:</p>
<pre><code>npm run dev
</code></pre>

<p>If you see <code>app is running on port 3000</code> in the terminal, that means our application is running properly.</p>
Integrating MongoDB Into Our Express Application
<p>MongoDB stores data as documents. These documents are stored in MongoDB in JSON (JavaScript Object Notation) format. Since we’re using Node.js, it’s pretty easy to convert data stored in MongoDB to JavaScript objects and manipulate them.</p>
<p>To install MongoDB in your machine visit the MongoDB <a href="https://www.mongodb.com/docs/manual/installation/">documentation</a>.</p>
<p>In order to integrate MongoDB into our express application, we’ll be using <a href="https://mongoosejs.com/">Mongoose</a>. Mongoose is an ODM(which is the acronym for <code>object data mapper</code>).</p>
<p>Basically, Mongoose makes it easier for us to use MongoDB in our application by creating a wrapper around Native MongoDB functions.</p>
<pre><code>npm install mongoose --save
</code></pre>

<p>In <code>index.js</code>, it requires <code>mongoose</code>:</p>
<pre><code>const mongoose = require('mongoose')

const app = express()

//connect to mongodb
mongoose.connect('mongodb://localhost:27017/authWithTwilio', 
{ 
    useNewUrlParser: true, 
    useUnifiedTopology: true 
})
.then(() =&gt; {
    console.log(`connected to mongodb`)
})
.catch(e =&gt; console.log(e))
</code></pre>

<p>The <code>mongoose.connect()</code> function allows us to set up a connection to our MongoDB database using the connection string.</p>
<p>The format for the connection string is <code>mongodb://localhost:27017/{database_name}</code>.</p>
<p><code>mongodb://localhost:27017/</code> is MongoDB’s default host, and the <code>database_name</code> is whatever we wish to call our database.</p>
<p>Mongoose connects to the database called <code>database_name</code>. If it doesn’t exist, it creates a database with <code>database_name</code> and connects to it.</p>
<p><code>Mongoose.connect()</code> is a promise, so it’s always a good practice to log a message to the console in the <code>then()</code> and <code>catch()</code> methods to let us know if the connection was successful or not.</p>
<p>We create our user model in our <code>models</code> directory:</p>
<pre><code>cd models
touch user.js
</code></pre>  

<p><code>user.js</code> requires mongoose and create our user schema:</p>
<pre><code>const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    name : {
        type: String,
        required: true
    },
    username : {
        type: String,
        required: true
    },
    password : {
        type: String,
        required: true
    },
    phonenumber : {
        type: String,
        required: true
    },
    email : {
        type: String,
        required: true
    },
    verified: Boolean
})

module.exports = mongoose.model('user', userSchema)
</code></pre>

<p>A <code>schema</code> provides a structure for our data. It shows how data should be structured in the database. Following the code segment above, we specify that a user object in the database should always have <code>name</code>, <code>username</code>, <code>password</code>, <code>phonenumber</code>, and <code>email</code>. Since those fields are required, if the data pushed into the database lack any of these required fields, mongoose throws an error.</p>
<p>Though you could create schemaless data in MongoDB, it is not advisable to do so — trust me, your data would be a mess. Besides, schemas are great. They allow you to dictate the structure and form of objects in your database — who wouldn’t want such powers?</p>
<h3>Encrypting Passwords</h3>
<blockquote>Warning: never store users’ passwords as plain text in your database. <br /> Always encrypt the passwords before pushing them to the database.</blockquote>

<p>The reason we need to encrypt user passwords is this: in case someone somehow gains access to our database, we have some assurance that the user passwords are safe — because all this person would see would be a <code>hash</code>. This provides some level of security assurance, but a sophisticated hacker may still be able to crack this <code>hash</code> if they have the right tools. Hence the need for OTPs, but let’s focus on encrypting user passwords for now.</p>
<p><code>bcryptjs</code> provides a way to encrypt and decrypt users’ passwords.</p>
<pre><code>npm install bcryptjs
</code></pre>

<p>In <code>models/user.js</code>, it requires <code>bcryptjs</code>:</p>
<pre><code>//after requiring mongoose
const bcrypt = require('bcryptjs')

//before module.exports
//hash password on save
userSchema.pre('save', async function() {
    return new Promise( async (resolve, reject) =&gt; {
        await bcrypt.genSalt(10, async (err, salt) =&gt; {
            await bcrypt.hash(this.password, salt, async (err, hash) =&gt; {
                if(err) {
                    reject (err)
                } else {
                    resolve (this.password = hash)
                }
            });
        });
    })
})
userSchema.methods.validPassword = async function(password) {
    return new Promise((resolve, reject) =&gt; {
        bcrypt.compare(password, this.password, (err, res) =&gt; {
            if(err) {
                reject (err)
            } 
            resolve (res)
        }); 
    })
}
</code></pre>

<p>The code above does a couple of things. Let’s see them.</p>
<p>The <code>userSchema.pre('save', callback)</code> is a <code>mongoose hook</code> that allows us to manipulate data before saving it to the database. In the <code>callback function</code>, we return a promise which tries to <code>hash(encrypt) bcrypt.hash()</code> the password using the <code>bcrypt.genSalt()</code> we generated. If an error occurs during this <code>hashing</code>, we <code>reject</code> or we <code>resolve</code> by setting <code>this.password = hash</code>. <code>this.password</code> being the <code>userSchema password</code>.</p>
<p>Next, <code>mongoose</code> provides a way for us to append methods to schemas using the <code>schema.methods.method_name</code>. In our case, we’re creating a method that allows us to validate user passwords. Assigning a function value to  <code>*userSchema.methods.validPassword*</code>, we can easily use bcryptjs compare method <code>bcryprt.compare()</code> to check if the password is correct or not. </p>
<p><code>bcrypt.compare()</code> takes two arguments and a callback. The <code>password</code> is the password that is passed when calling the function, while <code>this.password</code> is the one from userSchema.</p>
<blockquote>I prefer this method of validating users’ password because it’s like a property on the user object. One could easily call <code>User.validPassword(password)</code> and get true or false as a response.</blockquote>

<p>Hopefully, you can see the usefulness of mongoose. Besides creating a schema that gives structure to our database objects, it also provides nice methods for manipulating those objects — that would have been otherwise somewhat though using native MongoDB alone.</p>
<blockquote>Express is to Node, as Mongoose is to MongoDB.</blockquote>

Building The Views Of Our Application Using EJS Templating Engine
<p>Before we start building the views of our application, let’s take a look at the front-end architecture of our application.</p>
<h3>Front-end Architecture</h3>
<p><code>EJS</code> is a templating engine that works with Express directly. There’s no need for a different front-end framework. <code>EJS</code> makes the passing of data very easy. It also makes it easier to keep track of what’s going on since there is no switching from back-end to front-end.</p>
<p>We’ll have a <code>views</code> directory, which will contain the files to be rendered in the browser. All we have to do is call the <code>res.render()</code> method from our controller. For example, if we wish to render the login page, it’s as simple as <code>res.render('login')</code>. We could also pass data to the views by adding an additional argument — which is an object to the <code>render()</code> method, like <code>res.render('dashboard', { user })</code>. Then, in our <code>view</code>, we could display the data with the <code>evaluation syntax &lt;%= %&gt;</code>. Everything with this tag is evaluated — for instance, <code>&lt;%= user.username %&gt;</code> displays the value of the username property of the user object. Aside from the evaluation syntax, <code>EJS</code> also provides a <strong>control syntax</strong> (<code>&lt;% %&gt;</code>), which allows us to write program control statements such as conditionals, loops, and so forth.</p>
<p>Basically, <code>EJS</code> allows us to embed JavaScript in our HTML.</p>
<pre><code>npm install ejs express-ejs-layouts --save
</code></pre>

<p>In <code>index.js</code>, it requires <code>express-ejs-layouts</code>: </p>
<pre><code>//after requiring connect-flash
const expressLayouts = require('express-ejs-layouts')

//after the mongoose.connect logic
app.use(expressLayouts);
app.set('view engine', 'ejs');
</code></pre>

<p>Then:</p>
<pre><code>cd views
touch layout.ejs
</code></pre>

<p>In <code>views/layout.ejs</code>,</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
    &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt;
        &lt;link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous"&gt;
        &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css"&gt;
        &lt;link rel="stylesheet" href="/static/css/app.css"&gt;
        &lt;link rel="stylesheet" href="/static/css/intlTelInput.css"&gt;
    &lt;title&gt;Node js authentication&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;

    &lt;div class="ui container"&gt;
        &lt;%- body %&gt;
    &lt;/div&gt;
    &lt;script
        src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"
    &gt;&lt;/script&gt;
    &lt;script src="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js"&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>The <code>layout.ejs</code> file serves like an <code>index.html</code> file, where we can include all our scripts and stylesheets. Then, in the <code>div</code> with classes <code>ui container</code>, we render the <code>body</code> — which is the rest of our application views.</p>
<p>We’ll be using <a href="https://semantic-ui.com/">semantic UI</a> as our CSS framework.</p>
<h3>Building The Partials</h3>
<p>Partials are where we store re-usable code, so that we don’t have to rewrite them every single time. All we do is <em>include</em> them wherever they are needed.</p>
<blockquote>You could think of partials like components in front-end frameworks: they encourage DRY code, and also code re-usability. Think of partials as an earlier version of components.</blockquote>

<p>For example, we want partials for our menu, so that we do not have to write code for it every single time we need the menu on our page.</p>
<pre><code>cd views
mkdir partials
</code></pre>

<p>We’ll create two files in the <code>/views/partials</code> folder:</p>
<pre><code>cd partials
touch menu.ejs message.ejs
</code></pre>

<p>In <code>menu.ejs</code>,</p>
<pre><code>&lt;div class="ui secondary  menu"&gt;
    &lt;a class="active item" href="/"&gt;
        Home
    &lt;/a&gt;
    &lt;% if(locals.user) { %&gt;
        &lt;a class="ui item" href="/users/dashboard"&gt;
        dashboard
        &lt;/a&gt;
        &lt;div class="right menu"&gt;
        &lt;a class='ui item'&gt;
            &lt;%= user.username %&gt;
        &lt;/a&gt;
        &lt;a class="ui item" href="/users/logout"&gt;
            Logout
        &lt;/a&gt;
        &lt;/div&gt;
    &lt;% } else {%&gt;
        &lt;div class="right menu"&gt;
        &lt;a class="ui item" href="/users/signup"&gt;
            Sign Up
        &lt;/a&gt;
        &lt;a class="ui item" href="/users/login"&gt;
            Login
        &lt;/a&gt;
        &lt;/div&gt;
    &lt;% } %&gt;
    &lt;/div&gt;
</code></pre>

<p>In <code>message.ejs</code>,</p>
<pre><code>&lt;% if(typeof errors != 'undefined'){ %&gt; &lt;% errors.forEach(function(error) { %&gt;
    &lt;div class="ui warning message"&gt;
        &lt;i class="close icon"&gt;&lt;/i&gt;
        &lt;div class="header"&gt;
            User registration unsuccessful
        &lt;/div&gt;
        &lt;%= error.msg %&gt;
    &lt;/div&gt;
&lt;% }); %&gt; &lt;% } %&gt; &lt;% if(success_msg != ''){ %&gt;
&lt;div class="ui success message"&gt;
    &lt;i class="close icon"&gt;&lt;/i&gt;
    &lt;div class="header"&gt;
        Your user registration was successful.
    &lt;/div&gt;
    &lt;%= success_msg %&gt;
&lt;/div&gt;
&lt;% } %&gt; &lt;% if(error_msg != ''){ %&gt;
&lt;div class="ui warning message"&gt;
    &lt;i class="close icon"&gt;&lt;/i&gt;
    &lt;div class="header"&gt;

    &lt;/div&gt;
    &lt;%= error_msg %&gt;
&lt;/div&gt;
&lt;% } %&gt; &lt;% if(error != ''){ %&gt;
&lt;div class="ui warning message"&gt;
    &lt;i class="close icon"&gt;&lt;/i&gt;
    &lt;div class="header"&gt;

    &lt;/div&gt;
    &lt;%= error %&gt;
&lt;/div&gt;
&lt;% } %&gt;
</code></pre>

<h3>Building The Dashboard Page</h3>
<p>In our views folder, we create a <code>dashboard.ejs</code> file:</p>
<pre><code>&lt;%- include('./partials/menu') %&gt;
&lt;h1&gt;
    DashBoard
&lt;/h1&gt;
</code></pre>

<p>Here, we include the <code>menu partials</code> so we have the menu on the page.</p>
<h3>Building The Error Page</h3>
<p>In our views folder, we create an <code>error.ejs</code> file:</p>
<pre><code>&lt;h1&gt;Error Page&lt;/h1&gt;
&lt;p&gt;&lt;%= error %&gt;&lt;/p&gt;
</code></pre>

<h3>Building The Home Page</h3>
<p>In our views folder, we create a <code>home.ejs</code> file:</p>
<pre><code>&lt;%- include('./partials/menu') %&gt;
&lt;h1&gt;
    Welcome to the Home Page
&lt;/h1&gt;
</code></pre>

<h3>Building The Login Page</h3>
<p>In our views folder, we create a <code>login.ejs</code> file:</p>
<pre><code>&lt;div class="ui very padded text container segment"&gt;
    &lt;%- include ('./partials/message') %&gt;
    &lt;h3&gt;
        Login Form
    &lt;/h3&gt;

    &lt;form class="ui form" action="/users/login" method="POST"&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Email&lt;/label&gt;
        &lt;input type="email" name="email" placeholder="Email address"&gt;
    &lt;/div&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Password&lt;/label&gt;
        &lt;input type="password" name="password" placeholder="Password"&gt;
    &lt;/div&gt;
    &lt;button class="ui button" type="submit"&gt;Login&lt;/button&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre>

<h3>Building The Verify Page</h3>
<p>In our views folder, we create a <code>login.ejs</code> file:</p>
<pre><code>&lt;%- include ('./partials/message') %&gt;
&lt;h1&gt;Verify page&lt;/h1&gt;
&lt;p&gt;please verify your account&lt;/p&gt;
&lt;form class="ui form" action="/users/verify" method="POST"&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;verification code&lt;/label&gt;
        &lt;input type="text" type="number" name="verifyCode" placeholder="code"&gt;
    &lt;/div&gt;
    &lt;button class="ui button" type="submit"&gt;Verify&lt;/button&gt;
&lt;/form&gt;
&lt;br&gt;
&lt;a class="ui button" href="/users/resend"&gt;Resend Code&lt;/a&gt;
</code></pre>

<p>Here, we provide a form for users to enter the verification code that will be sent to them.</p>
<h3>Building The Sign Up Page</h3>
<p>We need to get the user’s mobile number, and we all know that country codes differ from country to country. Therefore, we’ll use the <code>[intl-tel-input](https://intl-tel-input.com/)</code> to help us with the country codes and validation of phone numbers.</p>
<pre><code>npm install intl-tel-input
</code></pre>

<ol>
<li><p>In our public folder, we create a <code>css</code> directory, <code>js</code> directory and <code>img</code> directory:</p>
 <pre><code>cd public
 mkdir css js img
 </code></pre>
</li>
<li><p>We copy the <code>intlTelInput.css</code> file from  <code>node_modules\intl-tel-input\build\css\</code> file into our <code>public/css</code> directory.</p>
</li>
<li>We copy both the  <code>intlTelInput.js</code> and <code>utils.js</code> from <code>node_modules\intl-tel-input\build\js\</code> folder into  our <code>public/js</code> directory.</li>
<li>We copy both the <code>flags.png</code> and <a href="mailto:`flags@2x.png">`flags@2x.png</a><code>from</code>node_modules\intl-tel-input\build\img` folder into  our <code>public/img</code> directory.</li>
</ol>
<p>We create an app.css in our <code>public/css</code> folder:</p>
<pre><code>cd public
touch app.css
</code></pre>

<p>In <code>app.css</code>, add the styles below: </p>
<pre><code>.iti__flag {background-image: url("/static/img/flags.png");}

@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .iti__flag {background-image: url("/static/img/flags@2x.png");}
}
.hide {
    display: none
}
.error {
    color: red;
    outline: 1px solid red;
}
.success{
    color: green;
}
</code></pre>

<p>Finally, we create a <code>signup.ejs</code> file in our views folder:</p>
<pre><code>&lt;div class="ui very padded text container segment"&gt;
    &lt;%- include ('./partials/message') %&gt;
    &lt;h3&gt;
        Signup Form
    &lt;/h3&gt;

    &lt;form class="ui form" action="/users/signup" method="POST"&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Name&lt;/label&gt;
        &lt;input type="text" name="name" placeholder="name"&gt;
    &lt;/div&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Username&lt;/label&gt;
        &lt;input type="text" name="username" placeholder="username"&gt;
    &lt;/div&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Password&lt;/label&gt;
        &lt;input type="password" name="password" placeholder="Password"&gt;
    &lt;/div&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Phone number&lt;/label&gt;
        &lt;input type="tel" id='phone'&gt;
        &lt;span id="valid-msg" class="hide success"&gt;✓ Valid&lt;/span&gt;
        &lt;span id="error-msg" class="hide error"&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="field"&gt;
        &lt;label&gt;Email&lt;/label&gt;
        &lt;input type="email" name="email" placeholder="Email address"&gt;
    &lt;/div&gt;

    &lt;button class="ui button" type="submit"&gt;Sign up&lt;/button&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;script src="/static/js/intlTelInput.js"&gt;&lt;/script&gt;
&lt;script&gt;
    const input = document.querySelector("#phone")
    const errorMsg = document.querySelector("#error-msg")
    const validMsg = document.querySelector("#valid-msg")

    const errorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];
    const iti = window.intlTelInput(input, {
        separateDialCode: true,
        autoPlaceholder: "aggressive",
        hiddenInput: "phonenumber",
        utilsScript: "/static/js/utils.js?1590403638580" // just for formatting/placeholders etc
    });
    var reset = function() {
        input.classList.remove("error");
        errorMsg.innerHTML = "";
        errorMsg.classList.add("hide");
        validMsg.classList.add("hide");
    };
    // on blur: validate
    input.addEventListener('blur', function() {
        reset();
        if (input.value.trim()) {
        if (iti.isValidNumber()) {
            validMsg.classList.remove("hide");
        } else {
            input.classList.add("error");

            var errorCode = iti.getValidationError();
            errorMsg.innerHTML = errorMap[errorCode];
            errorMsg.classList.remove("hide");
        }
        }
    });
    // on keyup / change flag: reset
    input.addEventListener('change', reset);
    input.addEventListener('keyup', reset);

    document.querySelector('.ui.form').addEventListener('submit', (e) =&gt; {
        if(!iti.isValidNumber()){
        e.preventDefault()
        }
    })
&lt;/script&gt; 
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a3bb8259-123b-4148-8963-efed0bfd2007/1-nodejs-authentication-twilio-verify.jpg" /></p>
Basic Authentication With Passport
<p>Building authentication into an application can be really complex and time-draining, so we need a package to help us with that.</p>
<blockquote>Remember: do not re-invent the wheel, except if your application has a specific need.</blockquote>

<p><code>passport</code> is a package that helps out with authentication in our express application.</p>
<p><code>passport</code> has many strategies we could use, but we’ll be using the <code>local-strategy</code> — which basically does <code>username and password authentication</code>.</p>
<blockquote>One advantage of using passport is that, since it has many strategies, we can easily extend our application to use its other strategies.</blockquote>

<pre><code>npm install passport passport-local
</code></pre>

<p>In <code>index.js</code> we add the following code:</p>
<pre><code>//after requiring express
const passport = require('passport')

//after requiring mongoose
const { localAuth } = require('./config/passportLogic')

//after const app = express()
localAuth(passport)

//after app.use(express.urlencoded({ extended: true }))
app.use(passport.initialize());
app.use(passport.session());
</code></pre>

<p>We’re adding some <code>application level middleware</code> to our <code>index.js</code> file — which tells the application to use the <code>passport.initialize()</code> and the <code>passport.session()</code> middleware.</p>
<p><code>Passport.initialize()</code> initializes <code>passport</code>, while the <code>passport.session()</code> middleware let’s <code>passport</code> know that we’re using <code>session</code> for authentication.</p>
<p>Do not worry much about the <code>localAuth()</code> function. That takes the <code>passport</code> object as an argument, and we’ll create the function just below.</p>
<p>Next, we create a <code>config</code> folder and create the needed files:</p>
<pre><code>mkdir config
touch  passportLogic.js middleware.js
</code></pre>

<p>In <code>passportLogic.js</code>,</p>
<pre><code>//file contains passport logic for local login
const LocalStrategy = require('passport-local').Strategy;
const mongoose = require('mongoose')
const User = require('../models/user')
const localAuth = (passport) =&gt; {
    passport.use(
        new LocalStrategy(
        { usernameField: 'email' }, async(email, password, done) =&gt; {
            try {
                const user = await User.findOne({ email: email }) 

                if (!user) {
                    return done(null, false, { message: 'Incorrect email' });
                }
                //validate password
                const valid = await user.validPassword(password)
                if (!valid) {
                    return done(null, false, { message: 'Incorrect password.' });
                }
                return done(null, user);
            } catch (error) {
                return done(error)
            }
        }
    ));
    passport.serializeUser(function(user, done) {
        done(null, user.id);
    });

    passport.deserializeUser(function(id, done) {
        User.findById(id, function(err, user) {
            done(err, user);
        });
    });
}
module.exports = {
    localAuth
}
</code></pre>

<p>Let’s understand what is going on in the code above.</p>
<p>Apart from the require statements, we create the <code>localAuth()</code> function, which will be exported from the file. In the function, we call the <code>passport.use()</code> function that uses the <code>LocalStrategy()</code> for <code>username</code> and <code>password</code> based authentication.</p>
<p>We specify that our <code>usernameField</code> should be <code>email</code>. Then, we find a user that has that particular <code>email</code> — if none exists, then we return an error in the <code>done()</code> function. However, if a user exists, we check if the password is valid using the <code>validPassword</code> method on the <code>User</code> object. If it’s invalid, we return an error. Finally, if everything is successful, we return the <code>user</code> in <code>done(null, user)</code>.</p>
<p><code>passport.serializeUser()</code> and <code>passport.deserializeUser()</code> helps in order to support login sessions. Passport will serialize and deserialize <code>user</code> instances <em>to</em> and <em>from</em> the session.</p>
<p>In <code>middleware.js</code>, </p>
<pre><code>//check if a user is verified
const isLoggedIn = async(req, res, next) =&gt; {
    if(req.user){
        return next()
    } else {
        req.flash(
            'error_msg',
            'You must be logged in to do that'
        )
        res.redirect('/users/login')
    }
}
const notLoggedIn = async(req, res, next) =&gt; {
    if(!req.user) {
        return next()
    } else{
        res.redirect('back')
    }
}


module.exports = {
    isLoggedIn,
    notLoggedIn
}
</code></pre>

<p>Our middleware file contains two(2) <code>route level middleware</code>, which will be used later in our routes. </p>
<blockquote>Route-level middleware is used by our routes, mostly for route protection and validation, such as authorization, while application level middleware is used by the whole application.</blockquote>

<p><code>isLoggedIn</code> and <code>notLoggedIn</code> are <code>route level middleware</code> that checks if a user is logged in. We use these middlewares to block access to routes that we want to make accessible to logged-in users.</p>
<h3>Building The Sign-Up Controllers</h3>
<pre><code>cd controllers
mkdir signUpController.js loginController.js
</code></pre>

<p>In <code>signUpController.js</code>, we: </p>
<ol>
<li>Check for users’ credentials;</li>
<li>Check if a user with that detail(email or phone-number) exists in our database;</li>
<li>Create an error if the user exists;</li>
<li>Finally, if such a user does not exist, we create a new user with the given details and redirect to the <code>login</code> page.</li>
</ol>
<pre><code>const mongoose = require('mongoose')
const User = require('../models/user')

//sign up Logic
const getSignup = async(req, res, next) =&gt; {
    res.render('signup')
}
const createUser = async (req, res, next) =&gt; {
    try {
        const { name, username, password, phonenumber, email} = await req.body
        const errors = []
        const reRenderSignup = (req, res, next) =&gt; {
            console.log(errors)
            res.render('signup', {
                errors,
                username,
                name,
                phonenumber,
                email
            })
        }
        if( !name || !username || !password || !phonenumber || !email ) {
            errors.push({ msg: 'please fill out all fields appropriately' })
            reRenderSignup(req, res, next)
        } else {
            const existingUser = await User.findOne().or([{ email: email}, { phonenumber : phonenumber }])
            if(existingUser) {
            errors.push({ msg: 'User already exists, try changing your email or phone number' })
            reRenderSignup(req, res, next)
            } else {
                const user = await User.create(
                    req.body
                )
                req.flash(
                    'success_msg',
                    'You are now registered and can log in'
                );
                res.redirect('/users/login')
            }

        }
    } catch (error) {
        next(error)
    }
}
module.exports = {
    createUser,
    getSignup
}
</code></pre>

<p>In <code>loginController.js</code>,</p>
<ol>
<li>We use the <code>passport.authenticate()</code> method with the local scope (email and password) to check if the user exists;</li>
<li>If the user doesn’t exist, we give out an error message and redirect the user to the same route;</li>
<li>if the user exists, we log the user in using the <code>req.logIn</code> method, send them a verification using the <code>sendVerification()</code> function, then redirect them to the <code>verify</code> route.</li>
</ol>
<pre><code>const mongoose = require('mongoose')
const passport = require('passport')
const User = require('../models/user')
const { sendVerification } = require('../config/twilioLogic')
const getLogin = async(req, res) =&gt; {
    res.render('login')
}
const authUser = async(req, res, next) =&gt; {
    try {
        passport.authenticate('local', function(err, user, info) {
            if (err) { 
                return next(err) 
            }
            if (!user) { 
                req.flash(
                    'error_msg',
                    info.message
                )
                return res.redirect('/users/login')
            }
            req.logIn(user, function(err) {
                if (err) { 
                    return next(err)
                }
                sendVerification(req, res, req.user.phonenumber)
                res.redirect('/users/verify');
            });
        })(req, res, next);
    } catch (error) {
        next(error)
    }

}
module.exports = {
    getLogin,
    authUser
}
</code></pre>

<p>Right now, <code>sendVerification()</code> doesn’t exactly work. That’s because we’ve not written the function, so we need <code>Twilio</code> for that. Let’s install Twilio and get started. </p>
Using Twilio Verify To Protect Routes
<p>In order to use Twilio Verify, you:</p>
<ol>
<li>Head over to <code>https://www.twilio.com/</code>;</li>
<li>Create an account with Twilio;</li>
<li>Login to your dashboard;</li>
<li>Select create a new project;</li>
<li>Follow the steps to create a new project.</li>
</ol>
<p>To install the <code>Twilio SDK</code> for node.js:</p>
<pre><code>npm install twilio
</code></pre>

<p>Next, we need to install <code>dotenv</code> to help us with <code>environment variables</code>.</p>
<pre><code>npm install dotenv
</code></pre>

<p>We create a file in the root of our project and name it <code>.env</code>. This file is where we keep our <code>credentials</code>, so we don’t push it to git. In order to do that, we create a <code>.gitignore</code> file in the root of our project, and add the following lines to the file:</p>
<pre><code>node_modules
.env
</code></pre>

<p>This tells git to ignore both the <code>node_modules</code> folder and the <code>.env</code> file.</p>
<p>To get our Twilio account credentials, we login into our Twilio console, and copy our <code>ACCOUNT SID</code> and <code>AUTH TOKEN</code>. Then, we click on <code>get trial number</code> and Twilio generates a trial number for us, click <code>accept number</code>. Now from the console copy, we copy our trial number.</p>
<p>In <code>.env</code>, </p>
<blockquote>TWILIO_ACCOUNT_SID = &lt;YOUR_ACCOUNT_SID&gt; <br />
TWILIO_AUTH_TOKEN = &lt;YOUR_AUTH_TOKEN&gt;<br />
TWILIO_PHONE_NUMBER = &lt;TOUR_TWILIO_NUMBER&gt;<br /></blockquote>

<p>Don’t forget to replace <code>&lt;YOUR_ACCOUNT_SID&gt;</code>, <code>&lt;YOUR_AUTH_TOKEN&gt;</code>, and <code>&lt;TOUR_TWILIO_NUMBER&gt;</code> with your actual credentials.</p>
<p>We create a file named <code>twilioLogic.js</code> in the <code>config</code> directory:</p>
<pre><code>cd cofig
touch twilioLogic.js
</code></pre>

<p>In <code>twilioLogic.js</code>,</p>
<pre><code>require('dotenv').config()
const twilio = require('twilio')
const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN)
//create verification service
const createService = async(req, res) =&gt; {
    client.verify.services.create({ friendlyName: 'phoneVerification' })
        .then(service =&gt; console.log(service.sid))
}

createService();
</code></pre>

<p>In the code snippet above, we create a new <code>verify</code> service.</p>
<p>Run:</p>
<pre><code>node config/twilioLogic.js
</code></pre>

<p>The string that gets logged to our screen is our <code>TWILIO_VERIFICATION_SID</code> — we copy that string.</p>
<p>In <code>.env</code>, add the line <code>TWILIO_VERIFICATION_SID = &lt;YOUR_TWILIO_VERIFICATION_SID&gt;</code>.</p>
<p>In <code>config/twilioLogic.js</code>, we remove the <code>createService()</code> line, since we need to create the <code>verify</code> service only once. Then, we add the following lines of code:</p>
<pre><code>//after createService function creation

//send verification code token
const sendVerification = async(req, res, number) =&gt; {

        client.verify.services(process.env.TWILIO_VERIFICATION_SID)
            .verifications
            .create({to: `${number}`, channel: 'sms'})
            .then( verification =&gt; 
                console.log(verification.status)
            ); 
}

//check verification token
const checkVerification = async(req, res, number, code) =&gt; {
    return new Promise((resolve, reject) =&gt; {
        client.verify.services(process.env.TWILIO_VERIFICATION_SID)
            .verificationChecks
            .create({to: `${number}`, code: `${code}`})
            .then(verification_check =&gt; {
                resolve(verification_check.status)
            });
    })
}
module.exports = {
    sendVerification,
    checkVerification
}
</code></pre>

<p><code>sendVerification</code> is an asynchronous function that returns a promise that sends a verification OTP to the number provided using the <code>sms</code> channel.</p>
<p><code>checkVerification</code> is also an asynchronous function that returns a promise that checks the status of the verification. It checks if the <code>OTP</code> provided by the users is the same <code>OTP</code> that was sent to them.</p>
<p>In <code>config/middleware.js</code>, add the following:</p>
<pre><code>//after notLoggedIn function declaration

//prevents an unverified user from accessing '/dashboard'
const isVerified = async(req, res, next) =&gt; {
    if(req.session.verified){
        return next()
    } else {
        req.flash(
            'error_msg',
            'You must be verified to do that'
        )
        res.redirect('/users/login')
    }
}

//prevent verified User from accessing '/verify'
const notVerified = async(req, res, next) =&gt; {
    if(!req.session.verified){
        return next()
    } else {
        res.redirect('back')
    }
}


module.exports = {
    //after notLoggedIn
    isVerified, 
    notVerified
}
</code></pre>

<p>We’ve created two more <code>route level middleware</code>, which will be used later in our routes. </p>
<p><code>isVerified</code> and <code>notVerified</code> check if a user is verified. We use these middlewares to block access to routes that we want to make accessible to only verified users.</p>
<pre><code>cd controllers
touch verifyController.js
</code></pre>

<p>In <code>verifyController.js</code>,</p>
<pre><code>const mongoose = require('mongoose')
const passport = require('passport')
const User = require('../models/user')
const { sendVerification, checkVerification } = require('../config/twilioLogic')
const loadVerify = async(req, res) =&gt; {
    res.render('verify')
}
const resendCode = async(req, res) =&gt; {
    sendVerification(req, res, req.user.phonenumber)
    res.redirect('/users/verify')
}
const verifyUser = async(req, res) =&gt; {
    //check verification code from user input
    const verifyStatus = await checkVerification(req, res, req.user.phonenumber, req.body.verifyCode)

    if(verifyStatus === 'approved') {
        req.session.verified = true
        res.redirect('/users/dashboard')
    } else {
        req.session.verified = false
        req.flash(
            'error_msg',
            'wrong verification code'
        )
        res.redirect('/users/verify')
    }

}
module.exports = {
    loadVerify,
    verifyUser,
    resendCode
}
</code></pre>

<p><code>resendCode()</code> re-sends the verification code to the user.</p>
<p><code>verifyUser</code> uses the <code>checkVerification</code> function created in the previous section. If the status is <code>approved</code>, we set the <code>verified</code> value on <code>req.session</code> to true.</p>
<p><code>req.session</code> just provides a nice way to access the current session. This is done by express-session, which adds the session object to our request object.</p>
<blockquote>Hence the reason I said that most application level middleware <strong>do</strong> affect our applications state (request and response objects)</blockquote>  

Building The User Routes
<p>Basically, our application is going to have the following routes:</p>
<ol>
<li><code>/user/login</code>: for user login;</li>
<li><code>/user/signup</code>: for user registration;</li>
<li><code>/user/logout</code>: for log out;</li>
<li><code>/user/resend</code>: to resend a verification code;</li>
<li><code>/user/verify</code>: for input of verification code;</li>
<li><code>/user/dashboard</code>: the route that is protected using <code>Twilio Verify</code>.</li>
</ol>
<pre><code>cd routes
touch user.js
</code></pre>

<p>In <code>routes/user.js</code>, it requires the needed packages:</p>
<pre><code>const express = require('express')
const router = express.Router()
const { createUser, getSignup } = require('../controllers/signUpController')
const { authUser, getLogin } = require('../controllers/loginController')
const { loadVerify, verifyUser, resendCode } = require('../controllers/verifyController')
const { isLoggedIn, isVerified, notVerified, notLoggedIn } = require('../config/middleware')

//login route
router.route('/login')
    .all(notLoggedIn)
    .get(getLogin)
    .post(authUser)

//signup route
router.route('/signup')
    .all(notLoggedIn)
    .get(getSignup)
    .post(createUser)
//logout
router.route('/logout')
    .get(async (req, res) =&gt; {
        req.logout();
        res.redirect('/');
    })
router.route('/resend')
    .all(isLoggedIn, notVerified)
    .get(resendCode)
//verify route
router.route('/verify')
    .all(isLoggedIn, notVerified)
    .get(loadVerify)
    .post(verifyUser)
//dashboard
router.route('/dashboard')
    .all(isLoggedIn, isVerified)
    .get(async (req, res) =&gt; {
        res.render('dashboard')
    })

//export router
module.exports = router
</code></pre>

<p>We’re creating our routes in the piece of code above, let’s see what’s going on here:</p>
<p><code>router.route()</code> specifies the route. If we specify <code>router.route('/login')</code>, we target the <code>login</code> route. <code>.all([middleware])</code> allows us specify that all request to that route should use those <code>middleware</code>.</p>
<p>The <code>router.route('/login').all([middleware]).get(getController).post(postController)</code> syntax is an alternative to the one most developers are used to. </p>
<p>It does the same thing as <code>router.get('/login', [middleware], getController)</code> and <code>router.post('/login, [middleware], postController)</code>.</p>
<blockquote>The syntax used in our code is nice because it makes our code very DRY — and it’s easier to keep up with what’s going on in our file.</blockquote>


<p>Now, if we run our application by typing the command below in our terminal:</p>
<pre><code>npm run dev 
</code></pre>

<p>Our full-stack express application should be up and running.</p>
Conclusion
<p>What we have done in this tutorial was to:  </p>
<ol>
<li>Build out an express application;</li>
<li>Add passport for authentication with sessions;</li>
<li>Use Twilio Verify for route protection.</li>
</ol>
<p>I surely hope that after this tutorial, you are ready to rethink your password-based authentication and add that extra layer of security to your application.</p>
<p>What you could do next:  </p>
<ol>
<li>Try to explore passport, using JWT for authentication;</li>
<li>Integrate what you’ve learned here into another application;</li>
<li>Explore more Twilio products. They provide services that make development easier(Verify is just one of the many services).</li>
</ol>
<h3>Further Reading On Smashing Magazine</h3>
<ul>
<li>“<a href="https://www.smashingmagazine.com/2022/06/build-group-chat-app-vanillajs-twilio-nodejs/">How To Build A Group Chat App With Vanilla JS, Twilio And Node.js</a>,” Zara Cooper </li>
<li>“<a href="https://www.smashingmagazine.com/2018/06/nodejs-tools-techniques-performance-servers/">Keeping Node.js Fast: Tools, Techniques, And Tips For Making High-Performance Node.js Servers</a>,” David Mark Clements</li>
<li>“<a href="https://www.smashingmagazine.com/2021/12/protect-api-key-production-nextjs-api-route/">How To Protect Your API Key In Production With Next.js API Route</a>,” Caleb Olojo</li>
<li>“<a href="https://www.smashingmagazine.com/2021/01/nodejs-api-ethereum-blockchain/">How To Build A Node.js API For Ethereum Blockchain</a>,” John Agbanusi</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Alexander Godwin)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e77a7ee4-c2ed-4b4c-a147-16df351a6b31/nodejs-authentication-twilio-verify-sharing-card.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Easy Fluid Typography With clamp() Using Sass Functions]]></title>
            <link>https://smashingmagazine.com/2022/10/fluid-typography-clamp-sass-functions/</link>
            <guid>https://smashingmagazine.com/2022/10/fluid-typography-clamp-sass-functions/</guid>
            <pubDate>Wed, 05 Oct 2022 12:00:00 GMT</pubDate>
            <description><![CDATA[We can use the `clamp()` method today because of the great browser support. In this article, Brecht De Ruyte explains how it can be a beautiful addition to your upcoming project or as an upgrade to a previous one.]]></description>
            <content:encoded><![CDATA[<p>Fluid typography is getting a lot more popular, especially since the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp"><code>clamp()</code> math function</a> is available in every evergreen browser. But if we’re honest, it’s still a lot of mathematics to achieve this. You can use tools such as <a href="https://utopia.fyi"><code>utopia.fyi</code></a>, which are fantastic. But in large projects, it can get messy pretty fast. I’m a big fan of readable and maintainable code and always want to see what my code is doing at a glance. I’m sure there are many more of you like that, so instead of adding a full <code>clamp()</code> function inside of our code, maybe we can make this a bit more readable with Sass.</p>
Why Should We Use Fluid Typography?
<p>Usually, when designing for different screen sizes, we use media queries to determine the font size of our typographic elements. Although this usually gives enough control for the more conventional devices, it doesn’t cover all of the screen sizes.</p>
<p>By using fluid typography, we can make the typography scale more logically between all sorts of different devices.</p>
<p>This is now possible in all evergreen browsers because of the <code>clamp()</code> function in CSS. It is perfect for the job and reduces our media query writing, thus saving us a bit of file size along the way. </p>
How Exactly Does This <code>clamp()</code> Function Work For Typography?
<p>In short, the clamp function looks like this:</p>
<pre><code>clamp([min-bound], [value-preferred], [max-bound]);
</code></pre>

<p>This takes into account three numbers: <strong>a minimum bound</strong>, <strong>preferred value</strong>, and <strong>a maximum bound</strong>. By using <code>rem</code> values, we can increase the accessibility a bit, but it’s still not 100% foolproof, especially for external browser tools.</p>
<p>If you want a more in-depth explanation of the math, I suggest you read this post from Adrian Bece “<a href="https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/">Modern Fluid Typography Using CSS Clamp </a>”.</p>
<p>However, there is a bit of a problem. When you read those <code>clamp</code> functions inside your CSS, it’s still hard to see exactly what is happening. Just imagine a file full of font sizes that look like this:</p>
<pre><code>clamp(1.44rem, 3.44vw + 0.75rem, 2.81rem)
</code></pre>

<p>But with a little help from the <code>sass</code> function, we can make these font sizes much more readable.</p>
What Do We Want To Achieve With This Simple Sass Function?
<p>In short, we want to do something like this: We have a <strong>minimum font size</strong>, from the moment our <strong>breakpoint is larger than <code>400px</code></strong>, we want it to <strong>scale it to our biggest font size</strong> until the <strong>maximum breakpoint is reached.</strong></p>
<p>The minimum and maximum font sizes are covered quite easily. If we want a minimum font size of <code>16px</code> (or <code>1rem</code>) and a maximum font size of <code>32px</code> (or <code>2rem</code>), we already have the two parts of our clamp function:</p>
<pre><code>clamp(1rem, [?], 2rem)
</code></pre>



Creating A Basic Automated Fluid Function
<p>This is where things get tricky, and I suggest you follow the article by Adrian Bece, who gives a great in-depth explanation of the math behind this.</p>
<p>In short, the equation is the following:</p>
<p><strong>(maximum font-size  - minimum font-size) / (maximum breakpoint - minimum breakpoint)</strong></p>
<p>Let’s get ready to do some mathematics for this to happen in Sass, so let’s create our <strong><code>fluid-typography.scss</code></strong> function file and start by adding <code>sass:math</code> and the function with the values we’ll need:</p>
<div>
<pre><code>@use "sass:math";

@function fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit: vw) {

}
</code></pre>
</div>

<p>Now, let’s add the calculation for the slope inside of our function with some <code>sass:math</code>:</p>
<div>
<pre><code>@function fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit: vw) {
 $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
}
</code></pre>
</div>

<p>To get a value we can work with, we’ll need to multiply our slope by <code>100</code>:</p>
<pre><code>$slope-to-unit: $slope * 100;
</code></pre>

<p>All that is left is for us to find our intercept to build the equation. We can do this with the following function:</p>
<pre><code>$intercept: $min-size - $slope * $min-breakpoint;
</code></pre>

<p>And finally, return our function:</p>
<div>
<pre><code>@return clamp(#{$min-size}, #{$slope-to-unit}#{$unit} + #{$intercept}, #{$max-size});
</code></pre>
</div>

<p>If we call the created <code>sass</code> function in our scss, we should now get fluid typography:</p>
<pre><code>h1 {
   font-size: #{fluid(1rem, 2rem, 25rem, 62.5rem)}
}
</code></pre>

<h3>A Note About Units</h3>
<p>In most cases, we will be using a viewport width when it comes to fluid typography, so this makes a good default. However, there are some cases, especially when using the <code>clamp()</code> function for vertical spacing, where you want to use a viewport height instead of width. When this is desired, we can change the outputted unit and use a minimum and maximum breakpoint for the height:</p>
<pre><code>h1 {
   font-size: #{fluid(1rem, 2rem, 25rem, 62.5rem, vh)}
}
</code></pre>



Updating The Function To Make The Calculations Feel More Natural
<p>We got what we need, but let’s be honest, most of the time, we are implementing a design, and it doesn’t feel natural to pass our viewports as <code>rems</code>. So, let’s update this function to use pixels as a viewport measurement. While we’re at it, let’s update the font sizes so we can use pixel values for everything. We will still convert them to <code>rem</code> units since those are better for accessibility.</p>
<p>First, we’ll need an extra function to calculate our <code>rem</code> values based on a pixel input. </p>
<p><strong>Note</strong>: <em>This won’t work if you change your base <code>rem</code> value.</em></p>
<pre><code>@function px-to-rem($px) {
    $rems: math.div($px, 16px) * 1rem;
    @return $rems;
}
</code></pre>

<p>Now we can update our fluid function to output <code>rem</code> values even though it gets pixels as input. This is the updated version:</p>
<div>
<pre><code>@function fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: $slope * 100;
    $intercept-rem: px-to-rem($min-size - $slope * $min-breakpoint);
    $min-size-rem: px-to-rem($min-size);
    $max-size-rem: px-to-rem($max-size);
    @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}
</code></pre>
</div>

<p>Now we can use the following input:</p>
<pre><code>font-size: #{fluid(16px, 32px, 320px, 960px)}
</code></pre>

<p>This will result in the following:</p>
<pre><code>font-size: clamp(1rem, 2.5vw + 0.5rem, 2rem);
</code></pre>

<p>At first glance, this seems perfect, but mostly that’s because I’ve been using very simple values. For example, when clamping to a maximum value of <code>31px</code> instead of <code>32px</code>, our <code>rem</code> values won’t be so rounded, and our output will get a bit messy.</p>
<p><strong><em>Input:</em></strong></p>
<pre><code>font-size: #{fluid(16px, 31px, 320px, 960px)}
</code></pre>

<p><strong><em>Output:</em></strong></p>
<pre><code>font-size: clamp(1rem, 2.34375vw + 0.53125rem, 1.9375rem);
</code></pre>

<p>If you’re like me and find this a bit messy as well, we could round our values a little bit to increase readability and save some bytes in our final CSS file. Also, it might get a bit tedious if we always have to add the viewport, so why not add some defaults in our function?</p>
Rounding Our Values And Adding Some Defaults
<p>Let’s start by adding a rounding function to our Sass file. This will take any input and round it to a specific amount of decimals:</p>
<pre><code>@function round($number, $decimals: 0) {
    $n: 1;
    @if $decimals &gt; 0 {
        @for $i from 1 through $decimals {
            $n: $n * 10;
        }
    }
    @return math.div(math.round($number * $n), $n);
}
</code></pre>

<p>Now we can update our output values with rounded numbers. Update the function accordingly. I would suggest setting at least two decimals for the output values for the most consistent results:</p>
<div>
<pre><code>@function fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: round($slope * 100, 2);
    $intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
    $min-size-rem: round(px-to-rem($min-size), 2);
    $max-size-rem: round(px-to-rem($max-size), 2);
    @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}</code></pre>
</div>

<p>Now the same example as before will give us a much cleaner result.</p>
<p><strong><em>Input:</em></strong></p>
<pre><code>font-size: #{fluid(16px, 31px, 320px, 960px)};
</code></pre>

<p><strong><em>Output:</em></strong></p>
<pre><code>font-size: clamp(1rem, 2.34vw + 0.53rem, 1.94rem);
</code></pre>

<h3>Adding A Default Breakpoint</h3>
<p>If you don’t feel like repeating yourself, you can always set a default breakpoint to your function. Try updating the function like this:</p>
<div>
<pre><code>$default-min-bp: 320px;
$default-max-bp: 960px;

@function fluid($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
    // ...
}
</code></pre>
</div>

<p>Now, we don’t need to repeat these viewports all the time. We can still add a custom breakpoint but a simple input such as:</p>
<pre><code>font-size: #{fluid(16px, 31px)};
</code></pre>

<p>Will still result in:</p>
<pre><code>font-size: clamp(1rem, 2.34vw + 0.53rem, 1.94rem);
</code></pre>

<p>Here is the full function:</p>
<div>
<pre><code>@use 'sass:math';

$default-min-bp: 320px;
$default-max-bp: 960px;

@function round($number, $decimals: 0) {
    $n: 1;
    @if $decimals &gt; 0 {
        @for $i from 1 through $decimals {
            $n: $n * 10;
        }
    }
    @return math.div(math.round($number * $n), $n);
}

@function px-to-rem($px) {
    $rems: math.div($px, 16px) * 1rem;
    @return $rems;
}

@function fluid($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: round($slope * 100, 2);
    $intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
    $min-size-rem: round(px-to-rem($min-size), 2);
    $max-size-rem: round(px-to-rem($max-size), 2);
    @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}
</code></pre>
</div>

A Final Note: Be A Happy Clamper For All users Out There
<p>If you followed this little tutorial and were amazed by it, you might want to add this <code>clamp()</code> method for everything, but there is an important side note when it comes to accessibility.</p>
<p><strong>Note</strong>: <em>When you use <code>vw</code> units or limit how large text can get with <code>clamp()</code>, there is a chance a user may be unable to scale the text to 200% of its original size.</em></p>
<p>If that happens, it is WCAG failure. As Adrian Bece mentioned, it’s not 100% foolproof. <a href="https://adrianroselli.com/2019/12/responsive-type-and-zoom.html">Adrian Roselli has written some examples on this</a>, which you might find interesting.</p>
<p>We can use this method today because of the great browser support. By being smart on the usage, I’m sure it can be a beautiful addition to your upcoming project or as an upgrade to a previous one.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Brecht De Ruyte)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ced8e27-33ad-4e3d-9e45-970f5324c8d4/fluid-typography-clamp-sass-functions.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Delightful UI Animations With Shared Element Transitions API (Part 1)]]></title>
            <link>https://smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part1/</link>
            <guid>https://smashingmagazine.com/2022/10/ui-animations-shared-element-transitions-api-part1/</guid>
            <pubDate>Mon, 03 Oct 2022 13:00:00 GMT</pubDate>
            <description><![CDATA[Shared Element Transitions API is a game-changing feature that will enable us to create impressive and elaborate UI animations easily. In this article, Adrian Bece will explore its incredible potential by building four real-life examples from scratch.]]></description>
            <content:encoded><![CDATA[<p>Animations are an essential part of web design and development. They can draw attention, guide users on their journey, provide satisfying and meaningful feedback to interaction, <a href="https://teatrlalka.pl/en">add character and flair to make the website stand out</a>, and so much more!</p>
<p>Before we begin, let’s take a quick look at the following video and imagine how much CSS and JavaScript would take to create an animation like this. Notice that the cart counter is also animated, and the animation runs right after the previous one completes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/425e454f-c9a2-4c13-833e-ac7cfc5a89b0/1-ui-animations-shared-element-transitions-api-part1.png" /></p>
<p>Although this animation looks alright, it’s just a minor improvement. Currently, the API doesn’t really know that the image (shared element) that is being moved from the container to the overlay is the same element in their respective states. We need to instruct the browser to pay special attention to the image element when switching between states, so let’s do that!</p>
<h3>Creating A Shared Element Animation</h3>
<p>With <code>page-transition-tag</code> <strong>CSS property</strong>, we can easily tell the browser to watch for the element in both outgoing and incoming images, <strong>keep track of element’s size and position</strong> that are changing between them, and apply the appropriate animation.</p>
<p>We also need to apply the <code>contain: paint</code> or <code>contain: layout</code> to the shared element. <strong>This wasn’t required for the crossfade animations, as it’s only required for elements that will receive the</strong> <code>page-transition-tag</code>. If you want to learn more about CSS containment, Rachel Andrew wrote a <a href="https://www.smashingmagazine.com/2019/12/browsers-containment-css-contain-property/">very detailed article</a> explaining it.</p>
<pre><code>.gallery__image--active {
  page-transition-tag: active-image;
}

.gallery__image {
  contain: paint;
}
</code></pre>

<p>Another important caveat is that <code>page-transition-tag</code> <strong>has to be unique, and we can apply it to only one element during the duration of the animation</strong>. This is why we apply it to the active image element right before the image is moved to the overlay and remove it when the image overlay is closed and the image is returned to its original position:</p>
<div>
<pre><code>async function toggleImageView(index) {
   const image = document.getElementById(<code>js-gallery-image-${index}</code>);

  // Apply a CSS class that contains the page-transition-tag before animation starts.
  image.classList.add("gallery__image--active");

  const imageParentElement = image.parentElement;

  const moveTransition = document.createDocumentTransition();
  await moveTransition.start(() =&gt; moveImageToModal(image));

  overlayWrapper.onclick = async function () {
    const moveTransition = document.createDocumentTransition();
    await moveTransition.start(() =&gt; moveImageToGrid(imageParentElement));

    // Remove the class which contains the page-transition-tag after the animation ends.
    image.classList.remove("gallery__image--active");
  };
}
</code></pre>
</div>

<p>Alternatively, we could have used JavaScript to toggle the <code>page-transition-tag</code> property inline on the element. However, it’s better to use the CSS class <code>toggle</code> to make use of media queries to apply the tag conditionally:</p>
<pre><code>// Applies page-transition-tag to the image.
image.style.pageTransitionTag = "active-image";

// Removes page-transition-tag from the image.
image.style.pageTransitionTag = "none";
</code></pre>

<p>And that’s pretty much it! Let’s take a look at our example with the shared element applied:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/895adde5-dabe-4b3b-8e0c-9961d5848a4b/2-ui-animations-shared-element-transitions-api-part1.png" /></p>
<h3>Customizing Animation Duration And Easing Function</h3>
<p>We’ve created this complex transition with just a few lines of CSS and JavaScript, which turned out great. However, we expect to have more control over the animation properties like duration, easing function, delay, and so on to create even more elaborate animations or compose them for even greater effect.</p>
<p><strong>Shared Element Transitions API makes use of CSS <code>animation</code> properties</strong> and we can use them to fully customize our state animation. But which CSS selectors to use for these outgoing and incoming states that the API is generating for us?</p>
<p>Shared Element Transition API introduces new <strong>pseudo-elements</strong> that are added to DOM when its animations are run. Jake Archibald explains the pseudo-element tree in his <a href="https://developer.chrome.com/blog/shared-element-transitions-for-spas/#transitioning-multiple-elements">Chrome developers article</a>. By default (in case of crossfade animation), we get the following tree of pseudo-elements:</p>
<pre><code>::page-transition
└─ ::page-transition-container(root)
   └─ ::page-transition-image-wrapper(root)
      ├─ ::page-transition-outgoing-image(root)
      └─ ::page-transition-incoming-image(root)
</code></pre>

<p>These pseudo-elements may seem a bit confusing at first, so I’m including <a href="https://github.com/WICG/shared-element-transitions/blob/main/explainer.md">WICG’s concise explanation</a> for these pseudo-elements and their general purpose:</p>
<blockquote><ul><li><code>::page-transition</code> sits in a top-layer, over everything else on the page.</li><li><code>::page-transition-outgoing-image(root)</code> is a screenshot of the old state, and <code>::page-transition-incoming-image(root)</code> is a live representation of the new state. Both render as CSS replaced content.</li><li><code>::page-transition-container</code> animates size and position between the two states.</li><li><code>::page-transition-image-wrapper</code> provides blending isolation, so the two images can correctly cross-fade.</li><li><code>::page-transition-outgoing-image</code> and <code>::page-transition-incoming-image</code> are the visual states to cross-fade.</li></ul></blockquote>

<p>For example, when we apply the <code>page-transition-tag: active-image</code>, its pseudo-elements are added to the tree:</p>
<pre><code>::page-transition
├─ ::page-transition-container(root)
│  └─ ::page-transition-image-wrapper(root)
│     ├─ ::page-transition-outgoing-image(root)
│     └─ ::page-transition-incoming-image(root)
└─ ::page-transition-container(active-image)
   └─ ::page-transition-image-wrapper(active-image)
      ├─ ::page-transition-outgoing-image(active-image)
      └─ ::page-transition-incoming-image(active-image)
</code></pre>

<p>In our example, we want to modify both the crossfade (root) animation and the shared element animation. We can use the universal selector <code>*</code> with the pseudo-element to change animation properties for all available transition elements and target pseudo-elements for specific animation using the <code>page-transition-tag</code> value.</p>
<p>In this example, we are applying <code>400ms</code> duration for all animated elements with an <code>ease-in-out</code> easing function, and then override the <code>active-image</code> transition easing function and setting a custom <code>cubic-bezier</code> value:</p>
<pre><code>::page-transition-container(*) {
  animation-duration: 400ms;
  animation-timing-function: ease-in-out;
}

::page-transition-container(active-image) {
  animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35e3402b-bc94-403b-9c40-a8f479345719/3-ui-animations-shared-element-transitions-api-part1.png" /></p>
<h3>Accessible Animations</h3>
<p>It’s important to be aware of accessibility requirements when working with animations. Some people prefer <a href="https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html">browsing the web with reduced motion</a>, so we must either remove an animation or provide a more suitable alternative. This can be easily done with a widely supported <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion">prefers-reduced-motion</a> media query.</p>
<p>The following code snippet turns off animations for all elements using the Shared Element Transitions API. This is a shotgun solution, and we need to ensure that DOM updates smoothly and remains usable even with the animations turned off:</p>
<pre><code>@media (prefers-reduced-motion) {
    /* Turn off all animations */
    ::page-transition-container(*),
    ::page-transition-outgoing-image(*),
    ::page-transition-incoming-image(*) {
        animation: none !important;
    }

    /* Or, better yet, create accessible alternatives for these animations  */
}
</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/04aebbec-3cb1-4143-a742-cf1dd971d517/4-ui-animations-shared-element-transitions-api-part1.png" /></p>
<pre><code>@keyframes fadeOut {
    from {
        filter: blur(0px) brightness(1) opacity(1);
    }
    to {
        filter: blur(6px) brightness(8) opacity(0);
    }
}

@keyframes fadeIn {
    from {
        filter: blur(6px) brightness(8) opacity(0);
    }
    to {
        filter: blur(0px) brightness(1) opacity(1);
    }
}
</code></pre>

<p>Now, all we have to do is assign the exit animation to the outgoing image pseudo-element and the entry animation to the incoming image pseudo-element. We can set a <code>page-transition-tag</code> directly to the HTML image element as it’s the only element that will perform this animation:</p>
<div>
<pre><code>/* We are applying contain property on all browsers (regardless of property support) to avoid differences in rendering and introducing bugs */
.gallery img {
    contain: paint;
}

@supports (page-transition-tag: supports-tag) {
    .gallery img {
        page-transition-tag: gallery-image;
    }

    ::page-transition-outgoing-image(gallery-image) {
        animation: fadeOut 0.4s ease-in both;
    }

    ::page-transition-incoming-image(gallery-image) {
        animation: fadeIn 0.4s ease-out 0.15s both;
    }
}
</code></pre>
</div>

<p>Even the seemingly simple crossfade animations can look cool, don’t you think? I think this particular animation fits really nicely with the dark theme we have in the example.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33d27692-b13e-4d7f-9c97-e0c9775b51f0/5-ui-animations-shared-element-transitions-api-part1.png" /></p>
<div>
<pre><code>/* We are applying contain property on all browsers (regardless of property support) to avoid differences in rendering and introducing bugs */
.product__dot {
  contain: paint;
}

.shopping-bag__counter span {
  contain: paint;
}

@supports (page-transition-tag: supports-tag) {
  ::page-transition-container(cart-dot) {
    animation-duration: 0.7s;
    animation-timing-function: ease-in;
  }

  ::page-transition-outgoing-image(cart-counter) {
    animation: toDown 0.3s cubic-bezier(0.4, 0, 1, 1) both;
  }

  ::page-transition-incoming-image(cart-counter) {
    animation: fromUp 0.3s cubic-bezier(0, 0, 0.2, 1) 0.3s both;
  }
}

@keyframes toDown {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(4px);
    opacity: 0;
  }
}

@keyframes fromUp {
  from {
    transform: translateY(-3px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
</code></pre>
</div>

<p>And that is it! It amazes me every time how elaborate these animations can turn out with so few lines of additional code, all thanks to Shared Element Transitions API. Notice that the <code>header</code> element with the <code>cart</code> icon is fixed, so it sticks to the top, and our standard animation setup works like a charm, regardless!</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/vYjxEOR">Add to cart animation - completed (2) [forked]</a> by <a href="https://codepen.io/AdrianBece">Adrian Bece</a>.</p>
Conclusion
<p>When done correctly, animations can <a href="http://species-in-pieces.com/">breathe life into any project</a> and offer a <a href="https://teatrlalka.pl/en">more delightful and memorable experience</a> to users. With the upcoming Shared Element Transitions API, creating complex UI state transition animations has never been easier, but we still need to be careful how we use and implement animations.</p>
<p>This simplicity can give way to bad practices, such as not using animations correctly, creating slow or repetitive animations, creating needlessly complex animations, and so on. It’s important to <a href="https://www.designbetter.co/animation-handbook">learn best practices for animations</a> and on the web so we can effectively utilize this API to create truly amazing and accessible experiences or even consult with the designer if we are unsure on how to proceed.</p>
<p>In the next article, we’ll explore the API’s potential when it comes to transition between different pages in Single Page Apps (SPA) and the upcoming Cross-document same-origin transitions, which are yet to be implemented.</p>
<p>I am excited to see what the <a href="https://codepen.io/jh3y/pen/YzaQezW">dev community will build</a> using this awesome new feature. Feel free to reach out on <a href="https://twitter.com/AdrianBeceDev">Twitter</a> or <a href="https://www.linkedin.com/in/adrianbece/">LinkedIn</a> if you have any questions or if you built something amazing using this API. </p>
<p>Go ahead and build something awesome!</p>
<p><em>Many thanks to <a href="https://twitter.com/jaffathecake">Jake Archibald</a> for reviewing this article for technical accuracy.</em></p>
<h3>References</h3>
<ul>
<li><a href="https://github.com/WICG/shared-element-transitions/blob/main/explainer.md">Shared Element Transitions</a>, WICG</li>
<li>“<a href="https://developer.chrome.com/blog/shared-element-transitions-for-spas/">Smooth And Simple Page Transitions With The Shared Element Transition API</a>”, Jake Archibald</li>
<li><a href="https://twitter.com/jh3yy/status/1550675304280035328">Shared Element Transitions API Twitter thread</a>, Jhey</li>
<li><a href="https://drafts.csswg.org/css-shared-element-transitions-1/">CSS Shared Element Transitions Module Level 1</a>, W3C</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Adrian Bece)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/24c75fda-847f-4fc5-b9c2-9118523bda6b/ui-animations-shared-element-transitions-api.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[October Vibes For Your Desktop (2022 Wallpapers Edition)]]></title>
            <link>https://smashingmagazine.com/2022/09/desktop-wallpaper-calendars-october-2022/</link>
            <guid>https://smashingmagazine.com/2022/09/desktop-wallpaper-calendars-october-2022/</guid>
            <pubDate>Fri, 30 Sep 2022 13:30:00 GMT</pubDate>
            <description><![CDATA[How about a little inspiration boost? Well, we might have something for you: desktop wallpapers created with love by artists and designers from across the globe. They are available in versions with and without a calendar for October and can be downloaded for free. Enjoy!]]></description>
            <content:encoded><![CDATA[<p>When we look closely, inspiration can lie everywhere. In the leaves shining in the most beautiful colors in many parts of the world at this time of year, in a cup of coffee and a conversation with a friend, or when taking a walk on a windy October day. Whatever <em>your</em> secret to finding new inspiration might be, our monthly wallpapers series is bound to give you a little <strong>inspiration boost</strong>, too.</p>

<p>For this October edition, artists and designers from across the globe once again challenged their creative skills and designed <strong>wallpapers to spark your imagination</strong> and make the month a bit more colorful than it already is. Like every month since we embarked on this wallpapers adventure <a href="https://www.smashingmagazine.com/category/wallpapers">more than eleven years ago</a>.</p>

<p>The wallpapers in this collection all come in versions with and without a calendar for <strong>October 2022</strong> — so no matter if you want to keep an eye on your deadlines or plan to use your favorite design even after the month has ended, we’ve got you covered. Speaking of favorites: As a little bonus goodie, you’ll also find some oldies but goodies from past October editions at the end of this post. A big thank-you to everyone who shared their designs with us — this post wouldn’t exist without you!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
<li><strong><a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Submit a wallpaper!</a></strong><br />Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>.</li>
</ul>

Dreamy Autumn Girl
<p>“Our designers were inspired by the coziness of autumn and the mood that it evokes — the only desire that appears is to put on a warm cozy sweater, take a cup of warm tea, and just enjoy the view outside the window. If you want more free calendars on other thematic, check out our <a href="https://masterbundles.com/free-printable-october-calendars/">listicle</a>.” — Designed by <a href="https://masterbundles.com/">MasterBundles</a> from Ukraine.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/oct-22-dreamy-autumn-girl-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e6453cd-7ad1-45e4-b88c-afe922049104/oct-22-dreamy-autumn-girl-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/oct-22-dreamy-autumn-girl-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/cal/oct-22-dreamy-autumn-girl-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/dreamy-autumn-girl/nocal/oct-22-dreamy-autumn-girl-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Spooky Season
<p>“Trick or treating, Tim Burton movies, Edgar Allan Poe poems — once these terms rise up to the top of Google searches, we know that the spooky season is here. We witch you a happy Halloween!” — Designed by <a href="https://www.popwebdesign.net/webdizajn.html">PopArt Studio</a> from Serbia.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/oct-22-spooky-season-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca7b6fd8-7d32-45d1-97e5-e8c85d089a25/oct-22-spooky-season-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/oct-22-spooky-season-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/cal/oct-22-spooky-season-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-320x480.png">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1440x1050.png">1440x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/spooky-season/nocal/oct-22-spooky-season-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Boo!
<p>Designed by <a href="https://www.madfishdigital.com/">Mad Fish Digital</a> from Portland, OR.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/oct-22-boo-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f31a08d8-dfa6-4dd9-bed0-857dad2beae7/oct-22-boo-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/oct-22-boo-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/cal/oct-22-boo-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/boo/nocal/oct-22-boo-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Fall Colors
<p>“Fall is about orange, brown, and earthly colors. People still enjoy waling through the parks, even if it’s a little bit colder, just to take in the fall palette of colors.” — Designed by <a href="https://schedulingapp.net/">Andrew</a> from the United States.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/oct-22-fall-colors-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7f30e65-09a4-483f-bbbc-83d5a1209b4c/oct-22-fall-colors-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/oct-22-fall-colors-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1080x2200.png">1080x2200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/cal/oct-22-fall-colors-cal-1920x1440.png">1920x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1080x2200.png">1080x2200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/fall-colors/nocal/oct-22-fall-colors-nocal-1920x1440.png">1920x1440</a></li>
</ul>

King Of The Pirates
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/oct-22-king-of-the-pirates-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/184c109e-2baf-4f92-be9b-2182f0a9686c/oct-22-king-of-the-pirates-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/oct-22-king-of-the-pirates-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/cal/oct-22-king-of-the-pirates-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/king-of-the-pirates/nocal/oct-22-king-of-the-pirates-nocal-3840x2160.png">3840x2160</a></li>
</ul>

 Tarzan In The Jungle
<p>“We start this October with Tarzan in his jungle. Luckily Chita helps us!” — Designed by <a href="https://www.silocreativo.com/en">Veronica Valenzuela</a> from Spain.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/oct-22-tarzan-in-the-jungle-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05a2f9d9-2178-435c-b967-51439919551b/oct-22-tarzan-in-the-jungle-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/oct-22-tarzan-in-the-jungle-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/cal/oct-22-tarzan-in-the-jungle-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1024x768.png">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/tarzan-in-the-jungle/nocal/oct-22-tarzan-in-the-jungle-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Happy Halloween
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/oct-22-happy-halloween-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a9a04c73-3a6a-42cd-a1cb-e4b42aefe2a8/oct-22-happy-halloween-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/oct-22-happy-halloween-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/cal/oct-22-happy-halloween-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-640x480.png">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-800x480.png">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-800x600.png">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1024x1024.png">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1152x864.png">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x720.png">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x800.png">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x960.png">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-2560x1440.png">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/happy-halloween/nocal/oct-22-happy-halloween-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Design Your Thinking
<p>“Thinking helps us challenge our own assumptions, discover new things about ourselves and our perspective, stay mentally sharp, and even be more optimistic. Using divergent thinking strategies can help you examine a problem from every angle and identify the true root of the issue. Deep thinking allows you to try on perspectives that you may not have considered before.” — Designed by <a href="https://www.linkedin.com/in/hiteshpuri/">Hitesh Puri</a> from Delhi, India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/oct-22-design-your-thinking-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0e731b4-a2f5-4b43-97d8-643801b77b8c/oct-22-design-your-thinking-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/oct-22-design-your-thinking-preview.png">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/cal/oct-22-design-your-thinking-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1280x1024.png">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1366x768.png">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1400x1050.png">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1440x900.png">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1600x1200.png">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1680x1050.png">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1680x1200.png">1680x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1920x1080.png">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1920x1200.png">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-1920x1440.png">1920x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/design-your-thinking/nocal/oct-22-design-your-thinking-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Welcome Maa Durga!
<p>“Welcome the power — Shakti. Welcome the love. Welcome her blessings. Welcome Maa Durga!” — Designed by <a href="https://quadrant.technology">Rahul Bhattacharya</a> from India.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/oct-22-welcome-maa-durga-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8823e919-4016-42ed-be0d-d6d2a729c42a/oct-22-welcome-maa-durga-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/oct-22-welcome-maa-durga-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/cal/oct-22-welcome-maa-durga-cal-1680x1200.jpg">1680x1200</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-320x480.jpg">320x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-640x480.jpg">640x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-800x480.jpg">800x480</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-800x600.jpg">800x600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1152x864.jpg">1152x864</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x720.jpg">1280x720</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x800.jpg">1280x800</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x960.jpg">1280x960</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1440x900.jpg">1440x900</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/welcome-maa-durga/nocal/oct-22-welcome-maa-durga-nocal-1680x1200.jpg">1680x1200</a></li>
</ul>

Old Tree
<p>“No surprise, with October, Halloween time is back. In the north, days are becoming shorter. The night atmosphere takes place and a slightly scary feeling surrounds everything. It’s not only a matter of death. I had taken a picture of this old tree. Who knows if there is really noone in there?” — Designed by <a href="https://www.philippebrouard.fr">Philippe Brouard</a> from France.</p>
<a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/oct-22-old-tree-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3baa2bd4-7eea-4c4b-97ba-00934f15c574/oct-22-old-tree-preview-opt.png" /></a>
<ul>
<li><a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/oct-22-old-tree-preview.jpg">preview</a></li>
<li>with calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/cal/oct-22-old-tree-cal-2880x1800.jpg">2880x1800</a></li>
<li>without calendar: <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1024x768.jpg">1024x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1366x768.jpg">1366x768</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://www.smashingmagazine.com/files/wallpapers/oct-22/old-tree/nocal/oct-22-old-tree-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>



Oldies But Goodies

<p>Hidden in our wallpapers archives, we rediscovered some <strong>almost-forgotten treasures</strong> from past October editions. May we present… <em>(Please note that these designs don’t come with a calendar.)</em></p>

<p></p><h3>Autumn Vibes</h3><p></p>
<p></p><p>“Autumn has come, the time of long walks in the rain, weekends spent with loved ones, with hot drinks, and a lot of tenderness. Enjoy.” — Designed by <a href="https://www.librafire.com/">LibraFire</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44511b2c-54dd-4a41-bf37-8e371feca3f0/oct-21-autumn-vibes-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/47909e5f-5e88-409c-9534-543c4018191a/oct-21-autumn-vibes-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/47909e5f-5e88-409c-9534-543c4018191a/oct-21-autumn-vibes-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/autumn-vibes/nocal/oct-21-autumn-vibes-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>The Night Drive</h3><p></p>
<p></p><p>Designed by <a href="https://vlad.studio/">Vlad Gerasimov</a> from Georgia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d2855e9-dfb9-4bbb-88d2-179407686170/oct-21-the-night-drive-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c857e80c-d2c5-49b1-9664-50fd96b1b71b/oct-21-the-night-drive-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c857e80c-d2c5-49b1-9664-50fd96b1b71b/oct-21-the-night-drive-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1024x600.jpg">1024x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1440x960.jpg">1440x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1600x900.jpg">1600x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-2560x1600.jpg">2560x1600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-2880x1800.jpg">2880x1800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-3072x1920.jpg">3072x1920</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-3840x2160.jpg">3840x2160</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-night-drive/nocal/oct-21-the-night-drive-nocal-5120x2880.jpg">5120x2880</a>    </li>
</ul>

<p></p><h3>The Return Of The Living Dead</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9b8f09e5-f54e-4906-8850-7bccb0b78d76/oct-21-the-return-of-the-living-dead-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a00ddee6-5e43-4657-a42a-5f9ecb577f49/oct-21-the-return-of-the-living-dead-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a00ddee6-5e43-4657-a42a-5f9ecb577f49/oct-21-the-return-of-the-living-dead-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/the-return-of-the-living-dead/nocal/oct-21-the-return-of-the-living-dead-nocal-3840x2160.png">3840x2160</a></li>
</ul>

<p></p><h3>Goddess Makosh</h3><p></p>
<p></p><p>“At the end of the kolodar, as everything begins to ripen, the village sets out to harvesting. Together with the farmers goes Makosh, the Goddess of fields and crops, ensuring a prosperous harvest. What she gave her life and health all year round is now mature and rich, thus, as a sign of gratitude, the girls bring her bread and wine. The beautiful game of the goddess makes the hard harvest easier, while the song of the farmer permeates the field.” — Designed by <a href="https://www.popwebdesign.net/graphic_design.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a1f6bf8-8622-49ca-be64-91aa92112914/oct-21-goddess-makosh-light-mode-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2d30a76-3e20-4e2a-9e4b-d80850f439d4/oct-21-goddess-makosh-light-mode-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2d30a76-3e20-4e2a-9e4b-d80850f439d4/oct-21-goddess-makosh-light-mode-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-21/goddess-makosh-light-mode/nocal/oct-21-goddess-makosh-light-mode-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Bird Migration Portal</h3><p></p>
<p></p><p>“October is a significant month for me because it is when my favorite type of bird travels south. For that reason I have chosen to write about the swallow. When I was young, I had a bird’s nest not so far from my room window. I watched the birds almost every day; because those swallows always left their nests in October. As a child, I dreamt that they all flew together to a nicer place, where they were not so cold.” — Designed by <a href="https://www.behance.net/elineclaeye6ad"> Eline Claeys</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22c08dc4-e293-4f69-a2ad-abc693077f16/oct-20-bird-migration-portal-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c93b9d2-ef73-482c-93e3-2ad30539c17f/oct-20-bird-migration-portal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c93b9d2-ef73-482c-93e3-2ad30539c17f/oct-20-bird-migration-portal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/bird-migration-portal/nocal/oct-20-bird-migration-portal-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3> Game Night And Hot Chocolate</h3><p></p>
<p></p><p>“To me, October is all about cozy evenings with hot chocolate, freshly baked cookies, and a game night with friends or family.” — Designed by Lieselot Geirnaert from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ddff2f5-0667-472f-8dd1-45338d9dcf1b/oct-20-game-night-and-hot-chocolate-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64f8726a-ac04-4d72-b048-c0dfcc6fefd7/oct-20-game-night-and-hot-chocolate-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64f8726a-ac04-4d72-b048-c0dfcc6fefd7/oct-20-game-night-and-hot-chocolate-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/game-night-and-hot-chocolate/nocal/oct-20-game-night-and-hot-chocolate-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Magical October</h3><p></p>
<p></p><p>“‘I’m so glad I live in a world where there are Octobers.’ (L. M. Montgomery, <em>Anne of Green Gables</em>)” — Designed by <a href="https://www.instagram.com/lenartlivia/">Lívi Lénárt</a> from Hungary.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a36a20c-2cda-4395-9a9c-b4eb4dc77009/oct-20-magical-october-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0fdda8cd-7c63-4b61-86f6-f3188d312aaf/oct-20-magical-october-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0fdda8cd-7c63-4b61-86f6-f3188d312aaf/oct-20-magical-october-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/magical-october/nocal/oct-20-magical-october-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>Hello Autumn</h3><p></p>
<p></p><p>“Did you know that squirrels don’t just eat nuts? They really like to eat fruit, too. Since apples are the seasonal fruit of October, I decided to combine both things into a beautiful image.” — Designed by Erin Troch from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ec017fd-d9c1-4e06-bf96-81693ff5ee05/oct-20-hello-autumn-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5f4a682-cf25-4c76-80d9-06092b3ba73d/oct-20-hello-autumn-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5f4a682-cf25-4c76-80d9-06092b3ba73d/oct-20-hello-autumn-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-20/hello-autumn/nocal/oct-20-hello-autumn-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>First Scarf And The Beach</h3><p></p>
<p></p><p>“When I was little, my parents always took me and my sister for a walk at the beach in Nieuwpoort, we didn't really do those beach walks in the summer but always when the sky started to turn grey and the days became colder. My sister and I always took out our warmest scarfs and played in the sand while my parents walked behind us. I really loved those Saturday or Sunday mornings where we were all together. I think October (when it’s not raining) is the perfect month to go to the beach for ‘uitwaaien’ (to blow out), to walk in the wind and take a break and clear your head, relieve the stress or forget one’s problems.” — Designed by <a href="https://www.instagram.com/bogaertgwen/">Gwen Bogaert</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0538b839-82b6-442b-82ab-cf9d5ad98b37/oct-19-first-scarf-and-the-beach-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58d65e6a-4878-49f7-b406-95abb0a70cb0/oct-19-first-scarf-and-the-beach-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58d65e6a-4878-49f7-b406-95abb0a70cb0/oct-19-first-scarf-and-the-beach-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/first-scarf-and-the-beach/nocal/oct-19-first-scarf-and-the-beach-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>

<p></p><h3>Haunted House</h3><p></p>
<p></p><p>“Love all the Halloween costumes and decorations!” — Designed by <a href="https://www.tazi.com.au">Tazi</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed9e47d2-2cf0-457f-bca9-be87b1569314/oct-17-haunted-house-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3f87bf9-b8cf-4038-8b9a-edbca1d21dc8/oct-17-haunted-house-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3f87bf9-b8cf-4038-8b9a-edbca1d21dc8/oct-17-haunted-house-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/haunted-house/nocal/oct-17-haunted-house-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Autumn Gate</h3><p></p>
<p></p><p>“The days are colder, but the colors are warmer, and with every step we go further, new earthly architecture reveals itself, making the best of winters’ dawn.” — Designed by <a href="https://www.creitive.com/">Ana Masnikosa</a> from Belgrade, Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01610475-7d0b-4c2b-9f81-a402701cc4b1/oct-17-autumn-gate-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ed3bfb0-b0fb-4a92-8231-8cfc3521ca16/oct-17-autumn-gate-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ed3bfb0-b0fb-4a92-8231-8cfc3521ca16/oct-17-autumn-gate-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/autumn-gate/nocal/oct-17-autumn-gate-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Ghostbusters</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8db976cc-7160-4d24-9dfb-c8e7a39b0c3a/oct-18-ghostbusters-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb08fc1e-0d62-454f-8cf3-0221a2ee23da/oct-18-ghostbusters-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb08fc1e-0d62-454f-8cf3-0221a2ee23da/oct-18-ghostbusters-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/ghostbusters/nocal/oct-18-ghostbusters-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Spooky Town</h3><p></p>
<p></p><p>Designed by <a href="https://www.behance.net/xenialatii">Xenia Latii</a> from Germany.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5612781d-646a-4dd3-a4f6-bf6fd797a922/oct-16-spooky-town-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8904f434-8f44-42f6-9c70-dc8316b99e07/oct-16-spooky-town-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8904f434-8f44-42f6-9c70-dc8316b99e07/oct-16-spooky-town-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1366x768.jpg">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-16/spooky-town/nocal/oct-16-spooky-town-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Strange October Journey</h3><p></p>
<p></p><p>“October makes the leaves fall to cover the land with lovely auburn colors and brings out all types of weird with them.” — Designed by Mi Ni Studio from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e75e3229-dc11-4b40-9dd1-cda9d7759053/oct-18-strange-october-journey-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b80137e-9fbb-46d8-a2c2-198d267acf14/oct-18-strange-october-journey-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b80137e-9fbb-46d8-a2c2-198d267acf14/oct-18-strange-october-journey-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-320x480.jpg">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-640x480.jpg">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-800x480.jpg">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-800x600.jpg">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-18/strange-october-journey/nocal/oct-18-strange-october-journey-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>



<p></p><h3>Autumn Deer</h3><p></p>
<p></p><p>Designed by <a href="https://www.amyhamilton.ca">Amy Hamilton</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f6fa6be-48ba-4e72-8e9c-78b248e4e02e/october-12-autumn-deer-38-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaae6beb-5e6f-4bec-81d1-f0fb20640f29/october-12-autumn-deer-38-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eaae6beb-5e6f-4bec-81d1-f0fb20640f29/october-12-autumn-deer-38-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1400x1050.png">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-2048x1536.png">2048x1536</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-2560x1440.png">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-autumn_deer__38-nocal-2880x1800.png">2880x1800</a></li></ul>

<p></p><h3>Dope Code</h3><p></p>
<p></p><p>“October is the month when the weather in Poland starts to get colder, and it gets very rainy, too. You can’t always spend your free time outside, so it’s the perfect opportunity to get some hot coffee and work on your next cool web project!” — Designed by Robert Brodziak from Poland.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/590480b2-8a92-4475-b85d-58f4df8241ef/oct-14-dope-code-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b752bf3c-d8ad-45fc-b20b-5de9fe272e1b/oct-14-dope-code-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b752bf3c-d8ad-45fc-b20b-5de9fe272e1b/oct-14-dope-code-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1152x864.jpg">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x720.jpg">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x960.jpg">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1400x1050.jpg">1400x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-14/dope-code/nocal/oct-14-dope-code-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Tea And Cookies</h3><p></p>
<p></p><p>“As it gets colder outside, all I want to do is stay inside with a big pot of tea, eat cookies and read or watch a movie, wrapped in a blanket. Is it just me?” — Designed by Miruna Sfia from Romania.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e29d8b5-6f10-4bd0-ab24-5835bc906fb7/oct-17-tea-and-cookies-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53ac53b9-8895-4352-b585-aacd3405bf95/oct-17-tea-and-cookies-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53ac53b9-8895-4352-b585-aacd3405bf95/oct-17-tea-and-cookies-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-320x480.png">320x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-640x480.png">640x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-800x600.png">800x600</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1024x1024.png">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1440x1050.png">1440x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1600x1200.png">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-1920x1440.png">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/tea-and-cookies/nocal/oct-17-tea-and-cookies-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Discovering The Universe!</h3><p></p>
<p></p><p>“Autumn is the best moment for discovering the universe. I am looking for a new galaxy or maybe… a UFO!” — Designed by <a href="https://www.silocreativo.com/en/">Verónica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b1865c0-e710-4289-b3f0-39a3723b91a1/oct-15-discovering-the-universe-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/99368568-d685-4fa9-adeb-036a518e6214/oct-15-discovering-the-universe-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/99368568-d685-4fa9-adeb-036a518e6214/oct-15-discovering-the-universe-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-800x480.png">800x480</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1152x864.png">1152x864</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1280x960.png">1280x960</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1680x1200.png">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-15/discovering-the-universe/nocal/oct-15-discovering-the-universe-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Transitions</h3><p></p>
<p></p><p>“To me, October is a transitional month. We gradually slide from summer to autumn. That’s why I chose to use a lot of gradients. I also wanted to work with simple shapes, because I think of October as the ‘back to nature/back to basics month’.” — Designed by <a href="https://dribbble.com/dentintheuniverse">Jelle Denturck</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/858d73a0-2432-4322-8abd-a7be0cc4ff2c/oct-19-transitions-full-opt.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d2b9f18-9994-4a95-af77-91c83d1bb7b7/oct-19-transitions-preview-opt.jpg" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d2b9f18-9994-4a95-af77-91c83d1bb7b7/oct-19-transitions-preview-opt.jpg">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1600x1200.jpg">1600x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1680x1200.jpg">1680x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-1920x1440.jpg">1920x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-2560x1440.jpg">2560x1440</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-19/transitions/nocal/oct-19-transitions-nocal-2880x1800.jpg">2880x1800</a></li>
</ul>

<p></p><h3>A Very Pug-o-ween</h3><p></p>
<p></p><p>“The best part of October is undoubtedly Halloween. And the best part of Halloween is dog owners who never pass up an o-paw-tunity to dress up their pups as something a-dog-able. Why design pugs specifically in costumes? Because no matter how you look at it, pugs are cute in whatever costume you put them in for trick or treating. There’s something about their wrinkly snorting snoots that makes us giggle, and we hope our backgrounds make you smile all month. Happy Pug-o-ween from the punsters at Trillion!” — Designed by Trillion from Summit, NJ.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9ab7d9f-fea8-4e92-a390-ed10656ec580/oct-17-a-very-pug-o-ween-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b5ed0bd-55de-470f-b3a3-c598a633c05a/oct-17-a-very-pug-o-ween-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b5ed0bd-55de-470f-b3a3-c598a633c05a/oct-17-a-very-pug-o-ween-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1024x768.png">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1280x720.png">1280x720</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1280x800.png">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1280x1024.png">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1366x768.png">1366x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1440x900.png">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1680x1050.png">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1920x1080.png">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-1920x1200.png">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/oct-17/a-very-pug-o-ween/nocal/oct-17-a-very-pug-o-ween-nocal-2560x1440.png">2560x1440</a></li></ul>

<p></p><h3>Whoops</h3><p></p>
<p></p><p>“A vector illustration of a dragon tipping over a wheelbarrow of pumpkins in a field with an illustrative fox character.” Designed by Cerberus Creative from the United States.</p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55129e92-5c4a-4230-afdd-6c6fb0431d6b/october-12-whoops-6-nocal-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58a72cf3-28fa-4e3d-9d22-d8fa3f646de3/october-12-whoops-6-nocal-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58a72cf3-28fa-4e3d-9d22-d8fa3f646de3/october-12-whoops-6-nocal-preview-opt.png">preview</a></li>
<li>without calendar: <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1024x768.jpg">1024x768</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1024x1024.jpg">1024x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1280x800.jpg">1280x800</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1280x1024.jpg">1280x1024</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1440x900.jpg">1440x900</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1680x1050.jpg">1680x1050</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1920x1080.jpg">1920x1080</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-1920x1200.jpg">1920x1200</a>, <a href="https://smashingmagazine.com/files/wallpapers/october-12/october-12-whoops__6-nocal-2560x1440.jpg">2560x1440</a></li></ul>

]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e6453cd-7ad1-45e4-b88c-afe922049104/oct-22-dreamy-autumn-girl-preview-opt.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Unconscious Biases That Get In The Way Of Inclusive Design]]></title>
            <link>https://smashingmagazine.com/2022/09/unconscious-biases-inclusive-design/</link>
            <guid>https://smashingmagazine.com/2022/09/unconscious-biases-inclusive-design/</guid>
            <pubDate>Thu, 29 Sep 2022 21:00:00 GMT</pubDate>
            <description><![CDATA[Throughout the research and design processes, our unconscious biases are the greatest risk to delivering inclusive experiences. From who we include and exclude in our research to how we plan and conduct research, it’s crucial that we understand how our unacknowledged biases can perpetuate systems of exclusion.]]></description>
            <content:encoded><![CDATA[<p>As designers, we want to design optimal experiences for the diverse range of people a product will serve. To achieve this, we take steps in our research and design decisions to minimize the risk of alienating product-relevant social identities, including but not limited to disability, race/ethnicity, gender, skin color, age, sexual orientation, and language.</p>
<p>According to psychologists, we all have <a href="https://royalsociety.org/topics-policy/publications/2015/unconscious-bias/">unconscious biases</a>. So, designs are often biased, just like we are. This article is for anyone involved in the product design and development process — writers, researchers, designers, developers, testers, managers, and stakeholders. We’ll explore how our biases impact design outcomes and what we can do to design more inclusive experiences.</p>
<p>Once we recognize our unconscious biases, we can take steps to reduce their influence on our decision-making, both as individuals and as collective development and design teams. In this article, we will discuss six unconscious biases that commonly result in delivering user experiences that fall short of being inclusive.</p>
<p>Let’s discuss the six most common unconscious biases are:</p>
<ul>
<li><a href="#confirmation-bias">Confirmation Bias</a>,</li>
<li><a href="#optimism-bias">Optimistic Bias</a>,</li>
<li><a href="#omission-bias">Omission Bias</a>,</li>
<li><a href="#false-consensus-bias">False Consensus Bias</a>,</li>
<li><a href="#perceptual-bias-stereotyping">Perception Bias</a>,</li>
<li><a href="#status-quo-bias">Status Quo Bias</a>.</li>
</ul>
Confirmation Bias
<p>This is probably one of the most well-known biases, yet we tend to underestimate how much it impacts our <em>own</em> behavior. <a href="https://www.psychologytoday.com/us/blog/seeing-what-others-dont/201905/the-curious-case-confirmation-bias">Confirmation bias</a> is the tendency to unconsciously look for and give more weight to data, feedback, and users’ behavior that affirms our existing assumptions.</p>
<h3>What Is The Impact?</h3>
<p>When we approach our work with a confirming and validating mindset, we are more likely to skew our research plan and ignore or minimize any findings that contradict our beliefs. These flaws undermine the purpose of doing research — the goal of inclusive design — and can result in building the wrong thing or the right thing the wrong way. It can also create overconfidence in our assumptions and incline us not to conduct any research at all.</p>
<p><a href="https://www.cnn.com/style/article/abercrombie-fitch-exclusion-netflix-documentary/index.html">Abercrombie &amp; Fitch</a> dominated the teen clothing market in the 1990s and early 2000s, promoting a very exclusive, all-American, cool-kid image. In the early 2010s, when consumer preferences shifted, the company failed to listen to consumers and maintain its exclusive brand image. After three years of declining sales and pressure from investors, CEO Mike Jefferies resigned. The new CEO, Fran Horowitz, rebranded the company saying, “We are a much more inclusive company, we are closer to the customer, we’re responding to the customer wants and not what we want them to want.” </p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Be curious.</strong><br />Approach conversations with users with a curiosity mindset and ask non-leading and open-ended questions. Having someone else take notes can serve as an accountability partner as you may hear things differently and can discuss them to clear up discrepancies. And, as much as possible, document exact quotes instead of inferences.</li>
<li><strong>Be responsive.</strong><br />View each design idea as a hypothesis with a willingness to change direction in response to research findings. Until we conduct primary research with users, our design concepts are merely our best guess based on our own experiences and limited knowledge about our users. We start with that hypothesis as a prototype, then test it with a diverse cross-section of our audience before coding. As quoted by Renee Reid at a UX Research Conference, we should “<a href="https://joinlearners.com/talk/3-ways-to-strengthen-research-influence-and-impact">investigate not validate</a>” our design concepts.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/abfaaef4-e92f-4eb6-94e4-3f62cd6457f8/2-unconscious-biases-inclusive-design.png" /></p>
Optimism Bias
<p>While <a href="https://www.verywellmind.com/the-benefits-of-optimism-3144811#toc-impact-of-optimism">optimism</a> has been linked to many health benefits, optimism bias can be detrimental. Our tendency to minimize the potential of negative outcomes and underestimate risks when it comes to our own actions is referred to as <a href="https://www.verywellmind.com/what-is-the-optimism-bias-2795031"><strong>optimism bias</strong></a>. Teams will optimistically think that overlooking socially responsible design will not adversely affect our users’ experience or the bottom line.</p>
<h3>What Is The Impact?</h3>
<p>As a result of optimistic bias, we may skip user research, ignore accessibility, disregard inclusive language, and launch products that don’t account for the diverse people who use the product.</p>
<p>It turns out that people want and expect products to be designed inclusively. A 2021 survey found that 65% of consumers worldwide purchase from <a href="https://medium.com/r/?url=https://vimeo.com/582123657">brands that promote diversity and inclusion</a>. And a study by Microsoft found that 49% of Gen-Z consumers in the US <a href="https://advertiseonbing-blob.azureedge.net/blob/bingads/media/insight/whitepapers/2020/07-july/inclusive-marketing/microsoft-advertising-whitepaper-the-psychology-of-inclusion-and-the-effects-in-advertising-gen-z-final.pdf"> stopped purchasing</a> from a brand that did not represent their values.</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Recognize the powerful influence of <a href="https://www.nngroup.com/articles/negativity-bias-ux/">negativity bias</a></strong> for those on the receiving end of our optimistic bias.<br />Psychologists’ research has consistently affirmed that people expect to have good experiences and are more unhappy about bad experiences than good ones. So, one bad interaction has a much greater impact on our users’ perceptions about their experiences than multiple positive interactions. </li>
<li><strong>Prioritize impact over output.</strong><br />Nobel Prize-winning psychologist Daniel Kahneman suggests running a<a href="https://youtu.be/f432ultnPQI"> project premortem</a>. He has extensively researched optimism bias and ways to reduce its influence on our decision-making. Premortem is a loss aversion technique that encourages us to brainstorm potential oversights and identify preventive measures early in our processes.</li>
</ul>
Omission Bias
<p>Similar to optimism bias, omission bias pertains to our expectations of outcomes. <a href="https://thedecisionlab.com/biases/omission-bias"><strong>Omission bias</strong></a> occurs when we judge harmful outcomes worse when caused by action than when caused by inaction. This bias can lead us to believe that intentionally deceptive design is a greater offense than failing to implement inclusive design practices.</p>
<h3>What Is The Impact?</h3>
<p>When we allow our omission bias to prevail, we feel reassured by an illusion of innocence. However, delivering products to market without considering diverse user expectations has the risk of creating<a href="https://www.fastcompany.com/90713854/from-failed-medical-devices-to-wrongful-arrests-this-is-what-happens-when-inclusive-design-takes-a-backseat"> harmful user experiences</a>. </p>
<p>This bias is a possible catalyst for skipping user research or leaving inclusive UX work in the product backlog. Some companies profit off this bias by providing <a href="https://shouldiuseanaccessibilityoverlay.com/">accessibility overlays</a> as a post-production solution. These third-party tools attempt to detect accessibility issues in the code and fix the problem for users on the website in real time. Unfortunately, accessibility overlays have been widely documented as problematic and can worsen access.</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Remember that inaction is not without consequence</strong> and<a href="https://www.userinterviews.com/blog/design-failure-examples-caused-by-bias-noninclusive-ux-research"> no less damaging</a> to our users than deliberately harmful actions.<br />When our product or service creates barriers or exclusion for our users, whether intentional or unintentional, the effect of the experience feels the same.</li>
<li><strong>Plan for inclusive research and design</strong> by factoring the necessary time, people, and money into the product roadmap.<br />Studies have found that the <a href="https://comp.anu.edu.au/courses/comp3120/local_docs/readings/Why%20Software%20Fails%20-%20IEEE%20Spectrum.pdf">business cost of going back to fix a design</a> can be 100 times as high as it would have been if the work was addressed during the development stage.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d304fae-f0ab-49ec-92b3-fd2f44541d40/3-unconscious-biases-inclusive-design.png" /></p>
False Consensus Bias
<p>The next two biases, false consensus and perceptual biases, are influential in how we think about others. <a href="https://www.simplypsychology.org/false-consensus-effect.html"><strong>False consensus bias</strong></a> is when we assume that other people think and behave the same as we do. Jakob Nielsen is known for the clever phrase, “<a href="https://www.nngroup.com/articles/false-consensus/">you are not the user</a>,” which is derived from this bias. Our false consensus bias can lead us to think, “well, I’m a user too,” when making design decisions. However, we all have a varied mix of identities — our age, ethnicity, abilities, gender, and so on — which are attributed to our unique needs and expectations. </p>
<h3>What Is The Impact?</h3>
<blockquote>We design for a broad range of people, most of whom are not like us.</blockquote>

<p>That is illuminated when we <strong>consider intersectionality</strong>. Law professor Kimberlé Crenshaw coined the term <a href="https://www.vox.com/the-highlight/2019/5/20/18542843/intersectionality-conservatism-law-race-gender-discrimination">intersectionality</a> “to describe how race, class, gender, and other individual characteristics ‘intersect’ with one another and overlap.”</p>
<p>In early 2022, Olay’s senior design strategist Kate Patterson redesigned the packaging for their facial moisturizer. The new <a href="https://www.olay.com/opentochange">Easy Open Lid</a> not only has side handles allowing a better grip for dexterity challenges but also has the product type in Braille and larger lettering with higher contrast for vision impairments. The product was released as a limited edition, and the company has a feedback form on its website to get feedback from users to make improvements for a second edition. </p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Avoid relying on personal preferences.</strong><br />Start with conventions and design guidelines, but don’t rely on them solely. Design guidelines are generic, so they don’t, and can’t, address all contextual situations. Optimal user experiences are the result of context-sensitive design.</li>
<li><strong>Let go of the notion of <a href="https://www.youtube.com/watch?v=5nNd7b4SAo0">the average user</a></strong> and engage with users in interviews, accessibility and usability testing, and other empirical research methods.<br />Conducting primary user research is immensely insightful as it allows us to learn how intersecting identities can vary users’ expectations, behavior, and contextual use cases.</li>
</ul>
Perceptual Bias (Stereotyping)
<p>Continuing with biases that distort how we think of others, <a href="https://www.oxfordreference.com/view/10.1093/oi/authority.20110803100316441"><strong>perceptual biases</strong></a> include halo effect, recency bias, primary effect, and stereotyping. Regarding biases that get in the way of inclusive design, we’ll address <a href="https://www.psychologytoday.com/us/basics/bias#bias-and-stereotyping">stereotyping</a>, which is when we have overgeneralized beliefs about people based on group attributes.  </p>
<h3>What Is The Impact?</h3>
<p>How we gather and interpret research can be greatly influenced by stereotyping. Surveys, for example, typically don’t reveal a person’s motivations or intent. This leaves room for our speculations of “why” when interpreting survey responses, which creates many opportunities for relying on stereotyping.</p>
<p>The <a href="https://sites.psu.edu/clairescriticcalanalysis/2019/08/29/terrible-ad-analysis">Mr. Clean Magic Eraser Sponge advertisement</a>, “This Mother’s Day, get back to the job that really matters,” reinforced antiquated gender roles. A<a href="https://www.npr.org/sections/goatsandsoda/2018/12/01/671891818/dolce-gabbana-ad-with-chopsticks-provokes-public-outrage-in-china"> Dolce &amp; Gabbana campaign</a> included an Asian woman wearing one of their dresses and trying to use chopsticks to eat Italian food while a voiceover mocked her and made sexual innuendos. Designing based on stereotypes and tropes is likely to insult and alienate some of our user groups.</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Include a broad spectrum of our users</strong> in our participant pool.<br />The more we understand the needs and expectations of our users that are different from us (different ages, ethnicities, abilities, gender identities, and so on), the more we reduce the need to depend on generalizations and offensive constructs about various social identities.</li>
<li><strong>Conduct <a href="https://www.ibm.com/design/thinking/page/toolkit/activity/assumptions-and-questions">assumption mapping</a></strong> which is an activity of documenting our questions and assumptions about users and noting the degree of certainty and risk for each.<br />Assumption mapping can help us uncover how much we’re relying on oversimplified generalizations about people and which segments of the audience our design might not be accounted for and help us prioritize areas to focus our research on.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5431dcfc-d7dc-4341-8c64-cab41aed56ec/1-unconscious-biases-inclusive-design.png" /></p>
Status Quo Bias
<p>Lastly, let’s look at a decision-making bias. <a href="https://thedecisionlab.com/biases/status-quo-bias"><strong>Status quo bias</strong></a> refers to our tendency to prefer how things are and to resist change. We perceive current practices as ideal and negatively view what’s unfamiliar, even when changes would result in better outcomes.</p>
<h3>What Is The Impact?</h3>
<p>When we rely on default thinking and societal norms, we run the risk of perpetuating systemic social biases and alienating segments of our users. Failing to get input and critique from people across a diverse spectrum can result in missed opportunities to design broadly-valued solutions.</p>
<p>It took Johnson &amp; Johnson 100 years to redesign their skin-tone colored adhesive bandages. The product was released in 1920 with a Eurocentric design that was optimal for light skin tones, and it wasn’t until 2020 that <a href="https://www.instagram.com/p/CBQdOqOBBve/">Band-aid added more shades</a> “to embrace the beauty of diverse skin.”</p>
<h3>What Can We Do?</h3>
<ul>
<li><strong>Leaders can build non-homogenous teams</strong> and foster a workplace where it’s safe to question the status quo.<br />Having team members with diverse lived experiences creates a wealth of variance and opportunities for divergent perspectives. Teams that are encouraged to challenge the default and propose alternatives have significant potential to minimize the risks of embedding biases in our UX processes.</li>
<li>As individuals, <strong>we can employ our <a href="https://www.youtube.com/watch?v=PirFrDVRBo4">System 2 thinking</a></strong>.<br />Psychologist Daniel Kahneman popularized two modes of thinking in his book <em>Thinking, Fast and Slow</em> to encourage us to move beyond our visceral thoughts to slower, effortful, and analytical thinking. In this mode, we can <strong>question our default System 1 thinking</strong>, which is automatic and impulsive, awaken our curiosity about novel ways to approach design challenges, and find opportunities to learn about and engage with people outside our typical circles.</li>
</ul>
Summary
<p>Designing for many means designing for demographic groups whose needs and expectations differ from ours. Our unconscious biases typically keep us in our comfort zones and stem from systemic social constructs that have historically been an anti-pattern for inclusivity.</p>
<p>Unconscious biases, when unrecognized and unchallenged, seep into our design practices and can insidiously pollute our research and design decisions. </p>
<p>We start to counter our unconscious biases by acknowledging that we have biases. You do. We all do. Next, we can take steps to be more mindful of how our designs impact the people who interact with our products so that we design inclusive experiences.</p>
<h3>Additional Resources</h3>
<ul>
<li>“<a href="https://uxpajournal.org/learning-recognize-exclusion/">Learning to Recognize Exclusion</a>”<br />An article by Lesley-Ann Noel and Marcelo Paiva on what it means to exclude, why we do it, and tips for moving out of our comfort zones.</li>
<li><a href="https://biasedbydesign.com/">Biased by Design</a><br />A website with information about other biases that influence the design and links to additional resources.</li>
<li><a href="https://www.netflix.com/title/81328723">Coded Bias</a><br />A Netflix documentary investigating bias in algorithms after M.I.T. Media Lab researcher Joy Buolamwini uncovered flaws in facial recognition technology. </li>
<li><a href="https://www.amazon.com/gp/product/0374533555">Thinking, Fast and Slow</a><br />A book by Daniel Kahneman about how thinking more slowly can help us reduce biased decision-making.</li>
<li><a href="https://abookapart.com/products/design-for-cognitive-bias">Design for Cognitive Bias</a><br />A book by David Dylan Thomas that discusses how biases influence decision-making and techniques for noticing our own biases so we can design more consciously.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Trina Moore Pervall)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/353aec29-80ea-4143-935a-c24bcd89593f/unconscious-biases-inclusive-design.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Building Your Security Strategy (Case Study)]]></title>
            <link>https://smashingmagazine.com/2022/09/ten-principles-consider-building-security-strategy-case-study/</link>
            <guid>https://smashingmagazine.com/2022/09/ten-principles-consider-building-security-strategy-case-study/</guid>
            <pubDate>Thu, 29 Sep 2022 12:00:00 GMT</pubDate>
            <description><![CDATA[In this article, Wix security experts share ten “security by design” principles that emerged from their work in keeping the Wix platform secure. If you’re a developer, these tried-and-true principles can help you build your own secure applications.]]></description>
            <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.wix.com/?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">Wix</a></p>
<p>What should you focus on when designing your <a href="https://www.wix.com/website-security?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">security strategy</a>? This question becomes more and more tricky as your organization grows and matures. At an initial stage, you might be able to make due with a periodic penetration test. But you will soon find that as you scale up to hundreds and thousands of services, some of the procedures have to change. The focus shifts from project-based assessments to building and maintaining a lasting mindset and framework with security at the core, so you can minimize risk across your environment.</p>
<p>In this article, we’ll share some guiding principles and ideas for incorporating security by design into your own development process, taken from our work at Wix serving 220M+ users.</p>
First And Foremost: Security By Design
<p>Also known as security by default, <strong>security by design</strong> (SbD) is a concept in which we aim to “limit the opportunities” for making security-related mistakes. Consider a case where a developer builds a service to query a database. If the developer is required (or allowed) to build queries “from scratch” writing SQL directly into his code, they can very well end up introducing <strong>SQL Injections</strong> (SQLI) vulnerabilities. However, with a security by default approach, the developer can get a safe <strong>Object-Relational Mapping</strong> (ORM), letting the code focus on logic where the DB interactions are left for the ORM libraries. By ensuring the ORM library is safe once, we are able to block SQLI everywhere (or at least everywhere the library is used). This approach might restrict some developer liberties, but except for specific cases, the security benefits tend to outweigh the cons.</p>
<p>That previous example is rather well known, and if you use a mature application development framework, you’re probably using an ORM anyway. But the same logic can be applied to other types of vulnerabilities and issues. Input validation? Do this by default using your app framework, according to the declared var type. What about <strong>Cross-Site Resource Forgery</strong> (<a href="https://portswigger.net/web-security/csrf">CSRF</a>)? Solve it for everyone in your API gateway server. Authorization confusion? Create a central identity resolution logic to be consumed by all other services.</p>
<p>By following this methodology, we’re able to allow our developers the freedom to move quickly and efficiently, without needing to introduce security as a “blocker” in later stages before new features go live.  </p>
<h3>1. Establish Secure Defaults For Your Services</h3>
<p>Take the time to ensure that your services are served by default with secure settings. For example, users should not need to actively choose to make their data private. Instead, the default should be “private” and users can have the option to make it public if they choose to. This of course depends on product decisions as well, but the concept stands. Let’s look at an example. When you build a site on our platform, you can easily set up a content “Collection”, which is like a simplified database. By default, editing permissions to this collection are restricted to admin users only, and the user has the option to expose it to other user types using the Roles &amp; Permissions feature. The default is secure.</p>
<h3>2. Apply The Principle Of Least Privilege (PoLP)</h3>
<p>Put simply, users shouldn’t have permission for stuff they don’t need. A permission granted is a permission used, or if not needed, then abused. Let’s look at a simple example: When using Wix, which is a secure system with support for multiple users, a website owner can use Roles &amp; Permissions to add a contributor, say with a Blog Writer role, to their site. As derived from the name, you would expect this user to have permissions to write blogs. However, would this new contributor have permissions, for example, to edit payments? When you put it like this, it sounds almost ridiculous. But the “least permission” concept (PoLP) is often misunderstood. You need to apply it not only to users, but also to employees, and even to systems. This way even if you <em>are</em> vulnerable to something like CSRF and your employees are exploited, the damage is still limited.</p>
<p>In a rich microservice environment, thinking about least permission might become challenging. Which permission should Microservice A have? Should it be allowed to access Microservice B? The most straightforward way to tackle this question is simply starting with zero permissions. A newly launched service should have access to nothing. The developer, then, would have an easy, simple way to extend their service permission, according to need. For example, a “self service” solution for allowing developers to grant permissions for services to access non-sensitive databases makes sense. In such an environment, you can also look at sensitive permissions (say for a database holding PII data), and require a further control for granting permissions to them (for example, an OK from the data owner).</p>
<h3>3. Embrace The Principle Of Defense In Depth (DiD)</h3>
<p>As beautifully put by a colleague, security is like an onion — it’s made of many layers built on top of layers, and it can make you cry. In other words, when building a secure system, you need to account for different types of risk and threats, and subsequently you need to build different types of protections on top of others. </p>
<p>Again, let’s look at a simple example of a login system. The first security gateway you can think of in this context is the “user-password” combination. But as we all know, passwords can leak, so one should always add a second layer of defense: <strong>two-factor authentication</strong> (2FA), also known as <strong>multi-factor authentication</strong> (MFA). Wix encourages users to enable this feature for their account security. And by now, MFA is pretty standard — but is it enough? Can we assume that someone who successfully logged into the system is now trusted? </p>
<p>Unfortunately, not always. We looked until now at one type of attack (password stealing), and we provided another layer to protect against it, but there are certainly other attacks. For example, if we don’t protect ourselves, a <strong>Cross Site Scripting</strong> (XSS) attack can be used to hijack a user’s sessions (for example by stealing the cookies), which is as good as a login bypass. So we need to consider added layers of defense: cookie flags to prevent JS access (HTTP only), session timeouts, binding a session to a device, etc. And of course, we need to make sure we don’t expose XSS issues.</p>
<p>You can look at this concept in another way. When writing a feature, you should almost protect it “from scratch”, thinking all defenses might have been broken. That doesnt mean writing every line of code again, it just means being aware that certain assumptions cannot be made. For example, you can’t assume that just because your service does not have an externally reachable endpoint, it has never been accessed by malicious entities. An attacker exploiting <strong>Server-Side Request Forgery</strong> (SSRF) issues can hit your endpoint any minute. Is it protected against such issues? </p>
<p>At Wix, we assume a “breach mindset” at all times, meaning each developer assumes the controls leading up to the application they’re working on have already been breached. That means checking permissions, input validations and even logic — we never assume previous services are sensible.</p>
<h3>4. Minimize Attack Surface Area</h3>
<p>What’s the safest way to secure a server? Disconnect it from the electricity socket. Jokes aside, while we don’t want to turn our services off just to ensure they’re not abused, we certainly don’t want to leave them on if they serve no real function. If something is not needed or being used, it should not be online. </p>
<p>The most straightforward way to understand this concept is by looking at non-production environments (QA, staging, etc). While such environments are often needed internally during the development process, they have no business being exposed such that external users can access them. Being publicly available means they can serve as a target for an attack, as they are not “production ready” services (after all, they are in the testing phase). The probability for them to become vulnerable increases. </p>
<p>But this concept doesn’t apply only to whole environments. If your code contains unused or unnecessary methods, remove them before pushing to production. Otherwise, they become pains instead of assets.</p>
<h3>5. Fail Securely</h3>
<p>If something fails, it should do so securely. If that’s confusing, you’re not alone. Many developers overlook this principle or misunderstand it. Imagining every possible edge case on which your logic can fail is almost impossible, but it is something you need to plan for, and more often than not it’s another question of adopting the right mindset. If you assume there <em>will</em> be failures, then you’re more likely to include all possibilities.</p>
<p>For instance, a security check should have two possible outcomes: allow or deny. The credentials inputted are either correct, or they’re not. But what if the check fails entirely, say, because of an unexpected outage of electricity in the database server? Your code keeps running, but you get a “DB not found” error. Did you consider that? </p>
<p>In this particular instance, the answer is probably “yes”, you thought of it, either because your framework forced you to consider it (such as Java’s “checked exceptions”) or simply because it actually happens often enough that your code failed in the past. But what if it is something more subtle? What if, for example, your SQL query fails due to non-unicode characters that suddenly appeared as input? What if your S3 bucket suddenly had its permissions changed and now you can’t read from it anymore? What if the DNS server you’re using is down and suddenly instead of an NPM repo you’re hitting a compromised host? </p>
<p>These examples might seem ludacris to you, and it would be even more ludacris to expect you to write code to handle them. What you should do, however, is expect things to behave in an expected manner, and make sure if such things occur, you “fail securely”, like by just returning an error and stopping the execution flow. </p>
<p>It would make no sense to continue the login flow if the DB server is down, and it will make no sense to continue the media processing if you can’t store that image on that bucket. Break the flow, log the error, alert to the relevant channel — but don’t drop your security controls in the process. </p>
<h3>6. Manage Your Third-Party Risk</h3>
<p>Most modern applications use third-party services and/or import third-party code to enhance their offering. But how can we ensure secure integrations with third parties? We think about this principle a lot at Wix, as we offer third-party integrations to our user sites in many ways. For example, users can install apps from our App Market or add third-party software to their websites using our full-stack development platform called <a href="https://www.wix.com/velo?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">Velo</a>.</p>
<p>Third-party code can be infiltrated, just like your own, but has the added complication that you have no control over it. MPM node libraries, for instance, are some of the most used in the world. But recently a few well-known cases involved them being compromised, leaving every site that used them exposed.</p>
<p>The most important thing is to be aware that this might happen. Keep track of all your open-source code in a <strong>software bill of materials</strong> (SBOM), and create processes for regularly reviewing it. If you can, run regular checks of all your third-party suppliers’ security practices. For example, at Wix we run a strict <strong>Third-Party Risk Management Program</strong> (TPRM) to vet third parties and assess security while working with them.</p>
<h3>7. Remember Separation Of Duties (SoD)</h3>
<p>Separation of duties really boils down to making sure tasks are split into (and limited to) appropriate user types, though this principle could also apply to subsystems.</p>
<p>The administrator of an eCommerce site, for example, should not be able to make purchases. And a user of the same site should not be promoted to administrator, as this might allow them to alter orders or give themselves free products.</p>
<p>The thinking behind this principle is simply that if one person is compromised or acting fraudulently, their actions shouldn’t compromise the whole environment.</p>
<h3>8. Avoid Security By Obscurity</h3>
<p>If you write a backdoor, it will be found. If you hard-code secrets in your code, they will be exposed. It’s not a question of “if”, but “when” — there is no way to keep things hidden forever. Hackers spend time and effort on building reconnaissance tools to target exactly these types of vulnerabilities (many such tools can be found with a quick Google search), and more often than not when you point at a target, you get a result. </p>
<p>The bottom line is simple: you cannot rely on hidden features to remain hidden. Instead,  there should be enough security controls in place to keep your application safe when these features are found. </p>
<p>For example, it is common to generate access links based on randomly generated UUIDs. Consider a scenario where an anonymous user makes a purchase on your store, and you want to serve the invoice online. You cannot protect the invoice with permissions, as the user is anonymous, but it is sensitive data. So you would generate a “secret” UUID, build it into the link, and treat the “knowledge” of the link as “proof” of identity ownership.  </p>
<p>But how long can this assumption remain true? Over time, such links (with UUID in them) might get indexed by search engines. They might end up on the Wayback Machine. They might be collected by a third-party service running on the end user’s browser (say a BI extension of some sort), then collected into some online DB, and one day accessed by a third party. </p>
<p>Adding a short time limit to such links (based on UUIDs) is a good compromise. We don’t rely on the link staying secret for long (so there’s no security by obscurity), just for a few hours. When the link gets discovered, it’s already no longer valid. </p>
<h3>9. Keep Security Simple</h3>
<p>Also known as KISS, or <em>keep it simple, stupid</em>. As developers, we need to keep users in mind at all times. If a service is too complicated to use, then its users might not know how to use it, and bypass it or use it incorrectly. </p>
<p>Take 2FA for example. We all know it’s more secure, but the process also involves a degree of manual setup. Making it as simple as possible to follow means more users will follow it, and not compromise their own accounts with weaker protections.</p>
<p>Adding new security functionality always makes a system more complex, so it can have an unintended negative impact on security. So keep it simple. Always weigh the value of new functionality against its complexity, and keep security architecture as simple as possible.</p>
<h3>10. Fix Security Issues, Then Check Your Work</h3>
<p>Thoroughly fixing security issues is important for all aspects of a business. At Wix, for example, we partner with ethical hackers through our <a href="https://www.hackerone.com/customer-stories/how-wix-improves-their-security-posture-ethical-hackers">Bug Bounty Program</a> to help us find issues and vulnerabilities in our system, and practice fixing them. We also employ internal security and penetration testing, and the security team is constantly reviewing the production services, looking for potential bugs.</p>
<p>But fixing a bug is just the start. You also need to understand the vulnerability thoroughly before you fix it, and often get whoever spotted it to check your fix too. And then, when a bug is fixed, carry out regression tests to make sure it’s not reintroduced by code rollbacks. This process is crucial to make sure you’re actually advancing your application security posture.</p>
Conclusion
<p>By implementing security by design at Wix, we were able to build a robust and secure platform — and we hope that sharing our approach will help you do the same. We applied these principles not just to security features, but to all components of our system. We recommend considering this, whether you build from scratch or choose to rely on a secure platform like ours.</p>
<p>More importantly, following security by design instilled a security mindset into our company as a whole, from developers to marketing and sales. Cybersecurity should be top priority in everyone’s minds, as attacks increase and hackers find new ways of accessing sensitive information. </p>
<p>Taking a defensive position right from the start will put you at an advantage. Because when thinking about cybersecurity, it’s not <em>if</em> a breach happens. It’s when.</p>
<ul>
<li>For more information on security by design, visit the <a href="https://owasp.org/">Open Web Application Security Project</a>. This non-profit community is dedicated to securing the web, and produces a range of free open-source tools, training and other resources to help improve software security. </li>
<li>To learn more about secure practices at Wix, check out <a href="https://www.wix.com/trust-center/security?utm_source=affiliate&amp;utm_campaign=bd_smashingmag&amp;experiment_id=0001">wix.com/trust-center/security</a>.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Wix Security Team)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1504d71c-665f-4bef-81ff-f09c25cc55eb/building-your-security-strategy.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Phone Numbers For Web Designers]]></title>
            <link>https://smashingmagazine.com/2022/09/phone-numbers-web-designers/</link>
            <guid>https://smashingmagazine.com/2022/09/phone-numbers-web-designers/</guid>
            <pubDate>Wed, 28 Sep 2022 11:00:00 GMT</pubDate>
            <description><![CDATA[The customer journey is not limited to a website alone. Simply by combining the world of website design and telephony, far better results can be obtained for your organization. And thanks to the similarities and mutual benefits, it is an easy step to take.]]></description>
            <content:encoded><![CDATA[<p>It is exciting how websites are being optimized. Localization, A/B testing, and cross-domain campaign tracking contribute to your bottom line. But why stop there? The customer experience is not determined by your website alone. Take the next step and start to include your telephony in the optimization span. And it is a relatively easy step to take as you are already familiar with the mechanisms. Simply follow these seven considerations.</p>
First Things First: The Basics
<p>Before determining which number type to use and when and how to present them on your website, it helps to know which number types are available, to begin with:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/957fdb7f-318d-49b0-b65a-b7ea867a09d7/number-types.png" /></p>
<p>Each of these numbers can be valid to use, depending on your strategy. It is important to line up the localization, appearance (tone of voice), and other factors of your website and the phone number type you choose. And — like your website — keep testing and optimizing your choice.</p>
<p>Let’s dive into the details of the seven considerations to make.</p>
Localization
<p>A lot has been written about localization. <a href="https://www.forbes.com/sites/forbesbusinesscouncil/2022/01/24/three-important-aspects-of-localization-often-overlooked-by-small-businesses/?sh=ea65f2f2847f">Why</a> it is important and <a href="https://www.smashingmagazine.com/2020/11/internationalization-localization-static-sites/">how</a> to achieve it with your website. All this attention is leading to great results. However, a website and the product are not the only points of contact with the customer and do not fully cover the customer experience domain. So, there is much to be gained here.</p>
<p>The localization of your website and phone number choice needs to be in sync. If your website is tailored per country, the phone number should also be country-specific. It would be weird to have a site for a specific country but not a phone number. And the beauty is that you have already determined the level of localization required for your website. You can simply match the localization needed to the available phone number types.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69334ba4-8c6f-4c36-8341-6493d942ca9f/number-type-and-matching-localisation.png" /></p>
<p>If your website localization is country-based, then get one of these numbers:</p>
<ul>
<li>National number,</li>
<li>Freephone number,</li>
<li>Premium Rate number.</li>
</ul>
<p>All of these are suitable for country-wide operating businesses. We’ll get back to how to choose which one fits your case best later in this article.</p>
<p>If your website targets specific areas smaller than a country:</p>
<p>Get <strong>local numbers</strong> in the same areas you are targeting with your website. It strengthens your website localization strategy, and you continue to earn trust with the local phone numbers. If you have optimized (an instance of) your website specifically for London, it only makes sense to extend that strategy and present a Local London Phone number.</p>
<p>There are two number types that require additional attention:</p>
<ol>
<li>A <strong>mobile phone number</strong> is technically a number that is valid country-wide. However, it has its value for a very specific type of business: mostly local operating, independent service providers.</li>
<li>An <strong>international freephone number</strong> (officially a <strong>UIFN number</strong>) is a single number that can be activated in multiple countries. If your website strategy is explicitly to express one voice for all, this number type fits that strategy; one single international phone number that can be activated in multiple countries. And it can have its advantages in other areas as well. We’ll dive into those a bit later in this article.</li>
</ol>
Appearance
<p>Every type of number expresses an identity. This should match the identity your target market expects from you. Again, consistency is key. Make sure to align the tone of voice and the image you are projecting with your website with the appearance of the phone number(s) you choose.</p>
<p>If you are trying to generate a familiar feel on your website, a <strong>local number</strong> is your best option. You are calling someone close by, your neighbor. It gives the feeling you know them and that they are trustworthy.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01d5bc0a-20af-4aa6-9774-0b78ae250faa/appearance.png" /></p>
<p>If you want to provide a more corporate or formal impression, a <strong>national number</strong> is your choice. Bigger companies need a lot of phone numbers, and in many cases, they have offices in different cities. National Numbers have been created to overcome the issue of local numbers being snagged away from consumers. And as stated earlier, they can be used in multiple cities, which enables a company to be reachable in multiple cities via the same phone number. Not for nothing, National phone numbers are also called corporate numbers.</p>
<p>Only use a <strong>mobile number</strong> if you have to exhume mobility while it is ok that you are an independent service provider. Like an independent courier.</p>
<p><strong>Freephone numbers</strong> are by far the most effective phone number types for sales lines and support lines for high-end services and products. If you want to welcome your callers with open arms, this is the number type to opt for, without a doubt.</p>
<p>If the phone call is the medium via which you provide your services, <strong>premium rate numbers</strong> can provide financial compensation for the services provided. In some cases, these numbers are also used as support lines with the goal of building a threshold for the customer to call and some compensation for the cost of the time spent. Note that this will negatively impact your customer experience. In most countries, it is not even allowed to offer a premium rate number for the support line on services under contract or products under warranty.</p>
<p>An <strong>international freephone number</strong> is counterproductive in localization but has other advantages. This number type has been defined by the<a href="https://www.itu.int/en/ITU-T/inr/unum/Pages/uifn.aspx"> ITU</a> as an international alternative for the regular in-country freephone number and has the calling code +800. Having the same number available in multiple countries has its advantages: You only have to print one number on documentation to be used in multiple countries. And if you have international traveling callers, they only have to memorize one number.</p>
Caller And Operational Cost
<p>Each number type has its own caller and operational cost profile.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b6110d6-114d-4e22-ad6f-b35017f0a60e/cost.png" /></p>
<p>The most cost-effective numbers for both callers and you are <strong>local, national, and mobile numbers</strong>. These number types are mostly called from the caller bundle and have the lowest operational cost.</p>
<p>The purpose of a <strong>freephone number</strong> is to shift the caller cost from caller to operational. Therefore, the operational cost is relatively high.</p>
<p>A <strong>premium rate number</strong> is a payment method; therefore, caller cost is high and provides an operational source of income.</p>
<p>The cost model for an <strong>international freephone number</strong> is similar to the model of a normal freephone number. The cost is shifted to the operation. </p>
<p><strong>Note</strong>: <em>Since this is a globally defined phone number type, it is not regulated by the various in-country regulators to whom the caller operators have to answer.</em></p>
<p>Most fixed line operators do respect the 0-caller tariff. However, some mobile operators use this loophole to charge their customers for calls to these numbers.</p>
Reachability
<p>Not all number types can be called from everywhere. Obviously, you need to make sure your phone number is reachable by your target audience.</p>
<p><strong>Local, national, mobile and international freephone numbers</strong> are usually internationally reachable.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a29823d5-3f93-411c-a2be-6ba12f56f65b/international-reachability.png" /></p>
<p>Normal freephone and premium rate numbers are not. As discussed before, these numbers do have their added value for many organizations. If you use these types of numbers, it is important to make sure you get a number in every target market or at least an alternative number for your local customer who just happened to travel outside of your country.</p>
A/B And Campaign Testing
<p>With these guidelines, you can make educated choices and proceed with confidence. But do you stop tweaking your website at this point? No, you don’t! This is where you start with optimization via methods like <a href="https://www.smashingmagazine.com/2010/06/the-ultimate-guide-to-a-b-testing/">A/B Testing</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d728bb5-61a2-40e1-97bc-97eac98db738/campaign-and-ab-testing.png" /></p>
<p>So why not include the phone number options in the scope of testing? All tools are available. All you have to do is include the phone numbers as an A/B parameter. And by adding the call statistics to the test evaluation, you can get to a more educated and accurate conclusion. Now, instead of the website, you are optimizing the website-phone number combination.</p>
<p>That also brings us to the next optimization. When evaluating an ad campaign or mailing, the evaluation usually stops with the clicks. But using different phone numbers (the same type of phone numbers to keep the evaluation clean) on both legs makes it very easy to add the call and call result statistics to the evaluation, enabling you to make even more educated decisions.</p>
<h3>Conclusion</h3>
<p>A/B testing can be used to evaluate and tweak your phone number choices. And by using different phone numbers (of the same type), you can make your Campaign evaluations more accurate.</p>
Website And Phone Number Integration
<p>Online communication and telephony are often regarded as two distinct domains, but they shouldn’t be. They are both customer contact points, and each can benefit greatly from the other.</p>
<p>Traditionally, just the phone number of the central office was presented. Once the realization set is that localization was also relevant for phone numbers, at least a block with multiple phone numbers was shown.</p>
<p>At the moment (hopefully even more after this article), the phone number shown is an integral part of the localization.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a501a1d9-d151-4239-83e7-74ebf36b4933/phone-number-and-website-integration.png" /></p>
<p>Best practice, however, is taking it a step further. Whatever you do, the goal should be to reach the goal as fast and efficiently as possible for your customer and you. This is valid for your website, your <a href="https://www.mcxess.com/how-to-make-your-callers-happy/">phone support</a>, and both combined. The best results can be obtained when information gathered on the website is not wasted but put to the benefit of the following phone call. By simply presenting a phone number based on the information gathered, you skip the necessity of an (extensive) phone menu and have call screening in place. The image shows a chat setup, but obviously, the same result can be achieved with other setups as well.</p>
<p>And in many cases, that information can be used to present relevant self-service alternatives to the visitor. That could mean even higher efficiency for both your customers and you. Do note that it is essential to offer the options to the visitor — do not hide the possibility of calling. That will lead to frustration, negatively impact customer satisfaction, and cost you leads and customers.</p>
Phone Number Presentation
<p>The last consideration is the presentation of the phone number on your website. Obviously, the presentation depends highly on your website design, but here are a couple of pointers from the phone number perspective:</p>
<ul>
<li><a href="#link">Link</a></li>
<li><a href="#flags">Flags</a></li>
<li><a href="#caller-tariffs">Caller Tariffs</a></li>
</ul>
<h3>Link</h3>
<p>Always link your phone numbers! Anything you do should contribute to making the life of your audience easier. Most devices are smart and connected, so link your phone number and enable your audience to place the call via a click.</p>
<p>Linking a phone number is easy with the ‘tel’ HTML tag, but what is important is always to use the <a href="https://www.mcxess.com/country-calling-codes/">international format</a>. If you link the local format, visitors from another country will not be able to call the number. In the link, do not place spaces or dashes, just the phone number, for example, tel:+31201234567.</p>
<h3>Flags</h3>
<p>It does help to present the flag or ISO code of the country of the number presented. It confirms the localization to the caller. The caller recognizes the flag and feels confident to call the number. If it is someone from another country, at least they are aware they will call internationally. This way, you’ll prevent possible surprises for the caller afterward.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3c5bf20f-9f8c-4480-b0b2-f90d6822d469/alternative-numbers.png" /></p>
<p>Furthermore, it gives you the opportunity to offer alternatives. If you have alternative phone numbers, it is possible to present the flag (combined with the number) in a dropdown. This way, in case the localization of the website is off, any visitor can find their relevant phone number. Note: When having alternatives, do not show all options, but show one (the one that should be relevant according to your site’s localization) and show there are alternatives. That way, you keep it simple.</p>
<h3>Caller Tariffs</h3>
<p><strong>Important:</strong> When presenting a premium rate phone number, always present the caller’s cost as well. </p>
<p>Besides that, it is the right thing to do, and it is also obligatory in most countries. In most countries, it is even obligatory to present the cost with the same font type, size, and color as the phone number, to avoid any room misinterpretation.</p>
<p>On the other hand, when presenting a freephone number, it is good to make it explicit as well as you want to avoid any chance your visitor does not recognize the number is free to call. What is important in this case is to make sure to use the right language which is understood by your audience. Other names for a “freephone number” are, for instance, a “green number” or “toll-free number”; it has many different names in many other languages. Check with your target audience before naming your number.</p>
<p>The other number types usually fall within everybody’s calling bundle, and there is not really a reason to state the number type. The only thing important for your audience is the country of the phone number. Those numbers are internationally callable, which could impact the caller’s cost.</p>
Takeaway
<p>It could help to see phone numbers like URLs. They have — on an abstract level — the same dynamics and statistics.</p>
<table>
  <tbody>
    <tr>
      <td>Visits</td>
      <td>vs</td>
      <td>Calls</td>
    </tr>
    <tr>
      <td>Session duration</td>
      <td>vs</td>
      <td>Call duration</td>
    </tr>
    <tr>
      <td>Conversion result</td>
      <td>vs</td>
      <td>Conversion result</td>
    </tr>
  </tbody>
</table>

<p>The customer journey is not limited to a website alone. Simply by combining the world of website design and telephony, far better results can be obtained for your organization. And thanks to the similarities and mutual benefits, it is an easy step to take.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bcdf75-1c5c-406b-b2bc-52ed058b6ecc/infographic-phone-numbers-web-designers.png" /></p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Onno Westra)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/20a14bbc-76a0-49f8-828b-0718c7c1f5a8/phone-numbers-web-designers.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Five Data-Loading Patterns To Boost Web Performance]]></title>
            <link>https://smashingmagazine.com/2022/09/data-loading-patterns-improve-frontend-performance/</link>
            <guid>https://smashingmagazine.com/2022/09/data-loading-patterns-improve-frontend-performance/</guid>
            <pubDate>Tue, 27 Sep 2022 14:00:00 GMT</pubDate>
            <description><![CDATA[You don’t need a framework for everything, but if you use one, this article will help you use it in the most performant way.]]></description>
            <content:encoded><![CDATA[<p>When it comes to performance, you shouldn’t be stingy. There are millions of sites, and you are in close competition with every one of those Google search query results. Research shows that users <a href="https://www.marketingdive.com/news/google-53-of-mobile-users-abandon-sites-that-take-over-3-seconds-to-load/426070/">will abandon sites</a> that take longer than three seconds to load. Three seconds is a very short amount of time. While many sites nowadays load in less than one second, there is no one size fits all solution, and the first request can either be the do or die of your application. </p>
<p>Modern frontend applications are getting bigger and bigger. It is no wonder that the industry is getting more concerned with optimizations. Frameworks create unreasonable build sizes for applications that can either make or break your application. Every unnecessary bit of JavaScript code you bundle and serve will be more code the client has to load and process. The rule of thumb is the less, the better.</p>
<p>Data loading patterns are an essential part of your application as they will determine which parts of your application are directly usable by visitors. Don’t be the site that slows their entire site because they chose to load a 5MB image on the application’s homepage and understand the issue better. You need to know about the resource loading waterfall.</p>
Loading Spinner Hell And The Resource Loading Waterfall
<p>The resource loading waterfall is a cascade of files downloaded from the network server to the client to load your website from start to finish. It essentially describes the lifetime of each file you download to load your page from the network. </p>
<p>You can see this by opening your browser and looking in the <strong>Networking</strong> tab. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09a956d7-14db-4f6f-bdbd-d54f01f67187/4-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>What do you see there? There are two essential components that you should see:</p>
<ol>
<li>The chart shows the timeline for each file requested and loaded. You can see which files go first and follow each consecutive request until a particular file takes a long time to load. You can inspect it and see whether or not you can optimize it.</li>
<li>At the bottom of the page, you can check how many kB of resources your client consumes. It is important to note how much data the client needs to download. On your first try, you can use it as a benchmark for optimizations later.</li>
</ol>
<p>No one likes a white blank screen, especially your users. Lagging resource loading waterfalls need a basic placeholder before you can start building the layout on the client side. Usually, you would use either a spinner or a skeleton loader. As the data loads one by one, the page will show a loader until all the components are ready. </p>
<p>While adding loaders as placeholders is an improvement, having it on too long can cause a “spinner hell.” Essentially, your app is stuck on loading, and while it is better than a blank HTML page, it could get annoying, and visitors would choose to exit your site.</p>
<p>But isn’t waiting for the data the point?</p>
<p>Well, yes, but you can load it <strong>faster</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/03081f4f-a430-4acc-987c-74683c86c738/5-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Assuming you want to load a social media layout, you might add a loading spinner or a skeleton loader to ensure that you don’t load an incomplete site. The skeleton loader will usually wait for:</p>
<ul>
<li>The data from the backend API;</li>
<li>The build layout according to the data.</li>
</ul>
<p>You make an asynchronous call to an API, after which you get the URL for the asset on the CDN. Only then can you start building the layout on the client side. That’s a lot of work to show your face, name, status, and Instagram posts on the first try.</p>
The Five Data-Loading Patterns You Need to Know
<p>Developing software is becoming easier as frameworks like React, Vue, or Angular become the go-to solution for creating even the simplest applications. But using these bulky frameworks filled with a ton of magical functions you don’t even use isn’t what you should be going for.</p>
<p>You’re here to optimize. Remember, the less, the better.</p>
<p>But what if you can’t do less? How will you serve blazingly fast code, then? Well, it’s good that you’re about to learn five data-loading patterns that you can use to get your site to load quickly or, as you would say, <strong>blazingly fast</strong>.</p>
Client Side Rendering, Server Side Rendering And Jamstack
<p>Modern JavaScript frameworks often use client-side rendering (CSR) to render webpages. The browser <a href="https://web.dev/rendering-on-the-web/">receives a JavaScript bundle</a> and static HTML in a payload, then it will render the DOM and add the listeners and events triggers for reactiveness. When a CSR app is rendered inside the DOM, the <a href="https://web.dev/rendering-on-the-web/">page will be blocked</a> until all components are rendered successfully. Rendering makes the app reactive. To run it, you have to make another API call to the server and retrieve any data you want to load.</p>
<p>Server-side rendering (SSR) is when an application serves plain HTML to the client. SSR can be divided into two types: SSR with hydration and SSR without hydration. SSR is an old technique used by older frameworks such as WordPress, Ruby on Rails, and ASP.NET. The main goal of SSR is to give the user a static HTML with the prerequisite data. Unlike CSR, SSR doesn’t need to make another API call to the backend because the server generates an HTML template and loads any data within it.</p>
<p>Newer solutions like Next.js uses hydration, where the static HTML will be hydrated on the client side using JavaScript. Think of it like instant coffee, the coffee powder is the HTML, and the water is the JavaScript. What happens when you mix instant coffee powder with water? You get — wait for it — <em>coffee</em>.</p>
<p>But what is a Jamstack? Jamstack is similar to SSR because the client retrieves plain HTML. But during SSR, the client retrieves the HTML from the server. However, Jamstack apps serve pre-generated HTML directly from the CDN. Because of this, Jamstack apps usually load faster, but it’s harder for developers to make dynamic content. Jamstack apps are good with pre-generating HTML for the client, but when you use heavy amounts of JavaScript on the client side, it becomes increasingly harder to justify using Jamstack compared to Client Side Rendering (CSR).</p>
<p>Both SSR and Jamstack have their own differences. What they do have in common is they don’t burden the client with rendering the entire page from scratch using JavaScript. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ef038a2-c189-4de0-8994-226b81c4e86b/1-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>When you optimize your site’s SEO, using SSR and Jamstack are recommended because, compared to CSR, both return HTML files that search bots can easily traverse. But search bots can still traverse and compile JavaScript files for CSR. However, rendering every JavaScript file in a CSR app can be time-consuming and make your site’s SEO less effective.</p>
<p>SSR and Jamstack are very popular, and more projects are moving to SSR frameworks like Next.js and Nuxt.js compared to their vanilla CSR counterparts, React and Vue, mainly because SSR frameworks provide better flexibility when it comes to SEO. Next.js has <a href="https://nextjs.org/learn/seo/introduction-to-seo">a whole section talking about SEO</a> optimizations on their framework. </p>
<p>An SSR application will generally have templating engines that inject the variables into an HTML when given to the client. For example, in Next.js, you can load a student list writing:</p>
<pre><code>export default function Home({ studentList }) {
  return (
    &lt;Layout home&gt;
        &lt;ul&gt;
          {studentList.map(({ id, name, age }) =&gt; (
            &lt;li key={id}&gt;
              {name}
              &lt;br /&gt;
              {age}
            &lt;/li&gt;
          ))}
        &lt;/ul&gt;
    &lt;/Layout&gt;
  );
}
</code></pre>

<p>Jamstack is popular with documentation sites that usually compile code to HTML files and host them on the CDN. Jamstack files usually use Markdown before being compiled to HTML, for example:</p>
<pre><code>---
author: Agustinus Theodorus
title: ‘Title’
description: Description
---
Hello World
</code></pre>



Active Memory Caching
<p>When you want to get data that you already had quickly, you need to do caching — caching stores data that a user recently retrieved. You can implement caching in two ways: using a super-fast key-value store like Redis to save data keys and values for you and using a simple browser cache to store your data locally.</p>
<p>Caching partially stores your data and is not used as permanent storage. Using the cache as permanent storage is an anti-pattern. Caching is highly recommended for production applications; new applications will start using caches as they gradually mature.</p>
<p>But when should you choose between a Redis cache (server cache) and a browser cache (local cache)? Both can be used simultaneously but will ultimately serve a different purpose.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15d39d15-4a9c-4306-9bf2-2fc9936cacf8/3-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Server caches help lower the latency between a Frontend and Backend; since key-value databases are faster than traditional relational SQL databases, it will significantly increase an API’s response time. However, a local cache helps improve app state management, enabling the app to persist state after a page refresh, and helps future visits.</p>
<p>In summary, if you want to increase the performance of your application, you can use server caches to speed up your APIs, but if you want to persist your app state, you should use the local storage cache. While local caches might not seem helpful at all, it does help reduce <a href="https://blog.bitsrc.io/9-best-practices-for-optimizing-frontend-loading-time-763211621061#f761">the number of API calls</a> to the backend by persisting state that doesn’t frequently change. However, local caches will be better when combined with live data.</p>
Data Event Sourcing
<p>You can make a real-time live connection between the Front-end and Backend via WebSockets. WebSockets are a two-way communication mechanism that relies on events. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22eb2f7f-ea5d-490b-a923-027c3e8184d2/6-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>In a common WebSocket architecture, the Front-end application will connect to a WebSocket API, an event bus, or a database. Most WebSocket architectures utilize it as a substitute to REST, especially in use cases like chat applications; polling your Backend service every few seconds becomes a very inefficient solution. WebSockets allow you to receive updates from the other end without needing to create a new request via the two-way connection.</p>
<p>WebSockets make a tiny, keep-alive connection compared to normal HTTP requests. Combining WebSockets with local browser cache creates a real-time application. You can update the app’s state based on the events received from the WebSocket. However, <a href="https://blog.bitsrc.io/event-sourcing-pattern-for-real-time-frontends-42359e6dd957">some caveats</a> regarding performance, scalability, and potential data conflicts exist.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62dcb109-f31c-4418-9fcd-4c442d0aed04/7-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>A pure WebSocket implementation still has a lot of faults. Using WebSockets instead of regular HTTP calls changes how your entire application behaves. Just a slight connection issue can affect your overall UX. For example, a WebSocket cannot have real-time performance when it needs to query the database every time there is a get request. There are bottlenecks in the backend that needs to be optimized for better real-time results to make WebSockets feasible and a more reasonable answer.</p>
<p>There needs to be an underlying architectural pattern that can support it. <a href="https://blog.bitsrc.io/event-sourcing-pattern-for-real-time-frontends-42359e6dd957">Event sourcing is a popular data pattern</a> you can use to create reliable real-time applications. While it doesn’t guarantee overall app performance, it will give your customers better UX by having a real-time UI.</p>
<p>Modern JavaScript has WebSocket providers that you can use. The <code>WebSocket</code> class opens a connection to a remote server and enables you to listen when the WebSocket opens a connection, closes a connection, returns an error, or returns an event:</p>
<pre><code>const ws = new WebSocket('ws://localhost');
ws.addEventListener('message', (event) =&gt; {
    console.log('Message from server ', event.data);
});
</code></pre>

<p>Do you want to react to server events? Add an <code>addEventListener</code> function and insert a callback that it will use:</p>
<pre><code>ws.send('Hello World');
</code></pre>

<p>Want to send a message? WebSockets got you. Use the <code>send</code> function to get a message out to the server. It’s as easy as printing “Hello World.” The examples are from <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket?retiredLocale=id">the MDN Docs</a>.</p>
Prefetching And Lazy Loading
<p>Prefetching and lazy loading has become common knowledge among frontend developers. Efficient use of a client’s resources and bandwidth can greatly improve your application’s performance.</p>
<h3>Prefetching</h3>
<p>Prefetching gives developers more granular control over the client’s <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ">idle bandwidth</a>, loading resources, and pages that the client might need next. When a website has a prefetch link, the browser will <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ">silently download</a> the content and store it within its cache. Prefetched links can have significantly faster loading times when the user clicks them.</p>
<pre><code>&lt;link rel="prefetch" href="https://example.com/example.html"&gt;
</code></pre>

<p>You specify prefetch URLs within the <code>link</code> HTML element, more specifically, the <code>rel</code> attribute. Prefetching has a few pros and cons:</p>
<ul>
<li><strong>Pros:</strong> Prefetching waits until the browser’s network is idle and is no longer in use and will stop when you trigger usage by clicking a link or triggering a lazy loading function.</li>
<li><strong>Pros:</strong> Prefetching caches data within the browser, making page transitions faster when redirecting to a link.</li>
<li><strong>Cons:</strong> It can be used to download trackers, compromising user privacy.</li>
</ul>
<h3>Lazy Loading</h3>
<p>Lazy loading is a common data-loading pattern that makes the client load à la carte results, not loading everything until the client needs it. Lazy loading will make the client fetch the latter parts of a website after they’ve scrolled into view.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/906d0c28-d8a9-49ad-aee5-d69ec21b44ee/8-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Lazy loading makes your site load faster by allowing the browser to concentrate on more important, on-screen resources. You won’t need to load all the images/text on a given site when you can’t see it. But lazy loading can only help you delay downloading resources and doesn’t make your resources smaller and more cost-efficient.</p>
<p>However, if you are looking to make a more cost-efficient solution that is similar to lazy loading, try looking for Resumability.</p>
Resumability
<p>Many developers have never heard of the Resumability concept before. Resumability <a href="https://github.com/BuilderIO/qwik/blob/main/packages/docs/src/routes/docs/concepts/resumable/index.mdx#introducing-resumability">renders JavaScript partially in the server</a>, the final state of the render will be serialized and sent to the client with the corresponding HTML payload. Then the client will finish the rendering, saving time and resources on the client side. Essentially, Resumability uses the server to do the heavy lifting and then gives the client a minimal amount of JavaScript to execute via serialization.</p>
<p>The main idea of Resumability is to serialize the application state from the server to the client. Instead of loading everything (HTML, JS) and hydrating them on the Front-end, Resumability serializes the JavaScript parsing in stages and sends them to the client in HTML.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/56b6144c-5e7a-43c5-8320-d1042b50a812/9-data-loading-patterns-improve-frontend-performance.png" /></p>
<p>Page startups will be instantaneous because the client doesn’t have to reload anything and can deserialize the state injected into the HTML. Resumability is a very foreign concept and is not common in many projects. It was coined by the founder of Qwik, Misko Hevery.</p>
<p><a href="https://github.com/BuilderIO/qwik">Qwik is a JavaScript framework</a> that relies on Resumability under the hood. Unlike other frameworks, Qwik is built from the ground up with Resumability in mind. Frameworks like <a href="https://github.com/BuilderIO/qwik/blob/main/packages/docs/src/routes/docs/think-qwik/index.mdx#why-not-fix-existing-frameworkstools">React and Vue can never utilize Resumability</a> without sacrificing backward compatibility. It is because the lazy loading component of Qwik uses asynchronous lazy loading compared to the synchronous nature of most JavaScript frameworks.</p>
<p>The <a href="https://github.com/BuilderIO/qwik">goal of Qwik</a> is to load as minimal JavaScript as possible. Lazy loading JavaScript is hard and, in some instances, impossible. The less you need it, the better. Resumability allows developers to have fine-grained lazy loading and decreased memory usage for mobile applications optimizing your site for the mobile web.</p>
<p>Using Qwik is similar in some ways to React, specifically, its syntax. Here is a <a href="https://qwik.builder.io/examples/introduction/hello-world/">code snippet example</a> of how Qwik works in code. The root of the application will be in the form of HTML:</p>
<pre><code>import { App } from './app';
export const Root = () =&gt; {
  return (
    &lt;html&gt;
      &lt;head&gt;
        &lt;title&gt;Hello Qwik&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;App /&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
};
</code></pre>

<p>The root has a dependency on <code>App</code>. It will be the lazy loaded Qwik component:</p>
<pre><code>import { component$ } from '@builder.io/qwik';
export const App = component$(() =&gt; {
  return &lt;p&gt;Hello Qwik&lt;/p&gt;;
});
</code></pre>

<p>Qwik and React have similarities at the component level. But it differentiates when you get into the server side of things.</p>
<pre><code>import { renderToString, RenderOptions } from '@builder.io/qwik/server';
import { Root } from './root';
export default function (opts: RenderOptions) {
  return renderToString(&lt;Root /&gt;, opts);
}
</code></pre>

<p>The code snippet above shows you how the server-side of Qwik serializes the root component using the <code>renderToString</code> method. The client will then only need to parse pure HTML and deserialize the JavaScript state without needing to reload them.</p>
Summary
<p>Application performance is essential for the client. The more resources you have to load on startup, the more time your app will need to bootstrap. Loading times expectations are getting lower and lower. The less time you need to load a site, the better.</p>
<p>But if you are working on large enterprise applications, how you can optimize your apps are not obvious. Data-loading patterns are one way you can optimize your applications’ speed. In this article, you reviewed five data-loading patterns that may be of use:</p>
<ol>
<li>Server Side Rendering (SSR) and Jamstack;</li>
<li>Active Memory Caching;</li>
<li>Data Event Sourcing;</li>
<li>Prefetching and Lazy Loading;</li>
<li>Resumability.</li>
</ol>
<p>All five of which are useful in their own circumstances.</p>
<p>SSR and Jamstack are generally good choices for applications that require less client-side state management. With the advent of modern JavaScript frameworks like React, more people have tried Client Side Rendering (CSR), and it seems that the community has come full circle back to SSR. SSR is the technique used by old MVC web frameworks to use template engines to generate HTML based on the data on the backend. Jamstack is an even older depiction of the original web, where everything was using just HTML.</p>
<p>Active memory caching helps users load data from APIs faster. Active memory caching solves the important issues around data loading by either caching the results on a remote cache server (Redis) or your local browser cache. Another data-loading pattern even uses it, prefetching.</p>
<p>Next, event sourcing is an architectural pattern that supplements the real-time event-based WebSocket APIs. Plain old WebSockets are not enough to become completely efficient because even though the WebSocket itself is real-time, the recurring API call to the database can cause a bottleneck. Event sourcing removes this problem by creating a separate database for retrieving data.</p>
<p>Prefetching and lazy loading are the easiest solutions to implement. The goal of prefetching is to load data silently during network idle times. Clients will save the prefetched link inside their browser caches, making it instantaneous on contact. </p>
<p>Lazy loading reduces the number of resources you need to load on the first click. You only need the resources that you see directly after the page loads. However, Resumability takes lazy loading to the extreme. Resumability is a method of lazy loading JavaScript components by rendering them in the server and then serializing the state to continue the render on the client via HTML.</p>
Where To Go From Here?
<p>Learning to optimize your Frontend applications is an ongoing process; you need to be proactive about what you implement daily. Data-loading patterns are only one of a few ways you can use to improve your application performance.</p>
<p>But it is best to consider the common pitfalls before making any drastic changes to how your application is structured and consumes and loads data.</p>
<p>If you’re interested in exploring the references, you can check out:</p>
<ul>
<li><a href="https://qwik.builder.io/docs/overview/">Qwik overview</a></li>
<li>“<a href="https://medium.com/@inverita/frontend-optimization-8-tips-to-improve-web-performance-29af4b00efe7">Frontend Optimization: 8 Tips to Improve Web Performance</a>”, inVerita</li>
<li>“<a href="https://blog.bitsrc.io/event-sourcing-pattern-for-real-time-frontends-42359e6dd957">Event Sourcing Pattern for Real-Time Frontends</a>”, Pasan Missaka</li>
<li>“<a href="https://medium.com/geekculture/12-front-end-performance-patterns-you-need-to-know-def550620464">12 Front End Performance Patterns You Need to Know</a>”, Chris Staudinger</li>
<li>“<a href="https://blog.speedvitals.com/web-performance-mistakes/#Over_Utilizing_Preloading">23 Web Performance Mistakes to Avoid in 2022</a>”, Kashish Kumawat</li>
</ul>
<p>I hope you found this article helpful. Please join the forum discussion below if you have any questions or comments.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Agustinus Theodorus)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4b98819-8676-4a35-b3a1-ab5428b36784/data-loading-patterns-boost-web-performance.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Meet SmashingConf New York 🇺🇸 (Oct 10&ndash;13)]]></title>
            <link>https://smashingmagazine.com/2022/09/meet-smashingconf-new-york/</link>
            <guid>https://smashingmagazine.com/2022/09/meet-smashingconf-new-york/</guid>
            <pubDate>Mon, 26 Sep 2022 10:30:00 GMT</pubDate>
            <description><![CDATA[<a href="https://smashingconf.com/ny-2022">SmashingConf NYC</a> is back! A friendly, inclusive conference for designers and front-end engineers who can’t wait to learn and be inspired. October 10–13, 2022. <a href="https://smashingconf.com/ny-2022/registration/?mc_cid=6e0174dcff&mc_eid=c2259fc0cc">Get your ticket!</a>]]></description>
            <content:encoded><![CDATA[<p><strong>We’re so happy to be back</strong> after all these years! Let’s brush up our front-end and design skills, together — at the wonderful <a href="https://smashingconf.com/ny-2022">SmashingConf New York</a>, with plenty of practical sessions and hands-on workshops all around <strong>design systems</strong>, UX, CSS, JavaScript, performance and <strong>accessibility</strong>. And it’s not just about the content: it’s inclusive environment, memorable experiences and fun activities  along the way as well. (<a href="https://photos.google.com/share/AF1QipM9OiDHOomVpPkZapmVTVNKOMoVJLDKHfyBe6Z8GU2lDFeGdwkUlYuiwChlMk3ftg?mc_cid=6e0174dcff&amp;mc_eid=c2259fc0cc&amp;key=VFFId3dtSDV2WHlrSHNkdl85OW8zRnBIS0dZdFBR">Check what SmashingConfs are like</a>).</p>

<p>Here’s the gist: <strong>single track</strong>, 2 practical days, 5 hands-on workshops, 12 experienced speakers, loads of mysteries and friendly networking! <a href="https://smashingconf.com/ny-2022/registration/">Get your ticket!</a></p>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8a6c3e7-7f0c-46e9-8607-2424c603ee0e/smashingconf-discussion.jpg" /></a>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34378719-8878-4b6f-a784-1aadc31b1b4f/smashingconf-audience.jpg" /></a>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/478e580f-223f-4a27-8ce4-1c3b322efb30/smashingconf-tobi.jpg" /></a>Tobi the DJ will be back in <a href="https://smashingconf.com/ny-2022/">New York</a> as well, of course! Wonderful photos by <a href="https://www.flickr.com/photos/marcthiele/albums/72157708275324135/">Marc Thiele</a>.


<div><div><ul><li><a href="https://smashingconf.com/ny-2022/registration/">
Online + In-Person</a></li><li><a href="https://smashingconf.com/ny-2022/registration/">
Online only</a></li></ul><div><h3>Online + In-Person</h3>$ 699.00
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf In-Person + Online</a><p><strong>Oct 10–13, 2022</strong>. New World Stages, NYC.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div><div><h3>Online only</h3><div>$ 200.00</div>
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf Online</a><p>With all <strong>video recordings,</strong> of course.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div></div></div>

<p>Ah, your <strong>boss needs a little bit convincing</strong>? We’ve got your back! Download the <a href="https://smashingconf.com/files/convinceyourboss-NY2022.pdf"><strong>Convince Your Boss PDF</strong></a> to tip the scales in your favor. And we’ve prepared a <a href="https://smashingconf.com/ny-2022/convince-your-boss">“letter to the boss” template</a> for you as well.</p>

Meet The Speakers
<p>Our speakers are not just knowledgeable and amongst the best in their fields. They are also <a href="https://smashingconf.com/ny-2022/speakers">excellent speakers and teachers</a>, smart and kind friends, and wonderfully nice and approachable.</p>
<p>Meet <strong>Jason Pamental</strong>, <strong>Cassie Evans</strong>, Harrison Wheeler, <strong>Una Kravets</strong>, Laura Kalbag, Steve Schoger, Eva Fereirra, Guillaume Kurkdjian and of course the <em>Mystery Speaker</em>. Topics range from SVG animation to design systems and from Figma to web performance, and beyond.</p>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/795031fe-cf85-4b58-8119-f322f923e36c/new-york-speakers-800-opt.png" /></a>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/016965b1-6c4b-4bdd-b44d-7a716e299f64/smashingconf-speaker.jpg" /></a>

Practical Workshops
<p>If you attend a conference, why not join a <a href="https://smashingconf.com/ny-2022/workshops">practical workshop</a> as well? The day before and the day after the conference, we run a  full-day training focusing around tangible, applicable insights that you can use right after the workshop. We’ll be diving into <strong>SVG animation</strong>, accessibility testing and <strong>complex interface design patterns</strong>. Plenty of topics to choose from, and <a href="https://smashingconf.com/ny-2022/registration#bundles">bundle discounts are available</a>, too!</p>

<a href="https://smashingconf.com/ny-2022/workshops"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ab760f2-2c09-4e7f-be53-f18953a763a1/smashingconf-workshops.jpg" /></a>All <a href="https://smashingconf.com/ny-2022/workshops">workshops</a> are hands-on and practical, so you can apply your new skills immediately.

Side Events
<p>It’s not all business at SmashingConf, of course! We have many friendly side events before, during, and after the conference. The evening before the conference kicks off, join us for some <strong>drinks, lightning talks</strong>, and meet some new friends already.</p>

<p>Want to start the conference fit and fresh? Every day, we’ll have a <strong>morning run in Central Park</strong>. And for all the photo enthusiasts, we are closing the conference with a lovely Photo Walk around the city. Our little side events are all <strong>friendly, fun, and a great way to meet people</strong> and hang out!</p>

Team Tickets? 👫👭
<p><strong>Bring the entire team to the SmashingConf</strong>, and save some of your training budget along the way as well. With our <strong><a href="https://smashingconf.com/ny-2022/registration">friendly bundle tickets</a></strong> and <strong>team discounts</strong>, we’ve got your back! If you want to come with a large team, or are interested in something special, <a href="mailto:hello@smashingconf.com">please send us a short email</a> and we’ll get back to you right away!</p>

SmashingConf NYC Online
<p>If you can’t travel to New York, that’s no problem either. We run a <a href="https://smashingconf.com/ny-2022/online">SmashingConf Live Stream Online</a> for the main stage talks. Plus, you get some  behind-the-scenes footage and backstage interviews with speakers, organizers, and friends. 🎉🥳</p>

<a href="https://smashingconf.com/ny-2022"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2c4b696b-2606-4538-975a-c585e0ea0045/smashingconf-online-800.png" /></a>

<div><div><ul><li><a href="https://smashingconf.com/ny-2022/registration/">
Online + In-Person</a></li><li><a href="https://smashingconf.com/ny-2022/registration/">
Online only</a></li></ul><div><h3>Online + In-Person</h3>$ 699.00
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf In-Person + Online</a><p><strong>Oct 10–13, 2022</strong>. New World Stages, NYC.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div><div><h3>Online only</h3><div>$ 200.00</div>
<a href="https://smashingconf.com/ny-2022/registration/">
SmashingConf Online</a><p>With all <strong>video recordings,</strong> of course.<br />Save up to 25% with <a href="/membership/">Smashing Membership</a>.</p></div></div></div>

COVID-19
<p>Let’s stay healthy and safe, everyone! You need to be <strong>fully vaccinated</strong> to access the conference venue, workshops, and parties. Please check our <a href="https://smashingconf.com/covid-19">COVID-19 guidelines</a>, <a href="https://smashingconf.com/accessibility">accessibility statement</a>, <a href="https://smashingconf.com/codeofconduct">Code of Conduct</a>.</p>

We Can’t Wait To See You!
<p>As we are getting ready for the event, we can’t be more excited to see you again after all these years. Let’s boost our skills in-person, together, and creating <strong>memorable experiences</strong> that will last for a while. ❤️</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0218f4-6266-412a-ace8-ea05b1ad688d/smashingconf-ny-banner.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Lessons Learned As A Designer-Founder]]></title>
            <link>https://smashingmagazine.com/2022/09/lessons-learned-designer-founder/</link>
            <guid>https://smashingmagazine.com/2022/09/lessons-learned-designer-founder/</guid>
            <pubDate>Fri, 23 Sep 2022 11:30:00 GMT</pubDate>
            <description><![CDATA[In this article, Dave Feldman shares his lessons learned and the experiments has done as a multidisciplinary designer-founder-CEO at an early-stage startup. Let’s take a look at what it is that makes a great design process for teams of any size.]]></description>
            <content:encoded><![CDATA[<p>In the quarter-century I’ve been a product designer, design has matured. We’ve developed tools and practices that allow us to work faster, better, and more in concert with engineers and product managers. Things are a lot less chaotic than they used to be.</p>
<p>But with that change comes the <em>process</em>. I’ve written elsewhere about the <a href="https://uxdesign.cc/five-rants-from-a-cranky-designer-4c572f27aef0">dangers of too much process</a>; in the years I spent building the design practice at <a href="https://heap.io">Heap</a>, I tested and evolved my ideas around <a href="https://uxdesign.cc/the-pragmatic-design-manifesto-efaa260e8c4a">Pragmatic Design</a> and its potential to reduce process. I encouraged lower-fidelity artifacts; <a href="https://uxdesign.cc/save-time-and-get-aligned-with-a-design-brief-ec95f2f1762f">design briefs</a> instead of endless mockups; <a href="https://dfeldman.medium.com/what-is-product-quality-a-practical-definition-990d3ca6827">product-quality reviews</a> instead of design reviews; and I pushed for early, ongoing collaboration between Design, Product, and Engineering. The results were encouraging: we got more done with a smaller, scrappier team.</p>
<p>In 2020 I left Heap to found <a href="https://miter.co">Miter</a>, a startup whose mission is deceptively simple: make meetings better. And if Heap was a testing ground for pragmatic design, Miter’s been a crucible for <em>extreme</em> pragmatism: nothing is scrappier than being the only designer, the only PM, and the only engineer. What process is worth keeping? What can be optimized and what can’t? And what needs to change <em>again</em> as we build a team?</p>
<p>That’s useful context if you’re a designer-founder yourself. Still, even if you’re not, it’s valuable to think about why each part of the design process exists and how (and whether) we can optimize it in various ways to be more efficient and better collaborators. So whether you’re designing on a team of ten or ten thousand, this post is for you.</p>
Multiple Hats
<p>Founder or not, designers are often multidisciplinary. Many of us do some PM’ing or make a little prototype if we’re technical. If you’re like me, you <em>enjoy</em> that breadth and chafe a bit when forced to wear just one hat.</p>
<p>What makes being multidisciplinary an advantage? To begin with, it represents a broader design toolkit. With a little engineering knowledge, you can build working prototypes or even design directly in the codebase if that’s the most efficient way to experiment. And small, straightforward projects can sometimes go straight from brain to product:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1838314b-5d31-4ba6-b157-87e734b90e5d/4-lessons-from-designer-founder.png" /></p>
<p>As a team grows, understanding diverse perspectives can improve collaboration and results. We can’t predict all the twists and turns our designs will take as they’re built, no matter how diligent we are at thinking through edge cases. I’ve always advocated for design and engineering to proceed in lockstep <em>throughout</em> the process; being a lone designer-engineer has reminded me just how powerful that is. My designs can change radically long after they’re “done.” That’s easy to deal with when it’s just me but feasible to manage as a team, too. </p>
<p>To put it simply, you can substitute a little conversation for a lot of process. And that’s easier when your designers speak a little Engineer, your engineers speak a little Designer, and everybody speaks a little Product. In a quick conversation, you can make trade-offs, generate creative solutions, and reprioritize the backlog as your understanding of ROI evolves.</p>
<p>For example, <a href="https://miter.co">Miter</a> was built to work whether you’re signed in or not: if you have the URL for a meeting, you can join and participate without an account. That’s a strength for us, and when we set out to build our new <a href="https://miter.co/#dynamics">Dynamics</a> facilitation feature, we figured that would remain true. But during one sprint planning, Nico — our first engineer — raised some questions about how we’d distinguish among anonymous users given we’re unable to identify them; doing so is central to Dynamics in a way it’s not elsewhere. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc7ffa32-cd4a-4888-a3a2-6f6c2814241d/2-lessons-from-designer-founder.png" /></p>
<p>It was doable, but none of the options was easy, so I made the call (Product hat) to make the feature signed-in-only. Nico disabled the button for signed-out users; I recognized we needed to give users a bit more feedback (Design hat), decided that was worth doing before launch (Product hat), and spent a couple of hours implementing it (Engineering hat).</p>
<h3>Wear Your Hats Carefully</h3>
<p>Designing in code can be efficient, but be careful: it can hurt the design, too. You know all those arguments designers have with engineers? There’s a reason for them. When wearing your engineer hat, you’re looking to simplify: reducing code paths, avoiding async situations that could yield race conditions, and so on. But sometimes, those are the very things that make a design great. As I implement, I find myself pushing back on my designer self, and (because the engineer self is doing the work) the designer self tends to lose. I have to step back periodically, put the design hat on, and consider.</p>
<p>That separation is easy to maintain if you do all your design in design tools, but I don’t recommend going that far. Sometimes things are straightforward enough (as in the Add Task example above) that it’s just not worth the time to design separately. The key is to recognize when you need to be <em>thinking</em> in design mode vs. engineer mode.</p>
<h3>Broadcast Your Hats</h3>
<p>It’s valuable not only to understand which hat you’re wearing but also to communicate it to others.</p>
<p>One afternoon my co-founder wanted help with a marketing email. I started with the usual designer questions: what’s the goal of this project? What does success look like? All good questions, but he didn’t realize which hat I was wearing. Instead of the curious designer understanding project requirements, he heard the skeptical CEO challenging them. After a few tense moments, we figured it out, and I’ve been more careful to clarify my hat up front.</p>
<p>This matters most when you’re in a leadership role since power dynamics are at play. The CEO of a startup I advised once took this a step further with actual hats: on his desk, he had two baseball caps, one labeled “CEO” and one labeled “Product.”</p>
<h3>Know Your Environment</h3>
<p>A multidisciplinary approach isn’t <em>always</em> a path to success. Some teams value specialization and want people to stay in their lanes, especially at larger companies. I once received feedback that I needed to “act more like a designer.” It was hard to hear at the moment, but ultimately I concluded it was more about my fit with that team than anything I was doing wrong.</p>
<h3>Takeaway</h3>
<p>On any team, it’s valuable for everyone to understand each other’s specialties. Actually <em>wearing</em> all those hats may be less valuable at larger companies, but the fastest way to understand is doing. I’d encourage any designer to learn to code and to think holistically about roadmaps and launches as a PM would. How you deploy that knowledge will depend on your team’s dynamic.</p>
The Bare Minimum Design Process
<p>As designers, so much of what we do is <em>communicating</em> and <em>convincing</em>. We run user tests to justify our decisions. We create multiple options because it’s expected. We write up specs, make flow diagrams, or mock every state, so engineers get the details right. We present in critique to get feedback, but also because our peers want a venue to question our decisions.</p>
<p>But for much of Miter’s existence, none of that has been necessary — the only person I really need to communicate with or convince has been myself. So what’s left? What pieces of the process are still valuable?</p>
<h3>Rapid Sketching</h3>
<p>In general, the design goes from broad and low-fidelity to detailed and high-fidelity: bullet points to sketches to wireframes to mockups to prototypes to implementation. Though, of course, we rarely do <em>all</em> of that.</p>
<p>In the early stages, I’m a big fan of paper sketches. It’s been years since I accepted their messiness and realized how much faster and more powerful they can be than wireframes (which I rarely use anymore). I even advocate for their use in executive reviews.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c9fcdb98-2bdf-4b81-abe4-ff67e4dd23c6/5-lessons-from-designer-founder.png" /></p>
<p>In some ways, sketches are <em>more</em> powerful when you are your only audience because they don’t even have to be legible. What’s that weird blob in the corner? Doesn’t matter, as long as <em>you</em> know. You can tear through permutations quickly, which means I sketch regularly but briefly before moving on to higher-fidelity methods.</p>
<h4>Design Briefs</h4>
<p>I conceived of the <a href="https://heap.io/blog/save-time-and-get-aligned-with-a-design-brief">Design Brief</a> when I was at Heap as a substitute both for longer design docs and unnecessarily-exhaustive mockups. We used it (along with sketches) as a fast, early artifact to ground cross-functional discussions — from scoping to prioritization to leadership reviews — before spending significant time on the details.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b7dc6814-1887-41e9-9b1c-9a1cdc634c31/1-lessons-from-designer-founder.png" /></p>
<p>I still use design briefs on larger projects. They don’t take long, and the act of writing them helps me think — taking high-level, hand-wavy ideas to a more practical level. They serve as a record of what I was thinking and why to help clarify for my future self. And we do sometimes conduct design reviews.</p>
<p>I also write <a href="https://heap.io/blog/pms-clarify-the-problem-not-the-solution-heres-how">product briefs</a> and encourage engineers to write engineering briefs. Both have worked well. The key is not to go overboard, as they’re called “briefs” for a reason. And while it’s useful to have templates for them, I treat those as guidelines rather than requirements.</p>
<h3>Hero Mockups</h3>
<p>I find mockups to be an indispensable part of the design process. For significant changes and new functionality, it’s much faster to mock it up than to build even a semi-functional prototype. But I only do “hero” mockups — key states of whatever I’m designing rather than a comprehensive set.</p>
<p>As our team grows, those will probably expand, but — just as we did at Heap — I’ll continue to rely on the design brief, real-time conversations, and design-minded engineers rather than go crazy with mocks.</p>
<h3>Design System</h3>
<p>Miter does have a design system of sorts. I’ve built an extensive set of reusable Figma components, as well as global colors and text styles that I try to use consistently across mocks.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34f2a11a-7b1f-4fd8-984d-f996f9145ff6/3-lessons-from-designer-founder.png" /></p>
<p>Why bother, with nobody else on the team? Because change is easier, safer, and — most importantly — faster when it’s centralized. If I want to make all our buttons square tomorrow, I can do it once and have it propagate everywhere.</p>
<p>Not everything deserves a component. Sometimes it’s just too early, too prone to change. So when’s the right time to turn one-off work into components? I try to do it when I recognize that a component I built for Project N is needed in Project N+1. (This would be much easier if Figma behaved as advertised, and one could cut-and-paste components from individual files to your library. Hint hint.)</p>
<p>This sort of centralization is even more important in code, and when our mocks and codebase disagree, it’s often the code that wins. To be clear: I don’t see that as a problem. Our canonical style guide is the <code>Global.less</code> file with all our CSS variables. We have one and <em>only</em> one button component, and we use it everywhere. When I write and review code, I’m ruthless about centralization because it’s what will ensure things remain consistent and easy to change. </p>
<p>Five years from now, I don’t want to be a company where simple design improvements get killed because they’d have to be implemented five times over.</p>
<h3>Critiques &amp; Reviews</h3>
<p>I thrive on feedback; I can’t do my job without it. We don’t have designers on the team, but we <em>do</em> have design-minded engineers and a COO who can critique our UX from both a product and a go-to-market perspective. I do a lot of “What do you think about this?” on Slack, and occasionally, I schedule design reviews.</p>
<p>That said, I miss having other designers around when we brainstorm or critique. I look forward to the point when I can justify hiring a designer to fill out that conversation. In the meantime, there’s no silver bullet. I love the idea of gathering a group of solo designers to review each other’s work across companies, but it’s not something I’ve actually found the time to do. What I <em>do</em> do is take the time to explain my rationale — and design principles in general — to the rest of the team, so over time, they’ll be critiquing from a more and more informed perspective.</p>
<h3>Research: Focus On The 20%</h3>
<p>Working elsewhere, I’ve been frustrated by the state of user research. It’s underfunded. It’s used to settle cross-functional debates rather than to answer real questions about users. Foundational work takes a back seat to tactical studies. Usability tests are misinterpreted as feedback, so we end up doing what users tell us rather than determining what they need. And too often, research findings are dropped on the floor due to timelines.</p>
<p>At Miter, we’re still too small to hire a dedicated researcher, so I’m responsible for whatever research we do. And because my time is so split, that research really, <em>really</em> needs to count. In making those trade-offs, I rely on a simple truth: designers know how to design. That may seem self-evident, but I think we all forget it sometimes and assume anything that hasn’t been tested has an equal probability of being a disaster. </p>
<p>80% of what a good designer does should be usable. Just as importantly, a good designer has a sense of what lies in that other 20%. I like to think in terms of “UX Risk”: what are the bits of my design that need testing? What’s bold, unique, unknown, ambiguous?</p>
<p>Of <em>course</em> I make mistakes in the other 80%, and it’s essential to watch for unexpected usability issues in the data. For instance, a couple of months ago, we noticed several users had interacted with Miter’s pre-meeting screen but never hit the Start button to start the meeting. We came up with a hypothesis: people thought our topic list was a note-taking UI. Digging into user sessions and looking at average topic length confirmed it. Thankfully, it was an easy fix: make the topics more topic-like and less note-like. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a08ec963-0c8f-485f-82ca-d15f77afbb89/topics-before-after.png" /></p>
<p>I suspect we’ve done more user research than a typical early-stage startup, and other founders might question that. Still, as we head into our next round of fundraising, I can tell you it’s given me the ability to speak about our target audience and their needs with far more confidence.</p>
<h3>Takeaway</h3>
<p>What strikes me about my “bare minimum” design process is, in fact, how <em>many</em> of the traditional artifacts I still use. There’s very little that I would do as part of a larger team that I <em>don’t</em> do on my own. The tools I use to explore and iterate are the same ones I’d use to communicate and convince. The biggest difference is in comprehensiveness. So, what can that tell us?</p>
<ol>
<li><strong>We have a broad array of tools at our disposal. Use them!</strong><br />But, use the right tool for the job. Not every project needs every type of artifact. (This is true whether your team uses Agile, “waterfall,” or some other approach.)</li>
<li><strong>Low fidelity can be better than no fidelity.</strong><br />I’ve always advocated for low fidelity. It’s faster, easier, and in cross-functional situations, can help focus stakeholders on the forest rather than the trees. But skipping over this phase altogether, while tempting when you’re on your own, can be dangerous. A few minutes spent sketching or writing bullet points can clarify and solidify your design at a stage where that’s extremely low cost.</li>
<li><strong>Know your reasons.</strong><br />Are you mocking this up because you need it or because your stakeholders do? Neither is necessarily bad, but you might want to approach the work differently depending. Or put another way: a mockup whose target audience is <em>you</em> has very different requirements than one whose target is a slide in an All-Hands meeting.</li>
</ol>
Pitfalls Of The Designer-Founder
<p>The designer’s curse is we <em>see pixels</em>: if the alignment is off, if the border is fuzzy, if the context is lost without an animated transition, and so on. We <em>see</em> it when nobody else does, and it <em>bothers</em> us.</p>
<p>The curse of the early-stage founder, meanwhile, is a lack of resources. My team has greater agility than it will ever have again, but we can’t do more than one or two things at a time.</p>
<p>Those curses come into conflict. On the one hand, nobody can stop you from polishing your product into oblivion. And our industry is littered with the corpses of “design-led” companies that built beautiful things nobody wanted.</p>
<p>On the other hand, a design-led company’s superpower <em>is</em> great design. Unlike your competitors, you can present a polished, elegant, usable face to the world, and that’s worth doing.</p>
<p>So it’s a balance. Wear the design hat, revel in it, and sweat the details. And then swap it for the product hat and keep that detail work under control. I’ve hired engineers who are design-centric enough that I’ve had to stop <em>them</em> from polishing things further, and honestly, that’s probably a good dynamic. </p>
<p>As the leader, if you nitpick the details, then the details will get fixed. And that’s marvelous, but it also carries a cost.</p>
<p><em>What’s your experience been optimizing the design process? Have you found success, or challenges, as a multidisciplinary designer? <a href="https://twitter.com/dfeldman">I’d love to hear about it!</a> And of course, if you wish your meeting could be better, check out <a href="https://miter.co">Miter</a> and let me know what you think!</em></p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Dave Feldman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/273285f3-018f-4ce0-9c9c-06310070caaf/lessons-learned-designer-founder.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Things I Wish I Had Known About Angular When I Started]]></title>
            <link>https://smashingmagazine.com/2022/09/angular-guide/</link>
            <guid>https://smashingmagazine.com/2022/09/angular-guide/</guid>
            <pubDate>Thu, 22 Sep 2022 13:00:00 GMT</pubDate>
            <description><![CDATA[If you’re considering learning Angular, this article sums up what William Juan wished he knew when he started, including the mistakes made and lessons learned the hard way.]]></description>
            <content:encoded><![CDATA[<p>I’ve been using Angular since version 2, and it has come a long way since those days to what it is right now. I’ve worked on various Angular projects over the years, yet I keep finding new things. It goes to say how massive the framework is. Here are some things I wish I had known about Angular when I started so you don’t have to learn it the hard way.</p>
Modularize Your Application
<p>Angular has <a href="https://angular.io/guide/styleguide">detailed documentation</a> outlining the recommended approach to structure your application. Angular also provides a <a href="https://angular.io/cli">CLI</a> to help scaffold your application that adheres to their recommendations.</p>
<p>I’ve had my fair share of mistakes when it comes to structuring the application. As you follow tutorials, you’re guided through where you should put your files and which modules the components or services belong to. However, when you venture beyond the tutorial, you sometimes end up with a structure that doesn’t scale well. This could lead to issues down the road.</p>
<p>Below are some mistakes I’ve made that came back and bit me.</p>
<h3>Split Your Components Into Modules</h3>
<p>The release of Standalone Components in Angular 14 makes <code>NgModules</code> no longer a requirement when creating components. You can choose not to use modules for your components, directives, and pipes. However, you could still follow the folder structure outlined below, omitting the module files.</p>
<p>Initially, I put all the components into the default module you get when creating a new Angular app. As the application grew, I ended up with a lot of components in the same module. They were separate components and didn’t have any need to be in the same module.</p>
<p>Split your components into separate modules, so you can import and load only the required modules. The common approach is to divide your application into the following modules:</p>
<ul>
<li><strong>Core module</strong> for singleton services and components that are used once at the app level (example: navigation bar and footer).</li>
<li><strong><a href="https://angular.io/guide/feature-modules">Feature modules</a></strong> for each feature — code related to the specific functionality of your application. For example, a simple e-commerce application could have a feature module for products, carts, and orders.</li>
<li><strong>Shared module</strong> for the module that is referenced across different parts of the application. These can include components, directives, and pipes.</li>
</ul>
<p>Dividing the application into separate modules helps partition your application into smaller, more focused areas. It creates clear boundaries between the different types of modules and each feature module. This separation helps maintain and scale the application as different teams can work on separate parts with a lower risk of breaking another part of the application.</p>
<h3>Lazy Load Your Routes</h3>
<p>This is a result of my first mistake of putting everything in a single module. Because all the components were in the same module, I couldn’t <a href="https://angular.io/guide/lazy-loading-ngmodules">lazy load the modules</a>. All the modules were imported at the root level, eventually affecting the initial load time. After separating your components into modules, lazy load your routes, so the modules only get loaded when you navigate to the route that requires them.</p>
<h3>Single Responsibility</h3>
<p>This applies to all types of files in an Angular app. I’ve let my service and component files grow beyond their scope, which made them difficult to work with. The general rule is to keep each component/service/pipe/directive performing a specific set of tasks. If a component is trying to do more than what it was initially made for, it might be worth refactoring and splitting it into several smaller components. This will make testing and maintenance a lot easier.</p>
Use The Angular CLI
<p>You’ve probably used the <code>ng serve</code> command either directly in your command line or through a script in your <code>package.json</code> file. This is one of Angular CLI’s commands. However, the CLI comes with more handy commands that can speed up your development especially when it comes to initializing and scaffolding.</p>
<p>Initially, I did most of these manually as I didn’t understand how to use the CLI except for starting and stopping the local server. I would create component files manually, add the boilerplate code, and add them to the right modules. This was okay for smaller projects but became a tedious task as the project grew. That’s when I learned how to use the CLI and use it to automate most of the manual work I do. For example, instead of creating all the boilerplate for a card component, the following command will create them for you:</p>
<pre><code>ng g c card
</code></pre>

<p>You can use the CLI by installing it globally via npm using the command below:</p>
<pre><code>npm install -g @angular/cli
</code></pre>

<p>To view the available commands, execute the code below:</p>
<pre><code>ng help
</code></pre>

<p>Most projects have custom configurations that are project-specific, and you have to do some modifications to the code generated by the CLI. Angular provides an elegant solution for these scenarios, such as <a href="https://angular.io/guide/schematics"><strong>schematics</strong></a>. A schematic is a template-based code generator — a set of instructions to generate or modify code for your project. Similar to Angular CLI, your custom schematics are packaged and can be installed via <code>npm</code> in whichever project needs it.</p>
Path Aliases And Barrel Exports
<p>As I was learning Angular, I tried to keep my project neat by putting all the services into a <code>services</code> folder, models in a <code>models</code> folder, and so on. However, after some time, I end up with a growing list of <code>import</code> statements like this:</p>
<pre><code>import { UserService } from '../../services/user.service';
import { RolesService } from '../../services/roles.service';
</code></pre>

<p><a href="https://fireship.io/snippets/improving-long-relative-paths-imports/">Typescript path alias</a> can help simplify your import statements. To setup path aliases, open your <code>tsconfig.json</code> and add the desired path name and its actual path:</p>
<pre><code>{
 "compilerOptions": {
 "paths": {
 "@services/*": ["src/app/services/*"],
 }
 }
}
</code></pre>

<p>Now the import statements above can be re-written as:</p>
<pre><code>import { UserService } from '@services/user.service';
import { RolesService } from '@services/roles.service';
</code></pre>

<p>An added benefit of using path aliases is that it allows you to move your files around without having to update your <code>imports</code>. You’d have to update them if you were using relative paths.</p>
<p>This can be further simplified by using <a href="https://github.com/basarat/typescript-book/blob/master/docs/tips/barrel.md">barrel <code>exports</code></a>. Barrels are a handy way to export multiple files from a single folder (think of it as a proxy for your files). Add an <code>index.ts</code> in the <code>services</code> folder with the following contents:</p>
<pre><code>export * from './user.service';
export * from './roles.service';
</code></pre>

<p>Now, update the <code>tsconfig.json</code> to point to the <code>index.ts</code> file instead of the asterisk (<code>*</code>). </p>
<pre><code>{
 "compilerOptions": {
 "paths": {
 "@services": ["src/app/services/index.ts"],
 }
 }
}
</code></pre>

<p>The import statements can now be further simplified into:</p>
<pre><code>import { UserService, RolesService } from '@services';
</code></pre>

Embrace Typescript’s Features
<p>I started by learning JavaScript, so I wasn’t used to the type system and the other features that TypeScript offers. My exposure to TypeScript was through Angular, and it was overwhelming to learn both a new language (although it’s a superset of JavaScript, some differences trip me up every time) and a new framework. I often find TypeScript slowing me down instead of helping me with the development. I avoided using TypeScript features and overused the <code>any</code> type in my project.</p>
<p>However, as I got more acquainted with the framework, I began to understand the benefits of TypeScript when used correctly. TypeScript offers a lot of useful features that improve the overall developer experience and make the code you write cleaner. One of the benefits of using TypeScript that I’ve grown accustomed to is the IntelliSense or autocomplete it provides in your IDE. Their <a href="https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html#typescript-a-static-type-checker">type safety and static type checking</a> have also helped catch potential bugs at compile time that could have snuck in.</p>
<p>The nice thing about TypeScript is its <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">flexible configuration</a>. You can toggle their settings easily via their <code>tsconfig.json</code> as per your project’s needs. You can change these settings again if you decide on a different setting. This allows you to set the rules as loose or strict as you’d like.</p>
Improve Performance By Using <code>trackBy</code>
<p>Performance is crucial for applications, and Angular provides various ways to optimize your applications. This is often a problem that you won’t run into at the beginning as you are probably working with small data sets and a limited number of components. However, as your application grows and the number of components being rendered grows and becomes increasingly complex, you’ll start to notice some performance degradation. These performance degradations are usually in the form of slowness in the app: slow to respond, load, or render and stuttering in the UI.</p>
<p>Identifying the source of these problems is an adventure on its own. I’ve found that most of the performance issues I’ve run into in the applications are UI related (this doesn’t mean that other parts of the application don’t affect performance). This is especially prominent when rendering components in a loop and updating an already rendered component. This usually causes a flash in the component when the components are updated.</p>
<p>Under the hood, when a change occurs in these types of components, Angular needs to remove all the DOM elements associated with the data and re-create them with the updated data. That is a lot of DOM manipulations that are expensive.</p>
<p>A solution I’ve found to fix this issue is to use the <a href="https://angular.io/api/core/TrackByFunction"><code>trackBy</code></a> function whenever you’re rendering components using the <code>ngFor</code> directive (especially when you’re frequently updating the rendered components). </p>
<p>The <code>ngFor</code> directive needs to uniquely identify items in the iterable to correctly perform DOM updates when items in the iterable are reordered, new items are added, or existing items are removed. For these scenarios, it is desirable only to update the elements affected by the change to make the updates more efficient. The <code>trackBy</code> function lets you pass in a unique identifier to identify each component generated in the loop, allowing Angular to update only the elements affected by the change.</p>
<p>Let’s look at an example of a regular <code>ngFor</code> that creates a new <code>div</code> for each entry in the <code>users</code> array.</p>
<pre><code>@Component({
 selector: 'my-app',
 template: `
 &lt;div *ngFor="let user of users"&gt;
 {{ user.name }}
 &lt;/div&gt;
 `,
})

export class App {
 users = [
 {id: 1, name: 'Will'},
 {id: 2, name: 'Mike'},
 {id: 3, name: 'John'},
 ]
}
</code></pre>

<p>Keeping most of the code the same, we can help Angular keep track of the items in the template by adding the <code>trackBy</code> function and assigning it to a function that returns the unique identifier for each entry in the array (in our case, the user’s <code>id</code>).</p>
<pre><code>@Component({
 selector: 'my-app',
 template: `
 &lt;div *ngFor="let user of users; trackBy: trackByFn"&gt;
 {{ user.name }}
 &lt;/div&gt;
 `,
})

export class App {
 users = [
 {id: 1, name: 'Will'},
 {id: 2, name: 'Mike'},
 {id: 3, name: 'John'},
 ]
 trackByFn(index, item) {
 return item.id;
 }
}
</code></pre>

Use Pipes For Data Transformations
<p>Data transformations are inevitable as you render data in your templates. My initial approach to this was to:</p>
<ul>
<li>Bind the template to a function that accepts the data as the input:</li>
</ul>
<pre><code>interface User {
 firstName: string,
 middleName: string,
 lastName: string
}
@Component({
 selector: 'my-app',
 template: `
 &lt;h1&gt;{{ formatDisplayName(user) }}&lt;/h1&gt;
 `,
})

export class App {
 user: User = {
 firstName: 'Nick',
 middleName: 'Piberius',
 lastName: 'Wilde'
 }
 formatDisplayName(user: User): string {
 return `${user.firstName} ${user.middleName.substring(0,1)}. ${user.lastName}`; 
 }
}
</code></pre>

<ul>
<li>Create a new variable, assign the formatted data to the variable, and bind the new variable in the template:</li>
</ul>
<pre><code>interface User {
 firstName: string,
 middleName: string,
 lastName: string
}
@Component({
 selector: 'my-app',
 template: `
 &lt;h1&gt;{{ displayName }}&lt;/h1&gt;
 `,
})

export class App {
 user: User = {
 firstName: 'Nick',
 middleName: 'Piberius',
 lastName: 'Wilde'
 }
 displayName = `${this.user.firstName} ${this.user.middleName.substring(0,1)}. ${this.user.lastName}`; 
}
</code></pre>

<p>Neither approach was clean nor performant and wasn’t what Angular recommends to perform data transformations. For these scenarios, angular recommends using <a href="https://angular.io/guide/pipes"><strong>pipes</strong></a>. Pipes are functions specifically designed to be used in templates.</p>
<p>Angular provides built-in pipes for common data transformations such as internationalization, date, currency, decimals, percentage, and upper and lower case strings. In addition, Angular also lets you create custom pipes that can be reused throughout your application.</p>
<p>The data transformation above can be re-written using a pipe as follows:</p>
<pre><code>@Pipe({name: 'displayName'})
export class DisplayNamePipe implements PipeTransform {
 transform(user: User): string {
 return `${user.firstName} ${user.middleName.substring(0,1)}. ${user.lastName}`; 
 }
}
</code></pre>

<p>The pipe can then be used in the template by using the pipe (<code>|</code>) character followed by the pipe name.</p>
<pre><code>@Component({
 selector: 'my-app',
 template: `
 &lt;h1&gt;{{ user | displayName }}&lt;/h1&gt;
 `,
})

export class App {
 user: User = {
 firstName: 'Nick',
 middleName: 'Piberius',
 lastName: 'Wilde'
 }
}
</code></pre>



Improve Performance With <code>OnPush</code> Change Detection
<p>Angular applications are made up of a tree of components that rely on their change detectors to keep the view and their corresponding models in sync. When Angular detects a change in the model, it immediately updates the view by walking down the tree of change detectors to determine if any of them have changed. If the change detector detects the change, it will re-render the component and update the DOM with the latest changes.</p>
<p>There are two <a href="https://angular.io/guide/change-detection">change detection</a> strategies provided by Angular:</p>
<ul>
<li><strong>Default</strong><br />The change detection cycle runs on every event that occurs inside the component.</li>
<li><strong>OnPush</strong><br />The change detection cycle only runs when a component’s event handler is triggered, an async pipe is used in the template, a new value is emitted, and when any of the component’s input reference changes.</li>
</ul>
<p>In addition to the reduced number of change detection cycles and its performance boost, the restrictions imposed by using the <code>OnPush</code> change detection strategy also make you architect your app better by pushing you to create more modular components that utilize one of the three recommended ways mentioned above to update the DOM. </p>
RxJS Is Your Friend
<p><a href="https://rxjs.dev/">RxJS</a> is a JavaScript library that uses observables for <a href="https://www.techtarget.com/searchapparchitecture/definition/reactive-programming">reactive programming</a>. While RxJS isn’t exclusively used in Angular, it plays a big role in the Angular ecosystem. Angular’s core features, such as <code>Routing</code>, <code>HttpClient</code>, and <code>FormControl</code>, leverage observables by default. </p>
<p>RxJS is a part of Angular that has been largely unexplored for me as I was learning the framework. I’ve avoided using it unless I had to. It was a new concept, and I found it quite hard to wrap my head around it. I’ve worked with JavaScript Promises, but observables and streams are a new paradigm for me.</p>
<p>After working for a while with Angular, I eventually took the time to learn and understand RxJS and try to use them in my projects. It wasn’t long before I realized the numerous benefits of RxJS that I’ve been missing out on all this time. RxJS, with its large collection of chainable operators, excels in handling async tasks.</p>
<p>I’ve been using RxJS with Angular for a few years now, and my experience has been nothing less than positive. The <a href="https://rxjs.dev/guide/operators">set of operators</a> RxJS offers is really handy. They seem to have an operator (or a chain of operators) for every use case. Commonly used operators include:</p>
<ul>
<li><code>map</code>: passes each source value through a transformation function to get corresponding output values.</li>
<li><code>tap</code>: modify the outside state when the observable emits a new value without altering the stream.</li>
<li><code>switchMap</code>: maps each value to an Observable, then flattens all of these inner Observables.</li>
<li><code>filter</code>: emits a value from the source if it passes a criterion function.</li>
<li><code>combineLatestWith</code>: create an observable that combines the latest values from all passed observables and the source into an array and emits them.</li>
</ul>
Learn How To Spot And Prevent Memory Leaks
<p><a href="https://www.geeksforgeeks.org/what-is-memory-leak-how-can-we-avoid/">Memory leaks</a> are one of the worst types of issues you run into — hard to find, debug, and often hard to solve. This might not be a concern initially, but it becomes crucial when your application reaches a certain size. Common symptoms of memory leaks are degrading performance the longer the app is being used or the same events being fired multiple times. Two of the most common source of memory leaks I’ve run into are:</p>
<h3>1. Subscriptions That Are Not Cleaned Up</h3>
<p>Unlike the <a href="https://angular.io/api/common/AsyncPipe"><code>async</code></a> pipe, listening to an observable using the <code>subscribe</code> method won’t get cleaned up automatically. You will have to manually clean up the subscriptions by calling <code>unsubscribe</code> on the subscription or using the <code>takeUntil</code> operator.</p>
<p>The example below shows a memory leak introduced by listening to the route params observable. Every new instance of <code>MyComponent</code> creates a new subscription which will continue to run even after the component is destroyed.</p>
<pre><code>export class MyComponent {
 constructor(private route: ActivatedRoute){
 this.route.params.subscribe((params) =&gt; {
 // Do something
 });
 }
}
</code></pre>

<p>As mentioned above, you can fix the memory leak by either calling <code>unsubscribe</code> or using the <code>takeUntil</code> operator.</p>
<ul>
<li>Fixing the memory leak using the <code>unsubscribe</code> method:</li>
</ul>
<pre><code>export class MyComponent {
 private routeSubscription;
 constructor(private route: ActivatedRoute){
 this.routeSubscription = this.route.params.subscribe((params) =&gt; {
 // Do something
 });

 }
 ngOnDestroy() {
 this.routeSubscription.unsubcribe();
 }
}
</code></pre>

<ul>
<li>Fixing the memory leak using the <code>takeUntil</code> operator:</li>
</ul>
<pre><code>export class MyComponent {
 private componentDestroyed$ = new Subject&lt;boolean&gt;();
 constructor(private route: ActivatedRoute){
 this.route.params.pipe(
 takeUntil(this.componentDestroyed$)
 ).subscribe((params) =&gt; {
 // Do something
 });

 }
 ngOnDestroy() {
 this.componentDestroyed$.next(true);
 this.componentDestroyed$.complete();
 }
}
</code></pre>

<h3>2. Event Listeners That Are Not Cleaned Up</h3>
<p>Another common source of memory leaks is event listeners that aren’t unregistered when no longer used. For example, the <code>scroll</code> event listener in the code below gets instantiated on every new instance of <code>MyComponent</code> and continuously runs even after the component is destroyed unless you unregister it. </p>
<pre><code>export class MyComponent {
 constructor(private renderer: Renderer2) {}
 ngOnInit() {
 this.renderer.listen(document.body, 'scroll', () =&gt; {
 // Do something
 });
 }
}
</code></pre>

<p>To fix this and stop listening to the event after the component is destroyed, assign it to a variable and unregister the listener on the <code>ngOnDestroy</code> lifecycle method.</p>
<pre><code>export class MyComponent {
 private listener;
 constructor(private renderer: Renderer2) {}
 ngOnInit() {
 this.listener = this.renderer.listen(
 document.body,
 ‘scroll’,
 () =&gt; {
 // Do something
 });

 }
 ngOnDestroy() {
 this.listener();
 }
}
</code></pre>

Consider Using A State Management Library (If Applicable)
<p><a href="https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f">State management</a> is another part of the stack that you don’t usually think about until you need it. Most small and simple applications don’t need any external state management library. However, as the project grows and managing your application’s state gets more complicated, it might be time to re-think if the project could benefit from implementing more robust state management.</p>
<p>There is no correct solution for state management as every project’s requirements are different. Luckily, there are a few state management libraries for Angular that offer different features. These are a few of the commonly used state management libraries in the Angular ecosystem:</p>
<ul>
<li><a href="https://ngrx.io/">NgRx</a></li>
<li><a href="https://www.ngxs.io/">NGXS</a></li>
<li><a href="https://opensource.salesforce.com/akita/">Akita</a></li>
</ul>
Wrapping Up
<p>If you’ve just started to learn Angular and it hasn’t quite clicked yet, be patient! It will eventually start to make sense, and you’ll see what the framework has to offer. I hope my personal experience can help you accelerate your learning and avoid the mistakes I’ve made.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (William Juan)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ef27939e-040f-49bc-bd4e-1af6d80a84ac/angular-guide.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Designing Better Inline Validation UX]]></title>
            <link>https://smashingmagazine.com/2022/09/inline-validation-web-forms-ux/</link>
            <guid>https://smashingmagazine.com/2022/09/inline-validation-web-forms-ux/</guid>
            <pubDate>Wed, 21 Sep 2022 11:30:00 GMT</pubDate>
            <description><![CDATA[Inline validation in web forms is useful when it works, but frustrating when it fails. Too often it leads to an endless stream of disruptive error messages or dead-ends without any chance of getting out. Let’s fix it.]]></description>
            <content:encoded><![CDATA[<p>Undoubtedly, there are major <strong>advantages of inline validation</strong>. We validate input as users type, and so as people move from one green checkmark to another, we boost their confidence and create a sense of progression. If an input expects a particular type of content, we can <strong>flag errors immediately</strong>, so users can fix them right away. This is especially useful when choosing a secure password, or an available username.</p>
<a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52200522-e541-4a63-b807-84f3b745030b/password-reset.gif" /></a>Sometimes inline validation works really well, for example with a <a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/">password strength meter</a>, as used by Slack. (Image credit: <a href="https://www.nngroup.com/articles/errors-forms-design-guidelines/">Error Forms Design Guidelines</a>)

<p>However, <a href="https://adamsilver.io/blog/live-validation-is-problematic/">inline validation can be problematic</a>. Mostly because we can’t really show an error at just the right time when it occurs. And the reason for that is that we can’t <em>really</em> know for sure when a user has actually <em>finished</em> their input, unless they explicitly tell us that they have.</p>
<p>Clicking on a “Submit” button is a <strong>very clear signal</strong> that users <em>think</em> they are done, but our implementations usually consider leaving an input field as a <strong>strong enough signal</strong> to kick off the validation for that input field. Often it will be a correct assumption, but since it’s merely an assumption, eventually it will be wrong for <em>some</em> users — we just don’t know how many people, and how often, will be affected by it.</p>
<p>Surely we don’t want to show <strong>“wrong” errors</strong>; nor do we want to confuse and frustrate users with flashing error messages as they type. We want to show errors as they happen, and we want to replace them with friendly green checkmarks once they are fixed. How challenging can that be to implement? As it turns out, it is indeed quite challenging.</p>

<p>This article is <strong>part of our ongoing series</strong> on <a href="/category/design-patterns">design patterns</a>. It’s also a part of the <a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-ux/">4-weeks live UX training</a> 🍣 and will be in our recently released <a href="https://smart-interface-design-patterns.com/">video course</a> soon.</p>

The Many Faces Of Inline Validation
<p>There are surprisingly many flavours of <strong>inline validation</strong>. Over the years, we’ve learned to avoid <a href="https://baymard.com/blog/inline-form-validation#pitfall-1-premature-inline-validation">premature validation</a> — inline validation that happens when a user just focuses on an empty input field. In that case, we would display errors way too early, before users even have a chance to type anything. This isn’t helpful, and it is frustrating.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0cb224ad-dc05-4105-bde6-dc7fe2913719/premature-validation.jpg" /></p>
<p>Eventually we moved to <strong>real-time validation</strong> which happens as users are typing. To do that, for every single field, we define a threshold of entered characters, after which we start validating. This doesn’t really <em>remove</em> frustration entirely, but rather <em>delays</em> it. As users eventually reach the threshold, if the input isn’t complete or properly formatted yet, they start getting confronted with flashes of premature error messages.</p>
<p>Inline validation also typically requires quite elaborate and <strong>strict formatting rules</strong>. For example, at which point should we validate a day and a month for a date input? Would we validate them separately, or validate the date as a whole? Because both day and month inputs are interdependent, getting inline validation right there is difficult. From testing, it seems that validating the date <em>at once</em> helps avoid premature errors for good. In practice, each input, and each type of input, requires a conversation about custom validation rules. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4af5e8d-012f-4b84-ac27-f66ed20443a1/validate-on-submit-or-not.jpg" /></p>
<p>The most common type of inline validation is <strong>late validation</strong>: we validate input once a user has <em>left</em> the input field (on <code>blur</code>), and just let them be as they are filling in the data or copy-paste it. This surely helps us avoid flashes of errors. However, we assume a particular order of progression from one field to another. We also prompt users to interrupt their progression and head back to fix an error once it has happened.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/911bfc2b-89a4-4c4c-9637-fc0910891852/no-inline-validation.jpg" /></p>
<p>So which inline validation technique works best? As it turns out in usability testing, <strong>users sincerely appreciate both</strong> — the <em>live</em> validation and the <em>late</em> validation — if things go perfectly smoothly. Ironically, they also feel utterly frustrated by <em>any</em> kind of inline validation once errors start showing up one after another.</p>
The Downsides Of Inline Validation
<p>This frustration shows up in different ways, from the task abandonment to the increased frequency of errors. And usually it’s related to a few well-known issues that inline validation always entails:</p>
<ul>
<li><strong>Inline validation always interrupts users</strong>.<br />A user might be just trying to answer a question, but error messages keep flashing in front of them as they type. That’s annoying, <a href="https://www.frontiersin.org/articles/10.3389/fpsyg.2014.00841/full">disruptive</a> and <a href="https://www.sciencedirect.com/science/article/abs/pii/S074756320500107X">expensive</a>.</li>
<li><strong>Inline validation often kicks in too early or too late</strong>.<br />Errors appear either when the user is typing, or once they have moved to the next input field. Both of these options aren’t ideal: the user is interrupted as they type, or they are focused on the <strong>next question</strong>, yet we prompt them to fix their previous answer.</li>
<li><strong>Inline validation isn’t reliable enough</strong>.<br />Even though an inline validator might give the user’s input green light, it can still flash an error message once the input has been re-checked on the server. A correct format of the input doesn’t mean that the input is also accurate.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc78fa4c-56b0-449c-acae-30e9cfd766a9/when-live-validation-fails-ux.jpg" /></p>
<p>This applies, for example, to ill-formatted VAT-numbers, which always start with a 2-digit-prefix, such as <code>DE</code> or <code>LT</code>. But it also helps with any standardized input such as IBAN number, credit card number, prefixed policy insurance number or lengthy digits-only gift-coupon-codes.</p>
<p>We also want to avoid wrong assumptions or wasted time between pages that potentially don’t even apply to users. The more severe an error is, the more likely it is that users might want to see it <strong>sooner, rather than later</strong>. However, when we do display errors, we need to ensure users will appreciate the interruption.</p>

2. Late Validation Is Almost Always Better
<p>Especially for complex forms, with plenty of columns, view switchers and filters, <strong>premature error messages</strong> are often perceived as an annoyance, and a very distracting one. As users are typing, any kind of distraction in such environments is highly unwanted and counter-productive. In fact, distraction often leads to even more errors, but also reduced accuracy of data and increased completion times.</p>
<p>Late validation almost always performs better. It’s just that by validating late, we can be more confident that the user isn’t still in the process of typing the data in the input field. The main exception would be any kind of input, for which users can benefit from real-time feedback, such as <strong>password strength meter</strong>, or a choice of an available username, or the character count limit. There we need to respond to user’s input immediately, as not doing so would only slow down users desperately trying to find they way around system’s requirements.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bc97e285-e9b4-4c78-befe-949032b8057f/password-strenght-meter-airbnb.png" /></p>
<p>In practical terms, that means that for every input in a form, we need to review just what kind of feedback is needed, and design the interaction accordingly. It’s unlikely that one single rule for all inputs will work well: to be effective, we need a more granular approach, with a few <strong>validation modes</strong> that could be applied separately for each individual input.</p>
3. Validate Empty Fields Only On Submit
<p>Not all errors are <strong>equally severe</strong>, of course. Surely sometimes input is just ill-formatted or erroneous, but how do we deal with <strong>empty form fields</strong> or indeterminate radio buttons that are required? Users might have left them empty accidentally or intentionally, and there isn’t really a sure way for us to predict it. Should we throw an error <em>immediately</em> once the user has left the field empty? The answer isn’t obvious at all.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa0bbe70-6b6d-4a27-bc96-1fc62e4a388a/premature-validation.png" /></p>
<p>The user might have indeed overlooked the input field, but that’s not the only option. They might as well just have <strong>jumped in a wrong field</strong> by mistake, and left it right away. Or they had to <strong>jump back</strong> to the previous field to correct an error triggered by the validator. Or they skipped the input field because they just wanted to get something else out of the way. Or maybe they just had to clear up their input and then move to another browser’s tab to copy-paste a string of text.</p>
<p>In practice, getting the UX around empty fields right is <strong>surprisingly difficult</strong>. Yet again, we can’t predict the context in which a user happens to find themselves. And as it turns out, they don’t always have a perfectly linear experience from start to finish — it’s often chaotic and almost unpredictable, with plenty of jumps and spontaneous corrections, especially in complex multi-column forms. And as designers, we <strong>shouldn’t assume a particular order</strong> for filling out the form, nor should we expect and rely on a particular tabbing behavior.</p>
<p>In my experience, whenever we try to flag the issues with empty fields, too often we will be pointing out mistakes prematurely. A calmer option is to validate empty fields <strong>only on submit</strong>, as it’s a clear indicator that a user indeed has overlooked a required input as they wish to proceed to the next step.</p>
<p>The earliest time to show an error message is when a user leaves a <strong>non-empty input field</strong>. Alternatively, depending on the input at hand, we might want to define a minimum threshold of characters, after which we start validating.</p>

4. Reward Early, Punish Late
<p>Another issue that shows up eventually is what should happen if a user chooses to <strong>change an input field that’s already been validated</strong>? Do we validate immediately as they edit the input, or do we wait until they leave the input field?</p>
<p>As Mihael Konjević wrote in his article on the <a href="https://medium.com/wdstack/inline-validation-in-forms-designing-the-experience-123fb34088ce">Reward Early, Punish Late pattern</a>, if a user edits an <strong>erroneous field</strong>, we should be validating immediately, removing the error message and confirming that the mistake has been fixed as soon as possible (<em>reward early</em>). However, if the input was valid already and it is being edited, it’s probably better to wait until the user moves to the next input field and flag the errors then (<em>punish late</em>).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b146191-97c9-4a90-bbd2-6fcb32c64b1c/reward-early-inline-validation-ux.png" /></p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33c6712e-4bb1-4979-a9d4-0c0a8ad71970/reward-early-punish-late-ux.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33c6712e-4bb1-4979-a9d4-0c0a8ad71970/reward-early-punish-late-ux.gif" /></a>Reward users early if they fixed a mistake, and punish them later, once they’ve left the input field. A solution by <a href="https://medium.com/wdstack/inline-validation-in-forms-designing-the-experience-123fb34088ce">Mihael Konjević</a>.

<p>In technical terms, we need to <strong>track the state and contents of each input field</strong>, and have thresholds for when we start validating, and then have rules for changing input fields that have been validated already, or that contain errors.</p>
<p>As it turns out, the <a href="https://medium.com/@shanplourde/inline-form-validations-ux-design-considerations-and-react-examples-c2f53f89bebc">implementation isn’t trivial</a>, and making it work in a complex form will require quite a bit of <strong>validation logic</strong>. Beware that this logic might also be difficult to maintain if some fields have dependencies or show up only in certain conditions.</p>
5. Prioritize Copy-Paste UX Over Inline Validation
<p>For pretty much any form, <strong>copy-paste is almost unavoidable</strong>. To many users, this seems like a much more accurate way of typing data as they are less likely to make mistakes or typos. While this is less typical for simple forms such as eCommerce checkout or sign up forms, it is a common strategy for complex enterprise forms, especially when users complete repetitive tasks.</p>
<p>However, <strong>copy-paste is often inaccurate</strong>, too. People tend to copy-paste too few or too many characters, sometimes with delimeteres, and sometimes with “too many” empty spaces or line breaks. Sadly, this often doesn’t work as expected as the input gets truncated, causes a flash of error messages or breaks the form altogether. Not to mention friendly websites that sometimes conveniently attach a string of text (URL or something similar) to the copied string, making copy-pasting more difficult.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64066efe-71fa-45b6-8e86-caf46c423b64/clean-up-input-ux-pattern.jpg" /></p>
<p>In all of these situations, inline validation will flag errors, and rightfully so. Of course, in an ideal world, pasting would automatically remove all unnecessary characters. However, as text strings sometimes get appended to copied text automatically, even it wouldn’t really help. So if it’s not possible, an interesting alternative would is to add the <strong>“clean-up” feature</strong> that would cleanse the input and remove all unnecessary characters from it. Surely we’d also need to confirm with the user if the input is still right.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4f648fc6-5723-4f2e-b908-6e9819f18acb/clean-up-auto-fix-ux.jpg" /></p>
<p>If instead, after copy-pasting, some parts of the input are <strong>automatically removed</strong>, or auto-formatted in a wrong way, it can become quite a hassle to correct the input. If we can auto-correct reliably, it’s a good idea to do so; but often getting it right can be quite difficult. Rather than correcting their own mistakes, users now have to correct <em>system’s mistakes</em>, and this rarely results in improved user satisfaction. In such situations, users sometimes would remove the entire input altogether, then take a deep breath and start re-typing from scratch. </p>
<p>Typically, wrong auto-correct happens because the validator expects a <strong>very specific format of input</strong>. But should it actually? As long as the input is unambiguous, shouldn’t we accept pretty much <em>any</em> kind of input, in a form that users would prefer, rather than the one that the system expects?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4dadd25b-f6e8-456d-a45c-0c856e2a73a5/drop-down-countries-number-codes.png" /></p>
<p>A good example of that is a <strong>phone number input</strong>. In most implementations, one would often integrate fancy drop-downs and country selectors, along with auto-masking and auto-formatting in the phone number input field. Sometimes they work beautifully, but sometimes they fail miserably — mostly because they <strong>collide with the copy-paste</strong>, literally breaking the input. Not to mention that carefully selecting a country’s international code from a drop-down is much slower than just typing the number directly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9151e1f3-9397-41f7-8a8e-0886d69bbf4e/phone-international-numbers.png" /></p>
<p>What’s wrong with the <strong>auto-formatting</strong>, by the way? Just like inline validation is never reliable, so is auto-formatting. The phone number, for example, could start with <code>+49</code>, or <code>0049</code> or just the country code <code>49</code>. It might contain an extension code, and it might be a mobile phone number or a landline number. The question is, how can we <strong>auto-format reliably and correctly</strong> most of the time? This requires a sophisticated validator, which isn’t easy to build. In practical terms, for a given implementation, we need to test just how often auto-formatting fails and how exactly it fails, and refine the design (and implementation) accordingly.</p>
<p>One more thing that’s worth mentioning: <strong>disabling copy-paste is never a good idea</strong>. When we disable copy-paste for the purpose of security (e.g. email confirmation), or to prevent mistakes, people often get lost in the <em>copy-paste-loop</em>, wasting time trying to copy-paste multiple times, or in chunks, until they eventually give up. This doesn’t leave them with a thrilling sense of accomplishment, of course. And it does have an impact on the user satisfaction KPI.</p>
<p>In general, we should always allow users to type in data <strong>in their preferred way</strong>, rather than imposing a particular way that fits us well. The validation rules should support and greenlight <em>any</em> input as long as it’s unambiguous and not invalid (e.g. containing letters for phone input doesn’t make sense). The <strong>data cleaning</strong>, then, can be done either with late validation or on the server-side in a post-processing step.</p>
6. Allow Users to Override Inline Validation
<p>Because inline validation is never bulletproof, there will be situations when users will be locked-out, without any option to proceed. That’s not very different from <a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">disabled buttons</a>, which often cause nearly 100% abandonment rates. To avoid it, we always need to provide users with <strong>a way out</strong> in situations when inline validation fails. That means adding an option to <strong>override validation</strong> if the user is confident that they are right.</p>
<p>To support overrides, we can simply add a note next to the input that seems to be erroneous, prompting users to review their input and <strong>proceed despite the inline validation error</strong>, should they want to do so.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9770475b-2563-460d-861f-815f2714f4d1/german-street-house-number.png" /></p>
<p>We surely will end up with <em>some</em> wrong input in our database, but it might be quite manageable and easy to correct — and also worth it, if we manage to <strong>boost conversion</strong> as a result of that. Eventually, it’s all about making a case around the value of that design decision. </p>
<p>To get there, we need to <strong>measure the impact of overrides</strong> for a few weeks. We need to understand just how much more revenue is coming through with the override and just how much inaccurate input and expenses or costs we produce because of it. The decision, then, should be based on these metrics and data, captured by <a href="https://www.smashingmagazine.com/2022/04/boosting-ux-with-design-kpis/">design KPIs</a>. This will give you a comparison to see <strong>how costly inline validation actually is</strong> and make a case about having one, getting a buy-in to adjust it, or making a case for abandoning it.</p>
7. Just-In-Time Validation
<p>It might feel perfectly obvious that inline validation is a perfect tool to <strong>validate complex input</strong>. If a user types in a 16-digits-gift-code, or a lengthy insurance policy number, providing them with confidence about their input is definitely a good idea.</p>
<p>But typing complex data takes time and effort. For lengthy input, users often copy-paste or type chunks of data in multiple steps, often with inline validation flashing left and right as they enter and leave input fields. And because the input isn’t simple, they often <strong>review their input</strong> before proceeding to ensure that they haven’t made any mistakes. This might be one of the cases where <strong>inline validation is too much of a distraction</strong> at the time when users are heavily focused on a task at hand.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742c7358-7afd-4a92-b7b3-9b4ec3456e2b/vat-number-validation.jpg" /></p>
<p>So what do we do? Well, again, we could allow users to validate their input only when they are confident that it is complete. That’s the case with the <strong>just-in-time validation</strong>: we provide users with a <strong>“Validate” button</strong> that kicks off the validation on request, while the other fields are validated live, immediately.</p>
<p>However, whenever many pieces of content are <strong>compounded in a large group</strong> and have restrictive rules — like the credit card details, for example — it’s better to live validate them all immediately. This can help users avoid unnecessary input and change the type of input if needed.</p>
8. For Short Forms, Consider Validation on Submit Only
<p>Once we validate <em>just-in-time</em>, we can of course go even further and validate only on submit. The benefit of it is obvious: users are <strong>never distracted or annoyed</strong> by validation, and have full control over when their input is validated.</p>
<p>However, the pattern <strong>doesn’t seem to work well</strong> for lengthy pages with dozens and dozens of input fields. There, users often end up typing a lot of unnecessary data before they realize that their initial input isn’t really applicable. But perhaps we could avoid the issue altogether.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aa18b524-2af1-4e52-a3e1-5274ecdc43b2/service-name-apply-application.jpeg" /></p>
<p>As it turns out, <strong>shorter pages usually perform better than one long page</strong>. In fact, for sophisticated forms, a better way to deal with complex journeys is to simplify them. We product a sort of a dashboard of tasks that a user has to complete in our complex journey, and dedicate single pages for single tasks. In details, it works like this:</p>
<ul>
<li>We split a complex form into small tasks = pages (with the <a href="https://www.smashingmagazine.com/2017/05/better-form-design-one-thing-per-page/">one-thing-per-page pattern</a>);</li>
<li>For every page, we <strong>validate (mostly) on submit</strong>, as users are moving from one page to the next;</li>
<li>We provide users with a <a href="https://design-system.service.gov.uk/patterns/task-list-pages/">task list pattern</a> and support navigation between them, with the option to save input and continue later.</li>
</ul>
<p>Not only does the approach make form much simpler to manage; because each part of the journey is quite simple and predictable, users are also <strong>less likely to make mistakes</strong>, but if they do make these mistakes, they can recover from them quickly — without jumping all over the entire form. Definitely an approach worth testing once you end up with a slightly more complex user journey.</p>
When Inline Validation Works
<p>We’ve gone all the way from the issues around inline validation towards the option to abandon it altogether. However, it’s worth stating that <strong>inline validation can be very helpful</strong> as well. It seems to be most effective when mistakes are common and quite severe.</p>
<p>For example, inline validation is very useful with a <strong>password strength meter</strong>. When we describe and live-update password rules as users type, it helps users choose a password that matches all requirements, is secure and won’t trigger any error messages.</p>
<p>Users also appreciate <strong>immediate help</strong> with any kind of complex input. And, with inline validation, users woul never fill out entire sections in the form just to realize that these sections do not apply to them.</p>
<p>All of these advantages make inline validation a thrilling and thriving UX technique — especially in situations when most form fields are likely to be completed by <a href="https://web.dev/learn/forms/autofill/">browser’s autofill</a>. However, if the inline validation is too eager, users quickly get utterly frustrated by it when errors start creeping out.</p>
Wrapping Up
<p>Inline validation is useful, but when it fails, its costs can be quite high. With just-in-time validation, <em>reward-early-punish-late</em>-pattern and validating on submit, we <strong>avoid unnecessary distractions</strong>, complex logic and layout shifts altogether, and communicate errors without annoying users too early or too late.</p>
<p>The downside is, of course, the <strong>error recovery speed</strong>, which certainly will be slower, yet in the end, the number of errors might be lower as well because we’ve simplified the form massively. It’s just much more difficult to make mistakes if you have just 3–4 input fields in front of you. And that might be just enough to reduce the frequency of errors and increase completion rates.</p>
Meet “Smart Interface Design Patterns”
<p>If you are interested in similar insights around UX, take a look at <a href="https://smart-interface-design-patterns.com/"><strong>Smart Interface Design Patterns</strong></a>, our shiny new <strong>8h-video course</strong> with 100s of practical examples from real-life projects. Plenty of design patterns and guidelines on everything from accordions and dropdowns to complex tables and intricate web forms — with 5 new segments added every year. <em>Just sayin’!</em> <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Check a free preview</a>.</p>
<a href="https://smart-interface-design-patterns.com/"><img src="https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_80/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7cc4e1de-6921-474e-a3fb-db4789fc13dd/b4024b60-e627-177d-8bff-28441f810462.jpeg" /></a>Meet <a href="https://smart-interface-design-patterns.com/">Smart Interface Design Patterns</a>, our new video course on interface design &amp; UX.

<div><a href="https://smart-interface-design-patterns.com/">Jump to the video course →</a></div>

<p>100 design patterns &amp; real-life 
examples.<br />8h-video course + live UX training. <a href="https://www.youtube.com/watch?v=aSP5oR9g-ss">Free preview</a>.</p>

Related UX Articles
<ul>
<li><a href="https://www.smashingmagazine.com/2022/08/error-messages-ux-design/">Designing Better Error Messages UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/08/authentication-ux-design-guidelines/">Rethinking Authenticaiton UX</a></li>
<li><a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">Disabled Buttons UX</a></li>
<li><a href="https://www.smashingmagazine.com/2022/03/designing-better-infinite-scroll/">Designing A Perfect Infinite Scroll</a></li>
<li><a href="https://www.smashingmagazine.com/category/ux/">Design Patterns and UX on SmashingMag</a></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64066efe-71fa-45b6-8e86-caf46c423b64/clean-up-input-ux-pattern.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Smashing Podcast Episode 53 With Rémi Parmentier: Can HTML Email Use Modern CSS?]]></title>
            <link>https://smashingmagazine.com/2022/09/smashing-podcast-episode-53/</link>
            <guid>https://smashingmagazine.com/2022/09/smashing-podcast-episode-53/</guid>
            <pubDate>Tue, 20 Sep 2022 13:00:00 GMT</pubDate>
            <description><![CDATA[In this episode of the Smashing Podcast, we’re talking about HTML email. Do we still have to design like we would for IE5? Vitaly talks to expert Rémi Parmentier to find out.]]></description>
            <content:encoded><![CDATA[<p>In this episode of The Smashing Podcast, we’re talking about HTML email. Do we still have to design like we would for IE5? Vitaly talks to expert Rémi Parmentier to find out.</p>


<h3>Show Notes</h3>
<ul>
<li>Rémi Parmentier <a href="https://twitter.com/HTeuMeuLeu">on Twitter</a></li>
<li><a href="https://www.caniemail.com">Can I Email?</a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2022/09/smart-interface-design-checklist-cards-release/">Meet “Smart Interface Design Patterns Checklists”</a> <em>written by</em> Vitaly Friedman</li>
<li><a href="https://www.smashingmagazine.com/2022/09/wai-aria-guide/">Making Sense Of WAI-ARIA: A Comprehensive Guide</a> <em>written by</em> Kate Kalcevich</li>
<li><a href="https://www.smashingmagazine.com/2022/09/javascript-api-guide/">JavaScript APIs You Don’t Know About</a> <em>written by</em> Juan Diego Rodríguez </li>
<li><a href="https://www.smashingmagazine.com/2022/09/accessibility-times-headless/">Accessibility In Times Of Headless</a> <em>written by</em> Josefine Schaefer</li>
<li><a href="https://www.smashingmagazine.com/2022/09/rethinking-star-ratings-readers/">Rethinking Star Ratings For Readers</a> <em>written by</em> Matt Athanasiou</li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://twitter.com/HTeuMeuLeu"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a9109d9-00d0-4aba-a8b1-b7a704ad0119/remi-parmentier-profile-200x200-opt.jpg" /></a> Vitaly Friedman: He’s an email and web developer based in the north of France, near Lille and goes by HTeuMeuLeu on the internet. He works in his own small web development agency, Tilt Studio, since 2008. And he also runs workshops, gives talks, and writes articles on his blog all around HTML emails. Now Rémi also likes collecting Game Boy consoles and listening to, Sufjan Stevens. My Smashing friends, please welcome Rémi Parmentier. Hello, Rémi. How are you doing today?</p>
<p>Rémi Parmentier: I’m smashing.</p>
<p>Vitaly: Oh, that’s so wonderful to hear, Rémi. I don’t know when we know we saw each other maybe, I don’t know, 27 years ago now?</p>
<p>Rémi: Ah, yeah, that feels like it. Yeah, I think we met in person for the first and last time in Smashing conference in Freiberg in 2019, I think.</p>
<p>Vitaly: I think so. This seems like it was a very, very long time ago.</p>
<p>Rémi: Yeah, it’s not even this decade, so.</p>
<p>Vitaly: Yeah, no. So Rémi, this is coming here maybe the questions from the audience, coming already. So if it was 27 years ago, was it the same back then, writing TL emails, like it is today? Or have things changed since then?</p>
<p>Rémi: You are already teasing me. No, I would say things have changed somehow. There are differences like mobile emails, we do responsive emails nowadays, that wasn’t the case 27 years ago. So, yeah, there are lots of differences like this.</p>
<p>Vitaly: Yeah. So it’s always interesting for me because there is an ongoing joke about HTML emails and people who have to do HTML emails and people who are forced to do emails. And you love to do HTML emails.</p>
<p>Rémi: Yeah.</p>
<p>Vitaly: You have to explain yourself, Rémi.</p>
<p>Rémi: Yeah, I don’t know how it came to be exactly, but I wouldn’t have had the repulsion that most web developers have these days when they get asked to code an HTML email.</p>
<p>Rémi: And I think one of the reason might be that I’m old and so when I started at my very first gig in a web agency, it was around 2006. And back then emails were coded pretty much the same way that webpages were coded. So we use tables for layouts for webpages and so did we for HTML email. So it wasn’t so different back then. And so it’s just that with time, we saw that web evolved to something different. To as a semantic web first with a growing introduction of CSS and growing use of CSS for layouts. And then we got responsive web. And nowadays we’ve got all sorts of web applications and stuff like this. And yeah, it’s true that emails didn’t catch on to all of these steps, at least not at the same ease, at the same timeframe than the web did.</p>
<p>Rémi: But I feel like somehow it’s catching up every now and then. And we do get to use nice and modern stuff, as well, in HTML emails. So yeah, I really like HTML emails. And I think one part of it is that’s whenever I stumble upon a really weird the bug or behavior or something that’s really maddening for the normal person, I like to just dig in and try to figure things out, try to understand why this happens this way, why things are this way? And so I think that’s really an interesting niche of HTML development nowadays.</p>
<p>Vitaly: But it’s probably keeps you... I don’t know, it keeps you on your toes and keeps you awake at night, thinking about all this incredible, wonderful bugs happening in, I don’t know, in Microsoft Outlook and, God for a forbid, Lotus Notes. Are you still testing Lotus Notes?</p>
<p>Rémi: No, no, no. I haven’t tested that for years now, so.</p>
<p>Vitaly: Okay. That makes me a bit happier at this point. But every time I think about HTML emails, I do remember your wonderful talk where you say that, well, we actually have to think about email development as being a slightly different way, a slightly different mindset that is required to actually get it right. And I remember you speaking about thinking in the Email Geek, which really takes a slightly different turn, I guess, or perspective on what it even means to be designing and developing emails. So if somebody’s very, let’s say unfamiliar, with this territory, if you had to explain how building, designing HTML emails is different from a regular website... I mean, it’s hard to say regular... From websites and applications. Regular always has a little of undertone in it. How are they actually different? And what are some of the important skills that are absolutely required to even make sense of building and designing for HTML email?</p>
<p>Rémi: Yeah, so I think the differences can fall down to two things. The first may be the email client’s landscape. So we’ve got tons of email clients existing and used by people all around the world, while in the browsers nowadays we pretty much sadly have only one browser, which is Chrome and Chromium used by Edge and WebKit used by Safari, which is very similar, as well. And unfortunately, there’s not much diversity in the browser world right now. And so that’s actually a good thing that I enjoy about the email space is that we have got a lot of diversity, tons of email clients. And of course, the bad part of this is that each client comes with its own bugs and quirks and weird behaviors and features that you might not expect and that can be surprising. But I think it’s really the same thing to have such an environment with so many difference email clients.</p>
<p>Rémi: And the second thing that’s really pretty different, I think, is people, it’s users. And on the web, even if you don’t really know beforehand who will visit your websites, you can know it afterwards. If you use any sorts of analytics or if you just look at your server statistics, you will know how many pages, were viewed, how many people came to your website and such. On the email world, it’s really hard to have such statistics because we cannot use JavaScript for this and we cannot use server stats because emails are never on our own server. They’re on the email service server, so we need to rely on invisible tracking pixels. But these are not really reliable because not everyone display images in emails and sometimes you have got image proxying like in Gmail or Apple Mail and so you end up with statistics that are very biased and I think kind of wrong because you miss a lot of the population.</p>
<p>Rémi: So you don’t really know who is opening your emails and how and when. And so you can’t really design and code an email with the expectations that, "Oh, okay. I know that my user base is 90% Apple Mail so I don’t need to care about Outlook." You can’t really do this. So you need to have a more extended view and be really humble and realize that you won’t be able to code for everyone, but you need to do it as good as you can, get close to this. Because you really don’t know who’s going to open your emails.</p>
<p>Vitaly: But despite all of that, despite all this unpredictability, and I remember you mentioning in your session at... Also, one thing that actually quite happens quite a bit, and that’s something that we just don’t have on regular web pages or applications is that email clients also change the way HTML email works. They add links, they change links, they obfuscate things, they change markup for security and privacy reasons. And all those things are very often out of control. And not to mention all the different quirks that go in all the different email clients, as well.</p>
<p>Vitaly: But despite all of that, I’m very surprised, every now and again, to see an enormous, I would even say extraordinary level of creativity when it comes to what people turn HTML emails into. I don’t know, from shopping cart experiences within an email, to games and everything else.</p>
<p>Vitaly: What are some of the most impressive things that you saw built within HTML email?</p>
<p>Rémi: I think it has to be an email made quite a few years ago now. That was an email called Superman Request and it’s actually a mini game. I think it calls this a Night Beat adventure and it’s a choose-your-own-path game where you’re a small character that adventures in the land of tables and TDs and you need to find your path to the best emails. And it’s really such a clever use of all the CSS possibilities with checked input and radio buttons and things like this. That one really blew my mind at the time and it’s still stuck in my mind. Because not only is this really clever in the first place, but it also, I guess, took a huge amount of time and patience to do something like this. Yeah, that was really impressing.</p>
<p>Vitaly: Yeah, I think you mentioned this at some point as well. It looked absolutely incredible just to be able to do that in an email. It’s just something out of control. For me personally, it was, I think when Mark Robbins, I think, he was giving a presentation once. He’s working in one of the email companies.</p>
<p>Rémi: Yes, he’s working in Salesforce now.</p>
<p>Vitaly: Salesforce now. All right. And I remember him giving a talk about the HTML email and it all felt very natural. And then in the end of the session he showed that this was actually within HTML email where the entire presentation and slides and highlighting and everything. That was very, very impressive.</p>
<p>Vitaly: One thing though that really keeps impressing me, I guess, about these things is that there seem to be differences even within the same platform. So if I look at Outlook and outlook.com, if I look at Gmails across different devices and gmail.com, if look, I look at Yahoo web mail and Yahoo applications, it seems like even although they have the same vendor, basically, they operate differently.</p>
<p>Vitaly: So could you maybe shed a bit of light? Are they often very different or what should we as developers and keep in mind when we are, let’s say, dealing with Gmail? Because are there 50,000 versions of Gmail or is it just a few?</p>
<p>Rémi: So maybe they’re not that much. But yeah, there are a few differences and valuations across what we can call a family of email clients, so as you said, like Gmail or Outlook. And it’s not always clear why this is, but perhaps one of the most annoying at the moment is in Gmail. For example, you will get a different level of CSS support whether you are using the desktop web mail, which usually has the best CSS support across Gmail clients, versus if you’re using the mobile apps. And even if you’re using the mobile apps, you would get a different level of CSS supports, whether you are using Gmail address or whether you’re using third-party email address, like if you’re using your outlook.com email address inside the Gmail app on Android or iOS.</p>
<p>Rémi: In that case, you will get what is perhaps the worst CSS support possible. Because Gmail, I think for security purposes, strips a lot of styles and a lot of things. It doesn’t support style tags, it doesn’t support media queries. So you end up with a really bare and really raw HTML with just a few styles, just what you need to get your colors and a few things like this in there. But it’s a really minimalistic approach that you need to get your email to look good in that kind of circumstances. Yeah.</p>
<p>Vitaly: Yeah. So it’s always such a story and you probably can hear the very disappointed voices from the dark corners of the internet talking about, "What’s the deal with Outlook?"</p>
<p>Vitaly: We’ve been making fun of Outlook for, I don’t know how many years now, and I don’t know when it was a 2012 or '11 or maybe even earlier than that where there was a big switch to use the Microsoft Word rendering engine, I heard. And it stayed like this, well, since then, if I’m not mistaken.</p>
<p>Rémi: Yeah, exactly.</p>
<p>Vitaly: So, Rémi, what are we going to do about this? Is there any, I don’t know, any help in sight, Are we just going to have to deal with Word rendering engine forever?</p>
<p>Rémi: So this is actually a very hot topic at the moment because something is happening at Microsoft. They might have heard all the complaints for the years and it looks like they are doing something. So as you mentioned in 2007, Microsoft decided to move Outlook on Windows from Internet Explorer rendering engine to Word rendering engine.</p>
<p>Rémi: And this has been really the bane of all email developers because Word is really terrible at rendering HTML and CSS. Not only does it just support very limited CSS features and HTML, but oftentimes it does it really wrong. So it doesn’t calculate weight from images correctly in CSS or it doesn’t... A lot of stuff happening that’s really intimidating for a web developer. So what’s changing at the moment is that just a few months ago, I think it was last month or just month before, Microsoft released is the first public beta version of Outlook on Windows, using Edge rendering engine.</p>
<p>Rémi: So they’re making a brand new Outlook on Windows and it’s basically just a web app, embedded as a desktop application. So now it’s going to mean to fix almost all the problems that Outlook had created in the first place. So it’s staying better for now, but I’m in good faith that Microsoft is really committed to push this to their end users and see how things go from there. And if they deploy this as the real update and replacement of the actual Outlook versions running on Word, it’s going to be a really big change because this means that we may no longer need to use tables for layouts. Because the only reason we use tables in HTML emails is because of the Outlook on Windows, because Word doesn’t really understand anything else than tables for layouts. So that’s really what we can out now is that Microsoft is going to push all this update and that all of the users are going to move to it. And yeah, that’s really what we need to do.</p>
<p>Vitaly: Well, I can hear a lot of enthusiasm and hope and I don’t know, I would say excitement about this. This seems like a very interesting move that we should probably be really watching out for, so that’s neat.</p>
<p>Vitaly: But given the scenario then, so with tables or without, what do you think then would be... Maybe actually looking back, look at your work specifically, how would you go around building HTML emails? So there are many solutions out there, obviously there are plenty of templates, very different kinds of templates, there’s also MGML and so on and so forth.</p>
<p>Vitaly: I’m wondering where do you stand in terms of what it takes, so what does it mean to be building HTML emails today? Is it still cool to be, I don’t know, coding HTML emails from scratch or do other particular templates that are normalizing things across email clients? What’s your take on this?</p>
<p>Rémi: So I’m definitely in from scratch camp right here. But I’m also there in for the web, as well. I like to do things from scratch.</p>
<p>Rémi: I think that a way to see this is that it’s not so different from the web. If you were to code a website, would you use something like Bootstrap or maybe start with a WordPress default theme and build your website from there on? Or would you rather build something from scratch? And so yeah, that’s really a way to see things. And both approaches can be good. It really depends on the time that you have, the knowledge that you have, and the will and patience that you have, as well.</p>
<p>Rémi: So yeah, I really, usually myself, I prefer to cut everything from scratch. But for any newcomers then if it’s good for them to start from an already made template that they found from their ESP, then go for it and maybe start learning from there and see how you can improve things from there and see what problems you encounter with the default templates and see how you can improve things and build something better from there. That’s a good approach as well.</p>
<p>Vitaly: Right. And in your case, where would you start? Are starting with... I mean obviously, I guess, I assume. I don’t know if I should be assuming that or not.</p>
<p>Vitaly: Will you be starting with HTML tables, or what is your take? Do you then build mobile first, desktop first, or how does it work for you?</p>
<p>Rémi: Yeah, so for a few in the years now, I think the start I approach in the email development industry and community has been more about doing things fluid, or hybrid, as we go them. So this means that we’re going to build the layouts that can adjust to any screen sizes with our media queries first. So by just using divs for example, a div is responsive by default. If you don’t set any fixed weight from it’ll adjust to your window’s size. And then from there, you can use media queries, whether targeting mobile or targeting desktop to improve things. So that’s really what we call progressive enhancements and graceful degradation. So that’s the whole mindset here, I think, is really important in the email world.</p>
<p>Rémi: So yeah, the approach regarding table and my approach at least, has been more to put the tables in conditional comments for Outlook because that’s really only Outlook that needs them. And then for other clients, use divs and use regular HTML semantics like H1, H2 tags, paragraphs, and such to create your elements and lay them out. And but I’ve been coding like this for, I don’t know, for how long, but for quite long now, and it’s still working well. So I think that’s a really valued approach, as well.</p>
<p>Vitaly: Oh, interesting. So that means that basically... Am correct to assume that you then would be having one markup specifically for Outlook, and then the rest will be getting the good old div or even potential section article. Is it even viable as well there?</p>
<p>Rémi: So regarding some of the semantics like article or editor and photo tags, it’s usually not appropriate because your email might get included in a more complex application like Gmail. And Gmail is web mail and its HTML itself. So when Gmail inserts your HTML newsletter in its interface, you end up with Gmail’s HTML code all around your own HTML code. So then the semantic might not make sense there. And on top of that, Gmail specifically doesn’t support these tags, so you need to find a proper fallback for years.</p>
<p>Rémi: But as far as Outlook is concerned, as the idea is not that much to create a separate, isolated code for the whole email, but more to add small chunks of code just for Outlook, that will say, "Okay, I’m going to open a table for Outlook right now." And then I will have the rest of my concerns come on for both Outlook and other email clients. And then at the end of my email or of my blog, I will just add another block I’ve got just for Outlook that will say, "Okay, I’m closing the table that I opened." And that’s it for tables and just for Outlook.</p>
<p>Vitaly: Okay. Is it actually still a good idea to inline styles in email?</p>
<p>Rémi: Yes. Yeah, it is because even though lot of clients do support style tags and even Outlook on Windows, actually, that’s something often surprising to people. It’s usually a good idea because some clients don’t support style tag. So earlier, I mentioned the Gmail apps on mobile when you don’t use the Gmail accounts. So this is what we Email Geeks often call GANGA, for Gmail apps with non-Gmail accounts.</p>
<p>Vitaly: This is quite an acronym word right there.</p>
<p>Rémi: Yeah, I love this acronym. And so in GANGA, you don’t get style tag support, so you need to inline your style there. So it’s really a good way to make sure that in these very restrictive conditions, at least your email looks properly styled for text and for font sizes and such and such things.</p>
<p>Rémi: But you can have some of your styles in separate style texts. And, in fact, that’s what we can do for responsive emails. When we use media queries, we cannot inline media queries, so we do have to use style tags. So we do a bit of both.</p>
<p>Rémi: And regarding inline styles, it’s also important because whenever you’re going to reply to an email or forward an email, which is something very unique to emails, some of this is really not something that happens on websites... Email clients, and that’s pretty much the case for all email clients, will really remove all the style tags of your code when you do this. And so if you don’t have in an inline style, suddenly your emails will look like something completely broken. So it’s always safer to have at least a bare minimum of times inline so that your emails looks good in this, when it happens.</p>
<p>Vitaly: Right. What about the font phase, by the way? So when we’re talking about embedding fonts, obviously, these font need to live somewhere. You’re not going to attach them to the email. And then sometimes I see that there are code errors appearing where you’re trying to fetch fonts from one place and then it doesn’t know where it’s going to be loaded from. So you cannot just, let’s say, whitelist a couple of domains and call it a day. So it needs to be just public to everyone.</p>
<p>Rémi: Yeah.</p>
<p>Vitaly: Right. What is a common way to deal with this?</p>
<p>Rémi: So, yeah. But that’s a very specific problem. And this happened to me a few times, especially when working with clients who have their own phones hosted on their own server, but they’re using CORS rules for security, so the font cannot be called from a specific web mail. I think in the end, it kind of falls apart because it then is working okay, because CORS restrictions like this do not apply to email applications.</p>
<p>Rémi: So for example, Apple Mail does support font face, and it doesn’t behave to CORS rules. So even if you have CORS restrictions, your fonts will still be available in Apple Mail. And for font face, Apple Mail is really just one of the few that supports it because there’s almost no web mail, so no Gmail, no outlook.com that supports font face like this no Yahoo, either. And there’s just I think a few international or local email clients that do support font face in that case.</p>
<p>Rémi: So yeah, whenever you are using font face, you need to realize that not a lot of people might see your fonts and because it might be stripped from the email clients, like Gmail or outlook.com. And you might have CORS errors like this. So it’s always a question of progressive enhancement and graceful degradation just... I like to use font face in emails when it’s part of the design and it’s a great enhancement, but you always need to realize that that’s not going work for 100% of your subscribers. So just you always have to think about what happens if it doesn’t work.</p>
<p>Vitaly: Right. What do you think in general about things like MGML. Do you use anything like that, sort of a templating language for writing coding, I would say, faster and still distant HTML emails? Or maybe using something else? What’s your take on it?</p>
<p>Rémi: So yeah, MGML is very popular and it’s always interesting to see. And the fun fact, I was actually hired as a consultant by Mailjet when we launched MGML in 2015 or '16, I think. And so I worked with them to make sure that the HTML output by MDML is on par with our industry standards and just works well in all environments, including Outlook. And so it’s really fun to see that still up to this day it holds up pretty well, and even though I know there has been updates to MGML and such. But the basic way of doing things, which is mobile first, has been holding well across all these years.</p>
<p>Rémi: And so I don’t use MGML myself, but I do use a few of our tools. And this year, in particular, I’ve been really digging into Parcel, which is an online code editor dedicated to HTML emails. And so there are a lot of fun stuff in it, to really help you code emails maybe faster. There’s components, there are styles inlining, and you can send tests to your inbox from the editor. So that’s really great.</p>
<p>Rémi: And I’ve also been walking with Mazo, which is a node framework to build HMTL emails, as well. I kind see it like JQL or Ivanti, which is not so much that it impose a way to code to you, but you can bring your own code and it just helps you output things easier and faster and do all sorts of small routines that like styles inlining or things like this.</p>
<p>Rémi: So yeah, I think over the past few years, we are really starting to see tools appearing like this and really catching on across email developers. So you can... Yeah. Yeah, I think that’s a good sign of maturity among the-</p>
<p>Vitaly: Right, and while they’re talking about sending emails to yourself from Parcel, which I think is actually pretty cool, what would be then your strategy to test and debug emails? So do you literally send it to yourself via email and then you check on your phone, let’s say, if it looks okay, and then you go back to the editor, and then you fix, and then you resend it? Or is there any other way or approach to do that? What’s your take?</p>
<p>Rémi: Yeah, that’s usually my first approach, it’s just testing and sending to myself. And by sending to myself, I mean sending to the dozens and dozens of email addresses that I’ve created pretty much everywhere so that I can see how email code behaves in different email clients.</p>
<p>Vitaly: What a fun place it is for all those email addresses to be in. Probably tons of different tests and spam and everything else coming together in one, fun place.</p>
<p>Rémi: Yeah. That would be a weird thing if these email inboxes were ever to leak as part of, I don’t know, any data leak. People would be wondering, "What is this inbox doing exactly? There’s been 20 emails just this past hour about this thing. I’m not sure why."</p>
<p>Rémi: But on top of that, we’ve got the chance to have email screenshot tools. So that’s kind of like browser stack for email. So where you just copy your HTML email code, just send your HTML email to, and then you will get screenshots on many, many different email clients. So you will get a quick preview of what your email looks like on Apple Mail, on iOS, on Gmail, on Outlook, on Windows, and all of this in just a few clicks. And it’s really a good way to make sure, as well, that your code works well in all these different environments.</p>
<p>Vitaly: And of course there is, CanIEmail.com, but which you wonderfully announced during the SmashingConf Freiburg. What was it like two years ago?</p>
<p>Rémi: Yeah, that was in Freiburg in 2019. So that’s already almost three years now.</p>
<p>Vitaly: Yeah. I mean, maybe you can also talk a bit about this and maybe any new features that are coming up and what it is. But for me personally, this is just a really ultimate great resource to just find out how well particular feature is supported. Think about it CanIUse.com, just for email?.</p>
<p>Rémi: That really was the idea. And I think that’s part of this sentiment that the email community is maturing and growing, is that we’ve got places like this where not only can we learn more publicly about what email clients do, what do they support and such things, but we can also contribute to it. And that was really, I think, the missing part. Because before that, we had a few websites that gave you the state of support for a few CSS properties in a few email clients, but it was most of the time just part of blog articles that were really outdated or on website that you couldn’t really interact with.</p>
<p>Rémi: So the idea with CanIEmail was really to make this available and open source and so that anyone can contribute to it. And if you see that an email client doesn’t support something, then you can report it on website and so everyone benefits from it, from them. So it’s really a great knowledge base that everyone can benefit from.</p>
<p>Vitaly: Yeah. Yeah, sure. Well, I do have to ask a question. I ask it every single time and I know what your answer is going to be like, but I do want to be... Oh, well these things have changed and I want you just to explain to our wonderful listeners here why we are where we are.</p>
<p>Vitaly: Now, obviously again, there is this large conversation about HTML email being such an outdated thing and HTML tables and everything and all of that. But we have this incredible, growing bloom of CSS features, grid, container queries, cascade layers. CSS is blooming like never. But when we are looking at this HTML email, we should be probably a bit of skeptical, I guess, of when we even would be able to use those things and do so reliably, and if it’s even an option at all.</p>
<p>Vitaly: So I’m wondering, and I think that many people are, should we be expecting at some point now in the future, at any point, really some sort of inter... Oh, this is a very difficult word... Interoperability sanitization around HTML emails and the features that are supported across Yahoo and Outlook. And with Edge moving, oh, well, not moving... It’s Outlook moving to Edge, no Edge moving into Outlook, That’s probably the better way of putting this.</p>
<p>Vitaly: Is it happening? Are we getting there or-</p>
<p>Rémi: So that’s a very interesting question because this is also a hot topic in the email world. Because I think it was just last month, there’s a new group that was formed in the past year that was announced and that’s called the Email Markup Consortium, so EMC for short. And basically, it’s a bunch of email developers and marketers and designers like me, who decided to gather together and try to really get things down to make email betters for everyone. So that means better for developers, with more standardizations and more uniformity across email clients. And also better for users because if email clients get support for all your roles, for example, or all your properties, then we can make some parts of emails more accessible for people who need it. And same thing goes for some things related to performance. If we get support to picture tags and responsive images, we could deliver more efficient and more performance email because we can have smaller image sizes and things like this.</p>
<p>Rémi: So this is really a work in progress. And I haven’t done much of it. So I think it’s mostly Marc Robbins and Alice Li, and I’m sorry I forgot his name, but a few people who are really active in the Email Geeks community. I think they are the main core members, but there are also a lot of members around who will contribute to the launch of this. And so now, it’s really about trying to catch the email clients’ developers attention and get them to improve things. And the good news is that there’s already been a few email clients that said they were interested in doing things better. So I know that there’s been a German email clients like this.</p>
<p>Rémi: So yeah, it’s really something new. So I’m really eager to see where this can go because there’s been attempts to improve things in the past, but that have never really caught on or that fell flat after a few months. So I know that this group has been around for a year secretly and trying to get things done, so it’s really great to see that now this is public and I’m really eager to see where this will lead. And hopefully it will lead to better standards and uniformity across email clients.</p>
<p>Vitaly: Oh, this does sound very exciting and it almost makes me feel like the future of HTML email is bright. However, I should probably curb my enthusiasm a little bit just because I don’t think we should be expecting, I don’t know, CSS sub grid and React or JavaScript getting into the world of HTML email anytime soon. Or am I wrong there?</p>
<p>Rémi: As for JavaScript, I think it’s nothing something you should expect and it’s really not something you should want because first, do you really want your emails to have flashy carousel and things like this? I’m not sure about that.</p>
<p>Vitaly: I mean, you can also do this with CSS and interactive, I don’t know.</p>
<p>Rémi: Yeah, yeah. But I’m not fully sure about this. But the main problem with JavaScript is really security because if you let any single line of JavaScript inside an email client, then some actors could really get your whole inbox and just download all your data and things like this with what you even knowing it. So there’s really a great danger with JavaScript. And so you should never expect full JavaScript support in email clients. But as for you mentioned a sub grid, and I think this is something that I haven’t heard of it exactly, but I think this is something we should expect in the next release of Apple Mail because if I’m not wrong, it’s coming in the next Safari.</p>
<p>Vitaly: Safari 16, yes.</p>
<p>Rémi: Yeah, iOS 16. And usually every time Apple adds some new features in WebKits and Safari, Apple Mail also benefits from it. So this is something that should come in Apple Mail this fall. So in some way if you really need to use CSS sub grids, you should be able to do it by the end of the year. But you just need to remind yourself that it will only work in Apple Mail from now. So, yeah.</p>
<p>Vitaly: But at the same time, I mean, you dismiss a wonderful, beautiful carousel just like that. However, I do remember vividly this time, maybe for a very brief period of time, while there was a huge excitement about this notion of interactive emails. And I think that still is, where you had AMP for Email?</p>
<p>Rémi: Yeah, AMP for email.</p>
<p>Vitaly: And you have all the beautiful carousels and everything else that you ever wanted, without having to write a single line of JavaScript because it would be just embedded into the platform and then you could reuse one of those components. Do you think that this is still a thing or where are we going with this?</p>
<p>Rémi: So yeah, interactive emails is still a thing and everyone talks about it every now and then. But there’s really two approaches to it. So the most traditional one is to use CSS and to ask CSS to use small interactions possible in CSS, like with the checked pseudo selector or hover pseudo selector. And from there you can do things where if you hover specific zone and some other content will appear, so you can do some image swap on hover or stuff like this. And we’ve checked, you can do much more detailed interactions where if you click on something, something else will appear on your email and you can do these sorts of things. So this is quite limitating because you are just limitating with these two sorts of interactions. But it does some decent support, like in Outlook.com, you can do things like this in Yahoo desktop one mail, as well. And Gmail does support hover interactions, as well. So that’s always interesting to do this for Gmail.</p>
<p>Rémi: But the hover approach, as you mentioned, was that Google announced a few years ago now AMP for email, and the idea was to bring the AMP JavaScript framework into the world of HTML emails, which is an interesting thought in the first place. But I think now it’s been quite a few years now that they did this, and I think now looking back that it was probably not the best approach to have because the way they did this is that they added a new mine type inside your email. So when you send an HTML email, you are not just really sending an HTML file to people, you’re sending an email code that’s actually a multi part code where there is a plain text version of the email, the HTML part, and all sorts of editor saying who you are sending your email to and things like this.</p>
<p>Rémi: And what Google did with AMP for email is that they brought a whole new AMP for email section in the email code like this. But this meant that if you wanted to send an AMP for email, then still if you want to send now an AMP for email email, for your ESP, or your email sending service, to support this specific mine types or else you cannot go code this and send it. So this was the whole email industry was really, really eager to look at who is going to support this and who will not. And a few years after, right now, it looks like most email providers and services didn’t really support this. So, for example, MailChimp doesn’t support this, so a lot of famous email services do not support AMP for email. So you cannot send for AMP for email easily.</p>
<p>Rémi: And I think another respect that makes AMP for email quite difficult is that even if you manage to send an AMP for email email, you need to get whitelisted from each clients that supports AMP for email. So if you want to send an AMP for email, you need to get whitelisted from Google so that people using Google desktop one mail will see it, and you need to get whitelisted from mail dot ?? that also supports it. And so it’s quite a difficult process, in my opinion. And it’s also quite opposite to the basic nature of email, which is a very open standard. Anyone can send email, any email clients can read email. So they try to act around the email format to get interactivity inside it, but I think that made things more difficult.</p>
<p>Rémi: So yeah, I still think that that can be exciting uses. I don’t know if you’ve ever used Google Docs and received an email where someone commented on your Google Docs and you can, inside Gmail, answer in the email, it’s an AMP for email email and you can answer right from your Gmail inbox to the comment that was left on your document. I think that’s an amazing use of AMP for email. But it’s hard to see how this could be made more popular. And, yeah, it’s hard to imagine this catching on and to find good uses like this for more traditional emails.</p>
<p>Vitaly: Well, maybe as we’re wrapping up here this point, I do have to ask one question that has been bothering me for a while. If there was a dream feature that you’d love HTML email to have, something that could be appearing in all the email clients everywhere tomorrow, if you just desired that to be in there, what would that feature be?</p>
<p>Rémi: So I think it wouldn’t necessarily be an HTML CSS feature, but I’d love to see something like reactions for emails, like you’ve got on Slack or on GitHub issues or just on messages on iOS and Android. And that would be a fun feature and I think that could spare a lot of emails because every time you need to just send an email to them saying "So, okay, I got this," you could just send a reaction and that would be way faster. But again, this would require a lot of standardization and implementation. So I think we are not really very hit at all.</p>
<p>Vitaly: If you, dear listener, would like to hear more from Rémi, you can find him on Twitter where he is HTeuMeuLeu, or we’ll have to put that link in the notes. And on his website at HTeuMeuLeu.com, as well. But also at SmashingConf, he often runs HTML email workshops. We will be discussing when the next one is coming up.</p>
<p>Vitaly: Do you have any parting words with our wonderful audience, Rémi, for today? We’ve been learning today all about HTML email, but what have you been learning from this session or in general? What are the parting words you’d like to hand over for people who might be excited to join this dark side of the world and design and build a HTML email together with you?</p>
<p>Rémi: Well, I hope that I convinced a few of you that yeah, email development is a thing and it can be. If you’re frustrated with how a website works nowadays, join us. It’s really fun in here. And yeah, there’s a whole community, as well. So yeah, feel free to reach me and just join us. There are dozens of us.</p>
<p>Vitaly: Of course. And if you are, dear friends, interested in the community of HTML Email Geeks, as far as I understood. Rémi, please correct me if I’m wrong. There are Email Geeks, there is a Slack channel. And you can also talk to Rémi and I’m sure that he’ll be very happy to point you to the group where all the cool kids talking about HTML emails hang out.</p>
<p>Rémi: Absolutely.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Drew McLellan)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3eaf789d-a932-4d1f-a811-3406e0c63644/smashing-podcast-episode-53.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[What’s New In Gatsby 2022?]]></title>
            <link>https://smashingmagazine.com/2022/09/new-gatsby-2022/</link>
            <guid>https://smashingmagazine.com/2022/09/new-gatsby-2022/</guid>
            <pubDate>Tue, 20 Sep 2022 08:00:00 GMT</pubDate>
            <description><![CDATA[Gatsby has evolved quite dramatically in the last two years. In this article, Paul Scanlon explains what Gatsby can do today, and how he used some of the new features when upgrading his personal website from Gatsby 2 to Gatsby 4.]]></description>
            <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.gatsbyjs.com/">Gatsby</a></p>
<p>You may have heard things about Gatsby a few years ago, and if you’re not keeping an eye on what we’re doing today, it’s entirely understandable for you to assume nothing has changed. </p>
<p>Naturally, given Gatsby operates in the JavaScript space, things have not only changed in the last few years, but they’ve also likely changed in the last few weeks. This is why I’ve written this article explaining what Gatsby can do today, and how I used some of our new features when upgrading my personal website: <a href="https://paulie.dev/">paulie.dev</a> from Gatsby 2 to Gatsby 4.</p>
<p>Let’s dive in! </p>
Server-Side Rendering (SSR)
<p>In the fall of 2021, Gatsby launched Gatsby 4 with <a href="https://www.gatsbyjs.com/docs/how-to/rendering-options/using-server-side-rendering/">SSR support</a>. I’ve used this on <a href="https://paulie.dev/dashboard/">paulie.dev/dashboard</a>. There are three features on my dashboard that are ideally suited to SSR</p>
<p>Now let’s dive into each of these and how Gatsby 4 enabled me to build them easily! </p>
<h3>All Reactions</h3>
<p>The reaction data is requested from a <a href="https://fauna.com/">Fauna Database</a>, and displayed in an interactive Accordion component. The reactions are first grouped by type (e.g. Happy, Cool, Tongue, and so on) and then listed by slug (URL), and a count is also displayed for each of the grouped properties. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/666de1ea-e517-4801-aed9-677f46634822/1-new-gatsby-2022.png" /></p>
<h3>Visitors By Country And Visitors By Location</h3>
<p>The Visitors By Country data is requested from the new <a href="https://developers.google.com/analytics/devguides/reporting/data/v1">Google Analytics Data API (GA4)</a> and listed in order by the amount of visits per country. <em>Visitors By Location</em> data is requested from the soon-to-be deprecated <a href="https://developers.google.com/analytics/devguides/reporting/core/v3">Google Analytics Core Reporting API (UA)</a>, and each location is plotted around a 3D globe that I created using <a href="https://github.com/mrdoob/three.js/">three.js</a> / <a href="https://github.com/pmndrs/react-three-fiber">@react-three/fiber</a>. It’s made interactive using Orbit Controls from <a href="https://github.com/pmndrs/drei">@react-three/drei</a>. You might be wondering why I didn’t plot the GA4 data around the globe, too. The lat/long required to plot the points isn’t part of the new GA4 API. See for yourself in the <a href="https://ga-dev-tools.web.app/ga4/dimensions-metrics-explorer/">GA4 Dimensions &amp; Metrics Explorer</a> (Built with Gatsby) </p>
<p>Here’s an <a href="https://github.com/googleanalytics/ga-dev-tools/issues/962">issue on the ga-dev-tools</a> GitHub Repo… fingers crossed it’ll get looked into at some point. 🤞</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f44dee2-9412-43cb-88e2-9051d789d54b/2-new-gatsby-2022.png" /></p>
<p>The data displayed in these two features is up to date as of the last time the page loaded. The Visitors By Country data will also be displayed if JavaScript is disabled in the browser. The Interactive globe, sadly, will not because three.js needs JavaScript. </p>
SSR/CSR Hybrid
<p>SSR is a good option for data that changes relatively quickly, but when using SSR, the data will only be "fresh" when a user first visits the page. If data were to change after the page has loaded, users would need to refresh the page to see the latest updates. This is where a hybrid SSR with CSR (Client-side request) can help. </p>
<h3>Latest Reaction</h3>
<p>The Latest Reaction Feature uses this hybrid SSR/CSR approach. If Javascript is disabled in the browser, the Latest Reaction is rendered using SSR. However, if JavaScript is enabled, I poll the Fauna database using a Gatsby <a href="https://www.gatsbyjs.com/products/cloud/functions/">Serverless Function</a> every 60 seconds and retrieve the latest reaction. This means the Latest Reaction is never more than 60 seconds out-of-date and will refresh without users needing to reload the page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2946d4ac-aa3c-4317-bc8a-bd28240fe9d7/6-new-gatsby-2022.png" /></p>
SSR/SSG Hybrid
<p>Again, whilst SSR is a good option, is it always needed? Some of the data changes that occur on my site happen because of something I change. E.g I write a new post, commit the changes and trigger a build. In this instance, I’ve opted for a hybrid SSR with SSG (Static Site Generation) approach. The page is still Server-side rendered but the charts are statically generated. (Yes, a page can be both SSR and SSG.)</p>
<h3>Data Charts</h3>
<p>I’ve used this hybrid approach and created 4 data visualizations to help me better understand the frequency with which I write and the kind of content I’m writing about, and who for. Each of these charts is populated by data from around my site that has been extracted from the frontmatter in my <code>.mdx</code> files and then queried from Gatsby’s data layer using GraphQL. </p>
<p>These charts allow me to plot or count the number of posts or articles I’ve posted each month over the last four years, the amount of posts or articles I’ve posted on each day of the week, the external publications I’ve written for (excluding Gatsby) and how many times, and then finally, a chart to show the total count for each tag used in all of the posts and articles.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5971b2d1-b602-48d2-b65e-711cd57b4696/3-new-gatsby-2022.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a94a9514-aa94-476b-943a-6b3f2d11dd59/4-new-gatsby-2022.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/83518778-2fcd-4a0e-b602-c7b255b58156/5-new-gatsby-2022.png" /></p>
<p>As mentioned, the <a href="https://paulie.dev/dashboard/">dashboard</a> of my site is Server-side rendered, but all of the above can be considered "static," and generally speaking, when folks refer to a static site, they’re probably talking about text and images on a page.</p>
<p>The SSG data for the charts can’t really go out of sync because each time I write a new post or article, I commit the <code>.mdx</code> file to <a href="https://github.com/PaulieScanlon/paulie-dev-2019">my repository</a>, which in turn kicks off a new build in <a href="https://www.gatsbyjs.com/products/cloud/hosting">Gatsby Cloud</a>.</p>
<p>This data can therefore be considered up to date as of the time the page loaded and likely won’t change during the duration of a page view. </p>
<p>The way I’ve created these charts uses the same technique, but because I like data, I chose to turn it into something more visually interesting. (fun fact, none of these charts were created using a charting library). </p>
<p>They are all hand-crafted using good ol' mathematics, the SVG element, and with help from the following folks and their great tutorials — all will work with JavaScript disabled in the browser! 💅. </p>
<ul>
<li><a href="https://heyoka.medium.com/scratch-made-svg-donut-pie-charts-in-html5-2c587e935d72">Donut Chart | Mark Caron</a></li>
<li><a href="https://www.headway.io/blog/building-a-svg-line-chart-in-react">Line Chart | Kelsey Leftwich</a></li>
<li><a href="https://egghead.io/lessons/javascript-build-a-bar-chart-with-svg-from-scratch-with-react">Bar Chart | Kyle Shevlin</a></li>
<li><a href="https://medium.com/@brianfoody/jogging-your-geometry-memory-by-building-an-svg-radar-chart-in-react-native-4aeee555809f">Radar Chart | Brian Foody</a></li>
</ul>
<p>I prefer this hand-crafted approach as I found I have more control over the final output. When I’ve used charting libraries in the past I always seem to be hacking over the top of something to get the desired look, and not all charting libraries will work if JavaScript is disabled in the browser.</p>
Deferred Static Generation (DSG)
<p>With the release of Gatsby 4 (October 2021), <a href="https://www.gatsbyjs.com/blog/whats-new-in-gatsby-4/#gatsby-skip-here">Gatsby announced DSG</a>. This page rendering method is similar to the tried and tested SSG approach (where pages are statically rendered on the server at build time), but the key difference is <strong>when</strong>. </p>
<p>Historically speaking, all Gatsby pages were SSG, and all pages would have to be built ahead of time. Whilst this often results in better SEO and a faster user experience than SSR, it can have adverse effects on build times. </p>
<p>Builds tend to fall into two main categories, and then there are a few subcategories for each:</p>
<ol>
<li>Local Development<ol>
<li>Content changes</li>
<li>Code changes<ol>
<li>Changes that affect every page (e.g. Header/Footer)</li>
<li>Changes that affect a single page</li>
</ol>
</li>
</ol>
</li>
<li>Production Deployment.<ol>
<li>Content changes</li>
<li>Code changes<ol>
<li>Changes that affect every page (e.g. Header/Footer)</li>
<li>Changes that affect a single page</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>When <strong>developing a Gatsby site locally</strong>, it’s not always advisable to build every page, fortunately, while developing locally you probably won’t need to build all the pages.</p>
<p>You can use this "trick" if you like, it works a treat!: <a href="https://paulie.dev/posts/2021/07/gatsby-slow-local-build-times/">How to "fix" Gatsby’s slow local build times</a>.</p>
<p>For <strong>production</strong>, however, Gatsby will need to build every page and if your content is changing quickly or you have multiple content creators working on your site, they’ll need to see the built page in a timely fashion. </p>
<p>Content creators typically won’t be using local <code>.mdx</code> files as I have on my site to write content, so Gatsby/Gatsby Cloud has a number of super fast preview options for popular <a href="https://support.gatsbyjs.com/hc/en-us/articles/1500000907821">CMSs such as Contentful, WordPress, Sanity, and many more!</a>.</p>
<p>Specifically, in the case of production sites and content changes, DSG can be configured to defer the static generation of any page or type of page. </p>
<p>In short, by using DSG, Gatsby hands control of Static Site Generation over to you, the developer. By choosing which pages to defer, you have more control over your build times. After all, you know your site better than anyone, so you’ll be able to create a custom defer strategy that works best for your needs. </p>
<h3>How Does Gatsby’s DSG Work?</h3>
<p>Let’s start with the output. A page created using DSG is the same as a page that has been created using SSG. Meaning: it’s a fully constructed HTML page that’s been pre-built and cached on the server ahead of time and is sent to the browser when a user visits that page. </p>
<p>It contains all the important metadata that Google needs to index your site and since the page is pre-built, it’s super fast and provides the best user experience for end users. </p>
<p><strong>When</strong> this page is rendered, however, is where DSG comes in. </p>
<p>If a page is deferred using DSG, then Gatsby won’t pre-build it when you deploy your site. Instead, the first time a user visits that page Gatsby will build it on the fly, or just-in-time, and then send it to the browser when it’s ready. How is this different from SSR, then? </p>
<h3>How Is DSG Different From SSR?</h3>
<p><strong>The above will only happen the first time a page is visited</strong>. When one user has visited a page once, the next user will be served an ahead-of-time pre-built SSG page from the cache, and every visitor after the first will experience the same speed as if the page were rendered using SSG. </p>
<p>With SSR, every visitor gets the same, sometimes slow experience, as they have to wait for the Server to generate the page before it’s sent to the browser. Typically, this leads development teams to optimize then cache headers, which is error-prone and oftentimes complex. This leads to pain for teams, and I prefer to minimize my own!</p>
<h3>When To Defer Using DSG</h3>
<p>I’ve seen some really interesting defer strategies from a number of our customers. Some choose to defer pages that aren’t visited that often and this strategy is determined using Google Analytics and page view statistics. Others defer based on the date a post or article has been published; some defer based on the popularity or stock level of a product. The options you have available to you, are quite frankly endless, each business has its own use case and Gatsby is flexible enough to accommodate any and all eventualities. </p>
<p>Here’s a <code>diff</code> of the classic <code>createPage</code>; with DSG, you could defer all but the latest 100 posts (<em>provided the posts have been sorted by date first, of course!</em>)</p>
<div>
 <pre><code>const posts = result.data.allMdx.nodes

posts.forEach((post, index) =&gt; {
  createPage({
    path: post.slug,
    component: path.join(__dirname, <code>./src/templates/posts.js</code>),
    context: {
      id: post.id,
    },
    // index is zero-based index
+    defer: index + 1 &gt; 100,
  })
})
</code></pre>
</div>

<p>...and for the curious, you can also enable DSG in our alternative page creation method: <a href="https://www.gatsbyjs.com/docs/reference/routing/file-system-route-api/">File System Route API</a>.</p>
<pre><code>export async function config() {
  return ({ params }) =&gt; {
    return {
      defer: // your defer strategy
    };
  };
}
</code></pre>

<p>This one small change typically results in a quite drastic reduction in build times. Of course, it depends upon the use case, but some of our customers have reduced their build times by over 50%, which means that each and every build gives them time back in their day to do more interesting things than wait for a build! </p>
Serverless Functions
<p>In the summer of 2021 <a href="https://changelog.gatsbyjs.io/#3.7.0">Gatsby released Functions</a>, I’ve used Functions for each of my; post, article, demo, or stream pages to capture visitors' reactions. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/801eab8d-9efe-49fe-99c6-a539ccd98f17/7-new-gatsby-2022.png" /></p>
<p>Using a set of SVG emojis, I invite users to leave a reaction to my content. When any of the emojis are clicked, I post to a Serverless Function from the client with the following payload.</p>
<pre><code>await fetch('/api/add-reaction', {
  method: 'POST',
  body: JSON.stringify({
    title: title,
    slug: slug,
    reaction: reaction,
    date: new Date()
  })
});
</code></pre>

<p>The Serverless Function, in turn, securely posts to a <a href="https://fauna.com/">Fauna</a> Database where the data is stored and ready to be retrieved and counted on the SSR page as mentioned above.  </p>
<pre><code>const faunadb = require('faunadb');

export default async function handler(req, res) {
  const { title, slug, reaction, date } = JSON.parse(req.body);

  const q = faunadb.query;

  const client = new faunadb.Client({ secret: process.env.FAUNA_KEY });

  try {
    await client.query(
      q.Create(q.Collection(`reactions_${process.env.NODE_ENV}`), {
        data: { title: title, slug: slug, reaction: reaction, date: date }
      })
    );
    res.status(200).json({ message: 'Lovely stuff, your reaction has been added!' });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
}
</code></pre>

Framework Improvements
<p>We’ve made improvements to the core framework by adding a few new APIs too! The new <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-script/">Script API</a>, available from <a href="https://changelog.gatsbyjs.io/#4.15.0">4.15.0</a>, among other things, comes with an <code>off-main-thread</code> script loading strategy which can be used to offload third-party scripts (such as Google Analytics) using <a href="https://www.builder.io/">Builder.io</a> ’s Partytown 🎉. </p>
<p>Offloading third-party scripts to a Web Worker is a nice way to speed up page loads. I wrote a little more about this on my site: <a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-script-api-with-google-analytics/">How to use Gatsby’s Script API with Google Analytics</a>.</p>
<p>We also have the new <a href="https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/">Head API</a>. Historically speaking, the recommended way to add metadata to your HTML page with Gatsby was to use <code>react-helmet</code> and <code>gatsby-plugin-react-helmet</code>. </p>
<p>Not anymore; from release <a href="https://www.gatsbyjs.com/docs/reference/release-notes/v4.19/">4.19.0</a>, this functionality is included in the framework. I’ve written a post detailing a common migration pattern if you’re interested to know more. <a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-head-api-with-mdx/">How to use Gatsby’s Head API with MDX</a>.</p>
<p><em>Stay tuned for Slices API 🍕. There’s an open RFC here on the Gatsby GitHub: <a href="https://github.com/gatsbyjs/gatsby/discussions/36339">RFC: Slices API</a>.</em></p>
Gatsby Cloud
<p>The Gatsby framework is free and open source and can be deployed on any number of hosting providers. We have created Gatsby Cloud as a convenient way to streamline your developer experience, with no additional plugins or configuration required. Put simply: it’s the best place to build, preview, and deploy your Gatsby site.  </p>
<p>Whilst many in the past have complained about Gatsby’s slow build speeds, I often ask, have you tried Gatsby Cloud?</p>
<p>Here are some build speed benchmarks for my site, which is currently ~110 pages. These are all  <code>.mdx</code> with the exception of the dashboard, which, as mentioned, is Server-side rendered. </p>
<p>Many of these pages contain code block syntax highlighting, featured and embedded images, embedded Tweets, Code Sandboxes, and YouTube videos. All of this adds to build times, not to mention MDX taking a little longer to transform than good ol' Markdown (<code>.md</code>).</p>
<p><strong>Note</strong>: <em>These results are from the free tier of <a href="https://www.gatsbyjs.com/products/cloud/hosting">Gatsby Cloud</a> (running in Pro mode for the 14-day trial).</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88413db5-d9a9-485a-8680-7b29d8bb9920/8-new-gatsby-2022.png" /></p>
<p>From bottom to top, I’ll explain the results:</p>
<ol>
<li><strong>Triggered by Gatsby Cloud</strong>: <code>03.22</code><br />This is the first time I deployed, and the site is built from a cold cache.</li>
<li><strong>Triggered by a manual Build</strong>: <code>03.48</code><br />This is a manual build, triggered by me, and is built from a cold cache.</li>
<li><strong>test: content change 1</strong>: <code>55s</code><br />This build was triggered by a commit to GitHub after making a change to one of my posts and is built from a warm cache. </li>
</ol>
<p>Cold cache builds usually take longer as Gatsby Cloud has nothing to intelligently compare "what’s changed." However, when there is a cache and the brains behind Gatsby Cloud do their thing, the build speeds are great! Personally, as a <em>hobbyist developer</em>, I’m fine with waiting 55 seconds for my site to be built and deployed.</p>
(Re) Introducing Gatsby, A Reactive Site Generator
<p>If the above isn’t enough to prove Gatsby is a lot more than simply a Static Site Generator, have a read of Gatsby’s CTO’s recent post that describes how Gatsby takes advantage of a reactive approach to regenerating a "static site" when content changes occur:  <a href="https://www.gatsbyjs.com/blog/re-introducing-gatsby-a-reactive-site-generator">(Re-) Introducing Gatsby, A Reactive Site Generator</a>.</p>
<p>TLDR; When a Gatsby 4 site is deployed to Netlify or Vercel, it can only behave as if it were an SSG. When deployed to Gatsby Cloud, it can behave as though it were an RSG, decreasing build speeds in static page re-generation by 100x! </p>
<p>In this video, Gatsby’s CTO Kyle Mathews demonstrates Gatsby Cloud reactively generating and then deploying a static page in <strong>~2 seconds</strong> and all from the push of a single button, our <a href="https://support.gatsbyjs.com/hc/en-us/articles/360055676874-CMS-Previews">CMS previews</a> have been able to do something similar for a while but never before has it been this fast!</p>
<p>Gatsby has evolved quite dramatically in the last two years. If your experience is with Gatsby 2, you may be surprised at how much faster and more flexible it has become with new page rendering modes and capabilities like DSG and SSR, and we’ve got way more updates to come!</p>
<p>I think you’ll like what the hard-working folks over here have been doing, and if you do have any questions, <a href="https://twitter.com/PaulieScanlon">please come say hello on Twitter</a>. 😊</p>
<h3>Further Reading</h3>
<ul>
<li>“<a href="https://github.com/gatsbyjs/gatsby/discussions/36609">Gatsby 5 Umbrella Discussion</a>,” Gatsby </li>
<li>“<a href="https://www.gatsbyjs.com/blog/re-introducing-gatsby-a-reactive-site-generator">(Re-) Introducing Gatsby, A Reactive Site Generator</a>,” Kyle Mathews</li>
<li>“<a href="https://www.gatsbyjs.com/blog/scripts-and-the-head-what-goes-where">Scripts and the Head: What Goes Where?</a>,” Ty Hopp</li>
<li>“<a href="https://www.gatsbyjs.com/blog/introducing-the-gatsby-head-api">Introducing the Gatsby Head API</a>,” Jude Agboola</li>
<li>“<a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-script-api-with-google-analytics/">How to use Gatsby’s Script API with Google Analytics</a>,” Paul Scanlon</li>
<li>“<a href="https://paulie.dev/posts/2022/07/how-to-use-gatsbys-head-api-with-mdx/">How to use Gatsby’s Head API with MDX</a>,” Paul Scanlon</li>
<li>“<a href="https://www.netlify.com/blog/2021/03/08/incremental-static-regeneration-its-benefits-and-its-flaws">Incremental Static Regeneration: Its Benefits and Its Flaws</a>,” Cassidy Williams</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Paul Scanlon)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34359e66-8433-419e-9ea1-ab4c3becac46/new-gatsby-2022.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Building A Retro Draggable Web Component With Lit]]></title>
            <link>https://smashingmagazine.com/2022/09/building-retro-draggable-web-component-using-lit/</link>
            <guid>https://smashingmagazine.com/2022/09/building-retro-draggable-web-component-using-lit/</guid>
            <pubDate>Mon, 19 Sep 2022 18:00:00 GMT</pubDate>
            <description><![CDATA[In today’s article, Andrico Karoulla explains how to create a cool draggable effect by listening to the drag events and writing some custom logic inside the handlers.]]></description>
            <content:encoded><![CDATA[<p>Back in the 90s, my first operating system was Windows. Now in the 2020s, I work primarily on building web applications using the browser. Over the years, the browser’s transformed into a wonderful and powerful tool that supports a wide world of rich applications. Many of these <a href="https://web.dev/ps-on-the-web/">applications</a>, with their complex interfaces and breadth of capabilities, would make even the hardiest turn-of-the-millennium programs blush.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4defce19-0fed-4347-a75d-cb2061af57db/social-media-image-draggable.png" /></p>
<p>Native browser features like web components are being adopted and used across the web by multinational companies and individual developers alike.</p>
<blockquote><p>In case you’re wondering if anyone is using Web Components:<br /><br />- GitHub<br />- YouTube<br />- Twitter (embedded tweets)<br />- SalesForce<br />- ING<br />- Photoshop web app<br />- Chrome devtools<br />- the complete Firefox UI<br />- Apple Music web client</p>— Danny Moerkerke (@dannymoerkerke) <a href="https://twitter.com/dannymoerkerke/status/1555682991413907456?ref_src=twsrc%5Etfw">August 5, 2022</a></blockquote> 



<p>So, why not embrace the technology of the present by paying homage to the interfaces of the past?</p>
<p>In this article, I hope to teach you just that by replicating the iconic <em>broken window</em> effect.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35ca0325-f2c6-46f8-a707-fbb2ef38bdb8/1-creating-draggable-gifs-web-components-lit.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35ca0325-f2c6-46f8-a707-fbb2ef38bdb8/1-creating-draggable-gifs-web-components-lit.gif" /></a>

<p>We’ll be using <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">web components</a>, the browser’s native component model, to build out this interface. We’ll also use the <a href="https://lit.dev/">Lit</a> library, which simplifies the native web component APIs.</p>
<p>A lot of the concepts I talk about here are lessons I’ve learnt from building <a href="https://a2000.netlify.app/">A2k</a>, a UI library designed to help you create retro UI with modern tooling.</p>
<p>In this article, we’ll cover:</p>
<ul>
<li>the basics of creating web components using Lit;</li>
<li>how to easily customize your component’s behavior using Lit’s built-in tools;</li>
<li>how to encapsulate reusable functionality;</li>
<li>how to dispatch and respond to events using advanced data flow methods.</li>
</ul>
<p>It’s worth knowing your core HTML, CSS, and some basic JavaScript to follow along with this tutorial, but no framework-specific knowledge is required.</p>
Getting Started
<p>You can follow allow along in the browser using <a href="http://githubblitz.com/andrico1234/draggable-window-smashing-article">StackBlitz</a>. </p>
<p>Once StackBlitz finishes setting up, you should see the following in the browser window:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5877c236-84f9-4a6a-a0c1-29c9ce4b5acb/2-creating-draggable-gifs-web-components-lit.png" /></p>
<p><strong>Note:</strong> <em>If you don’t want to use StackBlitz, you can clone the <a href="https://www.notion.so/Two-object-pronouns-23d61b1fcb9a487bad6540e94b7e058d">repo</a> and run the instructions inside of the <a href="http://README.md"><code>README.md</code></a> file. You can also use the <a href="https://marketplace.visualstudio.com/items?itemName=runem.lit-plugin">Lit VSCode</a> for syntax highlighting and features.</em></p>
<p>Next, open up the project in your editor of choice. Let’s have a quick look to see what our starter code looks like.</p>
<h3><code>index.html</code></h3>
<p>We have a very barebones HTML file that does little more than import some CSS and a JavaScript file.</p>
<p>You may have also spotted a brand new element, the <code>a2k-window</code> element. You won’t have seen this before because this is the custom element we’ll be building ourselves. Since we haven’t created and registered this component yet, the browser will fall back to display the inner HTML content.</p>
<h3>The Various <code>.js</code> Files</h3>
<p>I’ve added a little boilerplate for some of the components and functions, but we’ll fill in the gaps over the course of this article(s). I’ve imported all of the necessary first and third-party code we’ll use throughout this article.</p>
<h3>Bonus: Fonts</h3>
<p>I’ve also added some retro fonts for fun! It’s a wonderful MS-2000-inspired font created by <a href="https://www.notion.so/Smashing-Article-Draft-cd2335ccbe004b84a177c85d9ef966bd">Lou</a>. You can download it and use it in your own projects if you’re looking to inject a little millennium flavor into your designs.</p>
Part 1: Building Our First Web Component
<h3>Writing Our Markup</h3>
<p>The first thing we want to do is get a convincing-looking window element going. With just a few lines of code, we’ll have the following.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ef15616-ec29-43bb-9680-fe4e09860065/3-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Let’s start by jumping into our <code>a2k-window.js</code> file. We’ll write a little boilerplate to get our component up and running.</p>
<p>We’ll need to define a class that extends Lit’s <code>LitElement</code> base class. By extending from <code>LitElement</code>, our class gets the ability to manage reactive states and properties. We also need to implement a <code>render</code> function on the class that returns the markup to render.</p>
<p>A really basic implementation of a class will look like this:</p>
<pre><code>class A2kWindow extends LitElement {
  render() {
    return html`
      &lt;div id="window"&gt;
        &lt;slot&gt;&lt;/slot&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>There are two things worth noting:</p>
<ul>
<li>We can specify an element ID which is then encapsulated within the web component. Just like the top-level document, duplicate IDs are not allowed within the same component, but other web components or external DOM elements can use the same ID.</li>
<li>The <code>slot</code> element is a handy tool that can render custom markup passed down from the parent. For those familiar with React, we can liken it to a React portal that renders where you set the <code>children</code> prop. There’s more that you can do with it, but that’s beyond the scope of this article.</li>
</ul>
<p>Writing the above doesn’t make our web component available in our HTML. We’ll need to define a new custom element to tell the browser to associate this definition with the <code>a2k-window</code> tag name. Underneath our component class, write the following code:</p>
<pre><code>customElements.define("a2k-window", A2kWindow);
</code></pre>

<p>Now let’s jump back to our browser. We should expect to see our new component render to the page, but… </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5f34246-fe74-4d8b-bf29-fa2b20516392/4-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Even though our component has been rendered, we see some plain unstyled content. Let’s go ahead and add some more HTML and CSS:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`
    :host {
      font-family: var(--font-primary);
    }

    #window {
      width: min(80ch, 100%);
    }

        #panel {
      border: var(--border-width) solid var(--color-gray-400);
      box-shadow: 2px 2px var(--color-black);
      background-color: var(--color-gray-500);
    }

    #draggable {
      background: linear-gradient(
        90deg,
        var(--color-blue-100) 0%,
        var(--color-blue-700) 100%
      );
      user-select: none;
    }

    #draggable p {
      font-weight: bold;
      margin: 0;
      color: white;
      padding: 2px 8px;
    }

    [data-dragging="idle"] {
      cursor: grab;
    }

    [data-dragging="dragging"] {
      cursor: grabbing;
    }
  `;

  render() {
    return html`
      &lt;div id="window"&gt;
        &lt;div id="panel"&gt;
          &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>There are a couple of things worth noting in the above code:</p>
<ul>
<li>We define the styles scoped to this custom element via the <code>static styles</code> property. Due to how styles encapsulation works, our component won’t be affected by any external styles. However, we can use the CSS variables we’ve added in our <code>styles.css</code> to apply styles from an external source.</li>
<li>I’ve added some styles for DOM elements that don’t exist just yet, but we’ll add them soon.</li>
</ul>
<p><strong>A note on styles:</strong> <em>Styling in Shadow DOM is a topic too large to delve into in this article. To learn more about styling in Shadow DOM, you can refer to the <a href="https://lit.dev/docs/components/styles/#shadow-dom">Lit documentation</a>.</em></p>
<p>If you refresh, you should see the following:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e650e33-e9a3-4e87-a120-000361792da0/5-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Which is starting to look more like our Windows-inspired web component. 🙌</p>
<p><strong>Pro tip:</strong> <em>If you’re not seeing the browser apply the changes you’re expecting. Open up the browser’s dev tools. The browser might have some handy error messages to help you work out where things are failing.</em></p>
<h3>Making Our Web Component Customizable</h3>
<p>Our next step is to create the heading for our window component. A core feature of web components is HTML element properties. Instead of hardcoding the text content of our window’s heading, we can make it a property input on the element. We can use Lit to make our properties <a href="https://lit.dev/docs/components/properties/"><em>reactive</em></a>, which triggers lifecycle methods when changed.</p>
<p>To do this, we need to do three things:</p>
<ol>
<li>Define the reactive properties,</li>
<li>Assign a default value,</li>
<li>Render the value of the reactive property to the DOM.</li>
</ol>
<p>First off, we need to specify the reactive properties we want to enable for our component:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {
    heading: {},
  };

  render() {...}
}
</code></pre>

<p>We’ll do this by specifying the static <code>properties</code> object on our class. We then specify the names of the properties we want, along with some options passed through as an object. Lit’s default options handle string property conversion by default. This means we don’t need to apply any options and can leave <code>heading</code> as an empty object.</p>
<p>Our next step is to assign a default value. We’ll do this within the component’s constructor method.</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {...};

    constructor() {
    super();

    this.heading = "Building Retro Web Components with Lit";
  }

  render() {...}
}
</code></pre>

<p><strong>Note:</strong> <em>Don’t forget to call <code>super()</code>!</em></p>
<p>And finally, let’s add a little more markup and render the value to the DOM:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {...};

    constructor() {...}

    render() {
    return html`
      &lt;div id="window"&gt;
        &lt;div id="panel"&gt;
          &lt;div id="draggable"&gt;
            &lt;p&gt;${this.heading}&lt;/p&gt;
          &lt;/div&gt;
          &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>With that done, let’s jump back to our browser and see how everything looks:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bad9523d-a9f3-44d0-9901-89634263cb37/6-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Very convincing! 🙌</p>
<h3>Bonus</h3>
<p>Apply a custom heading to the <code>a2k-element</code> from the <code>index.html</code> file.</p>
<h3>Brief breather 😮‍💨</h3>
<p>It’s wonderful to see how easily we can build UI from 1998 with modern primitives in 2022!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61ad2565-326c-4769-8631-19e41ba3b2a3/7-creating-draggable-gifs-web-components-lit.png" /></p>
<p>And we haven’t even gotten to the fun parts yet! In the next sections, we’ll look into using some of Lit’s intermediate concepts to create drag functionality in a way that’s reusable across custom components.</p>
Part 2: Making Our Component Draggable
<p>This is where things get a little tricky! We’re moving into some intermediate Lit territory, so don’t sweat if not everything makes perfect sense.</p>
<p>Before we start writing the code, let’s have a quick rundown of the concepts we’ll be playing with.</p>
<h3>Directives</h3>
<p>As you’ve seen, when writing our HTML templates in Lit, we write them inside the <code>html</code> literals tag. This allows us to use JavaScript to alter the behavior of our templates. We can do things like evaluating expressions:</p>
<pre><code>html`&lt;p&gt;${this.heading}&lt;/p&gt;`
</code></pre>

<p>We can return specific templates under certain conditions:</p>
<pre><code>html`&lt;p&gt;
${this.heading ? this.heading : “Please enter a heading”}
&lt;/p&gt;`
</code></pre>

<p>There will be times when we’ll need to step out of the normal rendering flow of Lit’s rendering system. You might want to render something at a later time or extend Lit’s template functionality. This can be achieved through the use of <em>directives.</em> Lit has a handful of built-in directives.</p>
<p>We’ll use the <code>styleMap</code> directive, which allows us to apply styles directly to an element via a JavaScript object. The object is then transformed into the element’s inline styles. This will come in handy as we adjust the position of our window element since the element’s position is managed by CSS properties. In short, <code>styleMap</code> turns:</p>
<div>
<pre><code>const top = this.top // a variable we could get from our class, a function, or anywhere

styleMap({
    position: "absolute",
    left: "100px",
    top
})
</code></pre>
</div>

<p>into </p>
<pre><code>"position: absolute; top: 50px; left: 100px;"
</code></pre>

<p>Using <code>styleMap</code> makes it easy to use variables to change styles.</p>
<h3>Controllers</h3>
<p>Lit has a number of handy ways to compose complex components from smaller, reusable pieces of code. </p>
<p>One way is to build components from lots of smaller components. For example, an icon button that looks like this:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/13809bf9-f0ea-4a93-8b29-054079ce3ebf/8-creating-draggable-gifs-web-components-lit.png" /></p>
<p>The markup may have the following markup:</p>
<pre><code>class IconButton extends LitElement {
    render() {
        return html`
            &lt;a2k-button&gt;
                &lt;a2k-icon icon="windows-icon"&gt;&lt;/a2k-icon&gt;
                &lt;slot&gt;&lt;/slot&gt;
            &lt;/a2k-button&gt;
        `
    }
}
</code></pre>

<p>In the above example, we’re composing our <code>IconButton</code> out of two pre-existing web components.</p>
<p>Another way to compose complex logic is by encapsulating specific state and behavior into a class. Doing so allows us to decouple specific behaviors from our markup. This can be done through the use of controllers, a cross-framework way to share logic that can trigger re-renders in a component. They also have the benefit of hooking into the component’s lifecycle.</p>
<p><strong>Note:</strong> <em>Since controllers are</em> <strong><em>cross-framework,</em></strong> <em>they can be used in React and Vue with small adapters.</em></p>
<p>With controllers, we can do some cool things, like managing the drag state and position of its host component. Interestingly enough, that’s exactly what we plan to do!</p>
<p>While a controller might sound complicated, if we analyse its skeleton, we’ll be able to make sense of what it is and what it does.</p>
<pre><code>export class DragController {
    x = 0;
    y = 0;
    state = "idle"

    styles = {...}

  constructor(host, options) {
    this.host = host;
    this.host.addController(this);
  }

  hostDisconnected() {...}

  onDragStart = (pointer, ev) =&gt; {...};

  onDrag = (_, pointers) =&gt; {...};
}
</code></pre>

<p>We begin by initialising our controller by registering it with the host component and storing a reference to the host. In our case, the host element will be our <code>a2k-window</code> component.</p>
<p>Once we’ve done that, we can hook into our host’s lifecycle methods, like <code>hostConnected</code>, <code>hostUpdate</code>, <code>hostUpdated</code>, <code>hostDisconnected</code>, and so on, to run drag-specific logic. In our case, we’ll only need to hook into <code>hostDisconnected</code> for clean-up purposes.</p>
<p>Finally, we can add our own methods and properties to our controller that will be available to our host component. Here we’re defining a few private methods that will get called during the drag actions. We’re also defining a few properties that our host element can access.</p>
<p>When <code>onDrag</code> and <code>onDragStart</code> functions are invoked, we update our <code>styles</code> property and request that our host component re-renders. Since our host component turns this style object into inline CSS (via the <code>styleMap</code> directive), our component will apply the new styles.</p>
<p>If this sounds complicated, hopefully, this flowchart better visualises the process.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5d4a690-2dfd-459b-badc-0a420d69fe5e/9-creating-draggable-gifs-web-components-lit.png" /></p>
<h3>Writing Our Controller</h3>
<p>Arguably the most technical part of the article, let’s wire up our controller!</p>
<p>Let’s begin by completing the initialisation logic of our controller:</p>
<pre><code>export class DragController {
    x = 0;
    y = 0;
    state = "idle";

  styles = {
    position: "absolute",
    top: "0px",
    left: "0px",
  };

  constructor(host, options) {
        const {
      getContainerEl = () =&gt; null,
      getDraggableEl = () =&gt; Promise.resolve(null),
    } = options;

    this.host = host;
    this.host.addController(this);
    this.getContainerEl = getContainerEl;

    getDraggableEl().then((el) =&gt; {
      if (!el) return;

      this.draggableEl = el;
      this.init();
    });
  }

    init() {...}

  hostDisconnected() {...}

  onDragStart = (pointer) =&gt; {...};

  onDrag = (_, pointers) =&gt; {...};
}
</code></pre>

<p>The main difference between this snippet and the skeleton from earlier is the addition of the options argument. We allow our host element to provide callbacks that give us access to two different elements: the container and the draggable element. We’ll use these elements later on to calculate the correct position styles.</p>
<p>For reasons I’ll touch on later, <code>getDraggableEl</code> is a promise that returns the draggable element. Once the promise resolves, we store the element on the controller instance, and we’ll fire off the initialize function, which attaches the drag event listeners to the draggable element.</p>
<pre><code>init() {
  this.pointerTracker = new PointerTracker(this.draggableEl, {
    start: (...args) =&gt; {
      this.onDragStart(...args);
      this.state = "dragging";
      this.host.requestUpdate();
      return true;
    },
    move: (...args) =&gt; {
      this.onDrag(...args);
    },
    end: (...args) =&gt; {
      this.state = "idle";
      this.host.requestUpdate();
    },
  });
}
</code></pre>

<p>We’ll use the <code>PointerTracker</code> library to track pointer events easily. It’s much more pleasant to use this library than to write the cross-browser, cross-input mode logic to support pointer events.</p>
<p><code>PointerTracker</code> requires two arguments, <code>draggableEl</code>, and an object of functions that act as the event handlers for the dragging events:</p>
<ul>
<li><code>start</code>: gets invoked when the pointer is pressed down on <code>draggableEl</code>;</li>
<li><code>move</code>: gets invoked when dragging <code>draggableEl</code> around;</li>
<li><code>end</code>: gets invoked when we release the pointer from <code>draggableEl</code>.</li>
</ul>
<p>For each, we’re either updating the dragging <code>state</code>, invoking our controller’s callback, or both. Our host element will use the <code>state</code> property as an element attribute, so we trigger <code>this.host.requestUpdate</code> to ensure the host re-renders. </p>
<p>Like with the <code>draggableEl</code>, we assign a reference to the <code>pointerTracker</code> instance to our controller to use later.</p>
<p>Next, let’s start adding logic to the class’s functions. We’ll start with the <code>onDragStart</code> function:</p>
<pre><code>onDragStart = (pointer, ev) =&gt; {
  this.cursorPositionX = Math.floor(pointer.pageX);
  this.cursorPositionY = Math.floor(pointer.pageY);
};
</code></pre>

<p>Here we’re storing the cursor’s current position, which we’ll use in the <code>onDrag</code> function.</p>
<pre><code>onDrag = (_, pointers) =&gt; {
    this.calculateWindowPosition(pointers[0]);
};
</code></pre>

<p>When the <code>onDrag</code> function is called, it’s provided a list of the active pointers. Since we’ll only cater for one window being dragged at a time, we can safely just access the first item in the array. We’ll then send that through to a function that determines the new position of the element. Strap in because it’s a little wild:</p>
<div>
<pre><code>calculateWindowPosition(pointer) {
  const el = this.draggableEl;
  const containerEl = this.getContainerEl();

  if (!el || !containerEl) return;

  const oldX = this.x;
  const oldY = this.y;

  //JavaScript’s floats can be weird, so we’re flooring these to integers.
  const parsedTop = Math.floor(pointer.pageX);
  const parsedLeft = Math.floor(pointer.pageY);

  //JavaScript’s floats can be weird, so we’re flooring these to integers.
  const cursorPositionX = Math.floor(pointer.pageX);
  const cursorPositionY = Math.floor(pointer.pageY);

  const hasCursorMoved =
    cursorPositionX !== this.cursorPositionX ||
    cursorPositionY !== this.cursorPositionY;

  // We only need to calculate the window position if the cursor position has changed.
  if (hasCursorMoved) {
    const { bottom, height } = el.getBoundingClientRect();
    const { right, width } = containerEl.getBoundingClientRect();

    // The difference between the cursor’s previous position and its current position.
    const xDelta = cursorPositionX - this.cursorPositionX;
    const yDelta = cursorPositionY - this.cursorPositionY;

    // The happy path - if the element doesn’t attempt to go beyond the browser’s boundaries.
    this.x = oldX + xDelta;
    this.y = oldY + yDelta;

    const outOfBoundsTop = this.y &lt; 0;
    const outOfBoundsLeft = this.x &lt; 0;
    const outOfBoundsBottom = bottom + yDelta &gt; window.innerHeight;
    const outOfBoundsRight = right + xDelta &gt;= window.innerWidth;

    const isOutOfBounds =
      outOfBoundsBottom ||
      outOfBoundsLeft ||
      outOfBoundsRight ||
      outOfBoundsTop;

    // Set the cursor positions for the next time this function is invoked.
    this.cursorPositionX = cursorPositionX;
    this.cursorPositionY = cursorPositionY;

    // Otherwise, we force the window to remain within the browser window.
    if (outOfBoundsTop) {
      this.y = 0;
    } else if (outOfBoundsLeft) {
      this.x = 0;
    } else if (outOfBoundsBottom) {
      this.y = window.innerHeight - height;
    } else if (outOfBoundsRight) {
      this.x = Math.floor(window.innerWidth - width);
    }

    this.updateElPosition();
    // We trigger a lifecycle update.
    this.host.requestUpdate();
  }
}

updateElPosition(x, y) {
    this.styles.transform = <code>translate(${this.x}px, ${this.y}px)</code>;
}
</code></pre>
</div>

<p>It’s certainly not the prettiest code, so I’ve tried my best to annotate the code to clarify what’s going on.</p>
<p>To summarize:</p>
<ul>
<li>When the function gets invoked, we check to see that both the <code>draggableEl</code> and <code>containerEl</code> are available.</li>
<li>We then access the element’s position and the cursor’s position.</li>
<li>We then calculate whether the cursor’s moved. If it hasn’t, we do nothing.</li>
<li>We set the new <code>x</code> and <code>y</code> position of the element.</li>
<li>We determine whether or not the element tries to break the window’s bounds.<ul>
<li>If it does, then we update the <code>x</code> or <code>y</code> position to bring the element back within the confines of the window.</li>
</ul>
</li>
<li>We update <code>this.styles</code> with the new <code>x</code> and <code>y</code> values.</li>
<li>We then trigger the host’s update lifecycle function, which causes our element to apply the styles.</li>
</ul>
<p>Review the function several times to ensure you’re confident about what it does. There’s a lot going on, so don’t sweat if it doesn’t soak in straight away.</p>
<p>The <code>updateElPosition</code> function is a small helper in the class to apply the styles to the <code>styles</code> property.</p>
<p>We also need to add a little clean-up to ensure that we stop tracking if our component happens to disconnect while being dragged.</p>
<pre><code>hostDisconnected() {
  if (this.pointerTracker) {
    this.pointerTracker.stop();
  }
}
</code></pre>

<p>Finally, we need to jump back to our <code>a2k-window.js</code> file and do three things:</p>
<ul>
<li>initialize the controller,</li>
<li>apply the position styles,</li>
<li>track the drag state.</li>
</ul>
<p>Here’s what these changes look like:</p>
<pre><code>class A2kWindow extends LitElement {
  static styles = css`...`;

  static properties = {...};

  constructor() {...}

  drag = new DragController(this, {
    getContainerEl: () =&gt; this.shadowRoot.querySelector("#window"),
        getDraggableEl: () =&gt; this.getDraggableEl(),
  });

    async getDraggableEl() {
        await this.updateComplete;
        return this.shadowRoot.querySelector("#draggable");
    }

  render() {
    return html`
      &lt;div id="window" style=${styleMap(this.drag.styles)}&gt;
        &lt;div id="panel"&gt;
          &lt;div id="draggable" data-dragging=${this.drag.state}&gt;
            &lt;p&gt;${this.heading}&lt;/p&gt;
          &lt;/div&gt;
          &lt;slot&gt;&lt;/slot&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}
</code></pre>

<p>We’re using <code>this.shadowRoot.querySelector(selector)</code> to query our shadow DOM. This allows us controller to access DOM elements across shadow DOM boundaries.</p>
<p>Because we plan to dispatch events from our dragging element, we should wait until after rendering has completed, hence the <code>await this.updateComplete</code> statement.</p>
<p>Once this is all completed, you should be able to jump back into the browser and drag your component around, like so:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/589f0abc-febe-4746-93a6-c21eef0dcdc4/10-creating-draggable-gifs-web-components-lit.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/589f0abc-febe-4746-93a6-c21eef0dcdc4/10-creating-draggable-gifs-web-components-lit.gif" /></a>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/589f0abc-febe-4746-93a6-c21eef0dcdc4/10-creating-draggable-gifs-web-components-lit.gif">Large preview</a>)



Part 3: Creating The <em>Broken Window</em> Effect
<p>Our component is pretty self-contained, which is great. We could use this window element anywhere on our site and drag it without writing any additional code.</p>
<p>And since we’ve created a reusable controller to handle all of the drag functionality, we can add that behavior to future components like a desktop icon.</p>
<p>Now let’s start building out that cool <em>broken window</em> effect when we drag our component.</p>
<p>We could bake this behavior into the window element itself, but it’s not really useful outside of a specific use case, i.e., making a cool visual effect. Instead, we can get our drag controller to emit an event whenever the <code>onDrag</code> callback is invoked. This means that anyone using our component can listen to the drag event and do whatever they want.</p>
<p>To create the broken window effect, we’ll need to do two things:</p>
<ul>
<li>dispatch and listen to the drag event;</li>
<li>add the broken window element to the DOM.</li>
</ul>
<h3>Dispatching and listening to events in Lit</h3>
<p>Lit has a handful of different ways to handle events. You can add event listeners directly within your templates, like so:</p>
<pre><code>handleClick() {
    console.log("Clicked");
}

render() {
    html`&lt;button @click="${this.handleClick}"&gt;Click me!&lt;/button&gt;`
}
</code></pre>

<p>We’re defining the function that we want to fire on button click and passing it through to the element which will be invoked on click. This is a perfectly viable option, and it’s the approach I’d use if the element and callback are located close together.</p>
<p>As I mentioned earlier, we won’t be baking the <em>broken window</em> behavior into the component, as passing down event handlers through a number of different web components would become cumbersome. Instead, we can leverage the native window event object to have a component dispatch an event and have any of its ancestors listen and respond. Have a look at the following example:</p>
<pre><code>// Event Listener
class SpecialListener extends LitElement {
    constructor() {
        super()

        this.specialLevel = '';
        this.addEventListener('special-click', this.handleSpecialClick)
    }

    handleSpecialClick(e) {
        this.specialLevel = e.detail.specialLevel;
    }

    render() {
        html`&lt;div&gt;
            &lt;p&gt;${this.specialLevel}&lt;/p&gt;
            &lt;special-button&gt;
        &lt;/div&gt;`
    }
}

// Event Dispatcher
class SpecialButton extends LitElement {
    handleClick() {
        const event = new CustomEvent("special-click", {
      bubbles: true,
      composed: true,
      detail: {
                specialLevel: 'high',
            },
    });

        this.dispatchEvent(event);
    }

    render() {
        html`&lt;button @click="${this.handleClick}"&gt;Click me!&lt;/button&gt;`
    }
}
</code></pre>

<p><strong>Note:</strong> <em>Don’t forget to check out the MDN resources if you need a refresher on native <a href="https://developer.mozilla.org/en-US/docs/Web/Events">DOM Events</a>.</em></p>
<p>We have two components, a listener and a dispatcher. The listener is a component that adds an event listener to itself. It listens to the <code>special-click</code> event and outputs the value the event sends through.</p>
<p>Our second component, <code>SpecialButton</code>, is a descendant of <code>SpecialListener</code>. It’s a component that dispatches an event on click. The code inside of the <code>handleClick</code> method is interesting, so let’s understand what’s going on here:</p>
<ul>
<li>We create an event object by creating an instance of <code>CustomEvent</code>.</li>
<li>The first argument of <code>CustomEvent</code> is the name of the event we want to dispatch. In our case, it’s <code>special-click</code>.</li>
<li>The second argument of <code>CustomEvent</code> is the options argument. Here we’re setting three options: <code>bubbles</code>, <code>composed</code>, and <code>detail</code>.</li>
<li>Setting <code>bubbles</code> to true allows our event to flow up the DOM tree to the component’s ancestors.</li>
<li>Setting <code>composed</code> to true allows our event to propagate outside our element’s shadow root.</li>
<li>Finally, we dispatch our event by firing off <code>this.dispatchEvent(event)</code>.</li>
</ul>
<p>Once this happens, the listener will react to the event by invoking the <code>handleSpecialClick</code> callback.</p>
<p>Let’s go ahead and dispatch events from our drag controller. We’ll want to create an instance of <code>CustomEvent</code> with an event name of <code>window-drag</code>. We’ll want to set the <code>composed</code> and <code>bubbles</code> options to true.</p>
<p>We’ll then create the <code>detail</code> option with a single property: <code>containerEl</code>. Finally, we’ll want to dispatch the event.</p>
<p>Go ahead and try to implement this logic inside of the <code>onDrag</code> function.</p>
<p><strong>Hint:</strong> <em>We’ll want to dispatch the event from our dragging element. Don’t forget that we saved a reference to the element on the controller’s instance.</em></p>
<p>Before I go ahead and spoil the answer, let’s get our listener set up. That way, we’ll be able to determine whether we’ve wired up our event dispatcher correctly.</p>
<p>Jump into the <code>script.js</code> file and add the following lines:</p>
<pre><code>function onWindowDrag() {
    console.log('dragging');
}

window.addEventListener('window-drag', onWindowDrag);</code></pre>

<p>You can now jump into your browser, drag your element, and view the logs in the console. </p>
<p>You can check your solution against mine below:</p>
<pre><code>onDrag = (_, pointers) =&gt; {
  this.calculateWindowPosition(pointers[0]);

    const event = new CustomEvent("window-drag", {
      bubbles: true,
      composed: true,
      detail: {
        containerEl: this.getContainerEl(),
      },
    });

  this.draggableEl.dispatchEvent(event);
};
</code></pre>

<p>Great! The only thing left to do is add the broken window element to the DOM every time we receive a drag event.</p>
<p>We’ll need to create a new broken window component that looks like the following:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1bbf56a9-99c8-4c93-8def-e8a4c3c28cba/11-creating-draggable-gifs-web-components-lit.png" /></p>
<p>Our broken window should look a little more than our regular window without any content. The markup for the component is going to be very straightforward. We’ll have nested <code>divs</code>, each responsible for different aspects of the element:</p>
<ul>
<li>The outer-most <code>div</code> will be responsible for positioning.</li>
<li>The middle <code>div</code> will be responsible for appearance.</li>
<li>The inner-most <code>div</code> will be responsible for width and height.</li>
</ul>
<p>Here’s the entire code for our broken window. Hopefully, by this point, nothing in the snippet below should be new to you:</p>
<pre><code>export class BrokenWindow extends LitElement {
  static properties = {
    height: {},
    width: {},
    top: {},
    left: {},
  };

  static styles = css`
    #outer-container {
      position: absolute;
      display: flex;
    }

    #middle-container {
      border: var(--border-width) solid var(--color-gray-400);
      box-shadow: 2px 2px var(--color-black);
      background-color: var(--color-gray-500);
    }
  `;

  render() {
    return html`
      &lt;div
        style=${styleMap({
          transform: `translate(${this.left}px, ${this.top}px)`,
        })}
        id="outer-container"
      &gt;
        &lt;div id="middle-container"&gt;
          &lt;div
            style=${styleMap({
              width: `${this.width}px`,
              height: `${this.height}px`,
            })}
          &gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    `;
  }
}

window.customElements.define("a2k-broken-window", BrokenWindow);
</code></pre>

<p>Once you’ve created the component, we can check that it’s working correctly by adding the following to our <code>index.html</code> file:</p>
<div>
<pre><code>&lt;a2k-broken-window top="100" left="100" width="100" height="100"&gt;&lt;/a2k-broken-window&gt;
</code></pre>
</div>

<p>If you see the following in your browser, then congratulations! Your broken window is working perfectly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd8774e3-6cd4-4e9b-ac1a-fae386468caf/12-creating-draggable-gifs-web-components-lit.png" /></p>
<h3>Bonus</h3>
<p>You may have noticed that both our <code>a2k-window</code> component and our <code>a2k-broken-window</code> component share a lot of the same styles. We can leverage one of Lit’s composition techniques to abstract out the repeated markup and styles into a separate component, <code>a2k-panel</code>. Once we’ve done that, we can reuse <code>a2k-panel</code> in our window components.</p>
<p>I won’t give away the answer here, but if you want to give it a shot, the <a href="https://lit.dev/docs/composition/component-composition/">Lit documentation</a> will help if you get stuck.</p>
<h3>Rendering Our Broken Window On Drag</h3>
<p>We’re at the last stop on our retro web component journey.</p>
<p>To create our broken window effect, we only need to do a handful of things:</p>
<ul>
<li>Listen to the <code>window-drag</code> event;</li>
<li>Get access to the container’s styles;</li>
<li>Create a new <code>a2k-broken-window</code> element;</li>
<li>Set the <code>top</code>, <code>left</code>, <code>height</code>, <code>width</code> attributes to our new element;</li>
<li>Insert the broken window into the DOM.</li>
</ul>
<p>Let’s jump into our <code>script.js</code> file:</p>
<pre><code>function onWindowDrag(e) {
    ...
}

window.addEventListener("window-drag", onWindowDrag);
</code></pre>

<p>We’re listening to the <code>window-drag</code> event and setting up a callback that receives the event object when invoked.</p>
<pre><code>function onWindowDrag(e) {
    const { containerEl } = e.detail;
  const { width, top, left, height } = containerEl.getBoundingClientRect();
}

window.addEventListener("window-drag", onWindowDrag);
</code></pre>

<p>The above bit of code is doing two things:</p>
<ul>
<li>Accessing the <code>containerEl</code> from the detail object.</li>
<li>We’re then using the <code>containerEl</code>’s <code>getBoundingClientRect</code> function to get the element’s CSS properties.</li>
</ul>
<pre><code>function onWindowDrag(e) {
  const { containerEl } = e.detail;
  const { width, top, left, height } = containerEl.getBoundingClientRect();

  const newEl = document.createElement("a2k-broken-window");

  newEl.setAttribute("width", width);
  newEl.setAttribute("top", top);
  newEl.setAttribute("left", left);
  newEl.setAttribute("height", height);
}
</code></pre>

<p>Here we’re imperatively creating our broken window element and applying our styles. For anyone familiar with writing HTML with JavaScript (or even jQuery), this shouldn’t be a foreign concept. Now we’ll add our component to the DOM.</p>
<p>We need to be very specific about where we want to place the element. We can’t just append it to the body; otherwise, it’ll cover our main window element.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3f73e50d-7cba-48c5-baaf-01c1d582afdc/13-creating-draggable-gifs-web-components-lit.png" /></p>
<p>We also can’t write it as the first element of <code>body</code>; otherwise, the oldest window will appear above the newer windows.</p>
<p>One solution is to add our component into the DOM just before our container element. All the JavaScript devs out there might be eager to write their own script to manage this but luckily the window has the perfect function for us:</p>
<pre><code>containerEl.insertAdjacentElement("beforebegin", newEl);
</code></pre>

<p>The above is a very handy function that gives us control over where an element gets added. This script inserts our new element before our container element.</p>
<p>Our finished script looks like this:</p>
<pre><code>function onWindowDrag(e) {
  const { containerEl } = e.detail;
  const { width, top, left, height } = containerEl.getBoundingClientRect();

  const newEl = document.createElement("a2k-broken-window");

  newEl.setAttribute("width", width);
  newEl.setAttribute("top", top);
  newEl.setAttribute("left", left);
  newEl.setAttribute("height", height);

  containerEl.insertAdjacentElement("beforebegin", newEl);
}

window.addEventListener("window-drag", onWindowDrag);
</code></pre>

<p>Jump back to the browser and start dragging your window. You should now be seeing your cool window effect!</p>
<p>If your script isn’t working, then don’t worry! Open up your console and see if you can debug the problem(s). You can even run through the code snippets above and ensure everything’s been copied correctly.</p>
<h3>Bonus</h3>
<p>We’ve made a cool draggable effect by listening to the drag events and writing some custom logic inside the handlers.</p>
<p>But Microsoft did this 20 years ago. I’d love to see what cool effects the creative Smashing community can whip up instead! Here’s me having a little fun:</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38744974-5740-4a6b-abae-e2db3d069e05/rainbow-drag.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38744974-5740-4a6b-abae-e2db3d069e05/rainbow-drag.gif" /></a>(<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/38744974-5740-4a6b-abae-e2db3d069e05/rainbow-drag.gif">Large preview</a>)

<p>Please bombard my <a href="https://twitter.com/andricokaroulla">Twitter</a> with what you’ve created using this article. 😄 </p>
Conclusion
<p>Thanks for making it to the end! We covered a lot of ground. I hope it’s helped you get comfortable writing web components with the wonderful Lit library. Most importantly, I hope you’ve enjoyed joining me in building something fun.</p>
<p>The draggable window is part of my web component UI library, <a href="https://a2000.netlify.app/">A2k</a>, which you can use in your own projects. You can give it a whirl by heading over to the <a href="https://github.com/andrico1234/a2k">GitHub repo</a>.</p>
<p>If you’d like to support the project, you can follow me on <a href="https://twitter.com/andricokaroulla">Twitter</a> for updates or leave the repo a GitHub star.</p>
<p><em>I would also love to offer a shout-out to <a href="https://twitter.com/techytacos">Elliott Marquez</a>, Lit Developer at Google, for being a technical reviewer.</em></p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Andrico Karoulla)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1d9b905-3c76-4125-a9b1-91c8db791a06/building-retro-draggable-web-component-using-lit.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Rethinking Star Ratings For Readers]]></title>
            <link>https://smashingmagazine.com/2022/09/rethinking-star-ratings-readers/</link>
            <guid>https://smashingmagazine.com/2022/09/rethinking-star-ratings-readers/</guid>
            <pubDate>Fri, 16 Sep 2022 10:00:00 GMT</pubDate>
            <description><![CDATA[How can companies change their rating and review systems to better benefit users? Matt Athanasiou shares some steps to improve the experience of reviewing literature and other products &mdash; while also building stronger connections.]]></description>
            <content:encoded><![CDATA[<p>Product ratings and reviews should provide clarity about a product’s qualities. Unfortunately, the nearly ubiquitous star rating scale can foster assumptions; it often lacks clearly defined measurements and fails to encourage written reviews. Context is important, and in this article, we will discuss a solution to improve communication among readers for finding and sharing literature.</p>
The Setting: Ratings And Reviews
<p>There is no shortage of <a href="https://www.theguardian.com/lifeandstyle/2021/apr/21/the-positivity-problem-why-online-star-ratings-are-too-good-to-be-true">articles</a> <a href="https://hbr.org/2019/07/the-problems-with-5-star-rating-systems-and-how-to-fix-them">criticizing</a> <a href="https://bettermarketing.pub/the-fault-in-amazons-stars-why-we-shouldn-t-care-about-star-ratings-2e247643e0b8">star ratings</a>. Many, myself included, have considered reimagining the ubiquitous star rating system. I might have continued ignoring those thoughts, disregarding the inconsistent and often bewildering star ratings that I encountered on apps until my frustrations mounted with Goodreads.</p>
<p>I love literature, and I believe it deserves better than a grading scale that elicits confusion and degrades communication among readers. In this article, we’ll imagine a better one to practice thinking and building more satisfying experiences.</p>
The Inciting Incident: User Dissonance
<p>The rating and review that inspired me to dig deeper into the star rating system can be paraphrased like this:</p>
<blockquote>“The author’s writing is lyrical, and the story is lovely and haunting. However, this is not a genre I typically enjoy. Three stars.”</blockquote>

<p>My brain stuttered when I read this comment. Had I written the review, even if I preferred other genres, I would have rated the book five stars. I expected anyone who said a book was lyrical, lovely, and haunting would feel the same; I expected that the original reviewer and I would share an understanding of what makes a book three stars versus five stars. The rating seemed at odds with the review, and I kept wondering how the original reviewer and I could be on such different pages.</p>
Rising Action: Surmounting Problems
<p>The reason users can have different definitions of star ratings is that the current rating system affords <a href="https://www.goodreads.com/topic/show/17895147-what-is-your-rating-system-on-goodreads">individual interpretations</a>. The system inherently lacks clarity because it is based on glyphs, pictures representing words and ideas, but representations require interpretations. These idiosyncratic definitions can vary based on how someone’s experiences tell them to decipher a depiction — as shown in the aforementioned rating example, <a href="https://www.nngroup.com/articles/icon-usability/">as mentioned by the Nielsen Norman Group</a>, or as seen in the clown face emoji.</p>
<p>The system’s vagueness allows it to be applied to every disparate thing, from books to bras to brooms. Said another way, star ratings are not optimized for any one thing.</p>
<p>In an attempt to prevent individual interpretations, many companies uniquely define what each star category means on their sites. However, with a widely used glyph scale, this puts an unreasonable onus on users to learn the differences between every site to ensure correct usage—the equivalent of learning a homonym with hundreds of definitions. As there are few reasons to think one five-star scale broadly differs from another, companies reusing the system should anticipate that:</p>
<ul>
<li>Individuals have acquired their own understanding of the scale;</li>
<li>Individuals will use their loose translation of the scale across the web.</li>
</ul>
<p>Unfortunately, this creates countless little inconsistencies among user ratings that add up.</p>
<p>You can notice some of these inconsistencies if you scroll through ratings and reviews on a site like Goodreads, where there are a variety of interpretations of each star category. For instance:</p>
<ul>
<li>One-star reviews ranging from DNF (Did Not Finish) to <a href="https://time.com/6078993/goodreads-review-bombing/">extortion scams</a>;</li>
<li>Two-stars reviews ranging from unwilling to read more of the author’s work to being okay;</li>
<li>Three-star reviews ranging from a genre not typically enjoyed to being recommendation worthy.</li>
</ul>
<p>The only way to understand the intention behind most ratings is to read a corresponding review, which brings another problem to light. After gathering and averaging data from a mix of 100 popular classic and modern books on Goodreads — 50 of these are based on <a href="https://www.goodreads.com/blog/show/2306-the-60-most-reviewed-new-books-of-the-past-five-years?">their most reviewed</a> from the past five years — I learned that less than 5% of people who give a star rating write a review. We have to guess what the rest mean.</p>
<p>The inherent impreciseness and guesswork attributed to the system can hinder the overall goal of people using a social literature app. That goal can be summarized from <a href="https://www.goodreads.com/about/us#:~:text=Goodreads%20is%20the%20world’s%20largest,Goodreads%20launched%20in%20January%202007">Goodreads’ own mission statement</a>:</p>
<blockquote>“For readers to find and share books that they can fall in love with.”</blockquote>

<p>Without speaking a common language through standardized rating definitions, readers relying on one another to discuss and discover meaningful literature becomes exceedingly difficult.</p>
Additional Rising Action: Counter Arguments
<p>However, let’s pretend everyone using a site like Goodreads agrees on what each star category means. The problem remains that a rating still tells us nothing about what a reader liked or disliked. Without personalized context, well-defined star ratings mainly act as a filtering system. People can choose to disregard books below a specific number of stars, but even they need to learn more about the books within their read-worthy range to decide what to read. On a social literature site, users should be able to depend on others for insight.</p>
<p>You might argue that algorithms can learn what everyone’s ratings mean and dispense recommendations. Let’s ignore the red flags from Goodreads oddly suggesting that I read <a href="https://www.goodreads.com/book/show/5986375-this-is-water">a collected speech about compassion</a> and <a href="https://www.goodreads.com/book/show/51284872-the-ox">a biography about The Who’s bassist</a>, because I read a superhero novel, and let’s agree that this could work. <a href="https://www.nature.com/articles/s41598-021-87480-9">People do trust algorithms</a> more these days to accomplish tasks, but there is a tradeoff: socialization declines. If you overemphasize a machine finding and sharing books, users have fewer reasons to interact to achieve that goal as well. That is counterproductive to creating a social literature site.</p>
<p>In a world where quarantines are easily imagined possibilities and remote work spreads, the social aspect is becoming increasingly important. <a href="https://www.forbes.com/sites/davidrock/2020/03/27/we-all-need-to-stay-connected-to-one-another-heres-how-science-says-to-do-it/?sh=594f03381665">Studies show us</a> that connection between people is more of a basic need than previously thought, and the improvements mentioned in this article will keep human interaction in mind.</p>
The Climax: A Contextual Solution In Three Parts
<p>What follows is one solution, among many, that addresses the aforementioned issues by observing three guiding principles:</p>
<ul>
<li>Building trust,</li>
<li>Respecting time,</li>
<li>Creating clarity.</li>
</ul>
<p>The focus will be on a social literature app, but you can imagine some of these concepts applied anywhere star ratings are used. Let’s discuss each part of the solution.</p>
<h3>Part One: Building Trust</h3>
<p>The first piece of our solution primarily centers on trust, although it is not novel: readers are required to “Shelve” a book as “Read” before writing a review.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ae26978-cda4-4e0f-abd4-70816583a5e0/2-rethinking-star-ratings-readers.png" /></p>
<p>This feature is a step toward assuring readers that reviews are genuine. It also builds reviewers’ confidence that they will contribute to a credible conversation. Although users can lie to bypass the gate, honesty has more incentives on an app to find and share literature. A liar has little use for the former, and for the latter, if their intent is to gain attention for a book, they risk getting caught in a discussion that uncovers them, per the upcoming suggestions.</p>
<h3>Part Two: Respecting Time and Creating Clarity</h3>
<p>Simple and familiar, being mindful of people’s time, and contributing to clearness: once a reader shelves a book as “Read,” they can “Favorite” it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/177444b5-1d32-4db2-90f2-601d1fc808c7/6-rethinking-star-ratings-readers.png" /></p>
<p>Because this is a  straightforward input, it requires less effort than deciphering the differences within anyone’s five-point star scale. Not favoriting a book does not indicate that you disliked it, and that is not the purpose. Favoriting tells people this is a noteworthy book for you, which may inspire them to learn why, read reviews, and interact with others. The number of times a book is favorited can be tallied to rank it in lists and garner extra attention.</p>
<p>In addition, vastly improving on our principle of clarity, once readers shelve a book as “Read,” the app also prompts them to mention what they enjoyed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f327d4bb-6bd7-4e0d-8f74-6b9099eeeffa/3-rethinking-star-ratings-readers.png" /></p>
<p>Respecting a reader’s time and developing a common language for users, the prompt provides a list of predefined answers to choose from. The options are mostly based on conventional literary characteristics, such as “Fast-paced plot,” “Lyrical language,” “Quirky characters,” and dozens of others.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bfa38d9-83d6-490a-970b-ae3ea2b3e033/4-rethinking-star-ratings-readers.png" /></p>
<p>Every quality a reader chooses gets added to traits others have chosen. On a book’s overview page, the selected qualities are ranked in descending order, equipping prospective readers with a clearer sense of if they might like a text based on top traits. The number of qualities a reviewer can choose is limited to encourage thoughtful selections and discourage abuse by selecting every trait on the list.</p>
<p>Similarly, there could also be a “Wished” list that follows the same structure as the “Enjoyed” list. “Wished” would create opportunities for people to mention what else they would have liked from a book, and the collective traits of reviewers could further assist in someone’s decision to read a work.</p>
<h3>Part Three: Building Trust, Respecting Time, And Creating Clarity</h3>
<p>Every feature mentioned so far is enhanced by the final piece of our solution: written reviews. Allowing users to explain their thoughts, such as why they chose the qualities they enjoyed, gives potential readers a deeper understanding of the book they are considering.</p>
<p>However, remember the aforementioned stat that, on average, less than 5% of raters write reviews on Goodreads. That number becomes easier to understand when you consider that imparting meaningful feedback is a learned skill—you can find popular lessons on sites like <a href="https://www.udemy.com/course/delivering-constructive-criticism-the-assertive-way/">Udemy</a>, <a href="https://www.masterclass.com/articles/how-to-give-creative-feedback">MasterClass</a>, and others. Plus, add to that the fact that writing reviews can be more time-consuming than choosing ratings. Despite these hurdles, a site can offer guidance that motivates people to provide additional context about their thoughts.</p>
<p>In our solution, users are not merely given a blank text box and asked to write a review. The users are prompted to share their thoughts and receive suggestions to hone their feedback. The suggestions range dynamically, depending on a reader’s earlier choices. If they favorited a book, the prompt might ask why. If they chose the “Well-developed characters” option from the Enjoyed list, the prompt might ask how the characters are well developed. The prompt might also nudge users to read other people’s reviews for ideas.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0ec2f8a-0795-4416-a75d-4b900e566d37/5-rethinking-star-ratings-readers.png" /></p>
<p>The dynamic suggestions will particularly benefit books with sobering subject matter. For instance, only 1% of raters have written reviews for Anne Frank’s <a href="https://www.goodreads.com/book/show/48855.The_Diary_of_a_Young_Girl"><em>The Diary of a Young Girl</em></a> on Goodreads. This is unsurprising when you consider the devastating historical context surrounding the book.</p>
<p>Commenting on typical story elements like pacing feels disingenuous to a book like Anne Frank’s — like giving a star rating to a friend telling you a story about themselves — but we should not shy away from talking about difficult literature, because <a href="https://artincontext.org/why-is-art-important/">discussing art</a> can lessen our prejudices and expand our empathy. Prompts for these types of books might supply tips for close-reading a passage, mentioning what a story means to a reader, or asking how a book made a reader feel.</p>
<p>Finally, these features require regular usage to benefit readers. Growing an active community around them can be accomplished by building healthy communal habits, which hinge on voices having the capacity to be heard. Thankfully, one of the oldest features of the Internet can do a lot of the heavy lifting to solve this: commenting. Many sites offer the ability to comment on reviews, but several also employ a “Like” feature — the ability to press a button that “Likes” a review or comment — and liking comments can weaken the voices of a community.</p>
<p>Scammers can abuse the feature with bots to garner large amounts of likes and attention, people can waste time and emotional energy chasing likes, and the feature discourages people from using their words: all issues that fail our guiding principles, and even the <a href="https://www.ted.com/talks/jack_dorsey_how_twitter_needs_to_change/transcript?language=en">ex-Twitter CEO admitted</a> the like button compromises dialogue. Generating trust, meaningful usage of time, and clarity among users builds a safer environment for genuine conversation to spread, so comments should be protected from elements that detract from them.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ac1ad99b-8958-467b-bc65-6d33e7bd0fe8/1-rethinking-star-ratings-readers.png" /></p>
Falling Action And Resolution: Let’s Be Thoughtful
<p>Why any company utilizes a star rating system is a question for them. Reflecting on how easy to use and almost expected the scale has become, it’s likely companies simply copied a system that they believe is “good enough.” Maybe they were enthralled by the original <a href="https://en.wikipedia.org/wiki/Michelin_Guide">Michelin Guide</a> or <a href="https://en.wikipedia.org/wiki/Mariana_Starke">Mariana Starke</a> using exclamations points to denote special places of interest in guidebooks, but mimicry often flatters the originator more than the mimicker. Either way, the perks of ubiquity do not outweigh the vagueness that engenders numerous problems. At the forefront of those is stunting stronger connections between people trying to speak a shared language.</p>
<p>This article shows one solution for those problems, but there are others. Companies like <a href="https://app.thestorygraph.com/">The StoryGraph</a> already provide alternatives to achieve thoughtful interactions around discussing literature, and <a href="https://onezero.medium.com/almost-everything-about-goodreads-is-broken-662e424244d5">people have additional ideas</a>. Thoughtfulness can take a little longer to solve, but:</p>
<p>If we encourage people to not solely judge a book by its cover, we should extend that advice to its star ratings.</p>
<p>Let’s look beneath the surface of things and use our hearts — just as Antoine de Saint-Exupéry’s eponymous <em>Little Prince</em> had to learn to do — to discover meaningful new territories in books and elsewhere. A good place to start would be reading or rereading that story, marveling at the stars dotting its illustrated skies, and writing a review to share what we each found buried within the pages.</p>
Epilogue: What Readers Can Do Today
<p>While the recommendations throughout this article are focused on how a company can change its rating and review system, companies can be slow to change. Fortunately, there are steps readers can take to be more thoughtful when reviewing the literature. A simple process today might look like this:</p>
<ul>
<li><strong>Leave a star rating.</strong><ul>
<li>Both users and algorithms pay attention to these ratings. If you ignore leaving a rating, you lessen the chance of readers discovering books they may love.</li>
</ul>
</li>
<li><strong>Write a review.</strong> Consider some of these elements to streamline the process:<ul>
<li>Explain why you chose your rating.</li>
<li>List common story qualities you enjoyed—these can vary depending on genre, but <a href="https://blog.reedsy.com/elements-of-a-story/">here is a starter list</a>. Even better, write a sentence to say why you enjoyed specific qualities.</li>
<li>Discuss a passage (or several) from the book that you found important.</li>
<li>Mention what you wish you had known before reading a book and mark the review with “Spoilers” at the start if you include any.</li>
<li>Link to other reviews that you think best sum up your perspective.</li>
</ul>
</li>
<li><strong>Share your review.</strong><ul>
<li>Not only will this help people find new literature, but it will also encourage them to write and share reviews.</li>
</ul>
</li>
</ul>
<p>You can use variations of this process to review other products, too. Remember that the most important part is that we use our words. This helps reduce confusion that might come from a lone star rating, and it helps us build stronger connections.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Matt Athanasiou)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4c500c4a-f0b4-4348-9136-951d1b38afde/rethinking-star-ratings-readers.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Headless In Times Of Accessibility]]></title>
            <link>https://smashingmagazine.com/2022/09/accessibility-times-headless/</link>
            <guid>https://smashingmagazine.com/2022/09/accessibility-times-headless/</guid>
            <pubDate>Thu, 15 Sep 2022 10:00:00 GMT</pubDate>
            <description><![CDATA[Do you want to make your new website as accessible as possible? Amazing, that’s a great mindset! Let’s have a closer look at the factors you should take into consideration when choosing a content management system (CMS) in terms of web accessibility.]]></description>
            <content:encoded><![CDATA[<p>This article is a sponsored by <a href="https://www.storyblok.com/">Storyblok</a></p>
<p>We should all care more about web accessibility. It’s the best tool to make the web a more inclusive, equal space — and, in my opinion, it’s our responsibility as developers, UX specialists, and designers to support this mission. While the CMS might, at first glance, seem like a small piece of the puzzle, it’s really the baseline to set your project up for success.</p>
<p>Let’s have a closer look at the basics of web accessibility, the difference between monolithic and headless content management systems, and how to make the most of your CMS in terms of accessibility. </p>
What Is Web Accessibility?
<p>Web accessibility means, in short, that we design and implement our projects in a way that people with disabilities can use them and participate as equally as possible. There are many different kinds of disabilities like physical, auditory, cognitive, speech, neurological, or visual disabilities. In the <a href="https://www.who.int/teams/noncommunicable-diseases/sensory-functions-disability-and-rehabilitation/world-report-on-disability">World Report on Disabilities by the WHO from 2011</a>, it was found that over 15% of the global population experiences some form of disability throughout their lifetime — that’s 1 billion people in total; and with the global population generally growing older, it will only continue to rise. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52452b3f-3af0-45c2-807f-f42ebdc155e2/inclusive-design-accessibility.png" /></p>
<p>But the applications for web accessibility are even broader: making your website accessible benefits not only people with permanent disabilities but also those with situational or temporary impairments, like folks with a broken arm or new parents holding their baby (and only having one hand free to use a device). Looking at your phone in bright sunlight, you probably rely on sufficient color contrast, and captions enable you to watch videos without turning to volume up in a quiet environment. </p>
<p>In short: Web Accessibility benefits all of us. </p>
But What Does That Mean In Practice?
<p>Web Accessibility takes many shapes and forms, but it could mean, for example, including alternative texts for your images, adding captions to videos, and ensuring enough contrast between background and foreground for texts. Keyboard navigation is also essential in making your website more accessible, as many users rely on their keyboard or assistive technology to navigate the web. The same is true for writing semantic code — making sure you are using the right HTML elements and structure gives assistive tech lots of valuable context — while simultaneously improving your code. </p>
<p>While the whole task of making your website accessible may seem daunting at first, there are many good resources out there, like the <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">Web Content Accessibility Guidelines </a>(WCAG) for instance. These guidelines were developed to promote a unified, international standard for web accessibility. They include three <a href="https://www.w3.org/WAI/WCAG21/Understanding/conformance#levels">different levels of accessibility</a> (A, AA &amp; AAA), A being the least and AAA the most inclusive. </p>
Why Does The CMS Matter?
<p>Ideally, your content management system is where it all comes together, right? And having the right tool for the job will make it much easier for everyone involved to create an accessible website. In short: once you have found the ‘right’ CMS, you have plenty more headspace to take care of overarching issues. Your content management system should not hinder you in developing accessible content, it should support you in doing so. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c643c097-a0c8-4aa6-96ab-24adee6e2739/2-accessibility-times-headless.png" /></p>
<h3>What Are Your Options?</h3>
<p>In the world of CMSes, there are <a href="https://www.storyblok.com/tp/coupled-decoupled-and-headless-content-management-systems">two big categories</a>: monolithic and <a href="https://www.storyblok.com/tp/headless-cms-explained">headless CMS</a>. While radically different in their approach and architecture, they both have a lot of things going for them — it’s basically a matter of finding the right fit. </p>
<h4>Monolithic CMS</h4>
<p>Monolithic CMS, sometimes also called ‘traditional’ or ‘coupled’ content management systems, are ‘where it all started.’ In the early 2000s, open-source platforms like WordPress, Drupal and Joomla emerged — providing an easy way for people to create websites or personal blogs quickly. </p>
<p>The idea of a monolithic CMS is a ‘one-stop shop’ — usually, you have a database where the content is stored, an admin interface, and the frontend that combines the data from the database with the styling and logic — you don’t have to worry about hosting or writing code. </p>
<p>This might mean a few compromises: Since you are buying into the ‘package deal’ for all these solutions, your solution might not excel at <em>every</em> task. There are likely some features in the mix that really suit your approach (which is probably why you chose it in the first place) and others that are not really a good match or which you simply don’t need but which are just part of the whole package. </p>
<p>In terms of the tech stack, you probably highly depend on the CMS’ default — not much flexibility here. What attracts many people to platforms like WordPress, for example, are the ready-made templates and plugins to choose from — these tools make it relatively easy to extend your website’s functionality or change the styling. </p>
<p>All in all, not a terrible solution if you are looking to get started quickly and have little experience in setting up your own website from scratch. </p>
The New Kid On The Block: Headless CMS
<p>With the rise of mobile devices, the demands on the CMS ecosystem changed as well — an omnichannel approach became the new norm, and traditional systems weren’t fit to cope, at least not effectively. Out of this need, headless systems were born: </p>
<p>A headless content management system means decoupling the ‘head’ (aka ‘frontend’) from the ‘body’ (backend or content repository). The focus of a headless CMS is solely on storing and delivering structured content. Due to this approach, omnichannel becomes second nature: through an API, you can access your data and distribute it wherever you like — be it in a mobile app, on a website, or in an e-commerce store.  </p>
<p>Headless follows the best-of-breed approach: connect the tools and services that fit your needs through the API but don’t worry about unnecessary baggage. And as a developer, headless gives you the freedom to choose any kind of tech stack that you would like for the frontend. Even if you need to change frameworks in the future, it won’t affect your headless CMS in the slightest. </p>
Headless vs. Monolithic: What’s The Best Fit For You?

<p>So, in the end, as always — it comes down to your needs. There is no definite answer. A headless CMS might likely be an excellent fit for you, especially if you are working with multiple output channels and are experienced with creating your own frontend. There has been a massive shift in the last couple of years towards headless — with <a href="https://www.storyblok.com/mp/agency-learning-why-replace-monolithic-with-headless">good reason</a>. If you prefer an out-of-the-box solution with little programming effort on the other hand and don’t mind working with templates, a monolithic approach could be the solution for you. </p>
What’s More Accessible: Monolithic Or Headless CMSs?
<p>The short answer is again: it depends. </p>
<p>Both monolithic and headless solutions are not inherently accessible, unfortunately. Many platforms make some effort to meet minimum requirements when it comes to web accessibility, but there is still a long way to go. </p>
How Accessible Is A Monolithic CMS?
<p>When it comes to monolithic platforms, generally speaking, your frontend can only be as accessible as your least accessible plugin. Let me expand a little here, using WordPress as an example: </p>
<p>How accessible or inaccessible your site is largely depends on what data is stored and how it is displayed. This is massively affected by the themes and plugins you may use. And while there are many themes that claim to be ‘accessibility ready’, not all of them are. And even if you manage to select an accessibility theme, it can become inaccessible if you install an inaccessible plugin. So it’s not impossible, but there are definitely some obstacles in your way. </p>
<p>One thing to keep in mind: when working with a monolithic CMS, you are generally limited to the accessibility features provided by the CMS (or plugins) itself — customizing the editing experience will be a lot more challenging than when working with a headless CMS. </p>
<h3>Creating Your Own Themes</h3>
<p>If you want to be in more control, it might be feasible to create your own themes — you could even use a base theme for the underlying HTML structure. By creating your own theme, you can ensure sufficient color contrast and solid keyboard navigation, make sure there aren’t exclusively visual cues to alert the user to changes, test for screen reader users, and implement things like motion control. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a9b19ff-3fe3-46ce-939c-20caf65aef65/3-accessibility-times-headless.png" /></p>
<h3>Plugins: Curse Or Blessing?</h3>
<p>The beauty (and the danger) of plugins is, that you can choose from over 55.000 plugins in WordPress and install them at the click of a button. Each gives new functionality to your site — many being interactive. Especially these interactive plugins are full of potential accessibility pitfalls and need to be tested thoroughly. </p>
<h3>Accessibility Plugins</h3>
<p>There are also plugins that claim to make your website accessible. And while it’s tempting to fix your accessibility needs just by quickly installing a plugin, don’t be fooled. These tools promise you to fix issues like color contrast, enable zoom or add alt text to images — all good ideas in theory. But in most cases, trying to solve accessibility issues with quick fixes like plugins creates more issues than it solves. These tools usually create an overlay of your website, not actually fixing the issues but — well, painting over them. </p>
<p>While there have been significant advances in technology, automatically generated (alt) texts still need to be checked manually and are not always accurate, causing confusion for the users. Another big issue is that these automated tools often clash with the assistive technologies people might already be using. Before using an accessibility plugin in production, make sure to test it thoroughly — if it seems too good to be true, it usually is.</p>
<blockquote> “I will recommend staying away from any plug-in that claims or implies that it will fix your site to help you meet accessibility guidelines—no plug-in is going to be able to seriously achieve that goal.” <br /><br />— Joe Dolson</blockquote>

Accessibility In Times Of Headless CMS
<p>Now you might wonder: is a headless CMS the answer? Well, again: it depends. </p>
<p>A headless CMS will give you a lot more freedom than a traditional CMS. You’ll have a lot more flexibility when it comes to: </p>
<ul>
<li>Choosing the best tools for the job</li>
<li>Working with a tech stack you’re comfortable with</li>
<li>Set up your project in ways that help all team members create accessible content</li>
</ul>
<p>That being said, it is also not inherently accessible — and not every headless CMS gives you the same degree of freedom — so choose wisely. Luckily, there are things you can do to make your content more accessible and set your team up for success. </p>
How Can I Make My CMS As Accessible As Possible?
<p>As always, there is no one-size-fits-all approach here. But there are many things you can do, both when working with a headless CMS as well as when working with a custom theme in a monolithic approach. Let’s have a closer look at how you can implement more accessibility in your project: </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/811b1801-2607-4152-a2b5-768dfab46f6b/1-accessibility-times-headless.png" /></p>
<h3>Education Is Key</h3>
<p>Make accessibility part of every discussion and educate each other on an ongoing basis. The more we talk about the things we learn, we can improve as a team. Provide resources and time to make sure web accessibility is not an afterthought in your project. </p>
<h4>Semantic HTML</h4>
<p>Start by ensuring semantic structure in your components — double check the HTML elements you are using and whether there might be more suitable ones that can give (screen reader) users context. Also, extend this to your CMS: when creating new Content Types or Pages, keep the HTML structure in mind when allowing specific components to these pages. Ensure you have only one <code>&lt;main&gt;</code> element, watch out for the headline hierarchy and ensure the right use of landmarks, for example. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b99cd96d-3a46-42ad-a977-888002af3b85/9-accessibility-times-headless.png" /></p>
<p>In a headless CMS, the idea is to fully decouple the frontend from the content structure. That’s also why it’s strongly advisable to prevent people from writing markup in the content fields — it’s prone to error and difficult to maintain, making it less accessible in the long run. All your code should live in your codebase — where it can easily be tested and maintained. </p>
<h4>Visual Context</h4>
<p>Provide as much context as you can for people who are visually impaired. This could mean, for example: </p>
<ul>
<li>Making alternative texts a requirement for image fields</li>
<li>Including an option for increasing Zoom to up to 200%</li>
<li>Work with an accessible color palette and limit the use of colors to predefined brand colors with sufficient contrast. </li>
</ul>
<p>Also, make sure to alert users to changes not only by color cues (e.g., when hovering or clicking a button, not only the color changes but the size changes, or there is another effect). </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8dc5e7f6-cca2-4ed2-b623-d922ae1f0523/8-accessibility-times-headless.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c1d560bc-2bd1-44a0-9946-e1dad41384c7/5-accessibility-times-headless.png" /></p>
<h4>Create A Coherent Structure</h4>
<p>Having consistency not only enforces your brand’s visual identity across your page but it also helps people navigate it — especially folks who are neurodivergent. This could, for example, mean using dedicated styles for specific CTAs or improving your UI to make it as easy as possible to find information in different ways. Reflect on the importance of topics in style and size, and stay away from flashy or very distracting animations. </p>
<p>To ensure everybody keeps these brand guidelines in mind, include descriptions and notes for editors. These friendly reminders will help people comply with accessibility requirements and understand why it’s important. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df68416d-d039-477e-aa99-230e87440ad8/7-accessibility-times-headless.png" /></p>
<h4>Extend Your Experience</h4>
<p>In many headless systems, you are able to add any kind of field you need — and you can make these fields a requirement for accessibility purposes. Like in this example showing <a href="https://www.storyblok.com/tp/create-an-accessible-website-with-storyblok#accessible-iframes">how to set up an accessible iframe</a> with a required title field. Setting fields as ‘required’ will make it a lot easier to ensure that they will not be forgotten when things get hectic in day-to-day life. </p>
<p>Besides creating your own field types, you can also easily extend the content management system by connecting any kind of tool you need to your headless architecture or even <a href="https://www.storyblok.com/docs/plugins/introduction">creating your own extensions and plugins</a>. This could also include your own solutions to specific accessibility needs. One example could be an extension to run an accessibility check to flag any issues before publication. While it will be difficult to cover <em>all</em> potential issues, it might be a good addition to automated and manual testing. </p>
<h3>Wrapping Up</h3>
<p>When it comes to finding the right CMS, there is no cookie cutter answer — as always, it <em>depends</em>. It depends on your requirements, the accessibility needs you are aiming to fulfill, and how much time and resources you have. Neither a monolithic nor a headless system are inherently 100% accessible — but there are many things you can do to improve that.</p>
<p>While there might be some already predefined tools in monolithic CMS’ to help you out, you also heavily rely on other people not making false claims. With headless CMS, on the other hand, there is a lot more freedom and flexibility in setting your project up to be as accessible as possible. And that’s exactly how a content management system should be, right? Enabling you to focus on the tasks at hand and making it as easy as possible to meet your accessibility goals. </p>
<p>Feeling adventurous?<a href="https://www.storyblok.com/docs/guide/getting-started">Give it a go</a> and see how quickly you can put together a headless project with your favorite tech stack. </p>
<p>Regardless of which system you choose, always remember: 10% done is better than nothing in the case of accessibility — every little step towards a more inclusive web counts. </p>
<h3>Useful Resources</h3>
<ul>
<li>“<a href="https://www.storyblok.com/tp/create-an-accessible-website-with-storyblok">Creating An Accessible Website With Storyblok</a>,” Christian Zoppi</li>
<li>“<a href="https://www.deque.com/blog/wordpress-accessibility/">The Complete Guide To Accessibility For WordPress Websites</a>,” Ross Johnson</li>
<li>“<a href="https://rianrietveld.com/2017/06/wceu17/">Accessibility In The Age Of The Headless CMS</a>,” Rian Rietveld</li>
<li>“<a href="https://bhmbizsites.com/beware-wordpress-accessibility-plugins-can-make-your-site-less-accessible/">Beware: WordPress Accessibility Plugins Can Make Your Site LESS Accessible</a>,” Lindsay L.</li>
<li><a href="https://www.cms.co.uk/cms-and-accessibility/#:~:text=Accessibility%20means%20enabling%20people%20with,due%20to%20the%20ageing%20process">CMS And Accessibility</a></li>
<li>Automated Accessibility Audits by <a href="https://www.deque.com/axe/devtools/">axe Dev Tools</a> or <a href="https://web.dev/accessibility-scoring/">Lighthouse Accessibility Scoring</a></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Josefine Schaefer)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a37e3c90-45e7-4553-b425-346edfcd48af/headless-in-times-of-accessibility.jpg" length="0" type="image/jpg"/>
        </item>
    </channel>
</rss>