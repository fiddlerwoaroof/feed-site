<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
        <link>https://www.smashingmagazine.com/</link>
        <description>Recent content in Articles on Smashing Magazine — For Web Designers And Developers</description>
        <lastBuildDate>Wed, 01 Sep 2021 09:06:32 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>manual</generator>
        <language>en</language>
        <image>
            <title>Articles on Smashing Magazine — For Web Designers And Developers</title>
            <url>https://www.smashingmagazine.com/images/favicon/app-icon-512x512.png</url>
            <link>https://www.smashingmagazine.com/</link>
        </image>
        <copyright>All rights reserved 2021, Smashing Media AG</copyright>
        <category>Development</category>
        <category>Design</category>
        <category>UX</category>
        <category>Mobile</category>
        <category>Front-end</category>
        <atom:link href="https://www.smashingmagazine.com/feed/" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[State Management In Next.js]]></title>
            <link>https://smashingmagazine.com/2021/08/state-management-nextjs/</link>
            <guid>https://smashingmagazine.com/2021/08/state-management-nextjs/</guid>
            <pubDate>Tue, 31 Aug 2021 14:00:00 GMT</pubDate>
            <description><![CDATA[By combining some React APIs, we can accurately manage “simple” states. With Next.js though, we can quickly find situations where we need to accommodate many other requirements. Let’s have a look at some patterns to accomplish all that.]]></description>
            <content:encoded><![CDATA[<p>This article is intended to be used as a primer for managing complex states in a Next.js app. Unfortunately, the framework is way too versatile for us to cover all possible use cases in this article. But these strategies should fit the vast majority of apps around with little to no adjustments. If you believe there is a relevant pattern to be considered, I look forward to seeing you in the comments section!</p>
React Core APIs For Data
<p>There is only one way a React application carries data: passing it down from parent components to children components. Regardless of how an app <strong>manages</strong> its data, it must pass data from top to bottom.</p>
<p>As an application grows in complexity and ramifications of your rendering tree, multiple layers surface. Sometimes it is needed to pass down data far down multiple layers of parent components until it finally reaches the component which the data is intended for, this is called <strong>Prop Drilling</strong>.</p>
<p>As one could anticipate: Prop Drilling can become a cumbersome pattern and error-prone as apps grow. To circumvent this issue comes in the Context API. The Context API adds 3 elements to this equation:</p>
<ol>
<li><strong>Context</strong><br />The data which is carried forward from Provider to Consumer.</li>
<li><strong>Context Provider</strong><br />The component from which the data originates.</li>
<li><strong>Context Consumer</strong><br />The component which will <em>use</em> the data received.</li>
</ol>
<p>The Provider is invariably an ancestor of the consumer component, but it is likely <strong>not</strong> a direct ancestor. The API then skips all other links in the chain and hands the data (context) over directly to the consumer. This is the entirety of the Context API, passing data. It has as much to do with the data as the postal office has to do with your mail.</p>
<p>In a vanilla React app, data may be managed by 2 other APIs: <code>useState</code> and <code>useReducer</code>. It would be beyond the scope of this article to suggest when to use one or another, so let's keep it simple by saying:</p>
<ul>
<li><code>useState</code><br />Simple data structure and simple conditions.</li>
<li><code>useReducer</code><br />Complex data structures and/or intertwined conditions.</li>
</ul>
<p>The fact Prop Drilling and Data Management in React are wrongfully confused as one pattern is partially owned to an inherent flaw in the Legacy Content API. When a component re-render was blocked by <code>shouldComponentUpdate</code> it would prevent the context from continuing down to its target. This issue steered developers to resort to third-party libraries when all they needed was to avoid prop drilling.</p>
<p>To check a comparison on the most useful libraries, I can recommend you this post about <a href="https://daveceddia.com/react-state-management/">React State Management</a>.</p>
<p>Next.js is a React framework. So, any of the solutions described for React apps can be applied to a Next.js app. Some will require a bigger flex to get it set up, some will have the tradeoffs redistributed based on Next.js' own functionalities. But everything is 100% usable, you can pick your poison freely.</p>
<p>For the majority of common use-cases, the combination of Context and State/Reducer is enough. We will consider this for this article and not dive too much into the intricacies of complex states. We will however take into consideration that most Jamstack apps rely on external data, and that is also state.</p>
Propagating Local State Through The App
<p>A Next.js app has 2 crucial components for handling all pages and views in our application:</p>
<ul>
<li><code>_document.{t,j}sx</code><br />This component is used to define the static mark-up. This file is rendered on the server and <strong>is not</strong> re-rendered on the client. Use it for affecting the <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags and other metadata. If you don’t want to customize these things, it’s optional for you to include them in your application.</li>
<li><code>_app.{t,j}sx</code><br />This one is used to define the logic that should spread throughout the app. Anything that should be present on every single view of the app belongs here. Use it for <code>&lt;Provider&gt;</code>s, global definitions, application settings, and so on.</li>
</ul>
<p>To be more explicit, Context providers are applied here, for example:</p>
<div>
 <pre><code>// _app.jsx or _app.tsx

import { AppStateProvider } from './my-context'

export default function MyApp({ Component, pageProps }) {
  return (
    &lt;AppStateProvider&gt;
      &lt;Component {...pageProps} /&gt;
    &lt;/AppStateProvider&gt;
  )
}
</code></pre>
</div>

<p>Every time a new route is visited, our pages can tap into the <code>AppStateContext</code> and have their definitions passed down as <code>props</code>. When our app is simple enough it only needs one definition to be spread out like this, the previous pattern should be enough. For example:</p>
<pre><code>export default function ConsumerPage() {
  const { state } = useAppStatecontext()
  return (
    &lt;p&gt;
      {state} is here! 🎉
    &lt;/p&gt;
  )
}
</code></pre>

<p>You can check a real-world implementation of this ContextAPI pattern in our <a href="https://github.com/atilafassina/nextjs-layout-state/blob/main/context/main-data.tsx">demo repository</a>.</p>
<p>If you have multiple pieces of state defined in a single context, you may start running into performance issues. The reason for this is because when React sees a state update, it makes all of the necessary re-renders to the DOM. If that state is shared across many components (as it is when using the Context API), it could cause <em>unnecessary</em> re-renders, which we don’t want. Be discerning with the state variables you share across components!</p>
<p>Something you can do to stay organized with your state-sharing is by creating multiple pieces of Context (and thus different Context Providers) to hold different pieces of state. For example, you might share authentication in one Context, internationalization preferences in another, and website theme in another.</p>
<p>Next.js also provides a <code>&lt;Layout&gt;</code> pattern that you can use for something like this, to abstract all this logic out of the <code>_app</code> file, keeping it clean and readable.</p>
<div>
 <pre><code>// _app.jsx or _app.tsx
import { DefaultLayout } from './layout'

export default function MyApp({ Component, pageProps }) {
  const getLayout = Component.getLayout || (
    page =&gt; &lt;DefaultLayout&gt;{page}&lt;/DefaultLayout&gt;
  )

  return getLayout(&lt;Component {...pageProps} /&gt;)
}



// layout.jsx
import { AppState_1_Provider } from '../context/context-1'
import { AppState_2_Provider } from '../context/context-2'

export const DefaultLayout = ({ children }) =&gt; {
  return (
    &lt;AppState_1_Provider&gt;
      &lt;AppState_2_Provider&gt;
        &lt;div className="container"&gt;
          {children}
        &lt;/div&gt;
      &lt;/AppState_2_Provider&gt;
    &lt;/AppState_1_Provider&gt;
  )
}
</code></pre>
</div>

<p>With this pattern, you can create multiple Context Providers and keep them well defined in a Layout component for the whole app. In addition, the <code>getLayout</code> function will allow you to override the default Layout definitions on a per-page basis, so every page can have its own unique twist on what is provided.</p>
Creating A Hierarchy Amongst Routes
<p>Sometimes the Layout pattern may not be enough, though. As apps go further in complexity, a need may surface to establish a relationship provider/consumer relationship between routes. A route will wrap other routes and thus provide them with common definitions instead of making developers duplicate code. With this in mind, there is a <a href="https://github.com/vercel/next.js/discussions/26389">Wrapper Proposal</a> in Next.js discussions to provide a smooth developer experience for achieving this.</p>
<p>For the time being, there is <strong>not</strong> a low-config solution for this pattern within Next.js, but from the examples above, we can come up with a solution. Take this snippet <a href="https://nextjs.org/docs/basic-features/layouts#per-page-layouts">directly from the docs</a>:</p>
<pre><code>import Layout from '../components/layout'
import NestedLayout from '../components/nested-layout'

export default function Page() {
  return {
    /** Your content */
  }
}

Page.getLayout = (page) =&gt; (
  &lt;Layout&gt;
    &lt;NestedLayout&gt;{page}&lt;/NestedLayout&gt;
  &lt;/Layout&gt;
)
</code></pre>

<p>Again the <code>getLayout</code> pattern! Now it is provided as a property of the <code>Page</code> object. It takes a <code>page</code> parameter just as a React component takes the <code>children</code> prop, and we can wrap as many layers as we want. Abstract this into a separate module, and you share this logic with certain routes:</p>
<pre><code>// routes/user-management.jsx

export const MainUserManagement = (page) =&gt; (
  &lt;UserInfoProvider&gt;
    &lt;UserNavigationLayout&gt;
      {page}
    &lt;/UserNavigationlayout&gt;
  &lt;/UserInfoProvider&gt;
)


// user-dashboard.jsx
import { MainUserManagement } from '../routes/user-management'

export const UserDashboard = (props) =&gt; (&lt;&gt;&lt;/&gt;)

UserDashboard.getLayout = MainUserManagement
</code></pre>

Growing Pains Strike Again: Provider Hell
<p>Thanks to React's Context API we eluded <strong>Prop Drilling</strong>, which was the problem we set out to solve. Now we have readable code and we can pass <code>props</code> down to our components touching only required layers. </p>
<p>Eventually, our app grows, and the number of <code>props</code> that must be passed down increases at an increasingly fast pace. If we are careful enough to isolate eliminate unnecessary re-renders, it is likely that we gather an uncountable amount of <code>&lt;Providers&gt;</code> at the root of our layouts.</p>
<pre><code>export const DefaultLayout = ({ children }) =&gt; {
  return (
    &lt;AuthProvider&gt;
      &lt;UserProvider&gt;
        &lt;ThemeProvider&gt;
          &lt;SpecialProvider&gt;
            &lt;JustAnotherProvider&gt;
              &lt;VerySpecificProvider&gt;
                {children}
              &lt;/VerySpecificProvider&gt;
            &lt;/JustAnotherProvider&gt;
          &lt;/SpecialProvider&gt;
        &lt;/ThemeProvider&gt;
      &lt;/UserProvider&gt;
    &lt;/AuthProvider&gt;
  )
}
</code></pre>  

<p>This is what we call <strong>Provider Hell</strong>. And it can get worse: what if <code>SpecialProvider</code> is only aimed at a specific use-case? Do you add it at runtime? Adding both Provider and Consumer during runtime is not exactly straightforward.</p>
<p>With this dreadful issue in focus <a href="https://jotai.pmnd.rs/">Jōtai</a> has surfaced. It is a state management library with a very similar signature to <code>useState</code>. Under the hood, Jōtai also uses the Context API, but it abstracts the Provider Hell from our code and even offers a “Provider-less” mode in case the app only requires one store. </p>
<p>Thanks to the bottom-up approach, we can define Jōtai's <strong>atoms</strong> (the data layer of each component that connects to the store) in a component level and the library will take care of linking them to the provider. The <code>&lt;Provider&gt;</code> util in Jōtai carries a few extra functionalities on top of the default <code>Context.Provider</code> from React. It will always isolate the values from each atom, but it will take an <code>initialValues</code> property to declare an array of default values. So the above Provider Hell example would look like this:</p>
<pre><code>import { Provider } from 'jotai'
import {
  AuthAtom,
  UserAtom,
  ThemeAtom,
  SpecialAtom,
  JustAnotherAtom,
  VerySpecificAtom
} from '@atoms'

const DEFAULT_VALUES = [
  [AuthAtom, 'value1'],
  [UserAtom, 'value2'],
  [ThemeAtom, 'value3'],
  [SpecialAtom, 'value4'],
  [JustAnotherAtom, 'value5'],
  [VerySpecificAtom, 'value6']
]

export const DefaultLayout = ({ children }) =&gt; {
  return (
    
      {children}
    
  )
}
</code></pre>

<p>Jōtai also offers other approaches to easily compose and derive state definitions from one another. It can definitely solve scalability issues in an incremental manner.</p>
Fetching State
<p>Up until now, we have created patterns and examples for managing the state internally within the app. But we should not be naïve, it is hardly ever the case an application does not need to fetch content or data from external APIs.</p>
<p>For client-side state, there are again two different workflows that need acknowledgement:</p>
<ol>
<li>fetching the data</li>
<li>incorporating data into the app's state</li>
</ol>
<p>When requesting data from the client-side, it is important to be mindful of a few things:</p>
<ol>
<li>the user's network connection: avoid re-fetching data that is already available</li>
<li>what to do while waiting for the server response</li>
<li>how to handle when data is not available (server error, or no data)</li>
<li>how to recover if integration breaks (endpoint unavailable, resource changed, etc)</li>
</ol>
<p>And now is when things start getting interesting. That first bullet, Item 1, is clearly related to the fetching state, while Item 2 slowly transitions towards the managing state. Items 3 and 4 are definitely on the managing state scope, but they are both dependent on the fetch action and the server integration. The line is definitely blurry. Dealing with all these moving pieces is complex, and these are patterns that do not change much from app to app. Whenever and however we fetch data, we must deal with those 4 scenarios.</p>
<p>Luckily, thanks to libraries such as <a href="https://react-query.tanstack.com/">React-Query</a> and <a href="https://swr.vercel.app/">SWR</a> every pattern shown for the local state is smoothly applied for external data. Libraries like these handle cache locally, so whenever the state is already available they can leverage settings definition to either renew data or use from the local cache. Moreover, they can even provide the user with stale data <em>while</em> they refresh content and prompt for an interface update whenever possible.</p>
<p>In addition to this, the React team has been transparent from a very early stage about upcoming APIs which aim to improve the user and developer experience on that front (check out the <a href="https://github.com/reactwg/react-18/discussions/47#discussioncomment-847004">proposed Suspense documentation here</a>). Thanks to this, library authors have prepared for when such APIs land, and developers can start working with similar syntax as of today.</p>
<p>So now, let's add external state to our <code>MainUserManagement</code> layout with <code>SWR</code>:</p>
<pre><code>import { useSWR } from 'swr'
import { UserInfoProvider } from '../context/user-info'
import { ExtDataProvider } from '../context/external-data-provider'
import { UserNavigationLayout } from '../layouts/user-navigation'
import { ErrorReporter } from '../components/error-reporter'
import { Loading } from '../components/loading'

export const MainUserManagement = (page) =&gt; {
  const { data, error } = useSWR('/api/endpoint')

  if (error) =&gt; &lt;ErrorReporter {...error} /&gt;
  if (!data) =&gt; &lt;Loading /&gt;

  return (
    &lt;UserInfoProvider&gt;
      &lt;ExtDataProvider&gt;
        &lt;UserNavigationLayout&gt;
          {page}
        &lt;/UserNavigationlayout&gt;
      &lt;/ExtDataProvider&gt;
    &lt;/UserInfoProvider&gt;
  )
}
</code></pre>

<p>As you can see above, the <code>useSWR</code> hook provides a lot of abstractions:</p>
<ul>
<li>a default fetcher</li>
<li>zero-config caching layer</li>
<li>error handler</li>
<li>loading handler</li>
</ul>
<p>With 2 conditions we can provide early returns within our component for when the request fails (error), or for while the round-trip to the server is not yet done (loading). For these reasons, the libraries side closely to State Management libraries. Although they are not exactly user management, they integrate well and provide us with enough tools to simplify managing these complex asynchronous states.</p>
<p>It is important to emphasize something at this point: a great advantage of having an isomorphic application is saving requests for the back-end side. Adding additional requests to your app once it is already on the client-side will affect the perceived performance.  There’s a great article (and e-book!) on this topic <a href="https://www.netlify.com/blog/2021/06/14/how-next.js-became-a-top-jamstack-framework/">here</a> that goes much more in-depth.</p>
<p>This pattern is not intended in any way to replace <code>getStaticProps</code> or <code>getServerSideProps</code> on Next.js apps. It is yet another tool in the developer's belt to build with when presented with peculiar situations.</p>
Final Considerations
<p>While we wrap up with these patterns, it is important to stress out a few caveats which may creep out on you if you are not mindful as you implement them. First, let us recapitulate what we have covered in this article:</p>
<ul>
<li>Context as a way of avoiding Prop Drilling;</li>
<li>React core APIs for managing state (<code>useState</code> and <code>useReducer</code>);</li>
<li>Passing client-side state throughout a Next.js application;</li>
<li>How to prevent certain routes from accessing state;</li>
<li>How to handle data-fetching on the client-side for Next.js apps.</li>
</ul>
<p>There are three important tradeoffs that we need to be aware of when opting for these techniques:</p>
<ol>
<li>Using the server-side methods for generating content statically is often preferable to fetching the state from the client-side.</li>
<li>The Context API can lead to multiple re-renders if you aren’t careful about where the state changes take place.</li>
</ol>
<p>Making good consideration of those points will be important, in addition all good practices when dealing with state in a client-side React app remain useful on a Next.js app. The server layer may be able to offer a performance boost and this by itself may mitigate some computation issues. But it will also benefit from sticking to the common best practices when it comes to rendering performance on apps.</p>
Try It Yourself
<p>You can check the patterns described in this article live on <a href="https://nextjs-layout-state.netlify.app/">nextjs-layout-state.netlify.app</a> or check out the code on <a href="https://github.com/atilafassina/nextjs-layout-state">github.com/atilafassina/nextjs-layout-state</a>. You can even just click this button to instantly clone it to your chosen Git provider and deploy it to Netlify:</p>
<p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/atilafassina/nextjs-layout-state"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4cbbb757-9bee-4c1c-b84a-6e8dfed5c0a6/deploy-to-netlify-button.svg" /></a></p>
<p>In case you would like something less opinionated or are just thinking about getting started with Next.js, there is this <a href="https://github.com/cassidoo/next-netlify-starter">awesome starter project to get you going</a> all set up to easily deploy to Netlify. Again, Netlify makes it easy as pie to clone it to your own repository and deploy:</p>
<p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/cassidoo/next-netlify-starter"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4cbbb757-9bee-4c1c-b84a-6e8dfed5c0a6/deploy-to-netlify-button.svg" /></a></p>
References
<ul>
<li><a href="https://blog.isquaredsoftware.com/2021/01/context-redux-differences/">Context and Redux: differences</a></li>
<li>Next.js <a href="https://github.com/vercel/next.js/discussions/26389">Wrapper Proposal</a></li>
<li><a href="https://nextjs.org/docs/basic-features/layouts">Next.js Layouts</a></li>
<li><a href="https://jotai.pmnd.rs/">Jōtai</a></li>
<li><a href="https://www.netlify.com/blog/2020/12/01/using-react-context-for-state-management-in-next.js/">Using React Context for State Management in Next.js</a></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Átila Fassina)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7be7a6e9-5d44-4941-8a6c-dfee3435cc9b/state-management-nextjs.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Stories Of September (2021 Desktop Wallpapers Edition)]]></title>
            <link>https://smashingmagazine.com/2021/08/desktop-wallpaper-calendars-september-2021/</link>
            <guid>https://smashingmagazine.com/2021/08/desktop-wallpaper-calendars-september-2021/</guid>
            <pubDate>Tue, 31 Aug 2021 08:00:00 GMT</pubDate>
            <description><![CDATA[New month, new wallpapers! In this post, you’ll find inspiring wallpaper designs for September 2021. They were created with love by artists and designers from across the globe and are available with and without a calendar. Enjoy!]]></description>
            <content:encoded><![CDATA[<p>September is just around the corner, and, well, that means... it’s time for some new wallpapers! Since more than ten years now, our <a href="https://www.smashingmagazine.com/category/wallpapers">monthly wallpapers series</a> is the perfect opportunity for artists and designers from all across the world to challenge their creative skills and dive into a little project just for fun. Telling the <strong>story they want to tell</strong>, using the tools they love. This always makes for an exciting and unique collection of wallpapers each month anew. And, of course, this month is no exception.</p>

<p>In this post, you’ll find wallpaper designs for <strong>September 2021</strong>, created with love by the community for the community. All of them are available in versions with and without a calendar and can be downloaded for free. A big thank-you to everyone who shared their artworks with us — this post wouldn’t exist without you!</p>

<p>Last but not least, to cater for some extra variety, we also compiled a little <strong>best-of</strong> from past September editions at the end of this post. Enjoy!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
</ul>

<div>
<h3>Submit a wallpaper!</h3>
<p>Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>! <a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Join in! →</a></p>
</div>

Finding The Balance
<p>“One evening last week I felt a little stressed, so I decided to have a short walk outside. When I went out of the door, I saw two young hares jumping around, and a bat which flew just over my head. I sat down on a garden chair and watched while Jupiter slowly rose above the trees. The crisp air of the autumn night reminded me of how the seasons keep changing. Here in Finland the differences between seasons are extremely large, as both the temperatures and the duration of sunlight vary a lot. However, twice a year on the equinoxes everything is in balance. I hope we all can find the same balance in our own lives.” — Designed by <a href="https://firmatverkkoon.fi">Tuomas Karjalainen</a> from Finland.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/sep-21-finding-the-balance-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bdfaaaac-a4fb-475b-997c-ac45db998da0/sep-21-finding-the-balance-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/sep-21-finding-the-balance-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/cal/sep-21-finding-the-balance-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/cal/sep-21-finding-the-balance-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/cal/sep-21-finding-the-balance-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/cal/sep-21-finding-the-balance-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/cal/sep-21-finding-the-balance-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/finding-the-balance/nocal/sep-21-finding-the-balance-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Sunny September
<p>“September greets us and invites us to enjoy warm and sunny days.” — Designed by <a href="https://www.librafire.com/">LibraFire</a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/sep-21-sunny-september-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/216b8e9d-a135-4fa5-90fa-ad176fb47a87/sep-21-sunny-september-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/sep-21-sunny-september-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/cal/sep-21-sunny-september-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/sunny-september/nocal/sep-21-sunny-september-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Wine Harvest Season
<p>“Welcome to the wine harvest season in Serbia. It’s September, and the hazy sunshine bathes the vines on the slopes of Fruška Gora. Everything is ready for the making of Bermet, the most famous wine from Serbia. This spiced wine was a favorite of the Austro-Hungarian elite and was served even on the Titanic. Bermet’s recipe is a closely guarded secret, and the wine is produced by just a handful of families in the town of Sremski Karlovci, near Novi Sad. On the other side of Novi Sad, plains of corn and sunflower fields blend in with the horizon, catching the last warm sun rays of this year.” — Designed by <a href="https://www.popwebdesign.net/logo-design-novisad.html">PopArt Studio </a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/sep-21-wine-harvest-season-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8bdae6f-723d-4471-b320-1ccb8edad3aa/sep-21-wine-harvest-season-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/sep-21-wine-harvest-season-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/cal/sep-21-wine-harvest-season-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/wine-harvest-season/nocal/sep-21-wine-harvest-season-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Back To Business
<p>“They say September is known as the January in the fashion industry. And they’re not the only ones hitting the reset button! Kids go back to school and the workforce returns from their holidays. It takes extra effort to balance all the workload we seem to have forgotten about during the carefree summer days… But we can do it! ActiveCollab wishes you a smooth September.” — Designed by <a href="https://activecollab.com">ActiveCollab</a> from the United States.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/sep-21-back-to-business-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3e1d1d28-5501-4401-bfe3-e7c591d9ec3e/sep-21-back-to-business-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/sep-21-back-to-business-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/cal/sep-21-back-to-business-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/back-to-business/nocal/sep-21-back-to-business-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Go Bananas
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/sep-21-go-bananas-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/027f5056-d63d-43d8-8c40-eb1068847723/sep-21-go-bananas-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/sep-21-go-bananas-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/cal/sep-21-go-bananas-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/go-bananas/nocal/sep-21-go-bananas-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Labor Day
<p>“On September 6th, it’s time to celebrate the backbone of the economy, namely workers! A day to celebrate all the hard work, toil, and commitment day in and day out.” — Designed by <a href="https://www.everincreasingcircles.com/">Ever Increasing Circles</a> from the United Kingdom.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/sep-21-labor-day-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/197b528d-219d-461f-bca5-6ef00a85c74e/sep-21-labor-day-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/sep-21-labor-day-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1080x1080.jpg">1080x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/cal/sep-21-labor-day-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1080x1080.jpg">1080x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/labor-day/nocal/sep-21-labor-day-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Evening In Monaco
<p>Designed by <a href="https://picjumbo.com">Viktor Hanacek</a> from Czechia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/sep-21-evening-in-monaco-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/61898248-d6ea-4eb8-bfe0-3be0d225a8ba/sep-21-evening-in-monaco-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/sep-21-evening-in-monaco-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-2560x1440.jpg">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/cal/sep-21-evening-in-monaco-cal-3840x2160.jpg">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-2560x1440.jpg">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/evening-in-monaco/nocal/sep-21-evening-in-monaco-nocal-3840x2160.jpg">3840x2160</a></li>
</ul>

Meets For Speed
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/sep-21-meets-for-speed-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ce2a563-3053-4a48-ae11-2f79a9a28845/sep-21-meets-for-speed-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/sep-21-meets-for-speed-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/cal/sep-21-meets-for-speed-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-21/meets-for-speed/nocal/sep-21-meets-for-speed-nocal-3840x2160.png">3840x2160</a></li>
</ul>



Oldies But Goodies

<p>Below you’ll find a selection of <strong>September wallpapers from our archives</strong> that are just too good to be forgotten. Please note that these designs don’t come with a calendar.</p>

<p></p><h3>Weekend Relax</h3><p></p>
<p>“Since we are mostly staying in this summer, I’m looking forward for the weekend to enjoy drinks with friends!” — Designed by <a href="https://drinkingagein.com/">Robert</a> from the United States.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dff475dd-1a0b-497d-8598-3e13142a8ce2/sep-20-weekend-relax-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30f65a03-22e0-4593-92ec-9ab2e0bed79e/sep-20-weekend-relax-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/30f65a03-22e0-4593-92ec-9ab2e0bed79e/sep-20-weekend-relax-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/weekend-relax/nocal/sep-20-weekend-relax-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<h3>Terrazzo</h3>
<p>“With the end of summer and fall coming soon, I created this terrazzo pattern wallpaper to brighten up your desktop. Enjoy this month!” — Designed by <a href="https://www.embee.me/">Melissa Bogemans</a> from Belgium.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2ab4afe-e503-4235-96fc-3c9ceade89e3/sep-20-terrazzo-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2644364f-a26f-40da-a000-4f0aea0db125/sep-20-terrazzo-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2644364f-a26f-40da-a000-4f0aea0db125/sep-20-terrazzo-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/terrazzo/nocal/sep-20-terrazzo-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<h3>Better Days Ahead</h3>
<p>“A hopeful message we all need right now.” — Designed by <a href="https://footballopus.com/">Andrew</a> from Portugal.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea38c15d-8156-4a09-af91-fe496965680c/sep-20-better-days-ahead-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4e2687bb-3a55-4652-b8b2-9a9eb695ec39/sep-20-better-days-ahead-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4e2687bb-3a55-4652-b8b2-9a9eb695ec39/sep-20-better-days-ahead-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-20/better-days-ahead/nocal/sep-20-better-days-ahead-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/better-days-ahead/nocal/sep-20-better-days-ahead-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/better-days-ahead/nocal/sep-20-better-days-ahead-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/better-days-ahead/nocal/sep-20-better-days-ahead-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/better-days-ahead/nocal/sep-20-better-days-ahead-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/better-days-ahead/nocal/sep-20-better-days-ahead-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<h3>Flower Soul</h3>
<p>“The earth has music for those who listen. Take a break and relax and while you drive out the stress, catch a glimpse of the beautiful nature around you. Can you hear the rhythm of the breeze blowing, the flowers singing, and the butterflies fluttering to cheer you up? We dedicate flowers which symbolize happiness and love to one and all.” — Designed by <a href="http://acodez.in/">Krishnankutty</a> from India.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f691ba9d-d4ab-4767-9899-836c61f6aeb0/sept-16-flower-soul-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/247433e6-81e3-4d55-9b68-55578f4138b8/sept-16-flower-soul-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/247433e6-81e3-4d55-9b68-55578f4138b8/sept-16-flower-soul-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-16/flower-soul/nocal/sept-16-flower-soul-nocal-2560x1440.png">2560x1440</a></li></ul>

<h3>Autumn Rains</h3>
<p>“This autumn, we expect to see a lot of rainy days and blues, so we wanted to change the paradigm and wish a warm welcome to the new season. After all, if you come to think of it: rain is not so bad if you have an umbrella and a raincoat. Come autumn, we welcome you!” — Designed by <a href="https://www.popwebdesign.net/web-design-agency.html">PopArt Studio</a> from Serbia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ee2102d2-b5fc-4da5-8dd8-4ad100b079e7/sept-17-autumn-rains-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55161fb1-16dc-47e1-a118-5ecd0f0a3fbb/sept-17-autumn-rains-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/55161fb1-16dc-47e1-a118-5ecd0f0a3fbb/sept-17-autumn-rains-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/autumn-rains/nocal/sept-17-autumn-rains-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<h3>Summer Ending</h3>
<p>“As summer comes to an end, all the creatures pull back to their hiding places, searching for warmth within themselves and dreaming of neverending adventures under the tinted sky of closing dog days.” — Designed by <a href="https://www.creitive.com/">Ana Masnikosa</a> from Belgrade, Serbia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/22d5ee98-2e90-4597-a06f-88de7965c1e2/sept-17-summer-ending-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed639caf-f1b5-43e7-9af6-ff85a675a4ef/sept-17-summer-ending-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ed639caf-f1b5-43e7-9af6-ff85a675a4ef/sept-17-summer-ending-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-ending/nocal/sept-17-summer-ending-nocal-2560x1440.png">2560x1440</a></li></ul>



<h3>Funny Cats</h3>
<p>“Cats are beautiful animals. They’re quiet, clean, and warm. They’re funny and can become an endless source of love and entertainment. Here for the cats!” — Designed by <a href="http://www.urbanui.com">UrbanUI</a> from India.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/81a90359-0917-4ca1-84e5-700b5c71e3b9/sept-17-funny-cats-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77eaabbb-9743-45b6-99f3-f35a5584275f/sept-17-funny-cats-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77eaabbb-9743-45b6-99f3-f35a5584275f/sept-17-funny-cats-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-360x640.png">360x640</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/funny-cats/nocal/sept-17-funny-cats-nocal-1920x1080.png">1920x1080</a></li></ul><p></p>

<p></p><h3>Finding Jaguar</h3><p></p>
<p></p><p>“Nature and our planet have given us life, enabled us to enjoy the most wonderful place known to us in the universe. People have given themselves the right to master something they do not fully understand. We dedicate this September calendar to a true nature lover, Vedran Badjun from Dalmatia, Croatia, who inspires us to love our planet, live in harmony with it and appreciate all that it has to offer. Amazon, Siberia, and every tree or animal on the planet are treasures we lose every day. Let’s change that!” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5ee9f91-efb8-43aa-b04a-67d2281d4409/sep-19-finding-jaguar-large-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/305dc235-0875-4582-94d8-fba50953d129/sep-19-finding-jaguar-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/305dc235-0875-4582-94d8-fba50953d129/sep-19-finding-jaguar-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-19/finding-jaguar/nocal/sep-19-finding-jaguar-nocal-2560x1440.jpg">2560x1440</a>    </li>
</ul>

<p></p><h3>Cacti Everywhere</h3><p></p>
<p></p><p>“Seasons come and go, but our brave cactuses still stand. Summer is almost over, and autumn is coming, but the beloved plants don’t care.” — Designed by <a href="https://pathlove.com/">Lívia Lénárt</a> from Hungary.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/65da1859-5ab5-475e-9940-f4e3045455d4/sep-18-cacti-everywhere-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2df837fa-5d23-4898-8502-0ed53e2cb2df/sep-18-cacti-everywhere-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2df837fa-5d23-4898-8502-0ed53e2cb2df/sep-18-cacti-everywhere-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/cacti-everywhere/nocal/sep-18-cacti-everywhere-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<p></p><h3>Summer Is Leaving</h3><p></p>
<p></p><p>“It is inevitable. Summer is leaving silently. Let us think of ways to make the most of what is left of the beloved season.” — Designed by <a href="https://www.bootstrapdash.com">Bootstrap Dashboards</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/393a201f-49e1-4278-a863-7d71a472dc07/sept-17-summer-is-leaving-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228dcef7-00f3-4656-a914-83056db8a073/sept-17-summer-is-leaving-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/228dcef7-00f3-4656-a914-83056db8a073/sept-17-summer-is-leaving-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-360x640.png">360x640</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1600x900.png">1600x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/summer-is-leaving/nocal/sept-17-summer-is-leaving-nocal-1920x1080.png">1920x1080</a></li>
</ul>

<p></p><h3>Hungry</h3><p></p>
<p></p><p>Designed by <a href="http://www.doud.be">Elise Vanoorbeek</a> from Belgium.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f0b9019c-0e62-4f2e-8b03-9502c1a85a00/sept-14-hungry-full-opt.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/388cd653-31f5-4e98-bd72-29cb1e8ed4bf/sept-14-hungry-preview.jpg" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/388cd653-31f5-4e98-bd72-29cb1e8ed4bf/sept-14-hungry-preview.jpg">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1440x1050.jpg">1440x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-14/hungry/nocal/sept-14-hungry-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Summer Collapsed Into Fall</h3><p></p>
<p></p><p>“The lands are painted gold lit with autumn blaze. And all at once the leaves of the trees started falling, but none of them are worried. Since, everyone falls in love with fall.” — Designed by <a href="https://mindster.in/">Mindster</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b3e1c6b-ac43-4143-a6e0-9d61476ef566/sep-18-summer-collapsed-into-fall-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8cf989ff-e88c-42a3-abc7-976c59c2d339/sep-18-summer-collapsed-into-fall-nocal-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8cf989ff-e88c-42a3-abc7-976c59c2d339/sep-18-summer-collapsed-into-fall-nocal-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-18/summer-collapsed-into-fall/nocal/sep-18-summer-collapsed-into-fall-nocal-2560x1440.png">2560x1440</a></li>
</ul>



<p></p><h3>Long Live Summer</h3><p></p>
<p></p><p>“While September’s Autumnal Equinox technically signifies the end of the summer season, this wallpaper is for all those summer lovers, like me, who don’t want the sunshine, warm weather and lazy days to end.” — Designed by <a href="http://www.vickigrunewald.com/">Vicki Grunewald</a> from Washington.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1431a5a8-a30f-4ab8-8875-0be50394f701/sept-15-long-live-summer-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/266371d3-48a0-4692-b12b-c2a0162f0b95/sept-15-long-live-summer-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/266371d3-48a0-4692-b12b-c2a0162f0b95/sept-15-long-live-summer-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/long-live-summer/nocal/sept-15-long-live-summer-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Listen Closer… The Mushrooms Are Growing</h3><p></p>
<p></p><p>“It’s this time of the year when children go to school and grown-ups go to collect mushrooms.” — Designed by <a href="http://izhik.com">Igor Izhik</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/053d1630-6081-4179-b45e-e4b9311c7ef4/sept-15-listen-closer-the-mushrooms-are-growing-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48d2812e-6e2b-4e34-87ec-e23a53297041/sept-15-listen-closer-the-mushrooms-are-growing-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/48d2812e-6e2b-4e34-87ec-e23a53297041/sept-15-listen-closer-the-mushrooms-are-growing-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-2560x1440.jpg">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-15/listen-closer-the-mushrooms-are-growing/nocal/sept-15-listen-closer-the-mushrooms-are-growing-nocal-2560x1600.jpg">2560x1600</a></li>
</ul>

<p></p><h3>#Spring</h3><p></p>
<p></p><p>“Such a lovely time of the year in Melbourne!” — Designed by <a href="http://www.tazi.com.au">Tazi</a> from Australia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/45b9a31d-94f4-40ee-ab44-bf1126788c31/sept-17-spring-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0107721-79bb-42b7-961e-269ff53c7965/sept-17-spring-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0107721-79bb-42b7-961e-269ff53c7965/sept-17-spring-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sept-17/spring/nocal/sept-17-spring-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Never Stop Exploring</h3><p></p>
<p></p><p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/89f02687-d964-470b-9f2c-8cc52b7f25ee/sep-20-never-stop-exploring-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/525be032-d473-4d7a-a706-0d46d65742f4/sep-20-never-stop-exploring-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/525be032-d473-4d7a-a706-0d46d65742f4/sep-20-never-stop-exploring-preview-opt.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/cal/sep-20-never-stop-exploring-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/sep-20/never-stop-exploring/nocal/sep-20-never-stop-exploring-nocal-3840x2160.png">3840x2160</a></li>
</ul>

]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bdfaaaac-a4fb-475b-997c-ac45db998da0/sep-21-finding-the-balance-preview-opt.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Refactoring CSS: Optimizing Size And Performance (Part 3)]]></title>
            <link>https://smashingmagazine.com/2021/08/refactoring-css-optimizing-size-performance-part3/</link>
            <guid>https://smashingmagazine.com/2021/08/refactoring-css-optimizing-size-performance-part3/</guid>
            <pubDate>Mon, 30 Aug 2021 10:00:00 GMT</pubDate>
            <description><![CDATA[There are many CSS optimization techniques to tackle potential file size and performance issues. Let’s take a look at some of them. After all, if deploying the refactored codebase causes loading or performance issues, it will result in less traffic and revenue, which might leave the management and project managers dissatisfied.]]></description>
            <content:encoded><![CDATA[<p>In previous articles from this series, we’ve covered <a href="https://www.smashingmagazine.com/2021/07/refactoring-css-introduction-part1/">auditing CSS codebase health</a> and the <a href="https://www.smashingmagazine.com/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/">incremental CSS refactoring strategy</a>, testing, and maintenance. Regardless of how much the CSS codebase has been improved during the refactoring process and how much more maintainable and extendable it is, the <strong>final stylesheet needs to be optimized</strong> for the best possible performance and least possible file size.</p>
<p>Deploying the refactored codebase shouldn’t result in worse website performance and worse user experience. After all, <a href="https://neilpatel.com/blog/loading-time/">users won’t wait around forever</a> for the website to load. Also, the management will be dissatisfied with the decreased traffic and revenue caused by the unoptimized codebase, despite the code quality improvements.</p>
<p>In this article, we’re going to cover <strong>CSS optimization strategies</strong> that can optimize CSS file size, loading times, and render performance. That way, the refactored CSS codebase is not only more maintainable and extensible but also performant and checks all boxes that are important both to the end-user and management.</p>
<div>
<h4>Part Of: <a href="/category/refactoring/">CSS Refactoring</a></h4>
<ul>
<li>Part 1: <a href="/2021/07/refactoring-css-introduction-part1/">CSS Refactoring: Introduction</a></li>
<li>Part 2: <a href="/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/">CSS Strategy, Regression Testing And Maintenance</a></li>
<li>Part 3: <strong>Optimizing Size And Performance</strong></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

Optimizing Stylesheet File Size
<p>Optimizing file size boils down to removing unnecessary characters and formatting and optimizing the CSS code to use different syntax or shorthand properties to reduce the overall number of characters in a file.</p>
<h3>Optimization And Minification</h3>
<p><strong>CSS optimization and minification</strong> have been around for years and became a staple in frontend optimization. Tools like <a href="https://github.com/cssnano/cssnano">cssnano</a> and <a href="https://www.npmjs.com/package/clean-css">clean-css</a> are among my favorite tools when it comes to CSS optimization and minification. They offer a wide variety of customization options to further control how code is being optimized and which browsers are supported.</p>
<p>These tools work in a similar way. First, the unoptimized code is parsed and transpiled following the rules set in the config. The result is the code that uses <strong>fewer characters</strong> but still retains the formatting (line breaks and whitespaces).</p>
<pre><code>/* Before - original and unoptimized code */
.container {
  padding: 24px 16px 24px 16px;
  background: #222222;
}

/* After - optimized code with formatting */
.container {
  padding: 24px 16px;
  background: #222;
}</code></pre>

<p>And finally, the transpiled optimized code is <strong>minified by removing all unnecessary text formatting</strong>. Depending on the codebase and supported browsers set in the config, code with deprecated vendor prefixes can also get removed.</p>
<pre><code>/* Before - optimized code with formatting */
.container {
  padding: 24px 16px;
  background: #222;
}

/* After - optimized and minified code */
.container{padding:24px 16px;background:#222}</code></pre>

<p>Even in this basic example, we’ve managed to reduce the overall file size from 76 bytes to 55 bytes, resulting in a 23% reduction. Depending on the codebase and the optimization tools and config, CSS optimization and minification can be even more effective.</p>
<p>CSS optimization and minification can be considered as <strong>an easy win</strong> due to the significant payoff with just a few tweaks to the CSS workflow. That is why minification should be treated as the <strong>bare minimum</strong> performance optimization and a requirement for all stylesheets on the project.</p>
<h3>Optimizing Media Queries</h3>
<p>When we write media queries in CSS, especially when using multiple files (PostCSS or Sass), we usually don’t nest the code under a single media query for an entire project. For improved maintainability, modularity, and code structure, we usually write the same media query expressions for multiple CSS components.</p>
<p>Let’s consider the following example of an unoptimized CSS codebase.</p>
<pre><code>.page {
  display: grid;
  grid-gap: 16px;
}

@media (min-width: 768px) {
  .page {
    grid-template-columns: 268px auto;
    grid-gap: 24px;
  }
}

/* ... */

.products-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 16px;
}

@media (min-width: 768px) {
  .products-grid {
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 20px;
  }
}</code></pre>

<p>As you can see, we have a repeated <code>@media (min-width: 768px)</code> per component for better readability and maintenance. Let’s run the optimization and minification on this code example and see what we get.</p>
<pre><code>.page{display:grid;grid-gap:16px}@media (min-width: 768px){.page{grid-template-columns:268px auto;grid-gap:24px}}.products-grid{display:grid;grid-template-columns:repeat(2,1fr);grid-gap:16px}@media (min-width: 768px){.products-grid{grid-template-columns:repeat(3,1fr);grid-gap:20px}}</code></pre>

<p>This might be a bit difficult to read, but all we have to notice is the repeated <code>@media (min-width: 768px)</code> media query. We’ve already concluded that we want to reduce the number of characters in a stylesheet and we can <strong>nest multiple selectors</strong> under a single media query, so why didn’t the minifier removed the duplicated expression? There is a simple reason for that.</p>
<p><strong>Rule order matters in CSS,</strong> so to merge the duplicated media queries, code blocks need to be moved. This will result in <a href="https://css-tricks.com/precedence-css-order-css-matters/">rule orders being changed</a> which can cause unwanted side-effects in styles.</p>
<p>However, combining media queries could potentially make the file size even smaller, depending on the codebase and structure. Tools and packages like <a href="https://github.com/solversgroup/postcss-sort-media-queries">postcss-sort-media-queries</a> allow us to remove duplicated media queries and further reduce the file size.</p>
<p>Of course, there is the important caveat of having a <strong>well-structured CSS codebase structure</strong> that doesn’t depend on the rule order. This optimization should be taken into account when planning the CSS refactor and establishing ground rules.</p>
<p>I would recommend first checking if the optimization benefit outweighs the potential risks. This can be easily done by running a <a href="https://www.smashingmagazine.com/2021/07/refactoring-css-introduction-part1/#auditing-css-codebase-health">CSS audit</a> and checking media query stats. If it does, I would recommend adding it later on and <a href="https://www.smashingmagazine.com/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/#testing-and-avoiding-regressions">running automated regression testing</a> to catch any unexpected side-effects and bugs that can happen as a result.</p>
<h3>Removing Unused CSS</h3>
<p>During the refactoring process, there is always a possibility that you’ll end up with some <strong>unused legacy styles</strong> that haven’t been completely removed or you’ll have some newly added styles that are not being used. These styles also add to the overall character count and the file size. Eliminating these unused styles using automated tools, however, can be somewhat risky because the tools cannot accurately predict which styles are actually used.</p>
<p>Tools like <a href="https://github.com/FullHuman/purgecss">purgecss</a> go through all the files in the project and use all the classes mentioned in files as selectors, just to <strong>err on the side of caution</strong> and not accidentally delete selectors for dynamic, JavaScript-injected elements, among other potential cases. However, purgecss offers flexible config options as workarounds for these potential issues and risks.</p>
<p>However, this improvement should be done <strong>only when the potential benefits outweigh the risks</strong>. Additionally, this optimization technique will require considerable time to set up, configure and test, and might cause unintended issues down the line, so proceed with caution and make sure that the setup is bulletproof.</p>
Eliminating Render-Blocking CSS
<p>By default, <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css">CSS is a render-blocking resource</a>, meaning that <strong>the website won’t be displayed</strong> to the user until all linked stylesheets and their dependencies (fonts, for example) have been downloaded and parsed by the browser. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b86b39a7-12f3-42aa-bf91-3d8eacf24386/1-refactoring-css-optimizing-size-performance-part3.png" /></p>
<p>If the stylesheet file has a large file size or multiple dependencies which are located on third-party servers or CDNs, website rendering can be delayed significantly depending on the network speed and reliability.</p>
<p><a href="https://web.dev/lcp/"><strong>Largest Contentful Paint</strong></a> (LCP) has become an important metric in the last few months. LCP is not only important for performance but also SEO — websites with better LCP scores will have better <a href="https://ahrefs.com/blog/core-web-vitals/">search results ranking</a>. Removing render-blocking resources like CSS is one way of improving the LCP score.</p>
<p>However, if we would defer the stylesheet loading and processing, this would result in <strong>Flash Of Unstyled Content</strong> (FOUC) — content would be displayed to the user right away and styles would be loaded and applied a few moments later. This switch could look jarring and it may even confuse some users.</p>
<h3>Critical CSS</h3>
<p>With Critical CSS, we can ensure that the <strong>website loads with the minimum amount of styles</strong> which are guaranteed to be used on the page when it’s initially rendered. This way, we can make the FOUC much less noticeable or even eliminate it for most cases. For example, if the homepage features a header component with navigation and a hero component located <a href="https://web.dev/extract-critical-css/">above-the-fold</a>, this means that the critical CSS will contain all the necessary global and component styles for these components, while styles for other components on the page will be deferred.</p>
<p>This CSS is inlined in HTML under a <code>style</code> tag, so the styles are loaded and parsed alongside the HTML file. Although this will result in a <strong>slightly larger HTML</strong> file size (which should also be minified), all other non-critical CSS will be deferred and won’t be loaded right away and the website will render faster. All in all, the benefits outweigh the increase in the HTML file size.</p>
<pre><code>&lt;head&gt;
  &lt;style type="text/css"&gt;&lt;!-- Minified Critical CSS markup --&gt;&lt;/style&gt;
&lt;/head&gt;</code></pre>

<p>There are many automated <a href="https://web.dev/extract-critical-css/#critical">tools and NPM packages</a> out there, depending on your setup, that can extract critical CSS and generate deferred stylesheets.</p>
<h3>Deferring Stylesheets</h3>
<p>How exactly do we make the CSS to be non-blocking? We know that it shouldn’t be referenced in the HTML <code>head</code> element when the page HTML is first downloaded. Demian Renzulli has <a href="https://web.dev/defer-non-critical-css/">outlined this method</a> in his article.</p>
<p>There is <strong>no native HTML approach</strong> (as of yet) to optimize or defer the loading of render-blocking resources, so we need to use JavaScript to insert the non-critical stylesheet into the HTML markup after the initial render. We also need to make sure that these styles get loaded in the non-optimal (render-blocking) way if a user is visiting the page with JavaScript not enabled in the browser.</p>
<pre><code>&lt;!-- Deferred stylesheet --&gt;
&lt;link rel="preload" as="style" href="path/to/stylesheet.css" onload="this.onload=null;this.rel='stylesheet'"&gt;

&lt;!-- Fallback --&gt;
&lt;noscript&gt;
  &lt;link rel="stylesheet" href="path/to/stylesheet.css"&gt;
&lt;/noscript&gt;</code></pre>

<p>With <code>link rel="preload" as="style"</code> makes sure that the stylesheet file is requested asynchronously, while <code>onload</code> JavaScript handler makes sure that the file is loaded and processed by the browser after the HTML document has finished loading. Some cleanup is needed, so we need to set the <code>onload</code> to <code>null</code> to avoid this function running multiple times and causing unnecessary re-renders.</p>
<p>This is exactly how Smashing Magazine handles its stylesheets. Each template (homepage, article categories, article pages, etc.) has a <strong>template-specific critical CSS</strong> inlined inside HTML <code>style</code> tag in the <code>head</code> element, and a <strong>deferred</strong> <code>main.css</code> <strong>stylesheet</strong> which contains all non-critical styles. </p>
<p>However, instead of toggling the <code>rel</code> parameter, here we can see the media query being switched from the automatically deferred low-priority <code>print</code> media to the high-priority <code>all</code> attribute when the page has finished loading. This is an alternative, equally viable approach to defer loading of non-critical stylesheets.</p>
<pre><code>&lt;link href="/css/main.css" media="print" onload="this.media='all'" rel="stylesheet"&gt;</code></pre>

<h3>Splitting And Conditionally Loading Stylesheets With Media Queries</h3>
<p>For the cases when the final stylesheet file has a large file size even after the aforementioned optimizations have been applied, you could <strong>split the stylesheets</strong> into multiple files based on media queries and use media property on stylesheets referenced in the link HTML element to <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#conditionally_loading_resources_with_media_queries">load them conditionally</a>. </p>
<pre><code>&lt;link href="print.css" rel="stylesheet" media="print"&gt;
&lt;link href="mobile.css" rel="stylesheet" media="all"&gt;
&lt;link href="tablet.css" rel="stylesheet" media="screen and (min-width: 768px)"&gt;
&lt;link href="desktop.css" rel="stylesheet" media="screen and (min-width: 1366px)"&gt;</code></pre>

<p>That way, if a mobile-first approach is used, styles for larger screen sizes won’t be downloaded or parsed on mobile devices that could be running on slower or unreliable networks.</p>
<p>Just to reiterate, this method should be used if the result of the previously mentioned optimization methods results in a stylesheet with suboptimal file size. For regular cases, this optimization method won’t be as effective or impactful, depending on the individual stylesheet size.</p>
<h3>Deferring Font Files And Stylesheets</h3>
<p>Deferring font stylesheets (Google Font files, for example) could also be beneficial for initial render performance. We’ve concluded that stylesheets are render-blocking, but so are the font files that are referenced in the stylesheet. Font files also <strong>add quite a bit of overhead</strong> to the initial render performance.</p>
<p>Loading font stylesheets and font files is a complex topic and diving into it would take a whole new article just to explain all viable approaches. Luckily, Zach Leatherman has outlined many viable strategies in this awesome <a href="https://www.zachleat.com/web/comprehensive-webfonts/">comprehensive guide</a> and summarized the pros and cons of each approach. If you use Google Fonts, Harry Roberts has outlined a <a href="https://csswizardry.com/2020/05/the-fastest-google-fonts/">strategy for the fastest loading of Google Fonts</a>.</p>
<p>If you decide on deferring font stylesheets, you’ll end up with Flash of Unstyled Text (FOUT). The page will initially be rendered with the fallback font until the deferred font files and stylesheets have been downloaded and parsed, at which point the new styles will be applied. This change <strong>can be very noticeable</strong> and can cause layout shifts and confuse users, depending on the individual case.</p>
<p><a href="https://www.smashingmagazine.com/2021/05/reduce-font-loading-impact-css-descriptors/">Barry Pollard has outlined some strategies</a> that can help us deal with FOUT and talked about the upcoming size-adjust CSS feature which will provide an easier, more native way of dealing with FOUT.</p>
Server-Side Optimizations
<h3>HTTP Compression</h3>
<p>In addition to minification and file-size optimization, static assets like HTML, CSS files, JavaScript files, etc. HTTP <a href="https://almanac.httparchive.org/en/2019/compression">compression algorithms</a> like Gzip and Brotli can be used to additionally reduce the downloaded file size. </p>
<p>HTTP compression needs to be configured on the server which depends on the tech stack and config. However, performance benefits may vary and may not have as much impact as standard stylesheet minification and optimization, as the browsers will still decompress the compressed files and have to parse them.</p>
<h3>Caching Stylesheets</h3>
<p><strong>Caching static files</strong> is a useful optimization strategy. Browsers will still have to download the static files from the server on the first load, but once they get cached they’ll be loaded from it directly on subsequent requests, speeding up the loading process.</p>
<p>Caching can be controlled via <a href="https://csswizardry.com/2019/03/cache-control-for-civilians/">Cache-Control</a> HTTP header at the server level (for example, using the <code>.htaccess</code> file on an Apache server).</p>
<p>With <code>max-age</code> we can indicate how long the file should stay cached (in seconds) in the browser and with <code>public</code>, we are indicating that the file can be cached by the browser and any other caches.</p>
<pre><code> Cache-Control: public, max-age=604800</code></pre>

<p>A more aggressive and effective cache strategy for static assets can be achieved with <code>immutable</code> config. This tells the browser that this particular file will never change and that any new updates will result in this file getting deleted and a new file with a different file name will take its place. This is known as <strong>cache-busting</strong>.</p>
<pre><code>Cache-Control: public, max-age=604800, immutable</code></pre>

<p>Without a <strong>proper cache-busting strategy</strong>, there is a risk of losing control over files that get cached on the user’s browser. Meaning that if the file were to change, the browser won’t be able to know that it should download the updated file and not use the outdated cached file. And from that point on, there is virtually nothing we can do to fix that and the user will be stuck with the outdated file until it expires. </p>
<p>For stylesheets, that could mean that if we were to update HTML files with new content and components that require new styling, these styles won’t display because the outdated stylesheet is cached without a cache-busting strategy and the browser won’t know that it has to download the new file.</p>
<p>Before using a caching strategy for stylesheets or any other static files, effective <a href="https://www.npmjs.com/package/postcss-hash">cache-busting mechanisms</a> should be implemented to prevent outdated static files from getting stuck in the user’s cache. You can use one of the following versioning mechanisms for cache-busting:</p>
<ul>
<li><strong>Appending a query string to the file name.</strong><br />For example <code>styles.css?v=1.0.1.</code> However, some CDNs can completely ignore or strip the query string from the file name and resulting in the file getting stuck in the user’s cache and never updating.</li>
<li><strong>Changing the file name or appending a hash.</strong><br />For example <code>styles.a1bc2.css</code> or <code>styles.v1.0.1.css.</code> This is more reliable and effective than appending a query string to the file name.</li>
</ul>
<h3>CDN Or Self-hosting?</h3>
<p>Content Delivery Network (CDN) is a group of geographically distributed servers that are commonly used for the reliable and fast delivery of static assets like images, videos, HTML files, CSS files, JavaScript files, etc. </p>
<p>Although CDNs might seem like a great alternative to self-hosting static assets, Harry Roberts has done <a href="https://csswizardry.com/2019/05/self-host-your-static-assets/">in-depth research on the topic</a> and concluded that self-hosting assets are more beneficial for performance.</p>
<blockquote>“There really is very little reason to leave your static assets on anyone else’s infrastructure. The perceived benefits are often a myth, and even if they weren’t, the trade-offs simply aren’t worth it. Loading assets from multiple origins is demonstrably slower.”</blockquote>

<p>That being said, I would recommend <strong>self-hosting the stylesheets</strong> (font stylesheets included, if possible) by default and moving to CDN only if there are viable reasons or other benefits to doing so.</p>
Auditing CSS File Size and Performance
<p><a href="https://www.webpagetest.org/">WebPageTest</a> and other similar performance auditing tools can be used to get a detailed overview of the website loading process, file sizes, render-blocking resources, etc. These tools can give you an insight into how your website loads on a <strong>wide range of devices</strong> — from a desktop PC running on a high-speed network to low-end smartphones running on slow and unreliable networks.</p>
<p>Let’s do a performance audit on a website mentioned in the first article from this series — the one with the 2MB of minified CSS.</p>
<p>First, we’ll take a look at the <strong>content breakdown</strong> to determine which resources take up the most bandwidth. From the following charts, we can see that the images take up most requests, meaning that they need to be lazy-loaded. From the second chart, we can see that stylesheets and JavaScript files are the largest in terms of file size. This is a good indication that these files need to either be minified and optimized, refactored, or split into multiple files and loaded asynchronously. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/96777627-b729-4d15-9eee-7b1b3c10c9f4/2-refactoring-css-optimizing-size-performance-part3.png" /></p>
<p>We can draw even more conclusions from the Web Vitals charts. By taking a look a the <a href="https://web.dev/lcp/">Largest Contentful Paint</a> (LCP) chart, we can get a detailed overview of render-blocking resources and how much they affect the initial render.</p>
<p>We could already conclude that the website <strong>stylesheet will have the most impact on the LCP</strong> and loading stats. However, we can see font stylesheets, JavaScript files, and images referenced inside the stylesheets that are also render-blocking. Knowing that we can apply the aforementioned optimization methods to reduce the LCP time by eliminating render-blocking resources.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/430b5464-d72b-4965-8cb7-b7fd98ba3b59/3-refactoring-css-optimizing-size-performance-part3.jpg" /></p>
Conclusion
<p>The refactoring process isn’t complete when the code health and quality have been improved and when codebase weaknesses and issues have been fixed. Refactored codebase should result in the <strong>same or improved performance</strong> compared to the legacy codebase.</p>
<p>End users shouldn’t experience performance issues or long loading times from the refactored codebase. Luckily, there are many methods out there to make sure that the codebases are both robust and performant — from the simple minification and optimization methods to the more complex methods like <strong>eliminating render-blocking resources</strong> and code-splitting.</p>
<p>We can use various <strong>performance auditing tools</strong> like <em>WebPageTest</em> to get a detailed overview of loading times, performance, render-blocking resources, and other factors so we can address these issues early and effectively.</p>
<div>
<h4>Part Of: <a href="/category/refactoring/">CSS Refactoring</a></h4>
<ul>
<li>Part 1: <a href="/2021/07/refactoring-css-introduction-part1/">CSS Refactoring: Introduction</a></li>
<li>Part 2: <a href="/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/">CSS Refactoring: Strategy, Regression Testing And Maintenance</a></li>
<li>Part 3: <strong>CSS Refactoring: Optimizing Size And Performance</strong></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

<h3>References</h3>
<ul>
<li>“<a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css">Render Blocking CSS</a>,” Ilya Grigorik</li>
<li>“<a href="https://web.dev/defer-non-critical-css/">Defer Non-Critical CSS</a>,” Demian Renzulli</li>
<li>“<a href="https://www.zachleat.com/web/comprehensive-webfonts/">A Comprehensive Guide To Font Loading Strategies</a>,” Zach Leatherman</li>
<li>“<a href="https://www.smashingmagazine.com/2021/05/reduce-font-loading-impact-css-descriptors/">A New Way To Reduce Font Loading Impact: CSS Font Descriptors</a>,” Barry Pollard</li>
<li>“<a href="https://csswizardry.com/2019/05/self-host-your-static-assets/">Self-Host Your Static Assets</a>,” Harry Roberts</li>
<li>“<a href="https://web.dev/optimize-webfont-loading/">Optimize WebFont Loading And Rendering</a>,” Ilya Grigorik</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Adrian Bece)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa4e0eab-b23c-42ac-a622-b2ca8a02edd0/refactoring-css-optimizing-size-performance-part3.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Compound Components In React]]></title>
            <link>https://smashingmagazine.com/2021/08/compound-components-react/</link>
            <guid>https://smashingmagazine.com/2021/08/compound-components-react/</guid>
            <pubDate>Fri, 27 Aug 2021 13:00:00 GMT</pubDate>
            <description><![CDATA[Compound components help developers build more expressive and flexible APIs to share state and logic within components. This tutorial explains how this can be achieved with the help of using the Context API and React to build components by using this advanced pattern.]]></description>
            <content:encoded><![CDATA[<p>Compound components help developers build more expressive and flexible APIs to share state and logic within components. This tutorial explains how this can be achieved with the help of using the Context API and React to build components by using this advanced pattern. </p>
<p><strong>Note</strong>: <em>In order to be able to follow along, you’ll need a basic understanding of React and how the Context API works.</em></p>
What Is A Compound Component?
<p>Compound components can be said to be a pattern that encloses the state and the behavior of a group of components but still gives the rendering control of its variable parts back to the external user.</p>
<p>From the definition above, taking note of the keywords: <strong>state</strong> and <strong>behavior</strong>. This helps us understand that compound component deal with state (i.e. how state behaves across a component which is enclosed by an external user being the parent of the component).</p>
<p>The objective of compound components is to provide a more expressive and flexible API for communication between the parent and the child components.</p>
<p>Think of it like the <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags in HTML:</p>
<pre><code>&lt;select&gt;
  &lt;option value="volvo"&gt;Volvo&lt;/option&gt;
  &lt;option value="mercedes"&gt;Mercedes&lt;/option&gt;
  &lt;option value="audi"&gt;Audi&lt;/option&gt;
&lt;/select&gt;</code></pre>

<p>The <code>select</code> tag works together with the <code>option</code> tag which is used for a drop-down menu to select items in HTML. Here the <code>&lt;select&gt;</code> manages the state of the UI, then the <code>&lt;option&gt;</code> elements are configured on how the <code>&lt;select&gt;</code> should work. Compound components in React are used to build a declarative UI component which helps to avoid prop drilling.</p>
<p>Prop drilling is passing props down multiple child components. This is also what they call a “code smell”. The worst part of prop drilling being that when the parent component re-renders, the child components will also re-render and cause a domino effect on the component. A good solution would be to use the React Context API which we will also look into later.</p>
Applying Compound Components In React
<p>This section explains the packages we can make use of in our application which adopt the compound component pattern of building components in React. This example is a <a href="https://reach.tech/menu-button"><code>Menu</code></a> component from the <code>@reach</code> UI package.</p>
<pre><code>import {
  Menu,
  MenuList,
  MenuButton,
  MenuItem,
  MenuItems,
  MenuPopover,
  MenuLink,
} from "@reach/menu-button";
import "@reach/menu-button/styles.css";</code></pre>

<p>Here’s a way you can use the <code>Menu</code> component:</p>
<pre><code>function Example() {
  return (
    &lt;Menu&gt;
      &lt;MenuButton&gt;Actions&lt;/MenuButton&gt;
      &lt;MenuList&gt;
        &lt;MenuItem&gt;Download&lt;/MenuItem&gt;
        &lt;MenuLink to="view"&gt;View&lt;/MenuLink&gt;
      &lt;/MenuList&gt;
    &lt;/Menu&gt;
  );
}</code></pre>

<p>The example code above is one of the implementations of compound components in which you get to see that the <code>Menu</code>, <code>MenuButton</code>,<code>MenuList</code>, <code>MenuItem</code> and <code>MenuLink</code> were all imported from <code>@reach/menu-button</code>. As opposed to exporting a single component, ReachUI exports a parent component which is <code>Menu</code> accompanying its children components which are the <code>MenuButton</code>, <code>MenuList</code>, <code>MenuItem</code> and the <code>MenuLink</code>.</p>
When Should You Make Use Of Compound Components?
<p>As a React developer, you should make use of compound components when you want to:</p>
<ul>
<li>Solve issues related to building reusable components;</li>
<li>Development of highly cohesive components with minimal coupling;</li>
<li>Better ways to share logic between components.</li>
</ul>
Pros And Cons Of Compound Components
<p>A compound component is an awesome React pattern to add to your React developer toolkit. In this section, I’ll state the pros and cons of using compound components and what I have learned from building components using this pattern of development.</p>
<h3>Pros</h3>
<ul>
<li><p><strong>Separation Of Concern</strong><br />Having all the UI state logic in the parent component and communicating that internally to all the child components makes for a clear division of responsibility.</p>
</li>
<li><p><strong>Reduced Complexity</strong><br />As opposed to prop drilling to pass down properties to their specific components, child props go to their respective child components using the compound component pattern.</p>
</li>
</ul>
<h3>Cons</h3>
<p>One of the major cons of building components in React with the compound component pattern is that only <code>direct children</code> of the parent component will have access to the props, meaning we can’t wrap any of these components in another component.</p>
<pre><code>export default function FlyoutMenu() {
  return (
    &lt;FlyOut&gt;
      {/* This breaks */}
      &lt;div&gt;
        &lt;FlyOut.Toggle /&gt;
        &lt;FlyOut.List&gt;
          &lt;FlyOut.Item&gt;Edit&lt;/FlyOut.Item&gt;
          &lt;FlyOut.Item&gt;Delete&lt;/FlyOut.Item&gt;
        &lt;/FlyOut.List&gt;
      &lt;/div&gt;
    &lt;/FlyOut&gt;
  );
}</code></pre>

<p>A solution to this issue would be to use the flexible compound component pattern to implicitly share state using the <code>React.createContext</code> API.</p>
<p>Context API makes it possible to pass React state through nested components when building using the compound component pattern of building components in React. This is possible because <code>context</code> provides a way to pass data down the component tree without having to pass props down manually at every level.  Making use of Context API provides loads of flexibility to the end-user.</p>
<h3>Maintaining Compound Components In React</h3>
<p>Compound components provide a more flexible way to share state within React applications, so making use of compound components in your React applications makes it easier to maintain and actually debug your apps.</p>
Building A Demo
<p>In this article, we are going to build an accordion component in React using the compound components pattern. The component we are going to be building in this tutorial would be a <strong>custom-made accordion component</strong> that is flexible and shares state within the component by using the Context API.</p>
<p>Let’s go!</p>
<p>First of all, let’s create a React app by using the following:</p>
<pre><code>npx create-react-app accordionComponent
cd accordionComponent
npm start</code></pre>

<p>or</p>
<pre><code>yarn create react-app accordionComponent
cd accordionComponent
yarn start</code></pre>

<p>The commands above create a React app, change the directory to the React project, and start up the development server.</p>
<p><strong>Note</strong>: <em>In this tutorial, we will be making use of <code>styled-components</code> to help style our components.</em></p>
<p>Use the command below to install <code>styled-components</code>:</p>
<pre><code>yarn add styled-components</code></pre>

<p>or</p>
<pre><code>npm install --save styled-components</code></pre>

<p>In the <strong>src</strong> folder, create a new folder called  <strong>components</strong>. This is where all our components would live. Within the <strong>components</strong> folder, create two new files: <code>accordion.js</code> and <code>accordion.styles.js</code>.</p>
<p>The <code>accordion.styles.js</code> file contains our styling for the <code>Accordion</code> component (our styling was done using <code>styled-components</code>).</p>
<pre><code>import styled from "styled-components";

export const Container = styled.div`
  display: flex;
  border-bottom: 8px solid #222;
`;</code></pre>

<p>Above is an example of styling components using the <code>css-in-js</code> library called <code>styled-components</code>.</p>
<p>Within the <code>accordion.styles.js</code> file, add the remaining styles:</p>
<pre><code>export const Frame = styled.div`
  margin-bottom: 40px;
`;
export const Inner = styled.div`
  display: flex;
  padding: 70px 45px;
  flex-direction: column;
  max-width: 815px;
  margin: auto;
`;
export const Title = styled.h1`
  font-size: 40px;
  line-height: 1.1;
  margin-top: 0;
  margin-bottom: 8px;
  color: black;
  text-align: center;
`;
export const Item = styled.div`
  color: white;
  margin: auto;
  margin-bottom: 10px;
  max-width: 728px;
  width: 100%;
  &amp;:first-of-type {
    margin-top: 3em;
  }
  &amp;:last-of-type {
    margin-bottom: 0;
  }
`;
export const Header = styled.div`
  display: flex;
  flex-direction: space-between;
  cursor: pointer;
  margin-bottom: 1px;
  font-size: 26px;
  font-weight: normal;
  background: #303030;
  padding: 0.8em 1.2em 0.8em 1.2em;
  user-select: none;
  align-items: center;
  img {
    filter: brightness(0) invert(1);
    width: 24px;
    user-select: none;
    @media (max-width: 600px) {
      width: 16px;
    }
  }
`;
export const Body = styled.div`
  font-size: 26px;
  font-weight: normal;
  line-height: normal;
  background: #303030;
  white-space: pre-wrap;
  user-select: none;
  overflow: hidden;
  &amp;.closed {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.25ms cubic-bezier(0.5, 0, 0.1, 1);
  }
  &amp;.open {
    max-height: 0px;
    transition: max-height 0.25ms cubic-bezier(0.5, 0, 0.1, 1);
  }
  span {
    display: block;
    padding: 0.8em 2.2em 0.8em 1.2em;
  }
`;</code></pre>

<p>Let’s start building our accordion component. In the <code>accordion.js</code> file, let’s add the following code:</p>
<pre><code>import React, { useState, useContext, createContext } from "react";
import {
  Container,
  Inner,
  Item,
  Body,
  Frame,
  Title,
  Header
} from "./accordion.styles";</code></pre>

<p>Above, we are importing the <code>useState</code>, <code>useContext</code> and the <code>createContext</code> hooks which will help us to build our accordion component using compound components. </p>
<p>The <a href="https://reactjs.org/docs/context.html">React documentation</a> explains that <code>context</code> helps provide a way to pass data through the component tree without having to pass props down manually at every level.</p>
<p>Looking at what we have imported earlier in our <code>accordion.js</code> file, you will notice that we also imported our styles as components which will help us build our components faster.</p>
<p>We will go ahead and create our context for the component which will share data with the components that need them:</p>
<pre><code>const ToggleContext = createContext();
export default function Accordion({ children, ...restProps }) {
  return (
    &lt;Container {...restProps}&gt;
      &lt;Inner&gt;{children}&lt;/Inner&gt;
    &lt;/Container&gt;
  );
}</code></pre>

<p>The <code>Container</code> and the <code>Inner</code> components from the above code snippet are from our <code>./accordion.styles.js</code> file in which we created styles for our components using the <code>styled-components</code> (from the <code>css-in-js</code> library). The <code>Container</code> component houses the whole <code>Accordion</code> we are building by using compound components.</p>
<p>Here we are creating a context object using the <code>createContext()</code> method, so when React renders a component that subscribes to this Context object, it will read the current context value from the closest matching Provider above it in the tree.</p>
<p>Then we are also creating our base component which is the Accordion; it takes the <code>children</code> and any <code>restProps</code>. This is our parent component which houses the children components of the Accordion.</p>
<p>Let’s create other children components within the <code>accordion.js</code> file:</p>
<pre><code>Accordion.Title = function AccordionTitle({ children, ...restProps }) {
  return &lt;Title {...restProps}&gt;{children}&lt;/Title&gt;;
};
Accordion.Frame = function AccordionFrame({ children, ...restProps }) {
  return &lt;Frame {...restProps}&gt;{children}&lt;/Frame&gt;;
};</code></pre>

<p>Notice the <code>.</code> after the parent Accordion component; this is used to connect the child component to its parent component.</p>
<p>Let’s continue. Now add the following to the <code>accordion.js</code> file:</p>
<pre><code>Accordion.Item = function AccordionItem({ children, ...restProps }) {
  const [toggleShow, setToggleShow] = useState(true);
  return (
    &lt;ToggleContext.Provider value={{ toggleShow, setToggleShow }}&gt;
      &lt;Item {...restProps}&gt;{children}&lt;/Item&gt;
    &lt;/ToggleContext.Provider&gt;
  );
};
Accordion.ItemHeader = function AccordionHeader({ children, ...restProps }) {
  const { isShown, toggleIsShown } = useContext(ToggleContext);
  return (
    &lt;Header onClick={() =&gt; toggleIsShown(!isShown)} {...restProps}&gt;
      {children}
    &lt;/Header&gt;
  );
};
Accordion.Body = function AccordionHeader({ children, ...restProps }) {
  const { isShown } = useContext(ToggleContext);
  return (
    &lt;Body className={isShown ? "open" : "close"}&gt;
      &lt;span&gt;{children}&lt;/span&gt;
    &lt;/Body&gt;
  );
};</code></pre>

<p>So here we are creating a <code>Body</code>, <code>Header</code> and <code>Item</code> component which are all children of the parent component <code>Accordion</code>. This is where it might start to get tricky. Also, notice that each child component created here also receives a <code>children</code> prop and <code>restprops</code>.</p>
<p>From the <code>Item</code> child component, we initialized our state using the <code>useState</code> hook and set it true. Then also remember that we created a <code>ToggleContext</code> at the top level of <code>accordion.js</code> file which is a <code>Context Object</code>, and when React renders a component that subscribes to this Context object, it will read the current context value from the closest matching Provider above it in the tree.</p>
<p>Every Context object comes with a <code>Provider</code> React component that allows consuming components to subscribe to context changes.</p>
<p>The <code>provider</code> component accepts a <code>value</code> prop to be passed to consuming components that are descendants of this provider, and here we are passing the current state value which is the <code>toggleShow</code> and method to set the value of the current state <code>setToggleShow</code>. They are the value that determines how our context object will share state around our component without prop drilling.</p>
<p>Then in our <code>header</code> child component of the <code>Accordion</code>, we are destructing the values of the context object, then changing the current state of the <code>toggleShow</code> on click. So what we are trying to do is to hide or show our accordion when the Header is clicked on.</p>
<p>In our <code>Accordion.Body</code> component, we are also destructing the <code>toggleShow</code> which is the current state of the component, then depending on the value of <code>toggleShow</code>, we can either hide the body or show the contents of the <code>Accordion.Body</code> component.</p>
<p>So that’s all for our <code>accordion.js</code> file.</p>
<p>Now this is where we get to see how everything we have learned about <code>Context</code> and <code>Compound components</code> come together. But before that, let’s create a new file called <code>data.json</code> and paste the content below into it:</p>
<pre><code>[
  {
    "id": 1,
    "header": "What is Netflix?",
    "body": "Netflix is a streaming service that offers a wide variety of award-winning TV programs, films, anime, documentaries and more – on thousands of internet-connected devices.\n\nYou can watch as much as you want, whenever you want, without a single advert – all for one low monthly price. There’s always something new to discover, and new TV programs and films are added every week!"
  },
  {
    "id": 2,
    "header": "How much does Netflix cost?",
    "body": "Watch Netflix on your smartphone, tablet, smart TV, laptop or streaming device, all for one low fixed monthly fee. Plans start from £5.99 a month. No extra costs or contracts."
  },
  {
    "id": 3,
    "header": "Where can I watch?",
    "body": "Watch anywhere, anytime, on an unlimited number of devices. Sign in with your Netflix account to watch instantly on the web at netflix.com from your personal computer or on any internet-connected device that offers the Netflix app, including smart TVs, smartphones, tablets, streaming media players and game consoles.\n\nYou can also download your favorite programs with the iOS, Android, or Windows 10 app. Use downloads to watch while you’re on the go and without an internet connection. Take Netflix with you anywhere."
  },
  {
    "id": 4,
    "header": "How do I cancel?",
    "body": "Netflix is flexible. There are no annoying contracts and no commitments. You can easily cancel your account online with two clicks. There are no cancellation fees – start or stop your account at any time."
  },
  {
    "id": 5,
    "header": "What can I watch on Netflix?",
    "body": "Netflix has an extensive library of feature films, documentaries, TV programs, anime, award-winning Netflix originals, and more. Watch as much as you want, any time you want."
  }
]</code></pre>

<p>This is the data we will be working with in order to test our accordion component.</p>
<p>So let’s keep going. We are almost through and I believe you have learned a lot from following this article.</p>
<p>In this section, we are going to bring together everything we have been working on and learning about compound components to be able to use it in our <code>App.js</code> file to use the <code>Array.map</code> function to display the data we already have on the web page. Also notice that there was no use of state within the <code>App.js</code>; all we did was pass down data to the specific components and Context API took care of every other thing.</p>
<p>Now on to the final part. In your <code>App.js</code>, do the following:</p>
<pre><code>import React from "react";
import Accordion from "./components/Accordion";
import faqData from "./data";
export default function App() {
  return (
    &lt;Accordion&gt;
      &lt;Accordion.Title&gt;Frequently Asked Questions&lt;/Accordion.Title&gt;
      &lt;Accordion.Frame&gt;
        {faqData.map((item) =&gt; (
          &lt;Accordion.Item key={item.id}&gt;
            &lt;Accordion.Header&gt;{item.header}&lt;/Accordion.Header&gt;
            &lt;Accordion.Body&gt;{item.body}&lt;/Accordion.Body&gt;
          &lt;/Accordion.Item&gt;
        ))}
      &lt;/Accordion.Frame&gt;
    &lt;/Accordion&gt;
  );
}</code></pre>

<p>In your <strong>App.js</strong> file, we imported our Compound Component Accordion from the file path, then also imported our dummy data, mapped through the dummy data in order to get the individual items in our data file, then displayed them in accordance with the respective component, also you would notice that all we had to do was to pass the children to the respective component, the Context API takes care of ensuring that it reaches the right component and there was no prop drilling.</p>
<p>This is what our final product should look like:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/be245a08-912e-4671-bc03-b848761398aa/accordion-component.png" /></p>
Alternative To Compound Components
<p>An alternative to using compound components would be to make use of the Render Props API. The term <a href="https://reactjs.org/docs/render-props.html">Render Prop</a> in React refers to a technique for sharing code between React components using a prop whose value is a function. A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.</p>
<p>To pass data from a component down to a child component that needs the data may result to prop drilling when you have components nested within each other. This is the advantage of using Context to share data between components over using the render prop method.</p>
Conclusion
<p>In this article, we learned about one of the advanced patterns of React which is the compound component pattern. It’s an awesome method to build reusable components in React by using the compound component pattern to build your component offers you a lot of flexibility in your component. You can still opt to make use of <a href="https://reactjs.org/docs/render-props.html">Render Prop</a> if flexibility is not what your component requires at the moment. </p>
<p>Compound components are most helpful in building <a href="https://github.com/jbranchaud/awesome-react-design-systems">design systems</a>. We also went through the process of sharing the state within the components using the Context API.</p>
<ul>
<li>The code for this tutorial can be found on <a href="https://codesandbox.io/s/trusting-wind-8ixc9?file=/src/components/Accordion.js">Codesandbox</a>.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Ichoku Chinonso)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e9df8cb4-b274-407a-97a8-f06488571802/compound-components-react.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Pushing Back Against Privacy Infringement On The Web]]></title>
            <link>https://smashingmagazine.com/2021/08/against-privacy-infringement-web/</link>
            <guid>https://smashingmagazine.com/2021/08/against-privacy-infringement-web/</guid>
            <pubDate>Thu, 26 Aug 2021 08:00:00 GMT</pubDate>
            <description><![CDATA[The Web is still wrestling with issues we take for granted offline, privacy chief among them. These are steps The New York Times took to protect users’ data, and how you can too.]]></description>
            <content:encoded><![CDATA[<p>At the ripe old age of 25, <a href="http://nytimes.com">nytimes.com</a> is now older than some of the people who work building it. Wikipedia turned 20 this year, and the first browser shipped 30 years ago. The Web has over 4 billion internet users and is nearing 2 billion websites. By this point, it’s reasonable to expect to have answers to most of the big, basic questions of how people and digital technology work with one another.</p>
<p>As you no doubt know, however, we don’t. We really don’t. If anything, questions of technology and society seem to be <strong>piling up faster than we can address them</strong>. I started working for The Times four years ago. Before that, I had done a range of tech work: developing sites at small web shops, product work with startups, consulting for household name tech companies, and heavy involvement in a range of <a href="https://www.w3.org/">W3C</a> work. One of the things that drew me to The New York Times was the opportunity to work on some of those big unanswered questions in collaboration with excellent teams and with a strong ethical mandate.</p>
<p>Of these issues, perhaps the most surprising to find still unsolved is <strong>privacy</strong>. Outside of the digital realm, we make multiple privacy decisions a day and typically find them obvious enough that we barely notice they’re there. Is it okay to read that stranger’s DMs over their shoulder? Can I recount that intimate detail that a friend shared with me? Will my doctor repeat what I tell them of my symptoms to my boss? </p>
<p>Weighing up whether we — or someone we speak with — may take personal information from one context and share it in another is something we do almost instinctively. If we required expert opinion for every such decision, ethicist would be a high-income profession. So why can’t we seem to put this one to rest online as well?</p>
The Digital Context
<p>Several factors stand against us. The first is that <a href="https://bookshop.org/books/10948192/9780804752374">privacy is contextual</a>. We understand what may be shared to whom and how by using different frames for work, home, the subway, a doctor’s office, or the local neighborhood dive. But in our digital lives, everything is a slight variation on a glossy slab of plastic. We chat with friends on the same gadget we work on, speak in public through, and look up symptoms with. It is hard to develop cues for what counts as appropriate amidst such homogeneity.</p>
<p>A second factor is the <strong>usefulness of third parties</strong>. The modern development of complex digital products often requires relying on third parties one way or another. This is not necessarily bad. A company specializing in a clear service might have better data protection than a home-grown equivalent, and not all third parties are privacy-invasive. Some third parties work only for the first-party site and will not reuse user data elsewhere. For privacy purposes, they are indistinguishable from whatever the first party does. One example of this might be Fathom: it’s third-party analytics, but they have <a href="https://usefathom.com/blog/anonymization">openly published the method they use to ensure user privacy</a>. </p>
<p>Conversely, other third parties insist on being <strong>controllers of the data</strong> they take from the users of your site and reuse it independently for entirely different purposes. The latter are clear violations of privacy, but Web technology gives no way for browsers — and therefore users — to tell them apart. Cracking open your ad blocker extension and counting the "trackers" might be easy but it tells you little about how privacy-invasive a site really is. It is hard to automate protection at the browser level without the ability to tell third parties apart.</p>
<p>A final factor we shan’t be coy about is that there’s <strong>money to be made from this confusion</strong>. Many of the biggest names in tech (and a host of smaller ones too) operate with business models that do nothing other than <strong>convert privacy violations into money</strong>. They often muddy the waters with widely-read positions that extoll a confounding picture of privacy often confused with security, transparency, complex privacy settings and check-ups, or with consent. It can be hard to progress on informed improvements to privacy when so much of the conversation on the topic comes from a place of confusion.</p>
<p>This might feel like a lot to fix at once, but not to worry: we can all make the Web better one website at a time. It’s easy to become paralyzed thinking that all data collection is a privacy issue. That’s not the case. You can <strong>walk this path gradually</strong>. The way I approach privacy for a given site is to first try to find a familiar everyday context that I believe is close to it. Reasoning from known everyday contexts makes it possible to tap into established norms for which we tend to have good intuitions. Because the digital world works differently, there is rarely a perfect one-to-one match, but starting with a concrete situation can help structure your thinking.</p>
Enter My Bookshop
<p>Let us look at a bookshop and at how we can <strong>incrementally change its privacy properties</strong> by adding more details that render it increasingly like a modern commercial website. Hopefully, there is a point at which you will want to draw a line — and that point should tell you something about what is appropriate in a comparable context on the Web.</p>
<p>A bookshop makes for a decent <strong>real-world comparison point</strong> for an online publication. You go there looking for things to read. The people who work there can see you enter, and they might even recognize you from previous visits. If you’ve identified yourself, they may know your name, or at least have some moniker for you.</p>
<p>As you browse the shop, the staff can get a sense of what you’re looking at. They might not spy on it in great detail, but they’ll know which section you’re in and could easily notice which book you just pulled out. They can use that and ask you questions to offer recommendations.</p>
<p>It’s a <strong>commercial environment</strong>, and if you buy something there, depending on how you pay they might learn a little bit more about you, and share some of that data with a payment processing company of some sort.</p>
<p>At closer inspection, you notice that the shop has a few <strong>video surveillance cameras</strong> running. This makes you a little uncomfortable, but after a quick chat with the owner they reassure you that these are running on a local closed circuit such that the video never leaves the shop, is automatically kept for a maximum of 24 hours, and is only ever watched for the sole purpose of identifying theft. These properties — highly restricted access, short retention, clear and limited purpose — offer strong guarantees (assuming you trust the business) and limit how invasive the process is.</p>
<p>But, paying more attention, you notice a number of other smaller, more discrete cameras. They are dispersed throughout the store in a way that allows them to analyze which books you are looking at, which you pull out to read the blurb on, which you decide to buy.</p>
<p>The conversation with the bookshop owner is a bit more fraught this time. Those <strong>video feeds</strong> go to a number of companies in exchange for which they help pay a little of the shop’s costs or list the shop on neighborhood maps. You agreed to this by pushing the door open and stepping inside.</p>
<p>The owner is adamant that it’s safe, that the process is entirely “anonymous,” that these monitoring companies “only” use a hash of your facial biometrics to recognize you from shop to shop. What do you have to hide anyway? It’s an important part of making sure that the books stay cheap. Without that, only rich people would have books. Anything else would be bad for small businesses and poor people.</p>
<p>Flipping through the list of companies taking video feeds from this shop, you can’t find a name you recognize. Except for those two that seem to be taking video feeds from every single other shop as well.</p>
<p>Pushing the bookshop owner a little more, you come to realize they’re not very happy with those companies. They use the data they collect in the shop both to <strong>compete with the bookshop</strong> by selling books directly and to recommend other bookshops. They’re also using their position, informed by that data, to push for a model in which they run the infrastructure for all stores — why would a bookshop owner care about walls, shelves, lighting, is their value not just in the book selection? — and an increasing number of other shops have switched over to this worldwide strip mall model. The owner isn’t too sanguine about any of that. "But when you don’t comply they drop you off the map and send people to your competitors," they say.</p>
<p>As promised, finding an exact non-digital equivalent to the state of privacy on the Web is imperfect and has some slightly contrived corners. Yet the above is very close to what it’s like to operate a commercial publisher or an online store on the Web today.</p>
<p>In reading the above, <strong>different people will draw the line at different places</strong>. Some are entirely bought into the death of privacy and look forward to the promised bright future of big tech bureaucracy. At the other end of the spectrum, others will prefer a staff-less bookshop where they can pick their next read with nary a human ever seeing what it may be.</p>
<p>If you’re like me, you’ll draw the line somewhere around the addition of the CCTV system. I’m not excited about it, but if its data processing is properly limited and if it helps my favorite source of books to stay alive, I can live with it. I am not inclined, however, to accept the pervasive surveillance of my behavior — the primary effect of which is for a handful of large corporations to either absorb small shops or drive them out of existence.</p>
<p>None of these positions is inherently right or wrong, but we help our users if we agree on a <em>default</em> and set expectations to match it. I believe that a good starting point for a default that works for most sites that perform a relatively small set of related services is the <em>Vegas Rule</em>: <strong>what happens on the site stays on the site</strong>. (Including the parties that work for the site, and only for the site.)</p>
How Can We Build For Privacy?
<p>What does this mean for those of us who build places on the Web that others visit? There is no one-size-fits-all answer to that. Last year, I wrote about how <a href="https://open.nytimes.com/how-the-new-york-times-thinks-about-your-privacy-bc07d2171531"><em>The Times</em> sees it</a>, but how you approach your own situation will depend on the specifics that you are dealing with.</p>
<p>I recommend <strong>working on privacy iteratively</strong>, with a plan to improve in gradual steps over time. In most cases, it’s unlikely that you’ll be able to deploy a catch-all Big Bang cleanup.</p>
<p>The first step towards making a site more trustworthy in its privacy is to <strong>understand what is going on and why</strong>. If you work on the tech or product side, you might have grown used to grumbling in dismay as the marketing team adds yet another tracker, which they refer to under harmless, cutesy euphemisms like “pixel,” that will slow down your site. But you might only have a limited understanding of why they do that in the first place. </p>
<p>These overlaps are great opportunities to <strong>build actual relationships</strong> with other teams. They are trying to achieve something, and that something is probably covering at least some of your pay-check. But they also sometimes struggle to tell honest vendors from hoaxes and they can benefit from a greater understanding of the technology that underlies what they buy — which you can likely help with. If you’re on their side instead of complaining about them, you might not be able to remove all the trackers, but you’ll be in a position to make progress.</p>
<p>Once you have that relationship (or if you’re the person making those decisions), the next step is to make sure that each third party is held accountable. The reality of online business today is such that you might have to keep some trackers, but those that stay should be <strong>provably effective</strong>. By working closely with our marketing team, we were able to reduce the amount of data <em>The Times</em> shared with third-party data controllers by over 90 percent. Not only did that improve privacy, but it also improved performance. The second step is to develop a habit of healthy skepticism.</p>
<p> Read the fine print so that your users don’t have to — it’s part and parcel of building a site that won’t betray your users’ trust.</p>
<p>That free widget to make it easy to share pages on social media? It’s probably a data broker. That comments system you can drop at the bottom of your blog? <a href="https://twitter.com/martingund/status/1207327648093003777">You might want to check that it’s not selling your users’ data</a>. It’s not uncommon for a third party to strike deals with other third parties so that when you add one to your site it will inject the others as well, a practice known as <a href="https://themarkup.org/blacklight/2020/09/22/blacklight-tracking-advertisers-digital-privacy-sensitive-websites">piggybacking</a>. It’s a good idea to run your site through a tool like <a href="https://themarkup.org/blacklight">Blacklight</a> now and then to make sure that nothing surprising is going on (though if you run ads there will only be so much you can do, sadly).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6e675d6-e150-417a-9ab7-5ab7608e5af0/1-against-privacy-infringement-web.png" /></p>
<p>Finally, you of course want to be thinking about your users, but you should also be thinking about yourself! The business implications of sending your audience data to third parties are often poorly understood and are too rarely taken into account. Understanding your users, your readers, your customers is a key business asset. When you share your audience data with third parties, they benefit from that too — and they can use that data to compete with you.</p>
<p>If you run a shoe store and let a social network track your users so you can target ads to them there later, know that that data, which reveals who is interested in shoes, will also be used to show them shoe ads for your competitors.</p>
<p>If you host your e-commerce pages on a virtual strip mall owned by a company that also runs its own online shopping business, how long will it be before they use what they learn from your customers to outcompete you?</p>
<p> Privacy isn’t just about ethics and earning the trust of your readers: it’s also a sound business strategy when, willingly or not, you participate in the data economy.</p>
And How About We Fixed The Web, Too?
<p>As a community, we can each work to improve our own little corners of the Web. But, collectively, we can do better. We can improve the Web and make it a better platform for privacy.</p>
<p>Perhaps the most important property of the Web is <strong>trust</strong>. You can browse around freely from site to site because you can trust that your browser will protect your security and that, even as those sites run code on your computer, they won’t endanger it. That is a strong promise, much stronger than what you can expect from native platforms, but when it comes to privacy it’s a promise that we have broken. As you browse freely from site to site, your privacy is not in trustworthy hands.</p>
<p>Still, things are looking up. Most browsers have delivered excellent work towards preventing tracking on the Web, and the biggest holdout, Chrome, has promised change in 2023. Projects like the <a href="https://globalprivacycontrol.org/">Global Privacy Control</a> are <a href="https://globalprivacycontrol.org/press">making headway</a>. As <strong>third-party cookies slowly become extinct</strong>, industry stakeholders are working together to propose privacy-preserving standards that enable businesses to function on the Web without infringing on people’s privacy. </p>
<p>Detailing all the proposals on the table would require a whole other article, but Apple’s <a href="https://privacycg.github.io/private-click-measurement/">Private Click Measurement</a>, Google’s <a href="https://github.com/WICG/turtledove/blob/main/FLEDGE.md">FLEDGE</a>, Microsoft’s <a href="https://github.com/WICG/privacy-preserving-ads/blob/main/Parakeet.md">PARAKEET</a>, or, if you’ll allow me this shameless plug, The New York Times’s <a href="https://darobin.github.io/garuda/">Garuda</a> are all worth looking at, as is the work taking place in the <a href="https://www.w3.org/community/privacycg/">Privacy CG</a>. Some of the proposals discussed there, like Federated Learning of Cohorts (FLoC), have <a href="https://www.theregister.com/2021/07/08/google_floc_changes/">run into trouble</a>, but that only underscores the value in building a solid understanding of privacy in the Web community in order to develop these novel solutions.</p>
<p>As much as we’d all love to engineer our way out of these complex problems, that’s rarely possible. Solutions will require <strong>cooperation between technologists and policymakers</strong>. As technologists, there are several ways in which we can help. We can act as citizens and take part in policy debates. We can describe our systems in understandable terms, and explain what is riding on them. (You’d be surprised at how many bad descriptions of cookies there can be.) We can use our understanding of technology to <a href="https://berjon.com/stewardship/">try to explore how what we build can create problems when deployed at large scales</a>. </p>
<p>Most importantly, when technology fails society we can make it our responsibility to imagine other ways in which it could work — even if they seem out of immediate reach. Technology is often presented as inevitable as if its current design were the only rational option rather than the accumulation of arbitrary decisions that it is. We hold large, often untapped power in our ability simply to say that “it doesn’t have to be this way” and to show what other paths exist.</p>
<p><strong>We build for users</strong>, not to milk them of their data. The Web has made it hard for them to stand for themselves — it’s on us to do it for them. Few of us who work on commercial sites will be able to produce perfect privacy outcomes immediately, but this should not stop us from doing better. The tide has turned and a privacy-friendly Web now seems possible. We might yet get to check one of those big, basic questions off the list.</p>
<h3>Further Reading</h3>
<ul>
<li>A great book to read to understand how privacy works is Helen Nissenbaum’s <a href="https://bookshop.org/books/10948192/9780804752374">Privacy in Context</a>. A shorter overview is available in Matt Salganik’s <a href="https://www.bitbybitbook.com/">Bit by Bit</a> which you can <a href="https://www.bitbybitbook.com/en/1st-ed/ethics/dilemmas/privacy/">read online</a>.</li>
<li><a href="https://www.penguin.co.uk/books/1120394/privacy-is-power/9781787634046.html">Privacy is Power</a> by Carissa Véliz offers an effective and well-documented overview of why privacy matters.</li>
<li>James C. Scott’s classic <a href="https://bookshop.org/books/seeing-like-a-state-how-certain-schemes-to-improve-the-human-condition-have-failed/9780300246759">Seeing Like A State</a> presents a dire overview of how society-level engineering can fail, often in catastrophic ways, which includes an extensive description of the problems brought about by “legibility”, which is what collective infringement of privacy leads to.</li>
<li>Maria Farrell’s <a href="https://conversationalist.org/2019/09/13/feminism-explains-our-toxic-relationships-with-our-smartphones/">This Is Your Phone On Feminism</a> is an outstanding description of how we love our devices but don’t trust them, and of how love without trust is the definition of an abusive relationship.</li>
<li>The W3C’s Technical Architecture Group (TAG) is working on a set of privacy definitions to help support discussions in the Web community. The output from that isn’t baked yet, but it is being built based on a blend of the <a href="https://darobin.github.io/pup/">Principles of User Privacy (PUP)</a> and the <a href="https://w3cping.github.io/privacy-threat-model/">Target Privacy Threat Model</a>.</li>
<li>In this article, I could only cover some of the basics, but one important concern in privacy is how data collection affects us at the collective instead of the individual level that we too often fixate on. Salomé Viljoen’s <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3727562">Democratic Data</a> covers that issue very well.</li>
<li>Woodrow Hartzog and Neil Richards have written so many excellent articles on privacy that it’s hard to pick a favorite, but I would suggest <a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2655719">Taking Trust Seriously In Privacy Law</a> as a great place to start. Don’t be daunted by the “law” part, it’s really about trust.</li>
<li>Looking at a broader issue, <a href="https://bookshop.org/books/re-engineering-humanity-9781107147096/9781108707640">Re-Engineering Humanity</a>, by Brett Frischmann and Evan Selinger, is a great description of how we can misuse technology to shape people against their interests.</li>
<li>More on the advertising side, <a href="https://bookshop.org/books/re-engineering-humanity-9781107147096/9781108707640">Subprime Attention Crisis</a> by Tim Hwang explains why we should worry about online advertising and the businesses it supports.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Robin Berjon)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbab17a6-483b-4e8e-b9f1-9ab583202df1/against-privacy-infringement-web.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Creating A Public/Private Multi-Monorepo For PHP Projects]]></title>
            <link>https://smashingmagazine.com/2021/08/public-private-multi-monorepo-php-projects/</link>
            <guid>https://smashingmagazine.com/2021/08/public-private-multi-monorepo-php-projects/</guid>
            <pubDate>Wed, 25 Aug 2021 07:10:00 GMT</pubDate>
            <description><![CDATA[In this article, Leonardo explains how to use a "multi-monorepo" approach for making the development experience faster, yet keeping your PHP packages private. This solution can be especially beneficial for PRO plugin creators.]]></description>
            <content:encoded><![CDATA[<p>To make the development experience faster, I moved all the PHP packages required by my projects to a <strong>monorepo</strong>. When each package is hosted on its own repo (the "multirepo" approach), it'd need be developed and tested on its own, and then published to Packagist before I could install it on other packages via Composer. With the monorepo, because all packages are hosted together, these can be developed, tested, versioned and released at the same time.</p>
<p>The monorepo hosting my PHP packages is public, accessible to anyone on GitHub. Git repos cannot grant different access to different assets, it's all either public or private. As I plan to release a PRO WordPress plugin, I want its packages to be kept private, meaning they can't be added to the public monorepo.</p>
<p>The solution I found is to use a "multi-monorepo" approach, comprising two monorepos: one public and one private, with the private monorepo embedding the public one as a Git submodule, allowing it to access its files. The public monorepo can be considered the "upstream", and the private monorepo the "downstream".</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a223ab2b-d926-4fec-a422-bed6e7b02178/01-architecture.png" /></p>
<p>As I kept iterating on my code, the repo set-up I needed to use at each stage of my project also needed to be upgraded. Hence, I didn't arrive at the multi-monorepo approach on day 1, but it was a process that spanned several years and took its fair amount of effort, going <a href="https://css-tricks.com/from-a-single-repo-to-multi-repos-to-monorepo-to-multi-monorepo/">from a single repo, to multiple repos, to the monorepo, to finally the multi-monorepo</a>.</p>
<p>In this article I will describe how I set-up my multi-monorepo using the <a href="https://github.com/symplify/monorepo-builder">Monorepo builder</a>, which works for PHP projects based on Composer.</p>
Reusing Code In The Multi-Monorepo
<p>The public monorepo <a href="https://github.com/leoloso/PoP"><code>leoloso/PoP</code></a> is where I keep all my PHP projects.</p>
<p>This monorepo contains workflow <a href="https://github.com/leoloso/PoP/blob/3cd9eee/.github/workflows/generate_plugins.yml"><code>generate_plugins.yml</code></a>, which generates multiple WordPress plugins for distribution <a href="https://github.com/leoloso/PoP/actions/runs/1058751996">when creating a new release on GitHub</a>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b4c4e80d-e9d3-426d-af78-94151c91c0f4/02-generating-plugins.png" /></p>
<p>The workflow configuration is not hard-coded within the YAML but <a href="https://github.com/leoloso/PoP/blob/3cd9eee/.github/workflows/generate_plugins.yml#L55-L57">injected via PHP code</a>:</p>
<pre><code>  - id: output_data
    run: |
      echo "::set-output name=plugin_config_entries::$(vendor/bin/monorepo-builder plugin-config-entries-json)"</code></pre>

<p>And the configuration is provided via a <a href="https://github.com/leoloso/PoP/blob/1965e044e371d62ed98f88f05559e48c26183fbd/src/Config/Symplify/MonorepoBuilder/DataSources/PluginDataSource.php#L16">custom PHP class</a>:</p>
<pre><code>class PluginDataSource
{
  public function getPluginConfigEntries(): array
  {
    return [
      // GraphQL API for WordPress
      [
        'path' =&gt; 'layers/GraphQLAPIForWP/plugins/graphql-api-for-wp',
        'zip_file' =&gt; 'graphql-api.zip',
        'main_file' =&gt; 'graphql-api.php',
        'dist_repo_organization' =&gt; 'GraphQLAPI',
        'dist_repo_name' =&gt; 'graphql-api-for-wp-dist',
      ],
      // GraphQL API - Extension Demo
      [
        'path' =&gt; 'layers/GraphQLAPIForWP/plugins/extension-demo',
        'zip_file' =&gt; 'graphql-api-extension-demo.zip',
        'main_file' =&gt; 'graphql-api-extension-demo.php',
        'dist_repo_organization' =&gt; 'GraphQLAPI',
        'dist_repo_name' =&gt; 'extension-demo-dist',
      ],
    ];
  }
}</code></pre>

<p>Generating multiple WordPress plugins all together, and configuring the workflow via PHP, has reduced the amount of time needed managing the project. The workflow currently handles two plugins (the <a href="https://github.com/leoloso/PoP/blob/master/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp">GraphQL API</a> and its extension demo), but it could handle 200 without additional effort on my side.</p>
<p>It is this set-up that I want to reuse for my private monorepo <code>leoloso/GraphQLAPI-PRO</code>, so that the PRO plugins can also be generated without effort.</p>
<p>The code to reuse will comprise:</p>
<ul>
<li>The GitHub Actions workflows to generate the WordPress plugins (including <a href="https://graphql-api.com/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/">scoping</a>, <a href="https://graphql-api.com/blog/the-plugin-is-now-transpiled-from-php-80-to-71/">downgrading from PHP 8.0 to 7.1</a> and <a href="https://leoloso.com/posts/github-action-to-release-wp-plugin/">uploading to the releases page</a>).</li>
<li>The custom PHP services to configure the workflows.</li>
</ul>
<p>The private monorepo can then generate the PRO WordPress plugins, simply by triggering the workflows from the public monorepo, and overriding their configuration in PHP.</p>
Linking Monorepos Via Git Submodules
<p>To embed the public repo within the private one we use <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git submodules</a>:</p>
<pre><code>git submodule add &lt;public repo URL&gt;</code></pre>

<p>I embedded the public repo under subfolder <code>submodules</code> of the private monorepo, allowing me to add more upstream monorepos in the future if needed. In GitHub, the folder <a href="https://github.blog/2016-02-01-working-with-submodules/">displays the submodule's specific commit</a>, and clicking on it will take me to that commit on <code>leoloso/PoP</code>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a567d4e-b656-4e05-9c96-291487f27a8e/03-embedding-public-monorepo.png" /></p>
<p>Since it contains submodules, to clone the private repo we must provide the <code>--recursive</code> option:</p>
<pre><code>git clone --recursive &lt;private repo URL&gt;</code></pre>

Reusing The GitHub Actions Workflows
<p>GitHub Actions only loads workflows from under <code>.github/workflows</code>. Because the public workflows in the downstream monorepo are under <code>submodules/PoP/.github/workflows</code>, these must be duplicated into the expected location.</p>
<p>In order to keep the upstream workflows as the single source of truth, we can limit ourselves to copying the files to downstream under <code>.github/workflows</code>, but never edit them there. If there is any change to be done, it must be done in the upstream monorepo, and then copied over.</p>
<p>As a side note, notice how this means that the multi-monorepo leaks: the upstream monorepo is not fully autonomous, and will need to be adapted to suit the downstream monorepo.</p>
<p>In my first iteration to copy the workflows, I created a simple <a href="https://getcomposer.org/doc/articles/scripts.md#defining-scripts">Composer script</a>:</p>
<pre><code>
{
  "scripts": {
    "copy-workflows": [
      "php -r \"copy('submodules/PoP/.github/workflows/generate_plugins.yml', '.github/workflows/generate_plugins.yml');\"",
      "php -r \"copy('submodules/PoP/.github/workflows/split_monorepo.yaml', '.github/workflows/split_monorepo.yaml');\""
    ]
  }
}</code></pre>

<p>Then, after editing the workflows in the upstream monorepo, I would copy them to downstream by executing:</p>
<pre><code>composer copy-workflows</code></pre>

<p>But then I realized that just copying the workflows is not enough: they must also be modified in the process. This is so because checking out the downstream monorepo requires option <code>--recurse-submodules</code>, as to also checkout the submodules.</p>
<p>In GitHub Actions, the checkout for downstream is done like this:</p>
<pre><code>  - uses: actions/checkout@v2
    with:
        submodules: recursive</code></pre>

<p>So checking out the downstream repo needs input <code>submodules: recursive</code>, but the upstream one does not, and they both use the same source file.</p>
<p>The solution I found is to provide the value for input <code>submodules</code> via an environment variable <code>CHECKOUT_SUBMODULES</code>, which is by default <a href="https://github.com/leoloso/PoP/blob/aec4615/.github/workflows/coding_standards.yml">empty for the upstream repo</a>:</p>
<pre><code>env:
  CHECKOUT_SUBMODULES: ""

jobs:
  provide_data:
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: ${{ env.CHECKOUT_SUBMODULES }}</code></pre>

<p>Then, when copying the workflows from upstream to downstream, the value of <code>CHECKOUT_SUBMODULES</code> is replaced with <code>"recursive"</code>:</p>
<pre><code>env:
  CHECKOUT_SUBMODULES: "recursive"</code></pre>

<p>When modifying the workflow, it's a good idea to use a regex, so that it works for different formats in the source file (such as <code>CHECKOUT_SUBMODULES: ""</code> or <code>CHECKOUT_SUBMODULES:''</code> or <code>CHECKOUT_SUBMODULES:</code>) as to not create bugs from this kind of assumed-to-be-harmless changes.</p>
<p>Then, the <code>copy-workflows</code> Composer script seen above is not good enough to handle this complexity.</p>
<p>In my next iteration, I created a PHP command <code>CopyUpstreamMonorepoFilesCommand</code>, to be executed via the Monorepo builder:</p>
<pre><code>vendor/bin/monorepo-builder copy-upstream-monorepo-files</code></pre>

<p>This command uses a custom service <code>FileCopierSystem</code> to copy all files from a source folder to the indicated destination, while optionally replacing their contents:</p>
<pre><code>namespace PoP\GraphQLAPIPRO\Extensions\Symplify\MonorepoBuilder\SmartFile;

use Nette\Utils\Strings;
use Symplify\SmartFileSystem\Finder\SmartFinder;
use Symplify\SmartFileSystem\SmartFileSystem;

final class FileCopierSystem
{
  public function __construct(
    private SmartFileSystem $smartFileSystem,
    private SmartFinder $smartFinder,
  ) {
  }

  /**
   * @param array $patternReplacements a regex pattern to search, and its replacement
   */
  public function copyFilesFromFolder(
    string $fromFolder,
    string $toFolder,
    array $patternReplacements = []
  ): void {
    $smartFileInfos = $this-&gt;smartFinder-&gt;find([$fromFolder], '*');

    foreach ($smartFileInfos as $smartFileInfo) {
      $fromFile = $smartFileInfo-&gt;getRealPath();
      $fileContent = $this-&gt;smartFileSystem-&gt;readFile($fromFile);

      foreach ($patternReplacements as $pattern =&gt; $replacement) {
        $fileContent = Strings::replace($fileContent, $pattern, $replacement);
      }

      $toFile = $toFolder . substr($fromFile, strlen($fromFolder));
      $this-&gt;smartFileSystem-&gt;dumpFile($toFile, $fileContent);
    }
  }
}</code></pre>

<p>When invoking this method to copy all workflows downstream, I also replace the value of <code>CHECKOUT_SUBMODULES</code>:</p>
<pre><code>/**
 * Copy all workflows to `.github/`, and convert:
 *   `CHECKOUT_SUBMODULES: ""`
 * into:
 *   `CHECKOUT_SUBMODULES: "recursive"`
 */
$regexReplacements = [
  '#CHECKOUT_SUBMODULES:(\s+".*")?#' =&gt; 'CHECKOUT_SUBMODULES: "recursive"',
];
(new FileCopierSystem())-&gt;copyFilesFromFolder(
  'submodules/PoP/.github/workflows',
  '.github/workflows',
  $regexReplacements
);</code></pre>

<p>Workflow <code>generate_plugins.yml</code> needs an additional replacement. When the WordPress plugin is generated, its code is downgraded from PHP 8.0 to 7.1 by <a href="https://github.com/leoloso/PoP/blob/3cd9eee96b603a124c18abd6f69f6e937a41477a/.github/workflows/generate_plugins.yml#L116">invoking script</a> <a href="https://github.com/leoloso/PoP/blob/3cd9eee96b603a124c18abd6f69f6e937a41477a/.github/workflows/generate_plugins.yml#L116"><code>ci/downgrade/downgrade_code.sh</code></a>:</p>
<pre><code>  - name: Downgrade code for production (to PHP 7.1)
    run: ci/downgrade/downgrade_code.sh "${{ matrix.pluginConfig.rector_downgrade_config }}" "" "${{ matrix.pluginConfig.path }}" "${{ matrix.pluginConfig.additional_rector_configs }}"</code></pre>

<p>In the downstream monorepo, this file will be located under <code>submodules/PoP/ci/downgrade/downgrade_code.sh</code>. Then, we have the downstream workflow point to the right path with this replacement:</p>
<pre><code>$regexReplacements = [
  // ...
  '#(ci/downgrade/downgrade_code\.sh)#' =&gt; 'submodules/PoP/$1',
];</code></pre>

Configuring Packages In Monorepo Builder
<p>File <code>monorepo-builder.php</code> — placed at the root of the monorepo — holds the <a href="https://github.com/symplify/monorepo-builder#1-merge-local-composerjson-to-the-root-one">configuration for the Monorepo builder</a>. In it we must indicate where the packages (and plugins, clients, or anything else) are located:</p>
<pre><code>use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\MonorepoBuilder\ValueObject\Option;

return static function (ContainerConfigurator $containerConfigurator): void {
  $parameters = $containerConfigurator-&gt;parameters();
  $parameters-&gt;set(Option::PACKAGE_DIRECTORIES, [
    __DIR__ . '/packages',
    __DIR__ . '/plugins',
  ]);
};</code></pre>

<p>The private monorepo must have access to all code: its own packages, plus those from the public monorepo. Then, it must define all packages from both monorepos in the config file. The ones from the public monorepo are located under <code>"/submodules/PoP"</code>:</p>
<pre><code>return static function (ContainerConfigurator $containerConfigurator): void {
  $parameters = $containerConfigurator-&gt;parameters();
  $parameters-&gt;set(Option::PACKAGE_DIRECTORIES, [
    // public code
    __DIR__ . '/submodules/PoP/packages',
    __DIR__ . '/submodules/PoP/plugins',
    // private code
    __DIR__ . '/packages',
    __DIR__ . '/plugins',
    __DIR__ . '/clients',
  ]);
};</code></pre>

<p>As it can be seen, the configuration for upstream and downstream are pretty much the same, with the difference that the downstream one will:</p>
<ul>
<li>Change the path to the public packages.</li>
<li>Add the private packages.</li>
</ul>
<p>Then, it makes sense to rewrite the configuration using object-oriented programming, so that we make code DRY (don't repeat yourself) by having a PHP class in the public repo be extended in the private repo.</p>
Recreating The Configuration Via OOP
<p>Let's refactor the configuration. In the public repo, file <code>monorepo-builder.php</code> will simply <a href="https://github.com/leoloso/PoP/blob/f958c8f/monorepo-builder.php">reference a new class</a> <a href="https://github.com/leoloso/PoP/blob/f958c8f/monorepo-builder.php"><code>ContainerConfigurationService</code></a> where all action will happen:</p>
<pre><code>use PoP\PoP\Config\Symplify\MonorepoBuilder\Configurators\ContainerConfigurationService;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
  $containerConfigurationService = new ContainerConfigurationService(
    $containerConfigurator,
    __DIR__
  );
  $containerConfigurationService-&gt;configureContainer();
};</code></pre>

<p>The <code>__DIR__</code> param points to the root of the monorepo. It will be needed to obtain the full path to the package directories.</p>
<p>Class <code>ContainerConfigurationService</code> is now in charge of <a href="https://github.com/leoloso/PoP/blob/1965e04/src/Config/Symplify/MonorepoBuilder/Configurators/ContainerConfigurationService.php#L20">producing the configuration</a>:</p>
<pre><code>namespace PoP\PoP\Config\Symplify\MonorepoBuilder\Configurators;

use PoP\PoP\Config\Symplify\MonorepoBuilder\DataSources\PackageOrganizationDataSource;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
use Symplify\MonorepoBuilder\ValueObject\Option;

class ContainerConfigurationService
{
  public function __construct(
    protected ContainerConfigurator $containerConfigurator,
    protected string $rootDirectory,
  ) {
  }

  public function configureContainer(): void
  {
    $parameters = $this-&gt;containerConfigurator-&gt;parameters();
    if ($packageOrganizationConfig = $this-&gt;getPackageOrganizationDataSource($this-&gt;rootDirectory)) {
      $parameters-&gt;set(
        Option::PACKAGE_DIRECTORIES,
        $packageOrganizationConfig-&gt;getPackageDirectories()
      );
    }
  }

  protected function getPackageOrganizationDataSource(): ?PackageOrganizationDataSource
  {
    return new PackageOrganizationDataSource($this-&gt;rootDirectory);
  }
}</code></pre>

<p>The configuration can be split across several classes. In this case, <code>ContainerConfigurationService</code> retrieves the package configuration through class <code>PackageOrganizationDataSource</code>, which has <a href="https://github.com/leoloso/PoP/blob/6260d11/src/Config/Symplify/MonorepoBuilder/DataSources/PackageOrganizationDataSource.php">this implementation</a>:</p>
<pre><code>namespace PoP\PoP\Config\Symplify\MonorepoBuilder\DataSources;

class PackageOrganizationDataSource
{
  public function __construct(protected string $rootDir)
  {
  }

  public function getPackageDirectories(): array
  {
    return array_map(
      fn (string $packagePath) =&gt; $this-&gt;rootDir . '/' . $packagePath,
      $this-&gt;getRelativePackagePaths()
    );
  }

  public function getRelativePackagePaths(): array
  {
    return [
      'packages',
      'plugins',
    ];
  }
}</code></pre>

Overriding The Configuration In The Downstream Monorepo
<p>Now that the configuration in the public monorepo is setup via OOP, we can extend it to suit the needs of the private monorepo.</p>
<p>In order to allow the private monorepo to autoload the PHP code from the public monorepo, we must first configure the downstream <code>composer.json</code> to reference the source code from the upstream, which is under path <code>submodules/PoP/src</code>:</p>
<pre><code>{
  "autoload": {
    "psr-4": {
      "PoP\\GraphQLAPIPRO\\": "src",
      "PoP\\PoP\\": "submodules/PoP/src"
    }
  }
}</code></pre>

<p>Below is file <code>monorepo-builder.php</code> for the private monorepo. Notice that the referenced class <code>ContainerConfigurationService</code> in the upstream repo belongs to the <code>PoP\PoP</code> namespace, but now it switched to the <code>PoP\GraphQLAPIPRO</code> namespace. This class must receive the additional input <code>$upstreamRelativeRootPath</code> (with value <code>"submodules/PoP"</code>) as to recreate the full path to the public packages:</p>
<pre><code>use PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\Configurators\ContainerConfigurationService;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
  $containerConfigurationService = new ContainerConfigurationService(
    $containerConfigurator,
    __DIR__,
    'submodules/PoP'
  );
  $containerConfigurationService-&gt;configureContainer();
};</code></pre>

<p>The downstream class <code>ContainerConfigurationService</code> overrides which <code>PackageOrganizationDataSource</code> class is used in the configuration:</p>
<pre><code>namespace PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\Configurators;

use PoP\PoP\Config\Symplify\MonorepoBuilder\Configurators\ContainerConfigurationService as UpstreamContainerConfigurationService;
use PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\DataSources\PackageOrganizationDataSource;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

class ContainerConfigurationService extends UpstreamContainerConfigurationService
{
  public function __construct(
    ContainerConfigurator $containerConfigurator,
    string $rootDirectory,
    protected string $upstreamRelativeRootPath
  ) {
    parent::__construct(
      $containerConfigurator,
      $rootDirectory
    );
  }

  protected function getPackageOrganizationDataSource(): ?PackageOrganizationDataSource
  {
    return new PackageOrganizationDataSource(
      $this-&gt;rootDirectory,
      $this-&gt;upstreamRelativeRootPath
    );
  }
}</code></pre>

<p>Finally, downstream class <code>PackageOrganizationDataSource</code> contains the full path to both public and private packages:</p>
<pre><code>namespace PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\DataSources;

use PoP\PoP\Config\Symplify\MonorepoBuilder\DataSources\PackageOrganizationDataSource as UpstreamPackageOrganizationDataSource;

class PackageOrganizationDataSource extends UpstreamPackageOrganizationDataSource
{
  public function __construct(
    string $rootDir,
    protected string $upstreamRelativeRootPath
  ) {
    parent::__construct($rootDir);
  }

  public function getRelativePackagePaths(): array
  {
    return array_merge(
      // Public packages - Prepend them with "submodules/PoP/"
      array_map(
        fn ($upstreamPackagePath) =&gt; $this-&gt;upstreamRelativeRootPath . '/' . $upstreamPackagePath,
        parent::getRelativePackagePaths()
      ),
      // Private packages
      [
        'packages',
        'plugins',
        'clients',
      ]
    );
  }
}</code></pre>

Injecting The Configuration From PHP Into GitHub Actions
<p>Monorepo builder offers command <code>packages-json</code>, which we can use to inject the package paths into the GitHub Actions workflow:</p>
<pre><code>jobs:
  provide_data:
    steps:
      - id: output_data
        name: Calculate matrix for packages
        run: |
          echo "::set-output name=matrix::$(vendor/bin/monorepo-builder packages-json)"

    outputs:
      matrix: ${{ steps.output_data.outputs.matrix }}</code></pre>

<p>This command produces a stringified JSON. In the workflow it must be converted to a JSON object via <code>fromJson</code>:</p>
<pre><code>jobs:
  split_monorepo:
    needs: provide_data
    strategy:
      matrix:
        package: ${{ fromJson(needs.provide_data.outputs.matrix) }}</code></pre>

<p>Unfortunately, command <code>packages-json</code> <a href="https://github.com/symplify/symplify/blob/3fddff4c47663d1519f7c97769bade425d6a4e5f/packages/monorepo-builder/src/Json/PackageJsonProvider.php#L23">outputs the package names</a> but not their paths, which works when all packages are under the same folder (such as <code>packages/</code>). It doesn't work in our case, since public and private packages are located in different folders.</p>
<p>Fortunately, the <a href="https://graphql-api.com/blog/extending-the-monorepo-builder/#heading-optimizing-the-monorepo">Monorepo builder can be extended with custom PHP services</a>. So I created a custom command <code>package-entries-json</code> (via class <a href="https://github.com/leoloso/PoP/blob/57a7a21a378f718e1ecfd378fe34ea99fa62c168/src/Extensions/Symplify/MonorepoBuilder/Command/PackageEntriesJsonCommand.php"><code>PackageEntriesJsonCommand</code></a>) which does output the path to the package.</p>
<p>The workflow was then <a href="https://github.com/leoloso/PoP/blob/514c27d03b6e438175e887c8dba550355b735b7d/.github/workflows/split_monorepo_tagged.yaml#L34-L37">updated with the new command</a>:</p>
<pre><code>    run: |
      echo "::set-output name=matrix::$(vendor/bin/monorepo-builder package-entries-json)"</code></pre>

<p>Executed on the public monorepo, it produces the following packages (among <a href="https://github.com/leoloso/PoP/actions/runs/1050692821">many others</a>):</p>
<pre><code>[
  {
    "name": "graphql-api-for-wp",
    "path": "layers/GraphQLAPIForWP/plugins/graphql-api-for-wp"
  },
  {
    "name": "extension-demo",
    "path": "layers/GraphQLAPIForWP/plugins/extension-demo"
  },
  {
    "name": "access-control",
    "path": "layers/Engine/packages/access-control"
  },
  {
    "name": "api",
    "path": "layers/API/packages/api"
  },
  {
    "name": "api-clients",
    "path": "layers/API/packages/api-clients"
  }
]</code></pre>

<p>Executed on the private monorepo, it produces the following entries (among many others):</p>
<pre><code>[
  {
    "name": "graphql-api-for-wp",
    "path": "submodules/PoP/layers/GraphQLAPIForWP/plugins/graphql-api-for-wp"
  },
  {
    "name": "extension-demo",
    "path": "submodules/PoP/layers/GraphQLAPIForWP/plugins/extension-demo"
  },
  {
    "name": "access-control",
    "path": "submodules/PoP/layers/Engine/packages/access-control"
  },
  {
    "name": "api",
    "path": "submodules/PoP/layers/API/packages/api"
  },
  {
    "name": "api-clients",
    "path": "submodules/PoP/layers/API/packages/api-clients"
  },
  {
    "name": "graphql-api-pro",
    "path": "layers/GraphQLAPIForWP/plugins/graphql-api-pro"
  },
  {
    "name": "convert-case-directives",
    "path": "layers/Schema/packages/convert-case-directives"
  },
  {
    "name": "export-directive",
    "path": "layers/GraphQLByPoP/packages/export-directive"
  }
]</code></pre>

<p>As it can be appreciated, it works well: the configuration for the downstream monorepo contains both public and private packages, and the paths to the public ones were prepended with <code>"submodules/PoP"</code>.</p>
Skipping Public Packages In The Downstream Monorepo
<p>So far, the downstream monorepo has included both public and private packages in its configuration. However, not every command needs to be executed on the public packages.</p>
<p>Take static analysis, for instance. The public monorepo already executes <a href="https://phpstan.org/">PHPStan</a> on all public packages via workflow <a href="https://github.com/leoloso/PoP/blob/aec4615/.github/workflows/phpstan.yml"><code>phpstan.yml</code></a>, as shown in <a href="https://github.com/leoloso/PoP/runs/3176485273?check_suite_focus=true#step:6:1">this run</a>. If the downstream monorepo runs once again PHPStan on the public packages, it is a waste of computing time. Then, the <code>phpstan.yml</code> workflow needs to run on the private packages only.</p>
<p>That means that depending on the command to execute in the downstream repo, we may want to either include both public and private packages, or only private ones.</p>
<p>To add public packages or not on the downstream configuration, we adapt downstream class <code>PackageOrganizationDataSource</code> to check this condition via input <code>$includeUpstreamPackages</code>:</p>
<pre><code>namespace PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\DataSources;

use PoP\PoP\Config\Symplify\MonorepoBuilder\DataSources\PackageOrganizationDataSource as UpstreamPackageOrganizationDataSource;

class PackageOrganizationDataSource extends UpstreamPackageOrganizationDataSource
{
  public function __construct(
    string $rootDir,
    protected string $upstreamRelativeRootPath,
    protected bool $includeUpstreamPackages
  ) {
    parent::__construct($rootDir);
  }

  public function getRelativePackagePaths(): array
  {
    return array_merge(
      // Add the public packages?
      $this-&gt;includeUpstreamPackages ?
        // Public packages - Prepend them with "submodules/PoP/"
        array_map(
          fn ($upstreamPackagePath) =&gt; $this-&gt;upstreamRelativeRootPath . '/' . $upstreamPackagePath,
          parent::getRelativePackagePaths()
        ) : [],
      // Private packages
      [
        'packages',
        'plugins',
        'clients',
      ]
    );
  }
}</code></pre>

<p>Next, we need to provide value <code>$includeUpstreamPackages</code> as either <code>true</code> or <code>false</code> depending on the command to execute.</p>
<p>We can do this by replacing config file <code>monorepo-builder.php</code> with two other config files: <code>monorepo-builder-with-upstream-packages.php</code> (which passes <code>$includeUpstreamPackages</code> =&gt; <code>true</code>) and <code>monorepo-builder-without-upstream-packages.php</code> (which passes <code>$includeUpstreamPackages</code> =&gt; <code>false</code>):</p>
<pre><code>// File monorepo-builder-without-upstream-packages.php
use PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\Configurators\ContainerConfigurationService;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
  $containerConfigurationService = new ContainerConfigurationService(
    $containerConfigurator,
    __DIR__,
    'submodules/PoP',
    false, // This is $includeUpstreamPackages
  );
  $containerConfigurationService-&gt;configureContainer();
};</code></pre>

<p>We then update <code>ContainerConfigurationService</code> to receive parameter <code>$includeUpstreamPackages</code> and pass it along to <code>PackageOrganizationDataSource</code>:</p>
<pre><code>namespace PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\Configurators;

use PoP\PoP\Config\Symplify\MonorepoBuilder\Configurators\ContainerConfigurationService as UpstreamContainerConfigurationService;
use PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\DataSources\PackageOrganizationDataSource;
use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

class ContainerConfigurationService extends UpstreamContainerConfigurationService
{
  public function __construct(
    ContainerConfigurator $containerConfigurator,
    string $rootDirectory,
    protected string $upstreamRelativeRootPath,
    protected bool $includeUpstreamPackages,
  ) {
    parent::__construct(
      $containerConfigurator,
      $rootDirectory,
    );
  }

  protected function getPackageOrganizationDataSource(): ?PackageOrganizationDataSource
  {
    return new PackageOrganizationDataSource(
      $this-&gt;rootDirectory,
      $this-&gt;upstreamRelativeRootPath,
      $this-&gt;includeUpstreamPackages,
    );
  }
}</code></pre>

<p>Next, we should invoke the <code>monorepo-builder</code> with either config file, by providing the <code>--config</code> option:</p>
<pre><code>jobs:
  provide_data:
    steps:
      - id: output_data
        name: Calculate matrix for packages
        run: |
          echo "::set-output name=matrix::$(vendor/bin/monorepo-builder package-entries-json --config=monorepo-builder-without-upstream-packages.php)"</code></pre>

<p>However, as we saw earlier on, we want to keep the GitHub Actions workflows in the upstream monorepo as the single source of truth, and they clearly do not need these changes.</p>
<p>The solution I found to this issue is to provide a <code>--config</code> option in the upstream repo always, with each command getting its own config file, such as the <a href="https://github.com/leoloso/PoP/blob/aec4615e782494d6596d9106cc04a47d0234459b/.github/workflows/monorepo_validation.yml#L32"><code>validate</code> command receiving the <code>validate.php</code> config file</a>:</p>
<pre><code>  - name: Run validation
    run: vendor/bin/monorepo-builder validate --config=config/monorepo-builder/validate.php</code></pre>

<p>Now, there are no config files in the upstream monorepo, since it doesn't need them. But it will not break, because the Monorepo builder <a href="https://github.com/symplify/symplify/blob/90714eec76fb7de8aa0088748d006a40ae75a21c/packages/monorepo-builder/bin/monorepo-builder.php#L45-L60">checks if the config file exists</a> and, if it does not, it loads the default config file instead. So we will either override the config, or nothing happens.</p>
<p>The downstream repo does provide the config files for each command, specifying if to add the upstream packages or not:</p>

<p>Btw, as a side note, this is another example of how the multi-monorepo leaks.</p> 

<pre><code>// File config/monorepo-builder/validate.php
return require_once __DIR__ . '/monorepo-builder-with-upstream-packages.php';</code></pre>

Overriding The Configuration
<p>We are almost done. By now the downstream monorepo can override the configuration from the upstream monorepo. So all that's left to do is to provide the new configuration.</p>
<p>In class <code>PluginDataSource</code> I override the configuration of which WordPress plugins must be generated, providing the PRO ones instead:</p>
<pre><code>namespace PoP\GraphQLAPIPRO\Config\Symplify\MonorepoBuilder\DataSources;

use PoP\PoP\Config\Symplify\MonorepoBuilder\DataSources\PluginDataSource as UpstreamPluginDataSource;

class PluginDataSource extends UpstreamPluginDataSource
{
  public function getPluginConfigEntries(): array
  {
    return [
      // GraphQL API PRO
      [
        'path' =&gt; 'layers/GraphQLAPIForWP/plugins/graphql-api-pro',
        'zip_file' =&gt; 'graphql-api-pro.zip',
        'main_file' =&gt; 'graphql-api-pro.php',
        'dist_repo_organization' =&gt; 'GraphQLAPI-PRO',
        'dist_repo_name' =&gt; 'graphql-api-pro-dist',
      ],
      // GraphQL API Extensions
      // Google Translate
      [
        'path' =&gt; 'layers/GraphQLAPIForWP/plugins/google-translate',
        'zip_file' =&gt; 'graphql-api-google-translate.zip',
        'main_file' =&gt; 'graphql-api-google-translate.php',
        'dist_repo_organization' =&gt; 'GraphQLAPI-PRO',
        'dist_repo_name' =&gt; 'graphql-api-google-translate-dist',
      ],
      // Events Manager
      [
        'path' =&gt; 'layers/GraphQLAPIForWP/plugins/events-manager',
        'zip_file' =&gt; 'graphql-api-events-manager.zip',
        'main_file' =&gt; 'graphql-api-events-manager.php',
        'dist_repo_organization' =&gt; 'GraphQLAPI-PRO',
        'dist_repo_name' =&gt; 'graphql-api-events-manager-dist',
      ],
    ];
  }
}</code></pre>

<p>Creating a new release on GitHub will trigger the <code>generate_plugins.yml</code> workflow and generate the PRO plugins on my private monorepo:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33ea9f4a-ed86-4208-9b8a-c7b561ac3491/04-generating-pro-plugins.png" /></p>
<p>Tadaaaaaaaa! 🎉</p>
Conclusion
<p>As always, there is no "best" solution, only solutions that may work better depending on the context. The multi-monorepo approach is not suitable to every kind of project or team. I believe the biggest beneficiaries are plugin creators who release public plugins to be upgraded to their PRO versions, and agencies customizing plugins for their clients.</p>
<p>In my case, I'm quite happy with this approach. It takes a bit of time and effort to get right, but it's a one-off investment. Once the set-up is over, I can just focus on building my PRO plugins, and the time savings concerning project management can be huge.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Leonardo Losoviz)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a223ab2b-d926-4fec-a422-bed6e7b02178/01-architecture.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How To Automate Documentation Workflow For Developers]]></title>
            <link>https://smashingmagazine.com/2021/08/automate-documentation-workflow-for-developers/</link>
            <guid>https://smashingmagazine.com/2021/08/automate-documentation-workflow-for-developers/</guid>
            <pubDate>Tue, 24 Aug 2021 13:00:00 GMT</pubDate>
            <description><![CDATA[In this article, you’ll learn how to save hours of tedious work of writing, updating, and correcting technical documentation. In this article, you will learn how to automate your documentation workflow with Vale and GitHub Actions.]]></description>
            <content:encoded><![CDATA[<p>To get the most out of this tutorial, you should be familiar with: <a href="https://www.smashingmagazine.com/2011/07/modern-version-control-with-git-series/">Git</a>, <a href="https://docs.github.com/en/get-started/quickstart/github-flow">GitHub</a> and <a href="https://www.smashingmagazine.com/2012/01/introduction-to-linux-commands/">Linux and the command line</a>.</p>
Why Should You Care About High-Quality Documentation?
<p>Many teams struggle with <strong>writing documentation</strong>. When you go to check a framework, the documentation will often be out of date or unclear. This can lead to internal frustration when a team member tries to add a feature, but they don’t understand how the current feature works because of poor documentation. This can lead to unproductive hours on the job.</p>
<p>Poor documentation also compromises a good customer experience. According to Jeff Lawson, author of <em>Ask Your Developer</em> and founder of Twilio, if you are selling an API as a product, documentation is the <strong>ultimate advertisement for technical stakeholders</strong>. IBM did a study on the importance of documentation, and 90% of respondents admitted that they made their purchasing decisions based on the quality of a product’s documentation.</p>
<p>Writing good documentation is important for the developer and customer experiences.</p>
If Documentation Is So Important, Then Why Do Engineering Teams Deprioritize It?
<p>Writing documentation can break developers out of the “flow”. Documentation <strong>often lives outside of the main code base</strong>, and it is cumbersome to find and update. Putting it in an Excel spreadsheet or a proprietary CMS is not uncommon.</p>
<p>Automating documentation and improving documentation workflow fixes this.</p>
Automating Documentation From a High Level
<p>What does <em>automating</em> documentation mean? It means adopting common software development practices. When you automate documentation, you are:</p>
<ul>
<li>writing your documentation in Markdown;</li>
<li>using a continuous integration and continuous deployment (CI/CD) pipeline to run tasks such as correcting errors and deploying updates (in this tutorial, we are going to highlight GitHub Actions);</li>
<li>implementing tools like Vale to enforce a style guide and to correct common grammatical mistakes.</li>
</ul>
The Style Guides
<p>Before you use tools such as <a href="https://docs.errata.ai/vale/about">Vale</a> and GitHub Actions to automate the style guide, let’s take a moment to define what exactly is a style guide.</p>
<p>You know that feeling when you are writing documentation and something seems a little off? Your explanations don’t fit the rest of the documentation, but you can’t quite describe why they’re wrong. The writing explains the concept, but it doesn’t seem to fit.</p>
<p>When you get this feeling, your <strong>voice and tone might be off</strong>. Refining the voice and tone is a way to make writing sound cohesive even if you are developing documentation that has been edited by the QA, engineering, and product teams. Below is an example style guide from the city bus application TAPP, taken from the book <a href="https://www.oreilly.com/library/view/strategic-writing-for/9781492049388/"><em>Strategic Writing for UX</em></a> by Torrey Podmajersky.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba6be772-ef8f-41dc-a824-96d01ea7c68b/image-000.png" /></p>
<p>TAPP is a transit application (for buses and trains). The header of the table announces TAPP’s values as a company, being efficient, trustworthy, and accessible. The left side of the table lists the different parts covered by the style guide: concepts, vocabulary, verbosity, grammar, and punctuation.</p>
<p>Together, these make a <strong>style guide</strong>. The header introduces the values, and the left side of the table shows the different components that you would find in any written material: vocabulary, grammar, and punctuation. The beauty of this style guide is that engineers and copywriters will clearly know what capitalization to use and which punctuation to use in order to promote Tapp’s brand identity.</p>
<h3>Technical Writing Style Guide</h3>
<p>Not all style guides come in tables. Microsoft has a <a href="https://docs.microsoft.com/en-us/style-guide/welcome/">whole website</a> that serves as a comprehensive guide, covering everything from acronyms to bias-free communication to chatbots. Microsoft of course isn’t the only company that has a style guide. <a href="https://developers.google.com/style">Google has one</a>, too.</p>
<h3>The Trouble With Style Guides</h3>
<p>Style guides are a great starting point for companies that are serious about documentation. They solve a lot of the confusion that developers might have about how exactly to write about a major feature that they are pushing out.</p>
<p>The problem with style guides is that they add friction to the writing process. Many writers, including me, don’t bother to stop writing and look at the style guide every time they have a question. Sometimes, a style guide is cumbersome and too difficult to reference — for instance, the <a href="https://opdhsblobprod03-secondary.blob.core.windows.net/contents/1b0c5ed94a6a4332b3ded83a8000ec2c/6ca9ae2be2407c744532364a00b292ab?sv=2018-03-28&amp;sr=b&amp;si=ReadPolicy&amp;sig=6sDQt45S3L%2B0BUtizPO83H4uZX7wxbhfVPv3Ea4IyBY%3D&amp;st=2021-07-28T15%3A05%3A16Z&amp;se=2021-07-29T15%3A15%3A16Z">Microsoft Style Guide</a> is over a thousand pages long!</p>
Linters and CI/CD for Documentation
<p>If you are a programmer, then you are probably familiar with linters. Linters are an ideal way to <strong>enforce coding standards</strong> on your team. The same is true with documentation. When you create a linter, you are setting a benchmark of quality for your documentation. In this tutorial, we are going to use the <a href="https://docs.errata.ai/vale/about">Vale linter</a>.</p>
<p>Using some sort of documentation automation alongside a linter is common. When we say automation in this context, we’re referring to the <a href="https://www.freecodecamp.org/news/the-real-difference-between-ci-and-cd/">continuous integration and continuous deployment</a> (CI/CD) workflow. CI automates the <strong>building and testing of documentation</strong>. CD automates the release of code.</p>
<p>You can use many different types of apps to implement a CI/CD workflow. In this tutorial, we are going to use GitHub Actions to run our documentation linter. GitHub Actions run CI directly in a GitHub repository, so there is no need to use a third-party application, such as CircleCI or Travis.</p>
<p>Finally, GitHub Actions are <em>event-driven</em>, which means they are triggered when something happens, such as when someone writes a pull request or an issue. In our example, a GitHub action will occur when someone pushes changes to their main branch.</p>
GitHub Actions
<p>First, create a <a href="https://docs.github.com/en/get-started/quickstart/create-a-repo">GitHub repository</a>. Then, locally, create a folder and <code>cd</code> into it.</p>
<pre><code>mkdir automated-docs
cd automated-docs</code></pre>

<p>Once you are in the folder, initialize the directory for Git.</p>
<pre><code>git init</code></pre>

<p>Once you have initialized the repository, proceed to create a workflow directory to your folder.</p>
<pre><code>mkdir .github/ &amp;&amp; cd .github/ &amp;&amp; mkdir workflows/ &amp;&amp; cd workflows/</code></pre>

<p>Workflows are where we will store all of our GitHub actions. Once you’ve created a <code>workflows</code> folder, make a new workflow. We are going to name this workflow <code>vale.yml</code>.</p>
<pre><code>touch vale.yml</code></pre>

<p><code>Vale.yml</code> is a YAML file. In this workflow file, we will include actions and jobs.</p>
<p>Now, open <code>vale.yml</code> in your favorite text editor.</p>
<pre><code>nano vale.yml</code></pre>

<p>Copy and paste the following into <code>vale.yml</code>, and let’s go over the context and syntax.</p>
<pre><code># This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}</code></pre>

<ul>
<li><code>name</code><br />This is the name, or what we are calling our workflow. It is a string.</li>
<li><code>on</code><br />This controls the workflow and the triggers.</li>
<li><code>jobs</code><br />This is where we set up and control our actions. We select the environment where our actions will run — it is usually a good bet to go with Ubuntu. And this is where we will add our actions.</li>
</ul>
<p>GitHub has a guide on all of the other workflow <a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions">syntax and variables</a>, in case you’re curious.</p>
<p>In this section, we have:</p>
<ul>
<li>learned what GitHub actions are,</li>
<li>created our first GitHub workflow,</li>
<li>identified the most important parts of a GitHub workflow YAML file.</li>
</ul>
<p>Next, we are going to customize our GitHub workflow to use Vale.</p>
Set Up Vale in GitHub Actions File
<p>Once we’ve copied the base workflow file, it is time to customize it, so that we can start using Vale actions. The first thing to do is change the name of the YAML file to <code>Docs-Linting</code>.</p>
<pre><code># This is a basic workflow to help you get started with Actions.

name: Docs-Linting</code></pre>

<p>Next, we want to run the Vale test once someone <strong>has pushed their changes</strong> to the main branch on GitHub. We don’t want the test to run when someone creates a pull request, so we’ll delete that part of the YAML file.</p>
<pre><code>on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
</code></pre>

<p>The <code>jobs</code> section is the main part of the workflow file, and it is responsible for running the GitHub actions.</p>
<pre><code>jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master</code></pre>

<p>These actions are going to run on the latest version of Ubuntu. The <code>Checkout</code> action checks out the repository in order for the <a href="https://github.com/marketplace/actions/checkout">GitHub workflow to access it</a>.</p>
<p>Now it is time to add a Vale action to our GitHub workflow.</p>
<pre><code>  - name: Vale
      uses: errata-ai/vale-action@v1.4.2
      with:
        debug: true
        styles: |
          https://github.com/errata-ai/write-good/releases/latest/download/write-good.zip
          https://github.com/errata-ai/Microsoft/releases/latest/download/Microsoft.zip

      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}</code></pre>

<p>We have named our action <code>Vale</code>. The <code>uses</code> variable shows which version of Vale we’re going to implement — ideally, we should use the most recent version. In the <code>with</code> variable, we set <code>debug</code> to <code>true</code>.</p>
<p>The <code>styles</code> section gives us the option to add a style guide to Vale. In this example, we are going to use <code>write-good</code> and Microsoft’s official style guide. Keep in mind that we can use <a href="https://github.com/errata-ai/styles#available-styles">other style guides</a> as well.</p>
<p>The final part of this GitHub action is <code>env</code>. In order to run this GitHub action, we need to include a <a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">secret token</a>.</p>
<p>This is what the result should look like:</p>
<pre><code># This is a basic workflow to help you get started with Actions.

name: Docs-Linting

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prose:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Vale
      uses: errata-ai/vale-action@v1.4.2
      with:
        debug: true
        styles: |
          https://github.com/errata-ai/write-good/releases/latest/download/write-good.zip
          https://github.com/errata-ai/Microsoft/releases/latest/download/Microsoft.zip

      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}</code></pre>

<p>Once you’ve finished making changes, save the file, commit to Git, and push your changes to GitHub.</p>
<pre><code>git add .github/workflows/vale.yml
git commit -m "Added github repo to project"
git push -u origin main</code></pre>

<p>To recap, in this section, we have:</p>
<ul>
<li>triggered the action to occur when we push new code to the <code>main</code> branch;</li>
<li>added a Vale action, setting <code>debug</code> to <code>true</code> and identifying style guides;</li>
<li>added a GitHub token;</li>
<li>committed changes and pushed to GitHub.</li>
</ul>
<p>In the next section, we are going to create a Vale configuration file.</p>
Setting Up Vale Configuration File
<p>Go to the root of your project’s directory, and then <code>touch .vale.ini</code>. Open <code>.vale.ini</code> in a text editor. Copy and paste the following into <code>.vale.ini</code>:</p>
<pre><code>StylesPath = .github/styles
MinAlertLevel = warning

[formats]
Markdown = markdown

[*.md]
BasedOnStyles = write-good, Microsoft</code></pre>

<ul>
<li><code>StylesPath = .github/styles</code><br />The <code>StylesPath</code> gives the path of the Vale styles.</li>
<li><code>MinAlertLevel = warning</code><br />The minimum alert level shows the scale of severity in alerts. The options are <code>suggestion</code>, <code>warning</code>, and <code>error</code>.</li>
<li><code>[formats]</code><br /><code>Markdown = markdown</code> sets the format as Markdown.</li>
<li><code>[*.md]</code><br />The configuration <code>BasedOnStyles = write-good, Microsoft</code> will run write-good and the Microsoft style guide on all Markdown files ending with <code>.md</code>.</li>
</ul>
<p>This set-up is the bare minimum. If you are interested in learning more about configuring Vale, head over to <a href="https://errata-ai.github.io/vale-server/docs/ini">the documentation</a>.</p>
<p>When you are finished making changes, save the file, and commit and push to GitHub.</p>
<pre><code>git add .vale.ini
git commit -m "Added Vale config file"
git push -u origin main</code></pre>

<p>In this part, we’ve learned the internals of a Vale configuration file. Now it’s time to create sample documentation.</p>
Creating Documentation and Triggering the Vale GitHub Actions
<p>Now it is time to see Vale and GitHub Actions in action! We are going to create a Markdown file and fill it with text. And we are going to get our text from <a href="https://satoristudio.net/delorean-ipsum/">DeLorean Ipsum</a>.</p>
<p>Go to the root of your project, and then <code>touch getting-started.md</code>. Once you’ve created the <code>getting-started</code> file, go to DeLorean Ipsum and create some dummy text for your documentation. Then, return to your text editor and paste the text in <code>getting-started-md</code>.</p>
<pre><code># Getting Started Guide

I can’t play. It’s my dad. They’re late. My experiment worked. They’re all exactly twenty-five minutes slow. Marty, this may seem a little foreward, but I was wondering if you would ask me to the Enchantment Under The Sea Dance on Saturday. Well, they’re your parents, you must know them. What are their common interests, what do they like to do together?

Okay. Are you okay? Whoa, wait, Doc. What, well you mean like a date? I don’t wanna see you in here again.

No, Biff, you leave her alone. Jesus, George, it’s a wonder I was ever born. Hey, hey, keep rolling, keep rolling there. No, no, no, no, this sucker’s electrical. But I need a nuclear reaction to generate the one point twenty-one gigawatts of electricity that I need. I swiped it from the old lady’s liquor cabinet. You know Marty, you look so familiar, do I know your mother?</code></pre>

<p>Save the file, commit it, and push it to GitHub.</p>
<pre><code>git add getting-started.md
git commit -m "first draft"
git push -u origin main</code></pre>

<p>Once you’ve pushed the changes, head over to GitHub where your repository is located. Go to the <code>Actions</code> tab.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68266575-8f47-415b-9c91-7004a02944ee/action-github-1.png" /></p>
<p>You will see all of your workflows on the left side. We have only one, named <code>Docs-Linting</code>, the same name we put in the <code>vale.yml</code> file.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6856ea8-673a-45ac-aa5b-41c85dca993b/3-automate-documentation-workflow-for-developers.png" /></p>
<p>When we push the documentation to GitHub, we will trigger the action.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7f83a888-de1c-4ebd-bad1-82ae70e01768/4-automate-documentation-workflow-for-developers.png" /></p>
<p>If the action has run without any problems, we will get a green checkmark.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbfcbebe-ba94-43d8-8022-b6b489bc0581/5-automate-documentation-workflow-for-developers.png" /></p>
<p>Click on “Added docs” to get a full report.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a21c8644-a3a1-4aae-a4fe-25fb11a4ed15/weasel-word-1.png" /></p>
<p>You will see that we got 11 warnings. Let’s deal with the “<a href="https://www.merriam-webster.com/dictionary/weasel%20word">weasel word</a>” warning. Go back to the text editor, open <code>getting-started.md</code>, and delete the word “exactly”.</p>
<pre><code># Getting Started Guide

I can’t play. It’s my dad. They’re late. My experiment worked. They’re all twenty-five minutes slow. Marty, this may seem a little foreward, but I was wondering if you would ask me to the Enchantment Under The Sea Dance on Saturday. Well, they’re your parents, you must know them. What are their common interests, what do they like to do together?

Okay. Are you okay? Whoa, wait, Doc. What, well you mean like a date? I don’t wanna see you in here again.

No, Biff, you leave her alone. Jesus, George, it’s a wonder I was ever born. Hey, hey, keep rolling, keep rolling there. No, no, no, no, this sucker’s electrical. But I need a nuclear reaction to generate the one point twenty-one gigawatts of electricity that I need. I swiped it from the old lady’s liquor cabinet. You know Marty, you look so familiar, do I know your mother?</code></pre>

<p>Save the changes, commit it to Git, and push the new version of the file to GitHub. It should <strong>trigger the GitHub action</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/657f3547-d7a3-4642-b846-6e90fa9d217b/7-automate-documentation-workflow-for-developers.png" /></p>
<p>If we click on “Deleted the weasel word”, we will see that we have only 10 warnings now, and the “weasel word” warning is gone. Hooray!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/337c2c6f-8195-42cb-b0c1-ff09b6eaded3/annotations-10-warnings-1.png" /></p>
<p>We are finished, and we’ve covered a lot of ground. In this section, we have:</p>
<ul>
<li>added documentation to our Vale GitHub Actions repository,</li>
<li>triggered the Vale GitHub action,</li>
<li>corrected an error produced by Vale and pushed the change back to GitHub.</li>
</ul>
Conclusion
<p>In a world that is increasingly going remote, prioritizing <strong>good documentation</strong> and good documentation workflow is important. You first have to define what “good” is by creating a style guide. Once you’ve figured out the rules of your documentation, then it’s time to automate.</p>
<p>Documentation should be treated like your code base: a living body of work that is constantly being iterated and becoming a bit better than the last time you updated it.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Portia Burton)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/68266575-8f47-415b-9c91-7004a02944ee/action-github-1.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[HTTP/3: Performance Improvements (Part 2)]]></title>
            <link>https://smashingmagazine.com/2021/08/http3-performance-improvements-part2/</link>
            <guid>https://smashingmagazine.com/2021/08/http3-performance-improvements-part2/</guid>
            <pubDate>Mon, 23 Aug 2021 06:20:00 GMT</pubDate>
            <description><![CDATA[After almost five years in development, the new HTTP/3 protocol is nearing its final form. Let’s take a close look at the performance improvements of HTTP/3, congestion control, head-of-line-blocking, and 0-RTT connection set-up.]]></description>
            <content:encoded><![CDATA[<p>Welcome back to this series about the new HTTP/3 protocol. In part 1, we looked at <a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/">why exactly we need HTTP/3</a> and the underlying QUIC protocol, and what their main new features are.</p>
<p>In this second part, we will zoom in on the <strong>performance improvements</strong> that QUIC and HTTP/3 bring to the table for web-page loading. We will, however, also be somewhat skeptical of the impact we can expect from these new features in practice.</p>
<p>As we will see, QUIC and HTTP/3 indeed have great web performance potential, but <strong>mainly for users on slow networks</strong>. If your average visitor is on a fast cabled or cellular network, they probably won’t benefit from the new protocols all that much. However, note that even in countries and regions with typically fast uplinks, the slowest 1% to even 10% of your audience (the so-called <em>99th</em> or <em>90th percentiles</em>) still stand to potentially gain a lot. This is because HTTP/3 and QUIC mainly help deal with the somewhat uncommon yet potentially high-impact problems that can arise on today’s Internet.</p>
<p>This part is <strong>a bit more technical</strong> than the first, though it offloads most of the really deep stuff to outside sources, focusing on explaining why these things matter to the average web developer.</p>
<p>This series is divided into three parts:</p>
<ol>
<li><a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/"><strong>HTTP/3 history and core concepts</strong></a><br />This is targeted at people new to HTTP/3 and protocols in general, and it mainly discusses the basics.</li>
<li><strong>HTTP/3 performance features</strong> (<em>current article</em>)<br />This is more in depth and technical. People who already know the basics can start here.</li>
<li><strong>Practical HTTP/3 deployment options</strong> (<em>coming up soon!</em>)<br />This explains the challenges involved in deploying and testing HTTP/3 yourself. It details how and if you should change your web pages and resources as well.</li>
</ol>
A Primer on Speed
<p>Discussing performance and “speed” can quickly get complex, because many underlying aspects contribute to a web-page loading “slowly”. Because we are dealing with network protocols here, we will mainly look at network aspects, of which two are most important: latency and bandwidth.</p>
<p>Latency can be roughly defined as the <strong>time it takes to send a packet from point A (say, the client) to point B (the server)</strong>. It is physically limited by the speed of light or, practically, how fast signals can travel in wires or in the open air. This means that latency often depends on the physical, real-world distance between A and B.</p>
<p><a href="https://www.youtube.com/watch?v=6bbN48zCNl8">On earth</a>, this means that typical latencies are conceptually small, between roughly 10 and 200 milliseconds. However, this is only one way: Responses to the packets also need to come back. Two-way latency is often called <strong>round-trip time (RTT)</strong>.</p>
<p>Due to features such as <em>congestion control</em> (see below), we will often need quite a few round trips to load even a single file. As such, even low latencies of less than 50 milliseconds can add up to considerable delays. This is one of the main reasons why content delivery networks (CDNs) exist: They place servers physically closer to the end user in order to reduce latency, and thus delay, as much as possible.</p>
<p>Bandwidth, then, can roughly be said to be the <strong>number of packets that can be sent at the same time</strong>. This is a bit more difficult to explain, because it depends on the physical properties of the medium (for example, the used frequency of radio waves), the number of users on the network, and also the devices that interconnect different subnetworks (because they typically can only process a certain number of packets per second).</p>
<p>An often used metaphor is that of a pipe used to transport water. The length of the pipe is the latency, while the width of the pipe is the bandwidth. On the Internet, however, we typically have a <strong>long series of connected pipes</strong>, some of which can be wider than others (leading to so-called bottlenecks at the narrowest links). As such, the end-to-end bandwidth between points A and B is often limited by the slowest subsections.</p>
<p>While a perfect understanding of these concepts is not needed for the rest of this post, having a common high-level definition would be good. For more info, I recommend checking out Ilya Grigorik’s <a href="https://hpbn.co/primer-on-latency-and-bandwidth/">excellent chapter on latency and bandwidth</a> in his book <em>High Performance Browser Networking</em>.</p>
Congestion Control
<p>One aspect of performance is about how <strong>efficiently</strong> a transport protocol can use a network’s full (physical) bandwidth (i.e. roughly, how many packets per second can be sent or received). This in turn affects how fast a page’s resources can be downloaded. Some claim that QUIC somehow does this much better than TCP, but that’s not true.</p>
<blockquote><strong>Did You Know?</strong><br /><br />A TCP connection, for example, doesn’t just start sending data at full bandwidth, because this could end up overloading (or congesting) the network. This is because, as we said, each network link has only a certain amount of data it can (physically) process every second. Give it any more and there is no option other than to drop the excessive packets, leading to <strong>packet loss</strong>.<br /><br /> As discussed in <a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/">part 1</a>, for a reliable protocol like TCP, the only way to recover from packet loss is by retransmitting a new copy of the data, which takes one round trip. Especially on high-latency networks (say, with an over 50-millisecond RTT), packet loss can seriously affect performance.</blockquote>

<p>Another problem is that we don’t know up front how much the <strong>maximum bandwidth</strong> will be. It often depends on a bottleneck somewhere in the end-to-end connection, but we cannot predict or know where this will be. The Internet also doesn’t have mechanisms (yet) to signal link capacities back to the endpoints.</p>
<p>Additionally, even if we knew the available physical bandwidth, that wouldn’t mean we could use all of it ourselves. Several users are typically active on a network concurrently, each of whom need a fair share of the available bandwidth.</p>
<p>As such, a connection doesn’t know how much bandwidth it can safely or fairly use up front, and this bandwidth can change as users join, leave, and use the network. To solve this problem, TCP will constantly try to discover the available bandwidth over time by using a mechanism called <strong>congestion control</strong>.</p>
<p>At the start of the connection, it sends just a few packets (in practice, ranging between 10 and 100 packets, or about <strong>14 and 140 KB</strong> of data) and waits one round trip until the receiver sends back acknowledgements of these packets. If they are all acknowledged, this means the network can handle that send rate, and we can try to repeat the process but with more data (in practice, the send rate usually doubles with every iteration). </p>
<p>This way, the send rate <strong>continues to grow</strong> until some packets are not acknowledged (which indicates packet loss and network congestion). This first phase is typically called a “slow start”. Upon detection of packet loss, TCP reduces the send rate, and (after a while) starts to increase the send rate again, albeit in (much) smaller increments. This reduce-then-grow logic is repeated for every packet loss afterwards. Eventually, this means that TCP will constantly try to reach its ideal, fair bandwidth share. This mechanism is illustrated in figure 1.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9d5e5ddd-7a90-48c6-84c5-dc5c335e2305/congestion-control.png" /></p>
<p>This is an <em>extremely</em> oversimplified explanation of congestion control. In practice, many other factors are at play, such as <a href="https://www.youtube.com/watch?v=ZeCIbCzGY6k">bufferbloat</a>, the <a href="https://blog.apnic.net/2017/05/09/bbr-new-kid-tcp-block/">fluctuation of RTTs due to congestion</a>, and the fact that multiple concurrent senders need to get their <a href="https://justinesherry.com/papers/ware-hotnets19.pdf">fair share of the bandwidth</a>. As such, many different congestion-control algorithms exist, and plenty are still being invented today, with none performing optimally in all situations.</p>
<p>While TCP’s congestion control makes it robust, it also means it takes a while to <strong>reach optimal send rates</strong>, depending on the RTT and actual available bandwidth. For web-page loading, this slow-start approach can also affect metrics such as the first contentful paint, because only a small amount of data (tens of to a few hundred KB) can be transferred in the first few round trips. (You might have heard the recommendation to <a href="https://www.tunetheweb.com/blog/critical-resources-and-the-first-14kb/">keep your critical data to smaller than 14 KB</a>.)</p>
<p>Choosing a more aggressive approach could thus lead to better results on high-bandwidth and high-latency networks, especially if you don’t care about the occasional packet loss. This is where I’ve again seen many <strong>misinterpretations</strong> about how QUIC works.</p>
<p>As discussed in <a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/">part 1</a>, QUIC, in theory, suffers less from packet loss (and the related head-of-line (HOL) blocking) because it treats packet loss on each resource’s byte stream independently. Additionally, QUIC runs over the <em>User Datagram Protocol</em> (UDP), which, unlike TCP, doesn’t have a congestion-control feature built in; it allows you to try sending at whatever rate you want and doesn’t retransmit lost data.</p>
<p>This has led to many articles claiming that QUIC also doesn’t use congestion control, that QUIC can instead start sending data at a much higher rate over UDP (relying on the removal of HOL blocking to deal with packet loss), that this is why QUIC is much faster than TCP.</p>
<p>In reality, <a href="https://www.rfc-editor.org/rfc/rfc9002.html">nothing could be further from the truth</a>: <strong>QUIC actually uses very similar bandwidth-management techniques as TCP</strong>. It too starts with a lower send rate and grows it over time, using acknowledgements as a key mechanism to measure network capacity. This is (among other reasons) because QUIC needs to be reliable in order to be useful for something such as HTTP, because it needs to be fair to other QUIC (and TCP!) connections, and because its HOL-blocking removal doesn’t actually help against packet loss all that well (as we’ll see below).</p>
<p>However, that doesn’t mean that QUIC can’t be (a bit) smarter about how it manages bandwidth than TCP. This is mainly because <strong>QUIC is more flexible and easier to evolve than TCP</strong>. As we’ve said, congestion-control algorithms are still heavily evolving today, and we will likely need to, for example, <a href="https://dl.acm.org/doi/abs/10.1145/3387514.3405882">tweak things to get the most out of 5G</a>.</p>
<p>However, TCP is typically implemented in the operating system’s (OS’) kernel, a secure and more restricted environment, which for most OSes isn’t even open source. As such, tuning congestion logic is usually only done by a select few developers, and evolution is slow.</p>
<p>In contrast, most QUIC implementations are currently being done in “user space” (where we typically run native apps) and are made <a href="https://github.com/quicwg/base-drafts/wiki/Implementations">open source</a>, explicitly to encourage experimentation by a much wider pool of developers (as already shown, for example, <a href="https://research.fb.com/wp-content/uploads/2019/12/MVFST-RL-An-Asynchronous-RL-Framework-for-Congestion-Control-with-Delayed-Actions.pdf">by Facebook</a>).</p>
<p>Another concrete example is the <em><a href="https://tools.ietf.org/html/draft-iyengar-quic-delayed-ack-02">delayed acknowledgement frequency</a></em> extension proposal for QUIC. While, by default, QUIC sends an acknowledgement for every 2 received packets, this extension allows endpoints to acknowledge, for example, every 10 packets instead. This has been shown to give <strong>large speed benefits</strong> on satellite and very high-bandwidth networks, because the overhead of transmitting the acknowledgement packets is lowered. Adding such an extension for TCP would take a long time to become adopted, while for QUIC it’s much easier to deploy.</p>
<p>As such, we can expect that QUIC’s flexibility will lead to more experimentation and better congestion-control algorithms over time, which could in turn also be backported to TCP to improve it as well.</p>
<blockquote><strong>Did You Know?</strong><br /><br />The official <a href="https://www.rfc-editor.org/rfc/rfc9002.html">QUIC Recovery RFC 9002</a> specifies the use of the NewReno congestion-control algorithm. While this approach is robust, it’s also <strong>somewhat outdated</strong> and not used extensively in practice anymore. So, why is it in the QUIC RFC? The first reason is that when QUIC was started, NewReno was the most recent congestion-control algorithm that was itself standardized. More advanced algorithms, such as BBR and CUBIC, either are still not standardized or <a href="https://datatracker.ietf.org/doc/html/rfc8312">only recently</a> became RFCs.<br /><br />The second reason is that NewReno is a relatively simple set-up. Because the algorithms need a few tweaks to deal with QUIC’s differences from TCP, it’s easier to explain those changes on a simpler algorithm. As such, RFC 9002 should be read more as “how to adapt a congestion-control algorithm to QUIC”, rather than “this is the thing you should use for QUIC”. Indeed, most production-level QUIC implementations have made custom implementations of both <a href="https://blog.cloudflare.com/cubic-and-hystart-support-in-quiche/">Cubic</a> and <a href="https://qlog.edm.uhasselt.be/epiq/files/QUICImplementationDiversity_Marx_final_11jun2020.pdf">BBR</a>.<br /><br />It bears repeating that congestion-control algorithms <strong>are not TCP- or QUIC-specific</strong>; they can be used by either protocol, and the hope is that advances in QUIC will eventually find their way to TCP stacks as well.</blockquote>


<blockquote><strong>Did You Know?</strong><br /><br />Note that, next to congestion control is a related concept called <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-flow-control">flow control</a>. These two features are often confused in TCP, because they are both said to use the <strong>“TCP window”</strong>, although there are actually two windows: the congestion window and the TCP receive window. Flow control, however, comes into play a lot less for the use case of web-page loading that we’re interested in, so we’ll skip it here. <a href="https://qlog.edm.uhasselt.be/epiq/files/QUICImplementationDiversity_Marx_final_11jun2020.pdf">More</a> in-depth <a href="https://youtu.be/HQ1uIClmzkU?t=603">information</a> is <a href="https://blog.cloudflare.com/delivering-http-2-upload-speed-improvements/">available</a>.</blockquote>

<h3>What Does It All Mean?</h3>
<p>QUIC is still bound by the laws of physics and the need to be nice to other senders on the Internet. This means that <strong>it will not</strong> magically download your website resources much more quickly than TCP. However, QUIC’s flexibility means that experimenting with new congestion-control algorithms will become easier, which should improve things in the future for both TCP and QUIC.</p>
0-RTT Connection Set-Up
<p>A second performance aspect is about <strong>how many round trips</strong> it takes before you can send useful HTTP data (say, page resources) on a new connection. Some claim that QUIC is two to even three round trips faster than TCP + TLS, but we’ll see that it’s really only one.</p>
<blockquote><strong>Did You Know?</strong><br /><br />As we’ve said in <a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/">part 1</a>, a connection typically performs one (TCP) or two (TCP + TLS) handshakes before HTTP requests and responses can be exchanged. These handshakes exchange initial parameters that both client and server need to know in order to, for example, encrypt the data.<br /><br />As you can see in figure 2 below, each <em>individual</em> handshake takes at least one round trip to complete (TCP + TLS 1.3, (b)) and sometimes two (TLS 1.2 and prior (a)). This is inefficient, because we need <strong>at least two round trips</strong> of handshake waiting time (overhead) before we can send our first HTTP request, which means waiting at least three round trips for the first HTTP response data (the returning red arrow) to come in. On slow networks, this can mean an overhead of 100 to 200 milliseconds.</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f4c69d1-5ab6-4ca2-ad1e-ec68d99dc9ab/connection-setup-1.png" /></p>
<p>You might be wondering why the TCP + TLS handshake cannot simply be combined, done in the same round trip. While this is conceptually possible (QUIC does exactly that), things were initially not designed like this, because we need to be able to <a href="/2021/08/http3-core-concepts-part1/#there-is-no-quic-without-tls">use TCP with and without TLS on top</a>. Put differently, TCP simply <strong>does not support sending non-TCP stuff</strong> during the handshake. There have been efforts to add this with the TCP Fast Open extension; however, as discussed in <a href="/2021/08/http3-core-concepts-part1/#quic-is-flexible-and-evolvable">part 1</a>, this has turned out to be <a href="https://squeeze.isobar.com/2019/04/11/the-sad-story-of-tcp-fast-open">difficult to deploy at scale</a>.</p>
<p>Luckily, QUIC was designed with TLS in mind from the start, and as such does combine both the transport and cryptographic handshakes in a single mechanism. This means that the QUIC handshake will take only one round trip in total to complete, which is one round trip less than TCP + TLS 1.3 (see figure 2c above).</p>
<p>You might be confused, because you’ve probably read that QUIC is two or even three round trips faster than TCP, not just one. This is because most articles only consider the worst case (TCP + TLS 1.2, (a)), not mentioning that the modern TCP + TLS 1.3 also “only” take two round trips ((b) is rarely shown). While a speed boost of one round trip is nice, it’s hardly amazing. Especially on fast networks (say, less than a 50-millisecond RTT), this will be <strong>barely noticeable</strong>, although slow networks and connections to distant servers would profit a bit more.</p>
<p>Next, you might be wondering why we need to wait for the handshake(s) at all. Why can’t we send an HTTP request in the first round trip? This is mainly because, if we did, then that first request would be sent <strong>unencrypted</strong>, readable by any eavesdropper on the wire, which is obviously not great for privacy and security. As such, we need to wait for the cryptographic handshake to complete before sending the first HTTP request. Or do we?</p>
<p>This is where a clever trick is used in practice. We know that users often revisit web pages within a short time of their first visit. As such, we can use the <strong>initial encrypted connection</strong> to bootstrap a second connection in the future. Simply put, sometime during its lifetime, the first connection is used to safely communicate new cryptographic parameters between the client and server. These parameters can then be used to <strong>encrypt the second connection</strong> from the very start, without having to wait for the full TLS handshake to complete. This approach is called <em>“session resumption”</em>.</p>
<p>It allows for a powerful optimization: We can now safely send our first HTTP request along with the QUIC/TLS handshake, <strong>saving another round trip</strong>! As for TLS 1.3, this effectively removes the TLS handshake’s waiting time. This method is often called 0-RTT (although, of course, it still takes one round trip for the HTTP response data to start arriving).</p>
<p>Both session resumption and 0-RTT are, again, things that I’ve often seen wrongly explained as being QUIC-specific features. In reality, these are actually <em>TLS features</em> that were already present in some form in TLS 1.2 and are now fully fledged in <a href="https://tools.ietf.org/html/rfc8446#section-2.3">TLS 1.3</a>.</p>
<p>Put differently, as you can see in figure 3 below, we can get the performance benefits of these features over TCP (and thus also HTTP/2 and even HTTP/1.1) as well! We see that even with 0-RTT, QUIC is still <strong>only one round trip faster</strong> than an optimally functioning TCP + TLS 1.3 stack. The claim that QUIC is three round trips faster comes from comparing figure 2’s (a) with figure 3’s (f), which, as we’ve seen, is not really fair.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ddbd604f-cec4-4e61-9172-707eda88bc99/connection-setup-2.png" /></p>
<p>The worst part is that when using 0-RTT, QUIC can’t even really use that gained round trip all that well due to security. To understand this, we need to understand one of the reasons why the TCP handshake exists. First, it allows the client to be sure that the server is actually available at the given IP address before sending it any higher-layer data.</p>
<p>Secondly, and crucially here, it allows the server to make sure that the client opening the connection is actually who and where they say they are before sending it data. If you recall how we defined a connection with the 4-tuple in <a href="/2021/08/http3-core-concepts-part1/#quic-supports-connection-migration">part 1</a>, you’ll know that the client is mainly identified by its IP address. And this is the problem: <strong>IP addresses can be spoofed</strong>!</p>
<p>Suppose that an attacker requests a very large file via HTTP over QUIC 0-RTT. However, they spoof their IP address, making it look like the 0-RTT request came from their victim’s computer. This is shown in figure 4 below. The QUIC server has no way of detecting whether the IP was spoofed, because this is the very first packet(s) it is seeing from that client.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64b9318e-3f18-4852-b911-409033d8645b/amplification.png" /></p>
<p>If the server then simply starts sending the large file back to the spoofed IP, it could end up <strong>overloading the victim’s network bandwidth</strong> (especially if the attacker were to do many of these fake requests in parallel). Note that the QUIC response would be dropped by the victim, because it doesn’t expect incoming data, but that doesn’t matter: Their network still needs to process the packets!</p>
<p>This is called a <a href="https://www.f5.com/labs/articles/education/what-is-a-dns-amplification-attack-"><em>reflection, or amplification, attack</em></a>, and it’s a significant way that hackers execute distributed denial-of-service (DDoS) attacks. Note that this doesn’t happen when 0-RTT over TCP + TLS is being used, precisely because the TCP handshake needs to complete first before the 0-RTT request is even sent along with the TLS handshake.</p>
<p>As such, <strong>QUIC has to be conservative</strong> in replying to 0-RTT requests, limiting how much data it sends in response until the client has been verified to be a real client and not a victim. For QUIC, this data amount has been set to <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-address-validation">three times the amount received from the client</a>.</p>
<p>Put differently, QUIC has a maximum “amplification factor” of three, which was determined to be an acceptable trade-off between performance usefulness and security risk (especially compared to some incidents that had an <a href="https://www.cloudflare.com/learning/ddos/memcached-ddos-attack/">amplification factor of over 51,000 times</a>). Because the client typically first sends just one to two packets, the QUIC server’s 0-RTT reply will be <strong>capped at just 4 to 6 KB</strong> (including other QUIC and TLS overhead!), which is somewhat less than impressive.</p>
<p>In addition, other security problems can lead to, for example, “replay attacks”, which limit the type of HTTP request you can do. For example, Cloudflare only allows <a href="https://blog.cloudflare.com/introducing-0-rtt/#whatsthecatch">HTTP GET requests without query parameters</a> in 0-RTT. These limit the usefulness of 0-RTT even more.</p>
<p>Luckily, QUIC has options to make this a bit better. For example, the server can check whether the 0-RTT comes from an <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-address-validation-for-futu">IP that it has had a valid connection with before</a>. However, that only works if the client stays on the same network (somewhat limiting QUIC’s <a href="#connection-migration">connection migration</a> feature). And even if it works, QUIC’s response is still limited by the congestion controller’s slow-start logic that we discussed <a href="#congestion-control">above</a>; so, there is <strong>no extra massive speed boost</strong> besides the one round trip saved.</p>
<blockquote><strong>Did You Know?</strong><br /><br />It’s interesting to note that QUIC’s three-times amplification limit also counts for its normal non-0-RTT handshake process in figure 2c. This can be a problem if, for example, the server’s <a href="https://hpbn.co/transport-layer-security-tls/#chain-of-trust-and-certificate-authorities">TLS certificate</a> is too large to fit inside 4 to 6 KB. In that case, it would have to be split, with the second chunk having to wait for the second round trip to be sent (after acknowledgements of the first few packets come in, indicating that the client’s IP was not spoofed). In this case, <strong>QUIC’s handshake might still end up taking two round trips</strong>, equal to TCP + TLS! This is why for QUIC, techniques such as <a href="https://www.fastly.com/blog/quic-handshake-tls-compression-certificates-extension-study">certificate compression</a> will be extra important.</blockquote>

<blockquote><strong>Did You Know?</strong><br /><br />It could be that certain advanced set-ups are able to mitigate these problems enough to make 0-RTT more useful. For example, the server could remember how much bandwidth a client had available the last time it was seen, making it less limited by the congestion control’s slow start for reconnecting (non-spoofed) clients. This has been <a href="https://arxiv.org/pdf/1905.03144.pdf">investigated in academia</a>, and there’s even a <a href="https://tools.ietf.org/html/draft-kuhn-quic-0rtt-bdp-08">proposed extension</a> in QUIC to do this. Several companies already do this type of thing to speed up TCP as well.<br /><br />Another option would be to have clients <strong>send more than one or two packets</strong> (for example, sending 7 more packets with padding), so the three-times limit translates to a more interesting 12- to 14-KB response, even after connection migration. I’ve written about this <a href="https://qlog.edm.uhasselt.be/epiq/files/QUICImplementationDiversity_Marx_final_11jun2020.pdf">in one of my papers</a>.<br /><br />Finally, (misbehaving) QUIC servers could also intentionally increase the three-times limit if they feel it’s somehow safe to do so or if they don’t care about the potential security issues (after all, there’s no <a href="https://tools.ietf.org/html/rfc8962">protocol police</a> preventing this).</blockquote>

<h3>What does it all mean?</h3>
<p>QUIC’s faster connection set-up with <strong>0-RTT is really more of a micro-optimization</strong> than a revolutionary new feature. Compared to a state-of-the art TCP + TLS 1.3 set-up, it would save a maximum of one round trip. The amount of data that can actually be sent in the first round trip is additionally limited by a number of security considerations.</p>
<p>As such, this feature will mostly shine either if your users are on networks with <strong>very high latency</strong> (say, satellite networks with more than 200-millisecond RTTs) or if you typically don’t send much data. Some examples of the latter are heavily cached websites, as well as single-page apps that periodically fetch small updates via APIs and other protocols such as <a href="https://datatracker.ietf.org/doc/html/draft-ietf-dprive-dnsoquic">DNS-over-QUIC</a>. One of the reasons <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/8b935debf13bd176a08326738f5f88ad115a071e.pdf">Google saw very good 0-RTT results for QUIC</a> was that it tested it on its already heavily optimized search page, where query responses are quite small.</p>
<p>In other cases, you’ll gain only a <strong>few dozens of milliseconds</strong> at best, even less if you’re already using a CDN (which you should be doing if you care about performance!).</p>
Connection Migration
<p>A third performance feature makes QUIC faster when transferring between networks, by <strong>keeping existing connections intact</strong>. While this indeed works, this type of network change doesn’t happen all that often and connections still need to reset their send rates.</p>
<p>As discussed in <a href="/2021/08/http3-core-concepts-part1#quic-supports-connection-migration">part 1</a>, QUIC’s connection IDs (CIDs) allow it to perform connection migration when <strong>switching networks</strong>. We illustrated this with a client moving from a Wi-Fi network to 4G while doing a large file download. On TCP, that download might have to be aborted, while for QUIC it might continue.</p>
<p>First, however, consider how often that type of scenario actually happens. You might think this also occurs when moving between Wi-Fi access points within a building or between cellular towers while on the road. In those set-ups, however (if they’re done correctly), your device will typically keep its IP intact, because the transition between wireless base stations is done at a lower protocol layer. As such, it occurs only when you <strong>move between completely different networks</strong>, which I’d say doesn’t happen all that often.</p>
<p>Secondly, we can ask whether this also works for other use cases besides large file downloads and live video conferencing and streaming. If you’re loading a web page at the exact moment of switching networks, you might have to re-request some of the (later) resources indeed.</p>
<p>However, loading a page typically takes in the order of seconds, so that coinciding with a network switch is also not going to be very common. Additionally, for use cases where this is a pressing concern, <strong>other mitigations are typically already in place</strong>. For example, servers offering large file downloads can support <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests">HTTP range requests</a> to allow resumable downloads.</p>
<p>Because there is typically some <strong>overlap time</strong> between network 1 dropping off and network 2 becoming available, video apps can open multiple connections (1 per network), syncing them before the old network goes away completely. The user will still notice the switch, but it won’t drop the video feed entirely.</p>
<p>Thirdly, there is no guarantee that the new network will have as much bandwidth available as the old one. As such, even though the conceptual connection is kept intact, the QUIC server cannot just keep sending data at high speeds. Instead, to avoid overloading the new network, it needs to <strong>reset (or at least lower) the send rate and start again</strong> in the congestion controller’s <a href="#congestion-control">slow-start phase</a>. </p>
<p>Because this initial send rate is typically too low to really support things such as video streaming, you will see some <strong>quality loss</strong> or hiccups, even on QUIC. In a way, connection migration is more about preventing connection context churn and overhead on the server than about improving performance.</p>
<blockquote><strong>Did You Know?</strong><br /><br />Note that, as discussed for 0-RTT above, we can devise some advanced techniques to improve connection migration. For example, we can, again, try to <strong>remember how much bandwidth was available</strong> on a given network last time and attempt to ramp up faster to that level for a new migration. Additionally, we could envision not simply switching between networks, but using both at the same time. This concept is called <em>multipath</em>, and <a href="#future-developments-to-look-out-for">we discuss it in more detail below</a>.</blockquote>

<p>So far, we have mainly talked about active connection migration, where users move between different networks. There are, however, also cases of <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-migration">passive connection migration</a>, where a certain network itself changes parameters. A good example of this is <a href="https://computer.howstuffworks.com/nat.htm">network address translation</a> (NAT) rebinding. While a full discussion of NAT is out of the scope of this article, it mainly means that the connection’s <strong>port numbers can change</strong> at any given time, without warning. This also happens much more often for UDP than TCP in most routers.</p>
<p>If this occurs, the QUIC CID will not change, and most implementations will assume that the user is still on the same physical network and will thus not reset the congestion window or other parameters. QUIC also includes some features such as <a href="https://www.rfc-editor.org/rfc/rfc9000.html#frame-ping">PINGs</a> and <a href="https://www.rfc-editor.org/rfc/rfc9000.html#idle-timeout">timeout indicators</a> to prevent this from happening, because this typically occurs for long-idle connections.</p>
<p>We discussed in <a href="/2021/08/http3-core-concepts-part1/#quic-supports-connection-migration">part 1</a> that QUIC doesn’t just use a single CID for security reasons. Instead, it changes CIDs when performing active migration. In practice, it’s even more complicated, because both client and server have separate lists of CIDs, (called <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-connection-id">source and destination CIDs in the QUIC RFC</a>). This is illustrated in figure 5 below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a0b9339-6976-458d-afc2-4a0cb97a7291/4-migration-src-dst-cid.png" /></p>
<p>This is done to <strong>allow each endpoint to choose its own CID format</strong> and contents, which in turn is crucial to allowing advanced routing and load-balancing logic. With connection migration, load balancers can no longer just look at the 4-tuple to identify a connection and send it to the correct back-end server. However, if all QUIC connections were to use random CIDs, this would heavily increase memory requirements at the load balancer, because it would need to store mappings of CIDs to back-end servers. Additionally, this would still not work with connection migration, as the CIDs change to new random values.</p>
<p>As such, it’s important that QUIC back-end servers deployed behind a load balancer have a <strong>predictable format</strong> of their CIDs, so that the load balancer can derive the correct back-end server from the CID, even after migration. Some options for doing this are described in the <a href="https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers-06">IETF’s proposed document</a>. To make this all possible, the servers need to be able to choose their own CID, which wouldn’t be possible if the connection initiator (which, for QUIC, is always the client) chose the CID. This is why there is a split between client and server CIDs in QUIC.</p>
<h3>What does it all mean?</h3>
<p>Thus, connection migration is a situational feature. <a href="https://github.com/quicwg/wg-materials/blob/main/ietf104/IETF_104_QUIC_Connection_Migration.pdf">Initial tests by Google</a>, for example, show low percentage improvements for its use cases. Many QUIC implementations don’t yet implement this feature. Even those that do will typically limit it to mobile clients and apps and not their desktop equivalents. Some people are even of the opinion that the feature isn’t needed, because opening a new connection with 0-RTT should have similar performance properties in most cases.</p>
<p>Still, depending on your use case or user profile, it could have a large impact. <strong>If your website or app is most often used while on the move</strong> (say, something like Uber or Google Maps), then you’d probably benefit more than if your users were typically sitting behind a desk. Similarly, if you’re <strong>focusing on constant interaction</strong> (be it video chat, collaborative editing, or gaming), then your worst-case scenarios should improve more than if you have a news website.</p>
Head-of-Line Blocking Removal
<p>The fourth performance feature is intended to make QUIC faster on networks with a <strong>high amount of packet loss</strong> by mitigating the head-of-line (HoL) blocking problem. While this is true in theory, we will see that in practice this will probably only provide minor benefits for web-page loading performance.</p>
<p>To understand this, though, we first need to take a detour and talk about stream prioritization and multiplexing.</p>
<h3>Stream Prioritization</h3>
<p>As discussed in <a href="/2021/08/http3-core-concepts-part1/#why-do-we-need-http-3">part 1</a>, a single TCP packet loss can <strong>delay data for multiple in-transit resources</strong> because TCP’s bytestream abstraction considers all data to be part of a single file. QUIC, on the other hand, is intimately aware that there are multiple concurrent bytestreams and can handle loss on a per-stream basis. However, as we’ve also seen, these streams are not truly transmitting data in parallel: Rather, the stream data is <em>multiplexed</em> onto a single connection. This multiplexing can happen in many different ways.</p>
<p>For example, for streams A, B, and C, we might see a packet sequence of <code>ABCABCABCABCABCABCABCABC</code>, where we change the active stream in each packet (let’s call this round-robin). However, we might also see the opposite pattern of <code>AAAAAAAABBBBBBBBCCCCCCCC</code>, where each stream is completed in full before starting the next one (let’s call this sequential). Of course, many other options are possible in between these extremes (<code>AAAABBCAAAAABBC…</code>, <code>AABBCCAABBCC…</code>, <code>ABABABCCCC…</code>, etc.). The multiplexing scheme is dynamic and driven by an HTTP-level feature called stream prioritization (<a href="#stream-prioritization">discussed later</a> in this article).</p>
<p>As it turns out, which multiplexing scheme you choose can have a huge impact on website loading performance. You can see this in the video below, courtesy of <a href="https://blog.cloudflare.com/better-http-2-prioritization-for-a-faster-web/">Cloudflare</a>, as every browser uses a different multiplexer. The reasons why are quite complex, and I’ve written <a href="https://speeder.edm.uhasselt.be/www18/files/h2priorities_mwijnants_www2018.pdf">several</a> academic <a href="https://h3.edm.uhasselt.be/files/ResourceMultiplexing_H2andH3_Marx2020.pdf">papers</a> on the topic, as well as <a href="https://www.youtube.com/watch?v=nH4iRpFnf1c">talked about it</a> in a conference. Patrick Meenan, of <a href="https://www.webpagetest.org/">Webpagetest</a> fame, even has a <a href="https://www.youtube.com/watch?v=ct5MvtmL1NM">three-hour tutorial</a> on just this topic.</p>

<a href="https://blog.cloudflare.com/better-http-2-prioritization-for-a-faster-web/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3407bbc0-fb9b-4a1d-af44-d8cad0f0ec19/compare.gif" /></a>Stream multiplexing differences can have a large impact on website loading in different browsers. (<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a0b9339-6976-458d-afc2-4a0cb97a7291/4-migration-src-dst-cid.png">Large preview</a>)


<p>Luckily, we can explain the basics relatively easily. As you may know, some resources can be <a href="https://web.dev/render-blocking-resources/">render blocking</a>. This is the case for CSS files and for some JavaScript in the HTML <code>head</code> element. While these files are loading, the browser cannot paint the page (or, for example, execute new JavaScript). </p>
<p>What’s more, CSS and JavaScript files need to be <strong>downloaded in full</strong> in order to be used (although they can often be incrementally parsed and compiled). As such, these resources need to be loaded as soon as possible, with the highest priority. Let’s contemplate what would happen if A, B, and C were all render-blocking resources.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46ae54c1-2985-4c47-9ebe-18686bbfc4ce/multiplexing-render-blocking.png" /></p>
<p>If we use a <em>round-robin multiplexer</em> (the top row in figure 6), we would actually delay each resource’s total completion time, because they all need to share bandwidth with the others. Since we can only use them after they are fully loaded, this incurs a significant delay. However, if we multiplex them sequentially (the bottom row in figure 6), we would see that A and B complete much earlier (and can be used by the browser), while not actually delaying C’s completion time.</p>
<p>However, that doesn’t mean that sequential multiplexing is always the best, because some (mostly non-render-blocking) resources (such as HTML and progressive JPEGs) can actually be <strong>processed and used incrementally</strong>. In those (and some other) cases, it makes sense to use the first option (or at least something in between).</p>
<p>Still, for <em>most</em> web-page resources, it turns out that <strong>sequential multiplexing performs best</strong>. This is, for example, what Google Chrome is doing in the video above, while Internet Explorer is using the worst-case round-robin multiplexer.  </p>
<h3>Packet Loss Resilience</h3>
<p>Now that we know that all streams aren’t always active at the same time and that they can be multiplexed in different ways, we can consider what happens if we have packet loss. As explained in <a href="/2021/08/http3-core-concepts-part1/#why-do-we-need-http-3">part 1</a>, if one QUIC stream experiences packet loss, then other <em>active</em> streams can still be used (whereas, in TCP, all would be paused).</p>
<p>However, as we’ve just seen, having many concurrent active streams is typically not optimal for web performance, because it can delay some critical (render-blocking) resources, even without packet loss! We’d rather have just one or two active at the same time, using a sequential multiplexer. However, this reduces the impact of QUIC’s HoL blocking removal.</p>
<p>Imagine, for example, that the sender could transmit <strong>12 packets</strong> at a given time (see figure 7 below) — remember that this is limited by the <a href="#congestion-control">congestion controller</a>). If we fill all 12 of those packets with data for stream A (because it’s high priority and render-blocking — think <code>main.js</code>), then we would have only one active stream in that 12-packet window.</p>
<p>If one of those packets were to be lost, then QUIC would still end up <strong>fully HoL blocked</strong> because there would simply be no other streams it could process besides <code>A</code>: All of the data is for <code>A</code>, and so everything would still have to wait (we don’t have <code>B</code> or <code>C</code> data to process), similar to TCP.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/05412377-b92f-4adc-9725-4a3b4b4d602a/hol-blocking-rr-sequential.png" /></p>
<p>We see that we have a kind of contradiction: Sequential multiplexing (<code>AAAABBBBCCCC</code>) is typically better for web performance, but it doesn’t allow us to take much advantage of QUIC’s HoL blocking removal. Round-robin multiplexing (<code>ABCABCABCABC</code>) would be better against HoL blocking, but worse for web performance. As such, <strong>one best practice or optimization can end up undoing another</strong>.</p>
<p>And it gets worse. Up until now, we’ve sort of assumed that individual packets get lost one at a time. However, this isn’t always true, because packet loss on the Internet is <a href="https://huitema.wordpress.com/2020/07/12/parsing-quic-logs-and-assessing-packet-losses/">often “bursty”</a>, meaning that multiple packets <strong>often get lost at the same time</strong>.</p>
<p>As discussed <a href="#congestion-control">above</a>, an important reason for packet loss is that a network is overloaded with too much data, having to drop excess packets. This is why the congestion controller starts sending slowly. However, it then keeps growing its send rate until… there is packet loss!</p>
<p>Put differently, the mechanism that’s intended to prevent overloading the network actually <strong>overloads the network</strong> (albeit in a controlled fashion). On most networks, that occurs after quite a while, when the send rate has increased to hundreds of packets per round trip. When those reach the limit of the network, several of them are typically dropped together, leading to the bursty loss patterns.</p>
<blockquote><strong>Did You Know?</strong><br /><br />This is one of the reasons why we wanted to move to using a single (TCP) connection with HTTP/2, rather than the 6 to 30 connections with HTTP/1.1. Because each individual connection ramps up its send rate in pretty much the same way, HTTP/1.1 could get a good speed-up at the start, but the connections could actually start causing <strong>massive packet loss</strong> for each other as they caused the network to become overloaded.<br /><br />At the time, <a href="https://a77db9aa-a-7b23c8ea-s-sites.googlegroups.com/a/chromium.org/dev/spdy/An_Argument_For_Changing_TCP_Slow_Start.pdf">Chromium developers speculated</a> that this behaviour caused most of the packet loss seen on the Internet. This is also one of the reasons why BBR has become an often used congestion-control algorithm, because it uses fluctuations in observed RTTs, rather than packet loss, to assess available bandwidth.</blockquote>

<blockquote><strong>Did You Know?</strong><br /><br />Other causes of packet loss can lead to fewer or individual packets becoming lost (or unusable), especially on wireless networks. There, however, the losses are often detected at lower protocol layers and solved between two local entities (say, the smartphone and the 4G cellular tower), rather than by retransmissions between the client and the server. These usually don’t lead to real end-to-end packet loss, but rather show up as <strong>variations in packet latency</strong> (or “jitter”) and reordered packet arrivals.</blockquote>

<p>So, let’s say we are using a per-packet round-robin multiplexer (<code>ABCABCABCABCABCABCABCABC…</code>) to get the most out of HoL blocking removal, and we get a bursty loss of just 4 packets. We see that this will always impact all 3 streams (see figure 8, middle row)! In this case, QUIC’s HoL blocking removal provides no benefits, because <strong>all streams have to wait for their own retransmissions</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93cb3e10-16dd-4647-af85-91cc723d35f6/hol-blocking-bursty.png" /></p>
<p>To lower the risk of multiple streams being affected by a lossy burst, we need to concatenate more data for each stream. For example, <code>AABBCCAABBCCAABBCCAABBCC…</code> is a small improvement, and <code>AAAABBBBCCCCAAAABBBBCCCC…</code> (see bottom row in figure 8 above) is even better. You can again see that a more sequential approach is better, even though that reduces the chances that we have multiple concurrent active streams.</p>
<p>In the end, predicting the actual impact of QUIC’s HoL blocking removal is difficult, because it depends on the number of streams, the size and frequency of the loss bursts, how the stream data is actually used, etc. However, <a href="https://h3.edm.uhasselt.be/files/ResourceMultiplexing_H2andH3_Marx2020.pdf">most results at this time</a> indicate it will <strong>not help much</strong> for the use case of web-page loading, because there we typically want fewer concurrent streams.</p>
<p>If you want even more detail on this topic or just some concrete examples, please check out my <a href="https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/">in-depth article on HTTP HoL blocking</a>.</p>
<blockquote><strong>Did You Know?</strong><br /><br />As with the previous sections, some advanced techniques can help us here. For example, modern congestion controllers use <a href="https://homes.cs.washington.edu/~tom/pubs/pacing.pdf">packet pacing</a>. This means that they don’t send, for example, 100 packets in a single burst, but rather <strong>spread them out</strong> over an entire RTT. This conceptually lowers the chances of overloading the network, and the <a href="https://www.rfc-editor.org/rfc/rfc9002.html#name-pacing">QUIC Recovery RFC strongly recommends using it</a>. Complementarily, some congestion-control algorithms such as <a href="https://blog.apnic.net/2017/05/09/bbr-new-kid-tcp-block/">BBR</a> don’t keep increasing their send rate until they cause packet loss, but rather back off before that (by looking at, for example, RTT fluctuations, because RTTs also rise when a network is becoming overloaded).<br /><br />
While these approaches lower the overall chances of packet loss, they don’t necessarily lower its burstiness.</blockquote>

<h3>What does it all mean?</h3>
<p>While QUIC’s HoL blocking removal means, in theory, that it (and HTTP/3) should perform better on lossy networks, in practice this depends on a lot of factors. Because the use case of web-page loading typically favours a more sequential multiplexing set-up, and because packet loss is unpredictable, this feature would, again, <strong>likely affect mainly the slowest 1% of users</strong>. However, this is still a very active area of research, and only time will tell.</p>
<p>Still, there are situations that might see more improvements. These are mostly outside of the typical use case of the first full page load — for example, when resources are not render blocking, when they can be processed incrementally, when streams are completely independent, or when less data is sent at the same time.</p>
<p>Examples include <strong>repeat visits on well-cached pages</strong> and background downloads and API calls in single-page apps. For example, Facebook has seen some benefits from HoL blocking removal when using HTTP/3 to load data in its native app.</p>
UDP and TLS Performance
<p>A fifth performance aspect of QUIC and HTTP/3 is about how efficiently and performantly they can actually <strong>create and send packets</strong> on the network. We will see that QUIC’s usage of UDP and heavy encryption can make it a fair bit slower than TCP (but things are improving).</p>
<p>First, we’ve <a href="/2021/08/http3-core-concepts-part1/#why-do-we-need-http-3">already discussed</a> that QUIC’s usage of UDP was more about flexibility and deployability than about performance. This is evidenced even more by the fact that, up until recently, sending QUIC packets over UDP was typically much slower than sending TCP packets. This is partly because of where and how these protocols are typically implemented (see figure 9 below).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cffc7945-bd57-459f-b6d3-ed06f51b30ad/kernel-user-space.png" /></p>
<p>As discussed <a href="#congestion-control">above</a>, TCP and UDP are typically implemented directly in the OS’ fast kernel. In contrast, TLS and QUIC implementations are mostly in slower user space (note that this is not really needed for QUIC — it is mostly done because it’s much more flexible). This makes QUIC already a bit slower than TCP.</p>
<p>Additionally, when sending data from our user-space software (say, browsers and web servers), we need to <strong>pass this data to the OS kernel</strong>, which then uses TCP or UDP to actually put it on the network. Passing this data is done using kernel APIs (system calls), which involves a certain amount of overhead per API call. For TCP, these overheads were much lower than for UDP.</p>
<p>This is mostly because, historically, TCP has been used a lot more than UDP. As such, over time, many optimizations were added to TCP implementations and kernel APIs to reduce packet send and receive overheads to a minimum. Many network interface controllers (NICs) even have built-in hardware-offload features for TCP. UDP, however, was not as lucky, because its more limited use didn’t justify the investment in added optimizations. In the past five years, this has luckily changed, and <strong>most OSes have since added <a href="https://blog.cloudflare.com/how-to-receive-a-million-packets/">optimized options for UDP</a></strong> as well.</p>
<p>Secondly, QUIC has a lot of overhead because <strong>it encrypts each packet individually</strong>. This is slower than using TLS over TCP, because there you can <a href="https://blog.cloudflare.com/optimizing-tls-over-tcp-to-reduce-latency/">encrypt packets in chunks</a> (up to about 16 KB or 11 packets at a time), which is more efficient. This was a conscious trade-off made in QUIC, because bulk encryption can lead to <a href="https://www.igvita.com/2013/10/24/optimizing-tls-record-size-and-buffering-latency/">its own forms of HoL blocking</a>.</p>
<p>Unlike the first point, where we could add extra APIs to make UDP (and thus QUIC) faster, here, QUIC will always have an inherent disadvantage to TCP + TLS. However, this is also quite manageable in practice with, for example, <a href="https://github.com/h2o/picotls/pull/310">optimized encryption libraries</a> and clever methods that allow QUIC packets headers to be encrypted in bulk.</p>
<p>As a result, while Google’s earliest QUIC versions were still <a href="https://rjshade.com/work/files/papers/pdf/langley_et_al_sigcomm2017_quic.pdf">twice as slow as TCP + TLS</a>, things have certainly improved since. For example, in recent tests, Microsoft’s <a href="https://github.com/microsoft/msquic">heavily optimized QUIC stack</a> was able to get 7.85 Gbps, compared to 11.85 Gbps for TCP + TLS on the same system (so here, QUIC is about 66% as fast as TCP + TLS).</p>
<p>This is with the recent Windows updates, which made UDP faster (for a full comparison, UDP throughput on that system was 19.5 Gbps). The most optimized version of Google’s QUIC stack is currently <a href="https://youtu.be/xxN4FfwaANk?t=3161">about 20% slower than TCP + TLS</a>. <a href="https://www.fastly.com/blog/measuring-quic-vs-tcp-computational-efficiency">Earlier tests by Fastly</a> on a less advanced system and with a few tricks even claim equal performance (about 450 Mbps), showing that depending on the use case, QUIC can definitely compete with TCP.</p>
<p>However, even if QUIC were twice as slow as TCP + TLS, it’s not all that bad. First, QUIC and TCP + TLS processing is typically not the heaviest thing happening on a server, because other logic (say, HTTP, caching, proxying, etc.) also needs to execute. As such, you <strong>won’t actually need twice as many servers to run QUIC</strong> (it’s a bit unclear how much impact it <em>will</em> have in a real data center, though, because none of the big companies have released data on this).</p>
<p>Secondly, there are still plenty of opportunities to optimize QUIC implementations in the future. For example, over time, some QUIC implementations will (partially) move to the OS kernel (much like TCP) or bypass it (some already do, like <a href="https://github.com/microsoft/msquic">MsQuic</a> and <a href="https://github.com/NTAP/quant">Quant</a>). We can also expect <a href="https://datatracker.ietf.org/meeting/104/materials/slides-104-quic-offloading-quic-00">QUIC-specific hardware</a> to become available.</p>
<p>Still, there will likely be some use cases for which TCP + TLS will remain the preferred option. For example, Netflix has indicated that it probably won’t move to QUIC anytime soon, having <a href="https://www.youtube.com/watch?v=8NSzkYSX5nY">heavily invested in custom FreeBSD set-ups</a> to stream its videos over TCP + TLS.</p>
<p>Similarly, Facebook has said that QUIC will probably mainly be used <strong>between end users and the CDN’s edge</strong>, but not between data centers or between edge nodes and origin servers, due to its larger overhead. In general, very  high-bandwidth scenarios will probably continue to favour TCP + TLS, especially in the next few years.</p>
<blockquote><strong>Did You Know?</strong><br /><br />Optimizing network stacks is a deep and technical rabbit hole of which the above merely scratches the surface (and misses a lot of nuance). If you’re brave enough or if you want to know what terms like <code>GRO/GSO</code>, <code>SO_TXTIME</code>, kernel bypass, and <code>sendmmsg()</code> and <code>recvmmsg()</code> mean, I can recommend some excellent articles on optimizing QUIC <a href="https://blog.cloudflare.com/accelerating-udp-packet-transmission-for-quic/">by Cloudflare</a> and <a href="https://www.fastly.com/blog/measuring-quic-vs-tcp-computational-efficiency">Fastly</a>, as well as an extensive <a href="https://www.youtube.com/watch?v=Icskyw17Dgw">code walkthrough by Microsoft</a>, and an in-depth talk from <a href="https://archive.fosdem.org/2020/schedule/event/fast_quic_sockets_for_cloud_networking/">Cisco</a>. Finally, a Google engineer gave a very interesting keynote about <a href="https://www.youtube.com/watch?v=xxN4FfwaANk">optimizing their QUIC implementation over time</a>.</blockquote>

<h3>What does it all mean?</h3>
<p>QUIC’s particular usage of the UDP and TLS protocols has historically made it much slower than TCP + TLS. However, over time, several improvements have been made (and will continue to be implemented) that have closed the gap somewhat. You probably won’t notice these discrepancies in typical use cases of web-page loading, though, but they might give you headaches if you maintain large server farms.</p>
HTTP/3 Features
<p>Up until now, we’ve mainly talked about new performance features in QUIC versus TCP. However, what about HTTP/3 versus HTTP/2? As discussed in <a href="/2021/08/http3-core-concepts-part1/#why-do-we-need-http-3">part 1</a>, <strong>HTTP/3 is really HTTP/2-over-QUIC</strong>, and as such, no real, big new features were introduced in the new version. This is unlike the move from HTTP/1.1 to HTTP/2, which was much larger and introduced new features such as header compression, stream prioritization, and server push. These features are all still in HTTP/3, but there are some important differences in how they are implemented under the hood.</p>
<p>This is mostly because of how QUIC’s removal of HoL blocking works. <a href="#head-of-line-blocking-removal">As we’ve discussed</a>, a loss on stream B no longer implies that streams A and C will have to wait for B’s retransmissions, like they did over TCP. As such, if A, B, and C each sent a QUIC packet in that order, their data might well be delivered to (and processed by) the browser as A, C, B! Put differently, unlike TCP, QUIC is <strong>no longer fully ordered</strong> across different streams!</p>
<p>This is a problem for HTTP/2, which really relied on TCP’s strict ordering in the design of many of its features, which use special control messages interspersed with data chunks. In QUIC, these control messages might arrive (and be applied) in any order, potentially even making the features do the <em>opposite</em> of what was intended! The technical details are, again, unnecessary for this article, but the <a href="https://h3.edm.uhasselt.be/files/HTTP3_Prioritization_extended_3jul2019.pdf">first half of this paper</a> should give you an idea of how stupidly complex this can get.</p>
<p>As such, the internal mechanics and implementations of the features have had to change for HTTP/3. A concrete example is <strong>HTTP header compression</strong>, which lowers the overhead of repeated large HTTP headers (for example, cookies and user-agent strings). In HTTP/2, this was done using the <a href="https://datatracker.ietf.org/doc/html/rfc7541">HPACK</a> set-up, while for HTTP/3 this has been reworked to the more complex <a href="https://datatracker.ietf.org/doc/html/draft-ietf-quic-qpack">QPACK</a>. Both systems deliver the same feature (i.e. header compression) but in quite different ways. Some excellent deep technical discussion and diagrams on this topic can be found <a href="https://blog.litespeedtech.com/tag/quic-header-compression-design-team/">on the Litespeed blog</a>.</p>
<p>Something similar is true for the prioritization feature that drives stream multiplexing logic and which we’ve <a href="#head-of-line-blocking-removal">briefly discussed above</a>. In HTTP/2, this was implemented using a complex “dependency tree” set-up, which explicitly tried to model all page resources and their interrelations (more information is in the talk “<a href="https://www.youtube.com/watch?v=nH4iRpFnf1c">The Ultimate Guide to HTTP Resource Prioritization</a>”). Using this system directly over QUIC would lead to some potentially very wrong tree layouts, because adding each resource to the tree would be a separate control message.</p>
<p>Additionally, this approach turned out to be needlessly complex, leading to <a href="https://blog.cloudflare.com/nginx-structural-enhancements-for-http-2-performance/">many implementation bugs and inefficiencies</a> and <a href="https://github.com/andydavies/http2-prioritization-issues">subpar performance on many servers</a>. Both problems have led the prioritization system to be <a href="https://blog.cloudflare.com/adopting-a-new-approach-to-http-prioritization/">redesigned for HTTP/3 in a much simpler way</a>. This more straightforward set-up makes some advanced scenarios difficult or impossible to enforce (for example, proxying traffic from multiple clients on a single connection), but still enables a wide range of options for web-page loading optimization.</p>
<p>While, again, the two approaches deliver the same basic feature (guiding stream multiplexing), the hope is that HTTP/3’s easier set-up will make for fewer implementation bugs.</p>
<p>Finally, there is <strong>server push</strong>. This feature allows the server to send HTTP responses without waiting for an explicit request for them first. In theory, this could deliver excellent performance gains. In practice, however, it turned out to be <a href="https://calendar.perfplanet.com/2016/http2-push-the-details/">hard to use correctly</a> and <a href="https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/">inconsistently implemented</a>. As a result, it is probably even going to be <a href="https://groups.google.com/a/chromium.org/g/blink-dev/c/K3rYLvmQUBY/m/vOWBKZGoAQAJ">removed from Google Chrome</a>.</p>
<p>Despite all this, it _is_ still <a href="https://datatracker.ietf.org/doc/html/draft-ietf-quic-http">defined as a feature in HTTP/3</a> (although few implementations support it). While its internal workings haven’t changed as much as the previous two features, it too has been adapted to work around QUIC’s non-deterministic ordering. Sadly, though, this will do little to solve some of its longstanding issues.</p>
<h3>What does it all mean?</h3>
<p>As we’ve said before, most of HTTP/3’s potential comes from the underlying QUIC, not HTTP/3 itself. While the protocol’s internal implementation is <em>very</em> different from HTTP/2’s, its high-level performance features and how they can and should be used have stayed the same.</p>
Future Developments to Look Out For
<p>In this series, I have regularly highlighted that faster evolution and higher flexibility are core aspects of QUIC (and, by extension, HTTP/3). As such, it should be no surprise that people are already working on <strong>new extensions</strong> to and applications of the protocols. Listed below are the main ones that you’ll probably encounter somewhere down the line:</p>
<ul>
<li><p><strong><a href="https://tools.ietf.org/html/draft-swett-nwcrg-coding-for-quic">Forward error correction</a></strong><br />This purpose of this technique is, again, to <strong>improve QUIC’s resilience to packet loss</strong>. It does this by sending redundant copies of the data (though cleverly encoded and compressed so that they’re not as large). Then, if a packet is lost but the redundant data arrives, a retransmission is no longer needed.<br /><br />This was originally a part of Google QUIC (and one of the reasons why people say QUIC is good against packet loss), but it is not included in the standardized QUIC version 1 because its performance impact wasn’t proven yet. Researchers are now performing active experiments with it, though, and you can help them out by using the <a href="https://play.google.com/store/apps/details?id=org.pquic.pquic_fec_android">PQUIC-FEC Download Experiments</a> app.</p>
</li>
<li><p><strong><a href="https://tools.ietf.org/html/draft-liu-multipath-quic">Multipath QUIC</a></strong><br />We’ve previously discussed connection migration and how it can help when moving from, say, Wi-Fi to cellular. However, doesn’t that also imply we might use both Wi-Fi and cellular <strong>at the same time</strong>? Concurrently using both networks would give us more available bandwidth and increased robustness! That is the main concept behind multipath.<br /><br />This is, again, something that Google experimented with but that didn’t make it into QUIC version 1 due to its inherent complexity. However, researchers have <a href="https://multipath-quic.org/">since shown</a> its high potential, and it might make it into QUIC version 2. Note that <a href="https://www.multipath-tcp.org/">TCP multipath</a> also exists, but that has taken almost a decade to become practically usable.</p>
</li>
<li><p><strong><a href="https://tools.ietf.org/html/draft-ietf-quic-datagram">Unreliable data over QUIC</a> and <a href="https://datatracker.ietf.org/doc/html/draft-ietf-masque-h3-datagram">HTTP/3</a></strong><br />As we’ve seen, QUIC is a fully reliable protocol. However, because it runs over UDP, which is unreliable, we can add a feature to QUIC to also send unreliable data. This is outlined in the proposed datagram extension. You would, of course, not want to use this to send web page resources, but it might be handy for things such as gaming and live video streaming. This way, users would get all of the benefits of UDP but with QUIC-level encryption and (optional) congestion control.  </p>
</li>
<li><p><strong><a href="https://web.dev/webtransport/">WebTransport</a></strong><br />Browsers don’t expose TCP or UDP to JavaScript directly, mainly due to security concerns. Instead, we have to rely on HTTP-level APIs such as Fetch and the somewhat more flexible <a href="https://hpbn.co/websocket/">WebSocket</a> and <a href="https://hpbn.co/webrtc/">WebRTC</a> protocols. The newest in this series of options is called WebTransport, which mainly allows you to use HTTP/3 (and, by extension, QUIC) in a more low-level way (although it can also fall back to TCP and HTTP/2 if needed).<br /><br />Crucially, it will include the ability to use unreliable data over HTTP/3 (see the previous point), which should make things such as gaming quite a bit easier to implement in the browser. For normal (JSON) API calls, you’ll, of course, still use Fetch, which will also automatically employ HTTP/3 when possible. WebTransport is still under heavy discussion at the moment, so it’s not yet clear what it will eventually look like. Of the browsers, only Chromium is currently working on a public <a href="https://groups.google.com/a/chromium.org/g/web-transport-dev/c/6PwPFy9fVfw">proof-of-concept implementation</a>.</p>
</li>
<li><p><strong>DASH and HLS video streaming</strong><br />For non-live video (think YouTube and Netflix), browsers typically make use of the Dynamic Adaptive Streaming over HTTP (DASH) or HTTP Live Streaming (HLS) protocols. Both basically mean that you encode your videos into smaller chunks (of 2 to 10 seconds) and different quality levels (720p, 1080p, 4K, etc.).<br /><br />At runtime, the browser estimates the highest quality your network can handle (or the most optimal for a given use case), and it requests the relevant files from the server via HTTP. Because the browser doesn’t have direct access to the TCP stack (as that’s typically implemented in the kernel), it occasionally makes a few mistakes in these estimates, or it takes a while to react to changing network conditions (leading to video stalls).<br /><br />Because QUIC is implemented as part of the browser, this could be improved quite a bit, by <a href="https://dl.acm.org/doi/abs/10.1145/3386367.3431901">giving the streaming estimators access to low-level protocol information</a> (such as loss rates, bandwidth estimates, etc.). Other researchers have been experimenting with <a href="https://www.researchgate.net/profile/Mirko-Palmer/publication/327930175_The_QUIC_Fix_for_Optimal_Video_Streaming/links/5f60ea97299bf1d43c063075/The-QUIC-Fix-for-Optimal-Video-Streaming.pdf">mixing reliable and unreliable data for video streaming</a> as well, with some promising results.</p>
</li>
<li><p><strong>Protocols other than HTTP/3</strong><br />With QUIC being a general purpose transport protocol, we can expect many application-layer protocols that now run over TCP to be run on top of QUIC as well. Some works in progress include <a href="https://datatracker.ietf.org/doc/html/draft-ietf-dprive-dnsoquic">DNS-over-QUIC</a>, <a href="https://techcommunity.microsoft.com/t5/itops-talk-blog/smb-over-quic-files-without-the-vpn/ba-p/1183449">SMB-over-QUIC</a>, and even <a href="https://datatracker.ietf.org/doc/html/draft-bider-ssh-quic-09">SSH-over-QUIC</a>. Because these protocols typically have very different requirements than HTTP and web-page loading, QUIC’s performance improvements that we’ve discussed might work much better for these protocols.</p>
</li>
</ul>
<h3>What does it all mean?</h3>
<p>QUIC version 1 is <strong>just the start</strong>. Many advanced performance-oriented features that Google had earlier experimented with did not make it into this first iteration. However, the goal is to quickly evolve the protocol, introducing new extensions and features at a high frequency. As such, over time, QUIC (and HTTP/3) should become clearly faster and more flexible than TCP (and HTTP/2).</p>
Conclusion
<p>In this second part of the series, we have discussed the many different <strong>performance features and aspects of HTTP/3</strong> and especially QUIC. We have seen that while most of these features seem very impactful, in practice they might not do all that much for the average user in the use case of web-page loading that we’ve been considering.</p>
<p>For example, we’ve seen that QUIC’s use of UDP doesn’t mean that it can suddenly use more bandwidth than TCP, nor does it mean that it can download your resources more quickly. The often-lauded 0-RTT feature is really a micro-optimization that saves you one round trip, in which you can send about 5 KB (in the worst case).</p>
<p>HoL blocking removal doesn’t work well if there is <strong>bursty packet loss</strong> or when you’re loading render-blocking resources. Connection migration is highly situational, and HTTP/3 doesn’t have any major new features that could make it faster than HTTP/2.</p>
<p>As such, you might expect me to recommend that you just skip HTTP/3 and QUIC. Why bother, right? However, I will most definitely do no such thing! Even though these new protocols might not aid users on fast (urban) networks much, the new features do certainly have the potential to be <strong>highly impactful to highly mobile users</strong> and people on slow networks. </p>
<p>Even in Western markets such as my own Belgium, where we generally have fast devices and access to high-speed cellular networks, these situations can affect 1% to even 10% of your user base, depending on your product. An example is someone on a train trying desperately to look up a critical piece of information on your website, but having to wait 45 seconds for it to load. I certainly know I’ve been in that situation, wishing someone had deployed QUIC to get me out of it.</p>
<p>However, there are other countries and regions where things are much worse still. There, the average user might look a lot more like the slowest 10% in Belgium, and the slowest 1% might never get to see a loaded page at all. In <a href="https://infrequently.org/2021/03/the-performance-inequality-gap/">many parts of the world</a>, web performance is an <a href="https://hookedoncode.com/2020/07/performance-is-accessibility/">accessibility and inclusivity problem</a>.</p>
<p>This is why we should never just test our pages on our own hardware (but also use a service like <a href="https://www.webpagetest.org/">Webpagetest</a>) and also why you should <strong>definitely deploy QUIC and HTTP/3</strong>. Especially if your users are often on the move or unlikely to have access to fast cellular networks, these new protocols might make a world of difference, even if you don’t notice much on your cabled MacBook Pro. For more details, I highly recommend <a href="https://www.fastly.com/blog/how-http3-and-quic-help-long-tail-connections">Fastly’s post on the issue</a>.</p>
<p>If that doesn’t fully convince you, then consider that QUIC and HTTP/3 will <strong>continue to evolve and get faster</strong> in the years to come. Getting some early experience with the protocols will pay off down the road, allowing you to reap the benefits of new features as soon as possible. Additionally, QUIC enforces security and privacy best practices in the background, which benefit all users everywhere.</p>
<p>Finally convinced? Then <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">stay tuned</a> for <strong>part 3 of the series</strong> to read about how you can go about using the new protocols in practice.</p>
<p>This series is divided into three parts:</p>
<ol>
<li><a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/"><strong>HTTP/3 history and core concepts</strong></a><br />This is targeted at people new to HTTP/3 and protocols in general, and it mainly discusses the basics.</li>
<li><strong>HTTP/3 performance features</strong> (<em>current article</em>)<br />This is more in depth and technical. People who already know the basics can start here.</li>
<li><strong>Practical HTTP/3 deployment options</strong> (<em>coming up soon!</em>)<br />This explains the challenges involved in deploying and testing HTTP/3 yourself. It details how and if you should change your web pages and resources as well.</li>
</ol>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Robin Marx)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9d5e5ddd-7a90-48c6-84c5-dc5c335e2305/congestion-control.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Jamstack CMS: The Past, The Present and The Future]]></title>
            <link>https://smashingmagazine.com/2021/08/history-future-jamstack-cms/</link>
            <guid>https://smashingmagazine.com/2021/08/history-future-jamstack-cms/</guid>
            <pubDate>Fri, 20 Aug 2021 08:00:00 GMT</pubDate>
            <description><![CDATA[The story of Jamstack CMSs goes all the way back to the 90s. In this article, we take a trip down memory lane to see how we got to the modern Jamstack CMSs we have today, and where they’re heading in the next decade.]]></description>
            <content:encoded><![CDATA[<p>The world’s first website was made from static HTML files created in a text editor. While it looks unassuming, it laid the foundation for the web we have today. Fast-forward 30 years, and website technology has changed significantly — we have images, stylesheets, JavaScript, streaming video, AJAX, animation, WebSockets, WebGL, rounded corners in CSS — the list goes on.</p>
<p>Sir Tim Berners-Lee couldn’t have possibly imagined the weird and wonderful place the world wide web would become and how deeply it would become part of our everyday lives. Yet, for all these technological developments, it’s interesting that many of us are still serving sites in the same way Tim did with the very first website — a <strong>web server serving static website files</strong>.</p>
<p>Throughout the web’s history, static websites have always been a popular option due to their simplicity, scalability, and security. However, unlike the early days of the web, static sites are no longer limited to developers working in a code editor. Now there’s a massive range of Jamstack CMSs available, which bring all the advantages of static sites while allowing non-technical folk to update content.</p>
<p>Over the years, there have been many <strong>different approaches and evolutions</strong> of static and Jamstack CMSs. In this post, we’re taking a stroll down memory lane to look at the CMSs that gave rise to the Jamstack CMSs we have today and peek beyond the horizon of what’s next.</p>
The 90s
<p>During the 90s, we saw two content management systems for static sites — Microsoft <strong>FrontPage</strong> in 1996 and Macromedia <strong>Dreamweaver</strong> in 1997. I vividly remember receiving a PC Magazine for my birthday with a trial of Dreamweaver. Piecing together a website using a WYSIWYG editor and seeing the code it generated was a fascinating and educational experience that sparked an initial interest in web design.</p>
<p>These desktop applications incremented the tooling an inch closer to the modern Jamstack content management systems of today. The idea of <strong>drag’n’dropping website components</strong> while still having control of the HTML was groundbreaking at the time.</p>
<p>Maintaining layouts became a particular pain point for static sites. For example, let’s say you had a website and wanted to change your navigation. You would need to make that change on every page. At this point, dynamically generated websites had already solved this problem with includes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3bf2365a-7eb1-41f3-beda-ede559259e1d/3-history-future-jamstack-cms.png" /></p>
<p>Dreamweaver 4 introduced <strong>editable regions</strong>, which was the first foray into separating content from the layout on a static website. Now you could manage larger sites and even hand off content editing to someone else without worrying about them breaking the rest of the site.</p>
<p>The bridge between local development and deployment was also a pain point Dreamweaver began to address with <strong>integrated FTP</strong>. I remember the struggle of getting my FTP configuration exactly correct in Dreamweaver for the free, advertising-ridden hosting I’d found. But, when it worked, it was magical. I had my website with funny photos and links to favorite websites live on the internet, and better yet, I could edit directly on the server.</p>
The 00s
<p>In the 2000s we had a showdown of two popular blog publishing platforms — <strong>MovableType</strong> in 2001 and <strong>WordPress</strong> in 2003. It was a battle of not only proprietary vs open source but also static vs dynamic. It’s safe to say WordPress, the platform now powering 40% of the internet, won that battle, but MovableType paved the way for Jamstack CMSs in the future.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/374e9c40-f1fd-4614-90eb-08f5a1db5ce5/8-history-future-jamstack-cms.png" /></p>
<p>MovableType was one of the <strong>first static site generators</strong> on the market, although that term wouldn’t become popular until 2008. Ben and Mena Trott created MovableType because of a "Dissatisfacion with existing blog CMSes — performance, stability." To this day, these two points are common reasons for switching from a dynamic site to a static one.</p>
<p>What’s interesting is there was little mention of static sites in MoveableType’s documentation at all. Instead, they would talk about "rebuilding" the site after any changes. I imagine they wanted to avoid the limiting perception of the word 'static.' It’s the same problem that led the community to adopt the term 'Jamstack.'</p>
<p>Before MovableType, other personal blogging platforms were available such as <strong>Geocities</strong>, Blogger &amp; Open Diary. However, MovableType was one of the first widely available platforms you could download for free and host yourself. In addition, they introduced a hosted version of MovableType in 2003 called TypePad to compete with other popular cloud platforms.</p>
<p>With MovableType, you had everything you needed to manage your blog. You could create and update blog posts, all content was straight HTML — open-source WYSIWYG editors weren’t available at the time, and Markdown didn’t come about until 2004.</p>
<p>We can see all the <strong>bones of modern Jamstack CMSs</strong> here. MovableType really was before its time.</p>
<p>In 2006, Denis Defreyne tried to set up a Ruby-based blog platform and ran into performance problems — "Having a VPS with only 96 MB of RAM, any Ruby-based CMS ran <em>extremely</em> slowly." One year later, Denis launches <a href="https://github.com/nanoc/nanoc">Nanoc</a>, a static site generator that simplifies MovableType’s model. Nanoc removed the UI and is instead a program you run on the command line.</p>
<p>As far as I can tell, this is the <strong>first modern static site generator</strong>, although we’re still a year away from coining that term. At the time, Nanoc talked about compiling source files into HTML:</p>
<blockquote>It operates on local files, and therefore does not run on the server. nanoc "compiles" the local source files into HTML by evaluating eRuby, Markdown, etc.</blockquote>

<p>Nanoc had many static site generator (SSG) features we now take for granted:</p>
<ul>
<li><strong>Layouts</strong><br />Create layout elements using Ruby’s ERB templating language.</li>
<li><strong>Page Metadata</strong><br />A separate YAML file for storing title and other metadata for a page. Front matter wasn’t a thing yet.</li>
<li><strong>Markdown support</strong><br />Write content in Markdown and transform it into HTML on build.</li>
<li><strong>Templates</strong><br />A feature similar to Hugo’s archetypes.</li>
<li><strong>Plugins</strong><br />Known as libs; extend the static site generator for your own needs.</li>
</ul>
<p>By the end of 2008, Tom Preston-Werner announces <a href="https://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Jekyll</a> — a simple, blog-aware, static site generator. It took ideas from Nanoc and pushed them even further with two significant innovations:</p>
<ul>
<li><strong>Front matter</strong><br />Instead of metadata living in a separate file, now you can have a small YAML snippet at the top of a file.</li>
<li><strong>Blog aware</strong><br />Create posts with Markdown files. Jekyll builds these into an array you can iterate over and paginate to create a blog.</li>
</ul>
<p>Both Nanoc and Jekyll <strong>revolutionized the future of static site tooling</strong> in their own way. First, Nanoc introduced having a site’s configuration, layouts, and content as static files. The benefit of doing this is the entire site’s source code can live in Git. Jekyll took this a step further by providing more structure around the content. Now you could use GitHub as your CMS. Adding a new blog post is as simple as creating a new Markdown file in GitHub, writing your content, and committing.</p>
The 10s
<p>In 2012, Dave Cole published a post on <a href="https://developmentseed.org/blog/2012-07-27-how-we-build-cms-free-websites">How we build CMS free websites</a>. The post details how Development Seed moved their websites from Drupal to Jekyll and how they use<a href="http://Prose.io"> Prose.io</a> to manage the content. Development Seed built<a href="http://Prose.io"> Prose.io</a> to make it easier for content writers to contribute to Jekyll websites.</p>
<p><a href="http://Prose.io">Prose.io</a> <strong>syncs with your GitHub repository</strong> and provides a simple GUI for everyday content tasks such as updating front matter, writing Markdown, creating posts, and uploading files. In addition, content updates save back to GitHub, creating a tight workflow between developers and content writers.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba720076-8ac8-492f-9749-bd0d42ad6655/cms-preview.png" /></p>
<p>Prose turned Jekyll from a tool for developers to create blogs to a powerful <strong>content publishing platform</strong>. Moreover, it sparked a decade of companies pushing static site generator content publishing to the next level.</p>
<p>There are now <a href="https://jamstack.org/headless-cms/">hundreds of modern Jamstack CMSs</a> to choose from, each with its own benefits and trade-offs. Jamstack CMSs typically take one of three approaches to manage content on a static website:</p>
<h3>SSG/CMS package</h3>
<p>Hailing back to MovableType, these platforms manage content and render the static site themselves. Controlling the whole stack means these CMSs can provide a <strong>tightly integrated experience</strong>. Expect live previews, straightforward setup, and strong conventions.</p>
<p>The downside of the SSG/CMS package is they’re bundled together. You might love the editing experience but loathe the website generation portion. It’s worth noting that you can throw away the SSG portion on some of these platforms and only use it solely as a Content API.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c718cf5a-4a59-4e7f-be16-9c1efbc5b478/1-history-future-jamstack-cms.png" /></p>
<p>Examples: <a href="https://statamic.com/">Statamic</a>, <a href="https://getpublii.com/">Publii</a>, <a href="https://wordpress.org/">WordPress</a> (with <a href="https://wordpress.org/plugins/simply-static/">Simply Static plugin</a>).</p>
<h3>Content API</h3>
<p>These platforms provide content as a service. They offer many different field types you can use to <strong>piece together the content</strong> for your pages. On top of that, Content API platforms provide sophisticated APIs to retrieve the content.</p>
<p>When you run an SSG build, you download the content from the content API and interact with it like you would a data file. The nice thing about content APIs is you can reuse content across many different digital experiences. In addition to that, you can manage massive amounts of content and have deep relationships between pieces of content.</p>
<p>The downside is your <strong>content lives on a third party</strong>, so you’re at their mercy for any downtime, API changes, or how you interact with your content. Finally, as the editing interface is abstract from the end use-case of the content, there can be a disconnect between the fields in the Content API vs what you see rendered on a web page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/348cbb5d-5ffe-43f0-a2c8-0841ae47b2d9/9-history-future-jamstack-cms.png" /></p>
<p>Examples: <a href="https://www.contentful.com/">Contentful</a>, <a href="https://prismic.io/">Prismic</a>, <a href="https://strapi.io/">Strapi</a>.</p>
<h3>Git-Based CMS</h3>
<p>These platforms take a similar approach to<a href="http://Prose.io"> Prose.io</a>. You connect your Git repository, they pull in your website files and create an editing interface around them. When you save changes, the files push back to your repository. The benefit of this approach is your Git repository holds your entire site and all its content.</p>
<p>Git based CMSs bring all the power of <strong>Git workflows</strong> to non-technical content writers. The downside is everything lives in your repository, so if you want to reuse content across multiple digital experiences, you would need to build JSON endpoints on your static site. Hosted repositories also have an upper limit of ~2GB, so you may need to use a 3rd party service for media if you have many assets.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/516c7909-33f7-4c57-9564-e6149081a248/4-history-future-jamstack-cms.png" /></p>
<p>Examples: <a href="https://cloudcannon.com/">CloudCannon</a> (disclaimer: I’m the co-founder), <a href="https://www.netlifycms.org/">Netlify CMS</a>, <a href="https://tina.io/">Tina</a></p>
Where are Jamstack CMSs today?
<p>SSGs were originally tools for developers to build personal blogs. It was a simple approach that gave developers complete control, but you needed a basic understanding of web development to contribute to the sites. Over the past decade, <a href="https://www.smashingmagazine.com/2021/05/evolution-jamstack/">the rapid evolution of Jamstack</a> and the Jamstack CMS has helped propel Jamstack into <strong>mainstream use cases</strong>. These use cases include:</p>
<h3>Documentation</h3>
<p>Developers expect a lot from documentation sites, and a good experience will help win them over. Jamstack puts you on the right track to creating documentation sites developers love:</p>
<ol>
<li><strong>Development is rapid</strong>, and there’s more time for polish. </li>
<li><strong>Markdown</strong> is an excellent format for Documentation made even easier with a good CMS.</li>
<li>The site will load in a snap.</li>
<li>The site content <strong>lives in a repository</strong> which allows the developer community to suggest improvements.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/df9931c1-8261-4fe7-9419-77e47112d287/6-history-future-jamstack-cms.png" /></p>
<p>Companies including <a href="https://dev.twitch.tv/docs/">Twitch</a>, <a href="https://docs.rackspace.com/docs">Rackspace</a>, and <a href="https://www.linode.com/docs/">Linode</a> are reaping the benefits of Jamstack for their documentation websites. </p>
<h3>eCommerce</h3>
<p>Visitors to an eCommerce site are on a path to paying money. Slow loading times or worse, downtime can make them look elsewhere. Platforms such as <a href="https://snipcart.com/">Snipcart</a>, <a href="https://commercelayer.io/">CommerceLayer</a>, <a href="https://www.shopify.com/plus/solutions/headless-commerce">headless Shopify</a>, and <a href="https://stripe.com/">Stripe</a> enable you to manage products in a friendly UI while taking advantage of the benefits of Jamstack:</p>
<ol>
<li><a href="https://www.gigaspaces.com/blog/amazon-found-every-100ms-of-latency-cost-them-1-in-sales">Amazon’s famous study</a> reported that for every 100ms in latency, they lose 1% of sales. Jamstack sites are typically among the fastest on the web.</li>
<li>When an eCommerce site has downtime, it can’t generate sales. There are far fewer moving parts in a Jamstack site, making them easier to keep online.</li>
<li>eCommerce sites are consistently iterating to improve conversion rates. Developer experience is at the heart of Jamstack, allowing developers to make and publish changes quickly.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ebbdf580-cf11-4d5d-85b6-ffc7e66da064/12-history-future-jamstack-cms.png" /></p>
<p><a href="https://www.victoriabeckhambeauty.com/">Victoria Beckham Beauty</a>, <a href="https://teespring.com/">Teespring</a>, and <a href="https://us.louisvuitton.com">Louis Vuitton</a> are all using Jamstack to boost their eCommerce experience.</p>
<h3>Corporate websites</h3>
<p>Corporate websites are the online front door to a company. Making a good impression with a fast-loading, well-constructed website can give an edge over competitors. Many of the Jamstack CMSs we’ve mentioned have the features and workflows growing enterprises require. These include translations, <strong>publishing workflows</strong>, and complex content modeling.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b2fce8d8-cfa1-4d53-9685-05c64bf0c58a/11-history-future-jamstack-cms.png" /></p>
<p><a href="https://devices.netflix.com/">Netflix</a>, <a href="https://www.onepeloton.com/">Peloton</a>, and <a href="https://www.intercom.com/">Intercom</a> iterate faster on their corporate websites thanks to Jamstack and Jamstack CMSs.</p>
<h3>Large scale blogs</h3>
<p>Static site generators often get pigeonholed as a solution for small websites. Thanks to the build speed of static site generators like Hugo and modern Jamstack CMSs designed to handle vast amounts of content, even prominent blogs like <a href="https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/">Smashing Magazine</a>, <a href="https://web.dev">web.dev</a>, and <a href="https://www.jfkt4.nyc/">JFK International Air Terminal</a> can take advantage of a Jamstack approach.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33338cdd-b725-4953-bf50-dfd14db9d529/5-history-future-jamstack-cms.png" /></p>
<h3>Government</h3>
<p>What better way to promote online transparency in government than having a website where the content lives in a <strong>public repository</strong>? There’s a complete history of all changes, and citizens can suggest improvements. You really can have a government website by the people, for the people.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066b8d63-00e2-4150-a02e-e1732c9eed1f/7-history-future-jamstack-cms.png" /></p>
<p><a href="https://digital.gov/">digital.gov</a>, <a href="https://www.singaporetogether.gov.sg/">Singapore Together</a>, and <a href="https://www.cio.gov/">CIO.gov</a> all have pubic repositories on GitHub, which you can browse through every change made or suggest a content update. </p>
<h3>Client websites</h3>
<p>Websites for clients need to be exceptionally simple to update. Jamstack CMSs with a visual editor like <a href="https://www.storyblok.com/">Storyblok</a>, <a href="https://cloudcannon.com/">CloudCannon</a> and <a href="https://tina.io/">Tina</a> make it intuitive for non-technical clients to manage content on their Jamstack website.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9151f98a-8ebc-4996-ac05-7f67876b7337/10-history-future-jamstack-cms.png" /></p>
<p><a href="https://wiltomakesfood.com">Wilto Makes Food</a>, <a href="https://www.downthyme.nz/">Down Thyme</a>, <a href="https://thebottleroombar.com/">The Bottle Room Bar</a> take advantage of the same Jamstack approach that world-leading companies are.</p>
How Does The Modern Jamstack CMS Stack Up Against Other Popular CMSs?
<p>At a high level, there are two ways of getting a website online:</p>
<ol>
<li>You select a template, customize it to your brand and enter your content.</li>
<li>You work with a designer and developer to create a bespoke website.</li>
</ol>
<p>Of course the template approach is cheaper. For under $100, you can get a high-quality theme/template and get your website online in minutes. It’s an excellent way for an individual or small business to get a website online.</p>
<p>A quality bespoke website is going to start at $1k and can easily get to $100k+. A unique website with custom functionality helps you stand out against a sea of millions of websites, something many companies are willing to pay for.</p>
<h3>Squarespace, Wix And Weebly</h3>
<p><strong>Website builder platforms</strong> focus on the template approach. They’re going for the mass market, and provide a way for anyone to spin up a website without a developer. </p>
<p>There’s no question Jamstack is a developer-focused technology. When we talk about static site generators, incremental regeneration, or instant cache invalidation, it’s enough to make the layman’s eyes glaze over. I struggle to see a future where the local flower shop needs a website and chooses a Jamstack approach without developer involvement. </p>
<p>Even with the most intuitive content management system for Jamstack where you can select a template, drag &amp; drop components, and inline edit content, the benefits of Jamstack for this audience over website builders are too technical. Sure, it’ll be fast, secure, and easy to edit; however, the end-user couldn’t care less whether it’s using Jekyll, Hugo, Gatsby, or a dynamic backend.</p>
<p>The benefits of a fast-loading website, automated DevOps, higher uptime, and faster development cycles are much more seductive to companies building bespoke web projects. In this sense <strong>I don’t see a lot of overlap between website builders and Jamstack</strong> use cases.</p>
<h3>WordPress</h3>
<p>WordPress has captured both workflows. Someone completely non-technical can piece together a template with various plugins and have their website online within a day. WordPress also has <strong>rich APIs</strong> that developers use to create unique, bespoke web experiences. This broad range of use cases has helped grow WordPress to power almost 40% of the internet.</p>
<p>In most articles about Jamstack, you’ll find a section that throws WordPress under the bus. There’s frequently talk about how WordPress is slow, insecure, and complicated. I believe it’s a more fundamental conversation of approach. We’re often talking about static vs. dynamic and monolith vs. decoupled. WordPress is the most popular CMS, so it’s often the target.</p>
<p><strong>There is no Jamstack vs. WordPress</strong>. The truth is you can enjoy the benefits of Jamstack while using WordPress as your CMS. Hosting platforms like <a href="https://www.getshifter.io/">Shifter</a> and <a href="https://www.strattic.com/">Strattic</a> turn your WordPress site into a static website. You can also use a <a href="https://wordpress.org/plugins/simply-static/">plugin</a> to output a static site or use <a href="https://www.gatsbyjs.com/docs/glossary/headless-wordpress/">WordPress as a headless CMS</a> to populate content into a static site generator. </p>
<p>It’s also relatively straightforward to <a href="https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/">migrate from WordPress to a Jamstack CMS</a>. For a Git CMS you’ll want to migrate the blog posts and assets to Markdown files which live with your static site generator of choice. Fortunately, many SSGs <a href="https://gohugo.io/tools/migrations/#wordpress">have</a> <a href="https://import.jekyllrb.com/docs/wordpress/">import</a> <a href="https://hexo.io/docs/migration.html#WordPress">tools</a> that make this easy. For a Content API CMS, some of them have a data import tool otherwise, you can always write a script to pull data from WordPress and save it to your Content API.</p>
<h3>Webflow</h3>
<p>Webflow is a curious one because it allows designers to create bespoke websites without developers, but it’s too technical to be considered a website builder. It’s a robust platform that certainly overlaps with some Jamstack use cases. Ultimately <strong>it’s going to come down to control</strong>.</p>
<p>If your requirements fit within Webflow’s capabilities, it might be a good solution for you. While it can do a lot, it has limitations that a developer can surpass. If you need a developer, taking a Jamstack approach is one of the most efficient ways to leverage your staffing resources.</p>
<h3>Drupal</h3>
<p>Drupal is not just a CMS. It’s a <strong>powerful framework</strong> that can solve even the most complex use cases, gearing it more towards bespoke solutions for enterprise problems rather than much smaller informational sites.</p>
<p>Modern Jamstack CMSs have plenty of successful case studies of these smaller websites. For the more complex enterprise use cases, we have fewer examples. There are some limitations Jamstack needs to overcome to compete with a sizeable Drupal install:</p>
<h4>Build time</h4>
<p>Prebuilding a site using a static site generator takes time. For a small site, a build might take a few seconds. A site with 100k pages could take upwards of an hour to build. Waiting an hour for your site to build after each change isn’t a viable development workflow.</p>
<p>Static site generators have several strategies to <strong>address long build times</strong>, including build caching, incremental builds, dynamic persistent rendering, and website sharding. The choice of tooling also has a significant impact on build time. For example, using a Golang based static site generator like Hugo can rapidly build large sites, whereas using something Ruby-based like Jekyll might struggle. </p>
<p>We don’t have a silver bullet for build time yet, but the implementations of these strategies are improving all the time, which opens up possibilities for more extensive use cases. </p>
<h4>Dynamic functionality</h4>
<p>Large, complex websites typically have some form of dynamic behavior. Forms, commenting, search, and custom API endpoints are all bread-and-butter for Drupal. For many developers, it’s not obvious how to do these on a Jamstack site. </p>
<p>There’s a <a href="https://cloudcannon.com/community/jamstack-ecosystem/">huge ecosystem of tools that support Jamstack websites</a> for everything from commenting solutions, search, contact forms, to even eCommerce. </p>
<p>Perhaps you don’t want to use a third party, and you need a bespoke solution. You still have options with Jamstack:</p>
<ol>
<li>You could build a separate API your Jamstack site interacts with for any dynamic functionality.</li>
<li><a href="https://www.netlify.com/products/functions/">Netlify</a>, <a href="https://vercel.com/docs/serverless-functions/introduction">Vercel</a>, <a href="https://workers.cloudflare.com/">CloudFlare</a>, and <a href="https://aws.amazon.com/lambda/edge/">AWS</a> all have the concept of serverless functions run at edge nodes of a CDN.</li>
</ol>
<h4>Fine-grained permissions</h4>
<p>Drupal has a <strong>rich and extendable permission system</strong>. Large sites have large teams of content editors, which require a deep permission system.</p>
<p>We haven’t seen the same level of deep permission systems in a Jamstack CMS as is possible with Drupal, but it’s only a matter of time. It’s a chicken-egg situation. Without large content sites with extensive content teams, we don’t need complex permission systems. When we see more large content site adoption in Jamstack, Jamstack CMSs will introduce deep permission systems to match Drupal. </p>
20s And Beyond
<p>Jamstack CMSs are on an exciting trajectory. However, there’s still a long road ahead to become a mainstream way for businesses to build websites. So, what are the problems we need to solve to have a broader appeal for Jamstack?</p>
<h3>Intuitive Content Editing</h3>
<p>Platforms like Squarespace and Webflow are known for highly intuitive content editing experiences. What could be easier than writing content directly on your website? No guesswork or previews are necessary.</p>
<p>Content management for the Jamstack website has drifted towards a <strong>disconnected approach</strong>. You update content on a set of abstract field components that don’t represent how that content will look on the rendered site. The advantage of this disconnection is content reuse, but you’re sacrificing the editing experience to have this flexibility. There’s no reason we can’t have an editing experience similar to Squarespace on a Jamstack website. When we do, you’ll no longer have to make editing trade-offs to reap the benefits of Jamstack.</p>
<h3>Less Reliance On Developers</h3>
<p>While developers are an essential part of the Jamstack, they’re often heavily involved in the content publishing process. For Jamstack to grow, <strong>we need content tools that reduce this reliance</strong>. Editors should be able to create, manage and publish content without a developer. We’re getting close to editors becoming completely self-reliant once a site is set up, but there’s still work to do.</p>
<h3>Better Publishing Workflows</h3>
<p>Most CMSs have basic staging/production content workflows, which work fine for simple websites. Yet, these workflows quickly become an issue as soon as you have multiple contributors. It’s the equivalent of having a team of developers trying to work on a single branch.</p>
<p>Git has revolutionized how developers collaborate on content. We now have workflows where independent developers from around the world can come together and build extremely high-quality software. <strong>These workflows are game-changing</strong>, so why can’t we do the same thing for content? Jamstack sites are static. They live in a repository. With the right interface, we can bring these workflows to an entirely new audience pushing content collaboration far beyond what any CMS is capable of today.</p>
<p>Developers review pull requests using a code diff which indicates what code has changed. In the review process, you can have conversations about particular lines of code and iterate until it’s in a good spot to merge into the main code base. In addition to this, it’s common to run a suite of status checks as part of a pull request. Status checks are small programs to lint, run tests, or anything else you’d like to measure. Code diffs and status checks are crucial tools to review source code and ensure it’s consistent and high quality. So how do we take these ideas and bring them to content management?</p>
<p><strong>We can’t put code diffs in front of content editors</strong>. The whole point of a Jamstack CMS is to abstract technical concepts. We can, however, show content diffs to indicate what content changed rather than the underlying source code. Visual diffs are another option and give you a different angle. Platforms like <a href="https://percy.io/">Percy</a> are already doing this and give you a pixel-perfect view of what has changed between two web page versions.</p>
<p>As for static checking on content, we already have many tools available. There’s everything from checking for broken links, missing alt tags, SEO checks, grammar checks, and accessibility checking. We need friendly interfaces on top of these tools to help non-technical editors identify and solve issues themselves. Integrating these tools and workflows into Jamstack CMSs will change the way we manage content on the web.</p>
The Next Frontier Of Content Management
<p>While the bones of Jamstack CMS’s have been around since the early 90s, it’s only in the past five years we’ve seen significant funding and resources propel the approach. We’re still in the <strong>early adoption of Jamstack</strong>, but I believe we’re nearing a tipping point.</p>
<p>The number of large-scale deployments of Jamstack by world-leading companies is growing by the day. As the tooling and platforms improve, I can only see this trend growing. It will be hard to justify <strong>not</strong> using Jamstack for a bespoke corporate website or application in the next decade.</p>
<p>Where do you think Jamstack CMSs will be in 2030?</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Mike Neumegen)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2f37c71-d2c5-4634-b62c-2dc2eea127c1/history-future-jamstack-cms.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[How To Build An Ethical User Research Practice At Any Organization]]></title>
            <link>https://smashingmagazine.com/2021/08/ethical-user-research-practice/</link>
            <guid>https://smashingmagazine.com/2021/08/ethical-user-research-practice/</guid>
            <pubDate>Thu, 19 Aug 2021 10:00:00 GMT</pubDate>
            <description><![CDATA[Through a simple step-by-step approach, you can build an ethical practice within your organization that will ensure you’re respecting the dignity and welfare of your research participants.]]></description>
            <content:encoded><![CDATA[<p>Ethics are an important part of human-computer interaction because they keep people at the <strong>heart of the design process</strong>. Unethical practices at companies lead to the creation of technology that we all use but often neglect the influence of those intended to serve. As seen in the discussions about <a href="https://www.nytimes.com/2018/04/04/us/politics/cambridge-analytica-scandal-fallout.html">privacy at Facebook</a> and <a href="https://www.theguardian.com/technology/2015/jul/01/google-sorry-racist-auto-tag-photo-app">AI-powered imaging at Google</a> among other examples, when there are no ethical considerations during the creation of technology then the interaction between humans is compromised.</p>
<p>A <em>real</em> interaction between computers and humans starts at technological conception by understanding users through a sound and <strong>ethical user research</strong> discipline.</p>
What Are “Ethics” And Why Should I Care?
<p>To understand why we should build an ethical user research practice at our organizations, we’ll start with the basics. What are ethics anyway?</p>
<p><a href="https://languages.oup.com/google-dictionary-en/">Ethics</a> are the moral standards by which a person (or in this context, a company or team) should govern the behavior or the conduct of an activity. Ethical user research should then be about <strong>protecting the dignity</strong>, rights, and welfare of the participants from whom we are asking so much information or data. If we aren’t proactive and prescriptive about our own standards as a research team, we could unconsciously be biased, demoralizing, exclusive, or even in breach of the law. </p>
<p>Here are a <strong>few examples</strong> of unethical practices:</p>
<ul>
<li>Not recruiting a diverse and inclusive sample.</li>
<li>Not informing participants of study requirements or potential harm.</li>
<li>Misplacing or not tracking participant data or identifiable information.</li>
<li>Misgendering or reinforcing stereotypes in reports, personas, or prototypes.</li>
</ul>
<p>You may be wondering why you specifically should care. Doesn’t somebody else in the organization focus on ethics? Isn’t there an ethics <em>Internal Review Board</em> (IRB) that is better suited for this? Unfortunately in the user experience industry, that answer is usually <strong>no</strong>. </p>
<p>While many companies rely on their own Ethics or HR departments to set governing moral standards, their scope typically only relates to their business’ <strong>product offerings</strong>, services to customers, internal processes, and functions. Rarely, if ever, do these departments take into account the specialty of user research.</p>
<p>For example, try and recall the last time your team’s processes were audited for compliance against the company’s ethical standards. For this reason, it’s really up to each of us; it’s up to each and every practitioner to set standards to which ourselves, our teams, and our company should be held accountable.</p>
<p><a href="http://www.victoryocco.com/">Victor Yocco</a>, an avid author and speaker on the intersection of psychology and research, provides a compelling case to self educate, attend training and sustain close review of our practice in his thoughtful article on “<a href="https://www.smashingmagazine.com/2020/12/ethical-considerations-ux-research/"><em>Ethical Considerations In UX Research: The Need For Training And Review</em></a>”:</p>
<blockquote>“Researchers by training and trade have often been required to take courses and pass exams to reflect an awareness of potential ethical issues in research. We can best prepare our colleagues to avoid these situations through similar training and standards.” <br /><br />— <a href="https://www.smashingmagazine.com/2020/12/ethical-considerations-ux-research/">Victor Yocco</a></blockquote>

<p>Unfortunately, many organizations may not have the resources to fund such training, nor provide the time needed to invest in it. Even if your organization <em>did</em> have the time and resources to provide such training, then what? How do you get started <strong>leveraging ethics</strong> in your user research practice to influence how you do your work in a way that upholds a set of guiding standards? It all starts with a <em>Code of Ethics</em>.</p>
<blockquote>“I do not believe in the immortality of the individual, and I consider ethics to be an exclusively human concern with no superhuman authority behind it.”<br /><br />— Albert Einstein</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f362aa4b-24a5-43bc-b538-d46ed0744b3c/code-of-ethics-outcomes.png" /></p>
A Code Of Ethics: The Backbone Of Ethical Practice
<p>Now that you understand why ethics matter for user research, and why it’s critical that you take it upon yourself to create them for your team, it would certainly help knowing where to start. To begin influencing your work with a set of ethical standards, you need to <strong>start by defining what your standards even are</strong>. </p>
<p>A Code of Ethics is the standard by which you and others on the team who practice user research will be held accountable.</p>
<p>Starting with a Code versus diving headfirst into changing templates, tools, and processes that allow you to start from a <strong>reference point</strong>. A Code affords you with a checklist to ensure that with each new process, each new tool or each new study conducted follows your agreed-upon moral standards. </p>
<p>Once you create your own code of ethics, you might notice an improvement not only in your team’s <a href="https://workinstitute.com/how-to-define-ethical-behavior-why-its-important-in-the-workplace-2/">work and performance</a> but also in the team’s culture as well. As UX practitioners, we know empathy is an <a href="https://www.interaction-design.org/literature/article/design-thinking-getting-started-with-empathy">important part of the design process</a>. Providing a deeper connection and purpose in the work we do and those who we do it with fosters a more inclusive environment, and thoughtful team members as a result.  </p>
How To Create Your Own Code Of Ethics
<p>Creating a code of ethics takes only a few thoughtful steps, and from there you will have the backbone for influencing your work through a set of <strong>aligned standards</strong>. If you’re ready to invest in building a better, more ethical future for your team, your practice, and your organization, read on.</p>
<h3>1. Commit To Ethics As A Practice</h3>
<p>While it may sound silly or downright obvious, this is one of the most important and often most difficult of steps to truly accomplish. The thing is, to do things correctly aligned to any set of standards means being more thoughtful and taking the necessary steps and time to get it right.</p>
<p>While not monumental, <strong>ethical practice is an investment</strong>. It takes effort and time to evaluate your process, templates, tools, vendors, and ways of working in order to tweak or even overhaul them in order to align with your ethical principles or moral standards.</p>
<p>That said, building an ethical research practice <a href="https://www.convercent.com/blog/the-roi-of-an-effective-ethics-and-compliance-program">makes good business sense</a>, which means the time and effort is well spent when you purposely recruit diverse voices, respect their rights to information security and impartially represent them within your company’s walls.</p>
<h3>2. Explore Existing Academic And Industry Examples</h3>
<p>Why reinvent the wheel when we already have so many inspiring starting points? Once you’re committed to ethics, you should explore other relevant examples of research ethics in the wild. Many organizations proudly share their own code of ethics with the public, serving as a worthy <strong>starting point</strong> for your own.</p>
<p>It would benefit any team conducting this desk research to include both academic as well as industry examples. Academia tends to include IRBs, which I find are rarely practical for industry — it’s up to us to uphold the ethics of our practice, as previously mentioned. </p>
<p>Here are some great examples to get you started:</p>
<ul>
<li><a href="https://www.apa.org/ethics/code">American Psychological Association</a></li>
<li><a href="https://www.nyu.edu/about/policies-guidelines-compliance/compliance/code-of-ethical-conduct.html">New York University</a></li>
<li><a href="https://www.who.int/about/ethics/ethical-principles">World Health Organization</a></li>
<li><a href="https://www.nngroup.com/articles/user-research-ethics/">Nielsen Norman Group</a></li>
<li><a href="https://www.interaction-design.org/literature/article/conducting-ethical-user-research">Interaction Design Foundation</a></li>
<li><a href="https://www.esomar.org/what-we-do/code-guidelines">ESOMAR</a></li>
<li><a href="https://lbodre.ideo.com">IDEO</a>.</li>
</ul>
<p>Take a 'researcher approach' to reviewing these examples by <strong>keeping a log</strong> of each organization’s ethical principles or guidelines. Put them each into a long word document or spreadsheet and collate across 15-20 examples. You’ll definitely notice a few strong patterns and a lot of overlap. These overlaps and key themes will serve as a jumping-off point for developing your own principles, relevant to your team, organization, and industry.</p>
<h3>3. Familiarize Yourself With Relevant Laws</h3>
<p>Whether only relevant to your state, union, or industry, you’ll want to make sure you’re intimately <strong>familiar with relevant laws and regulations</strong> that force compliance around a certain level of ethical practice.</p>
<p>For example, the <a href="https://gdpr-info.eu">General Data Protection Regulation (GDPR)</a> and the <a href="https://oag.ca.gov/privacy/ccpa">California Consumer Privacy Act (CCPA)</a> both have strict rules surrounding how organizations may collect, store and secure consumer data. This not only applies to how companies do business but how they conduct research as well! If you live in the European Union or the state of California and are not yet familiar with these laws, I highly recommend you start reading today. </p>
<p>These regulations are actually quite profound as they almost <strong>codify ethics into law</strong>, requiring organizations to be compliant or otherwise face penalties such as fines or legal action. While these laws are based on ethical practice, they are still bare-bones and don’t cover the full spectrum of participant welfare or dignity, which are paramount when consumers are in your charge during the course of your research. </p>
<p>Some industries have their own regulations or legal practices which safeguard consumer data even more tightly than GDPR or CCPA. You may be familiar with the <a href="https://www.hhs.gov/hipaa/index.html">Health Insurance Portability and Accountability Act (HIPPA)</a>, which protects sensitive patient health information from being disclosed without consent or knowledge. </p>
<p>Many may not be familiar with other specific protections such as <a href="https://en.m.wikipedia.org/wiki/Customer_proprietary_network_information">Customer Network Proprietary Information (CPNI)</a> which safeguards the type, quantity, configuration, or location of <strong>telecommunications and interconnected services</strong> you use. Being mindful and educated about your industry’s specific regulations will not only keep you out of trouble but will provide yet another input into creating your own ethical user research principles. </p>
<h3>4. Brainstorm Your Core Principles As A Team</h3>
<p>Now the fun part! Whether your team is distributed or co-located, you’ll want to use what you’ve learned in steps 2 and 3 in order to brainstorm what principles you want to codify into your own code of ethics. There truly is no right or wrong way to do this, however, following a typical ideation workshop framework will really help add rigor to the process. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d0069620-564a-41f7-b066-b30d653106fc/affinity-mapping-ethical-code.png" /></p>
<p>Start by <a href="https://www.interaction-design.org/literature/article/affinity-diagrams-learn-how-to-cluster-and-bundle-ideas-and-facts">affinity mapping</a> your industry and academic examples using sticky notes, google slides or miro/mural board. Working as a team, identify the overlaps across multiple organizations by <strong>grouping the principles</strong> you feel are similar or otherwise saying the same thing. If you feel two principles are intertwined or tightly related, however, still distinct then by all means include both in the same principle.</p>
<p>For example “Diversity” or “Inclusion” have distinct goals, however, they’re often grouped together as “Diversity, Equity And Inclusion.” If there is strong disagreement between one or more principles that some feel should be combined while others feel should be separate, then run a <strong>dot-voting prioritization</strong> exercise. Each team member gets a dot and is allowed to cast their vote to either group or keep separate. </p>
<p>Then incorporate industry, state, or special laws/regulations from your research in step 3. Start by <strong>identifying any overlaps</strong> with your existing principles. If there’s overlap, simply build onto your existing principle! If you find a piece of the law is unique or demands its own dedicated principle, then by all means codify it that way!</p>
<p>Lastly, take a step back and look at your ethical principles as a whole set. Ideally, you would have no more than 10, no less than 4 principles — more than 10 and they’ll be hard to keep track of; less than 4 and creating specific and relevant examples when creating your Ethical Code will be difficult.</p>
<p>The goal is to have <strong>specific enough principles</strong> where everyone on the team can think of 2-3 examples of exactly how to apply that principle to their everyday work, without being overly general or vague. If you feel you have too many, consider if there are any overlaps or relationships between two or more and combine them accordingly into a larger principle. </p>
<p>Here’re example principles after going through the exercises above: </p>
<ul>
<li>Sensitivity And No Harm,</li>
<li>Honesty And Transparency,</li>
<li>Confidentiality And Data,</li>
<li>Accuracy And Impartiality,</li>
<li>Diversity, Equity And Inclusion.  </li>
</ul>
<p>Once you’ve determined your high-level principles and feel good about them as a team, it’s time to make it real and draft your Code of Ethics.</p>
<h3>5. Draft Your Code For Feedback</h3>
<p>In order to make your Code of Ethics more easily understood, actionable and impactful, you’ll need to expand on each principle with three key components: </p>
<ol>
<li><strong>A brief description</strong><br />This should expound upon the principle itself and provide more detail in its definition and intention. What does honesty mean in the content of user research? When defining this principle, it’s important to note why it’s relevant in the first place and why it is a moral standard. Within this description, you’ll also want to take a moment to identify who the principle is intended for. A team that follows an honorable Code of Ethics is no doubt benefiting its research participants, but it may also apply to internal processes and stakeholder teams as well. </li>
<li><strong>Bulleted agreements</strong><br />Perhaps the most important piece of the Code is where it would benefit you to get specific and directly relate to the user research practice at your organization. These agreements should not only exemplify the principle itself but provide more clarity as to how the team may apply the principle in their everyday work. In a way, these become somewhat of a checklist of tactics you’ll execute every time you plan, recruit for, conduct, and report on research. </li>
<li><strong>A few examples</strong><br />Like that which is provided below, examples help paint a full picture of the principle in action. You want to be careful to frame your example in the context of an ethical problem, then showcase the appropriate solution which clearly ties to an agreement of the principle. Even better if you have real past experiences that you can use as examples! </li>
</ol>
<p>Putting these components of the Code together is a great place to have a <strong>roundtable discussion</strong> about the definition of each principle as well as individual researcher’s past experiences in unique ethical situations. It becomes extraordinarily fruitful to then have an open conversation around what the team believes should be the most appropriate definition, agreements, and examples. This process not only builds collective buy-in for the Code but also deepens everyone’s understanding of each principle as well.</p>
<p>Here’s an example principle in action: </p>
<ul>
<li><strong>Honesty And Transparency</strong><br />Maintains the integrity of our individual researchers and our research work. This principle applied not only to participants but also internally when discussing study design or findings.  <ul>
<li>Inform participants of study requirements upfront;</li>
<li>Inform participants where their data is going and how it will generally be used;</li>
<li>Explain any purposeful manipulation at a session’s end;</li>
<li>Explain the pros and cons of methodologies, and study limitations to internal stakeholders.</li>
</ul>
</li>
</ul>
<blockquote><strong>Example</strong>:<br />When designing a study with biometrics, devices with sensors need to be worn by participants. It should be communicated to participants that they will be wearing devices on or close to the skin which may cause minor irritation. The researcher should clearly explain why and where they’ll be needed in the study.</blockquote>

<h3>6. Implement Feedback And Finalize</h3>
<p>When you have your first pass at your Code of Ethics and it shares collective buy-in from members of the team, it’s time to get some <strong>external validation</strong> from partner teams before considering it final.</p>
<p>In this step, you should <strong>schedule meetings</strong> with your points of contact from the legal and ethics departments within your organization in order to share the great work you’ve done as well as to check to make sure you’re not missing anything. It’s important to make sure you have this second pair of eyes because these groups are responsible for upholding ethics across the business and have deep knowledge of CCPA, GDPR, and other regulations which may affect your final Code. </p>
<p>Be warned that if you don’t already work closely with these teams, you may need to first <strong>introduce them to the type of work</strong> you do and the purpose of your team. This could mean two separate meetings; an introduction meeting may be needed to explain your team and a follow-on meeting to deep dive into your Code of Ethics.</p>
<p>If they’re unfamiliar with or not aware of any user research currently being done, they may already have strong concerns regarding <strong>privacy law</strong>. Remind them that’s why you’re creating this Code and why you’ve reached out to them — to ensure everyone is on the same page! </p>
Putting It Into Practice
<p>Now that you have a strong Code of Ethics that has internal and external team support, you’ll want to put it to work. The following are examples of where your Code of Ethics directly affects the processes, tools, and practices of your team. This is the part where the investment really comes in as each of these could take hours or even days to set the foundation for. </p>
<p>If you don’t proceed beyond this point and stop only when you’ve made your Code, then you run the risk of never really practicing what you’ve created. While the following isn’t quite ‘set it and forget it,’ rest assured the majority of the work is upfront in building the <strong>documentation vs. the ongoing maintenance</strong> and practice. Keep in mind these are great starting points, however, you may have other areas which could be improved using your new principles!</p>
<h3>Screeners And Recruitment</h3>
<p>Assuming you have an ethical principle-centered around or associated with <a href="https://generalassemb.ly/blog/diversity-inclusion-equity-differences-in-meaning/">Diversity, Equity, and Inclusion (DE&amp;I)</a>, updating your screener <strong>questionnaire template</strong> and recruitment practices will help ensure every study accounts for the diversity and uniqueness of the customers for whom you serve. </p>
<p>In screener questionnaires, care should be taken in the administration and <strong>wording of questions</strong> relating to race, ethnicity, and gender. Because people identify in different and unique ways, these questions are asked and what responses you allow should reflect that flexibility. While there is <a href="https://typeform.com/surveys/demographic-survey-questions/">plenty of literature out there</a> to help you with crafting most demographics related questions, here are some ethical considerations: </p>
<ul>
<li>Before asking for personal information such as gender or race, provide a very brief explanation as to <strong><em>why</em></strong> you’re asking for it in the first place. Providing this context can ease the minds of <a href="https://www.forbes.com/sites/martyswant/2019/08/15/people-are-becoming-more-reluctant-to-share-personal-data-survey-reveals/?sh=282c7ed11ed1">those who fear their information may be used for exploitation</a>.</li>
<li>Allow <strong>‘select all that apply’ checkbox</strong> answer options. Many may identify as mixed-race or on a spectrum of gender — providing them with multiple ways of identification more accurately represents them.</li>
<li>Provide a <strong>‘prefer not to answer’ option</strong> for those who don’t feel comfortable disclosing this information. </li>
<li>For race, be exhaustive with the answer options to account for diverse classification and to avoid misrepresentation.</li>
<li>For gender, include ‘non-binary’ and ‘prefer to self identify’ options to accommodate those who don’t identify within a fixed gender.</li>
</ul>
<p>In addition to screener wording, the individuals or team responsible for study recruitment efforts should make a purposeful effort to <strong>recruit a diverse group</strong>, even for small sizes for qualitative research. When working with recruitment firms or advanced panel tools, this should be relatively straightforward.</p>
<p>However, committing to diversity may mean canceling a few sessions and re-recruiting if your first round of recruitment efforts result in 9/10 participants being middle-aged white men, for example.</p>
<h3>Data Retention And Management</h3>
<p>Participants often provide <strong>sensitive, personally identifiable information</strong> that they may expect will be kept private and secure. This may even be a requirement of the law, as per the aforementioned regulations (GDPR And CCPA). In order to do this, you will need to create a comprehensive <a href="https://www.druva.com/glossary/what-is-a-data-retention-policy-definition-and-related-faqs/">Data Retention Policy</a> for all types of information that you’re collecting from participants. While there are many GDPR And CCPA <a href="https://www.itgovernance.co.uk/blog/top-tips-for-data-retention-under-the-gdpr">templates</a> and <a href="https://wirewheel.io/resources/privacy-laws/?utm_source=google&amp;utm_medium=cpc&amp;utm_term=ccpa&amp;utm_content=cr-517780390001--ag-119989112636--mt-p--nw-g--dv-m--pl-&amp;keyword=ccpa&amp;utm_campaign=12605249420&amp;gclid=Cj0KCQjwiqWHBhD2ARIsAPCDzalyZCPQfIcDxmWeTXsZjkmpE-Sj20FKtVDgdgHPgB0scOlse2anXjcaAiLPEALw_wcB">resources</a> available to help you create your own policy, the key questions that must be asked are: </p>
<ul>
<li>What data are you collecting?</li>
<li>Are you storing it? Why/for what purpose?</li>
<li>How long are you storing it for before deletion?</li>
<li>How is this data being secured?</li>
<li>Who, if anyone else, has access to this data?</li>
</ul>
<p>Once you create your own Data And Retention policy, be sure to <strong>gain alignment</strong> with your own Legal team to ensure it meets the standards of local or federal requirements — especially in regards to specialized data related to CPNI or HIPPA. Then, share and train your team to uphold this policy, explaining the importance of safeguarding sensitive participant information. </p>
<p>An easy but effective way to hold everyone accountable to this policy is to include a <strong>‘Data Retention Plan’</strong> section within every Test Plan document which outlines what data is being collected during the course of the research, how it will be used, if it will be stored, and how it is being protected. For example, an in-situ contextual inquiry where COVID-19 vaccination status is being discussed, you’d want to document: </p>
<table>
  <thead>
    <tr>
      <th>Data</th>
      <th>Instrument</th>
      <th>Retention Plan</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Name And Likeness</td>
      <td>Video/Audio Recording And Recruitment firm</td>
      <td>Codify as ID #</td>
      <td>Identification is not important. Participant will be anonymized.</td>
    </tr>
    <tr>
      <td>Mailing Address</td>
      <td>Recruitment Firm</td>
      <td>Delete after data collection</td>
      <td>Only needed for moderator’s arrival during the study.</td>
    </tr>
    <tr>
      <td>Vaccination Status</td>
      <td>Video/Audio Recording</td>
      <td>Maintain for 6 months</td>
      <td>Needed to create personas. Data not needed after study completion.</td>
    </tr>
  </tbody>
</table>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf110351-74fc-4bb2-999c-2000c389d290/informed-consent-process.png" /></p>
<h3>Informed Consent And NDAs</h3>
<p>A key component of ethical user research is <strong>keeping the participant comfortable and informed</strong> at all times in order to protect their dignity and welfare. This may be done by providing them proper documentation and a forum in which to address questions or concerns that they may have <strong>prior</strong> to the study.</p>
<p>In addition, if a body of work is internally safeguarded or confidential, you may wish that the participants remain <strong>undisclosed</strong>. <a href="https://www.investopedia.com/terms/n/nda.asp">Non-disclosure Agreements</a> must not be lengthy legal documents that are difficult to follow and require an advanced degree to read and understand.  </p>
<p>There is more than one way to write an <a href="https://www.roanestate.edu/webfolders/WALLACEDA/oier/IRB/Informed_Consent%20Template.doc">Informed Consent document</a>, however, the key components are mostly the same: </p>
<ul>
<li><strong>Begin by thanking</strong> the participant for their consideration of participating in the study.</li>
<li><strong>Explain the topic</strong> of the study at a high level by providing just enough detail to build an understanding of the subject matter.</li>
<li>Provide a clear, bulleted <strong>list of expectations</strong> or activities the participant will be required to participate in during their session.</li>
<li>Disclose any potential risk of harm, danger, or manipulation as part of the study.</li>
<li>Remind them of the <strong>time commitment</strong> for the session, any follow on activities after the study, and the nature of the incentive for their involvement.</li>
<li>End with a clear request to provide <strong>written consent</strong> of the above, including both their signature as well as today’s date.</li>
</ul>
<p>It is paramount that participants are able to deny or withdraw their consent at any time, without warning or reason and without penalty — informed consent is useless if the participant is penalized or coerced into providing and maintaining their consent.</p>
<p>At times, our research may touch on triggering, emotional topics. Other times, there may be sudden emergencies that come up in the middle of the session. When these things happen, the participant should feel empowered to <strong>take a break or step away</strong> without fear of losing their incentive or fear of any form of retaliation.</p>
<h3>Internal Representation: Reports, Prototypes And Personas</h3>
<p>Ethical user research extends beyond the study and data collection, permeating into our internal artifacts that may be used for many months afterward. While there are more examples than will be covered here, the primary three areas where ethical considerations should be top of mind are in your findings reports, design prototypes, and especially in your user personas. </p>
<h4>Findings Reports</h4>
<p>When reporting a study’s findings, care should be taken to be as <strong>representative and impartial</strong> as you were during the design and administration of the study itself so that the audience or readers of the report have the full, accurate picture of what was learned and how.</p>
<ul>
<li>Provide a <strong>‘study setup’ section</strong> of the report which outlines a brief, but robust study methodology description. Include both Pros and Cons of the study method so that you’re being transparent in its limitations and reach.</li>
<li>Include a <strong>‘participants’ section</strong> of the report which includes a bulleted list of the participant attributes. If necessary, include any footnotes around a limitation of diversity <em>(i.e. if against all efforts you recruited 30 women of 40 total participants, this should be noted)</em>.</li>
<li>When using photos, <strong>avoid participant’s faces</strong> (likeness, PII) unless you’ve been provided explicit consent to do so from the participant. This is especially important when discussing personal or sensitive topics.</li>
<li>Use direct quotes, audio recordings, or photos from a range of participants to reflect and promote the diversity of your recruit. This provides the fullest picture of who you spoke with during the study.</li>
<li>Don’t paraphrase direct quotes nor infer too heavily without solid context or understanding. This maintains impartiality and avoids unconscious bias.</li>
<li><strong>Avoid reporting demographic information</strong> for individual qualitative findings as it may inadvertently support institutionalized biases or stigma (i.e. <em>2 male Caucasians said X</em>, <em>1 black woman said Y</em>). It is best practice to segment by demographics only with quantitative samples where meaningful differences may be found through statistical analysis.</li>
</ul>
<h4>User Personas</h4>
<p>A common framework for communicating generative user research findings is <a href="https://www.interaction-design.org/literature/article/personas-why-and-how-you-should-use-them">the user persona</a> — an archetypical representation of a group of users that exhibit similar attitudes and behaviors. While incredibly powerful for making design decisions for months or even a year after the completion of research, they’re just as powerful in reinforcing gender, age, or racial stereotypes.</p>
<p>Care should be taken in the crafting of user personas so that they uphold their <strong>humanizing character</strong> while avoiding enforcing bias. While there are <a href="https://uxdesign.cc/a-step-by-step-guide-to-agnostic-ux-personas-free-downloadable-1bfadf61d3e0">other resources for creating agnostic user persons</a>, here are a few highlights:</p>
<ul>
<li><strong>Try to avoid using human names</strong> altogether. Using human names often <a href="https://www.bentley.edu/centers/user-experience-center/beware-persona-bias">promote biased stereotypes</a> given strong societal expectations around different gender roles, positions of authority, or occupational status. Instead, you may lean into pithy 2-3 word titles which better exemplify who your Personas are (i.e. ‘Cautious Comparer,’ or ‘Impulsive Spender’).</li>
<li>Use <strong>gender-neutral and culturally diverse names</strong>. If you insist on using names in order to humanize the personas, use gender-neutral names to fight the unconscious gender bias. There are also many cultures and backgrounds with which your users may identify — using only names from western European etymology may incidentally erase their unique identity. Using names from diverse etymology helps fight this bias. Here are a few examples of gender-neutral, culturally diverse names: Adrian, Armani, Brett, Devon, Kai, Krishna, Maren, Noor, Nilam, Sam, Jaylin, Jordan, Yoshi.</li>
<li>As with the above, <strong>leverage artistic visualizations</strong> which exemplify the Persona more accurately than a fictitious image or photo. For example, in a Persona for a car manufacturer, it is much more telling to see a weighted scale with a dollar sign on one side and the word ‘safety’ on the other side than it is to see a stock photo of a worried looking person in the front seat. Using photos or illustrations for Personas further stigmatizes race, gender, and body type. If insistent on using humanizing imagery, consider artful illustrations which are ambiguous in gender, race, and body types in order to remain inclusive.</li>
<li><strong>Do not include disability status</strong> unless this was directly part of your research or you’re creating a set of personas specifically focused on people of varying abilities or with a focus on intersectionality. Consider if this level of information or detail is important for the product you’re creating. While the goal of including this information may be with good intentions, you may be misrepresenting already marginalized communities. </li>
<li><strong>Try and avoid gender, race, sexual orientation,</strong> or other demographics that are more akin to segmentation analysis and not user personas. Personas should be representations of like-attitudes and especially <strong>behaviors</strong> which often transcend basic demographics.   </li>
</ul>
<p>As apparent by the above guidance, creating Personas tows a very fine line between creating a useful fictitious archetype and promoting bias and stigma. The latter is highly unethical and leads to false assumptions and even worse design and content strategy decisions. </p>
<h4>Design Prototypes</h4>
<p>Similar to the above guidance given to User Personas, the same care should be taken with users personified through prototype designs. Often we create situations or scenarios to stress test the content and interaction design of our systems by placing a <strong>fictitious character</strong> at the heart of our mock-ups. </p>
<p>Consider leveraging the gender-neutral and culturally diverse names above for use within your prototypes (i.e. the account name of an authenticated user). For account or profile images, leverage artistic illustrations, or a diverse range of stock photography to depict your users. When creating designs where multiple individuals will be represented, take a step back to ensure diversity in the holistic group rather than a focus on one gender, race, culture, or body type. </p>
Bringing It All Together
<p>Ethical user research isn’t only the right thing to do but it makes <strong>good business sense</strong>. Principles of ethical conduct guide our decision-making, keeping us out of trouble and holding us accountable to our users and society.</p>
<p>By influencing your <strong>practices, templates, and processes</strong> with a foundation of ethical principles you will show your team and your organization that you value the dignity and welfare of your users. Building an ethical user research practice at any organization is not inherently difficult, however, requires upfront and ongoing conscious investment in order to do so effectively.</p>
<p>It’s up to us to put the humans we design for at the center of our own business practices and create a true form of human-computer interaction. No one will do this work for us. Noone will hold us accountable. After all, ethics (especially in our field) are an exclusively human concern with no superhuman authority behind it.</p>
<p>Are you ready to make a difference?</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Devin Harold)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/72fbade7-8284-47ba-93d7-0f8a7aefdb7e/ethical-user-research-practice.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Creating An Interactive Gantt Chart Component With Vanilla JavaScript]]></title>
            <link>https://smashingmagazine.com/2021/08/interactive-gantt-chart-component-vanilla-javascript/</link>
            <guid>https://smashingmagazine.com/2021/08/interactive-gantt-chart-component-vanilla-javascript/</guid>
            <pubDate>Wed, 18 Aug 2021 08:00:00 GMT</pubDate>
            <description><![CDATA[In this article, we will code a Gantt chart as a reusable Web component. We will focus on the architecture of the component, rendering the calendar with CSS Grid and managing the state of the draggable tasks with JavaScript Proxy Objects.]]></description>
            <content:encoded><![CDATA[<p>If you work with time data in your app, a graphical visualization as a calendar or Gantt chart is often very useful. At first glance, developing your own chart component seems quite complicated. Therefore, in this article, I will develop the foundation for a <strong>Gantt chart component</strong> whose appearance and functionality you can customize for any use case.</p>
<p>These are the <strong>basic features of the Gantt chart</strong> that I would like to implement:</p>
<ul>
<li>The user can choose between two views: year/month or month/day.</li>
<li>The user can define the planning horizon by selecting a start date and an end date.</li>
<li>The chart renders a given list of jobs that can be moved by drag and drop. The changes are reflected in the state of the objects.</li>
<li>Below you can see the resulting Gantt chart in both views. In the monthly version, I have included three jobs as an example.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9d1f6492-473b-4bff-b5fd-625f2b31251a/1-interactive-gantt-chart-component-vanillajs.jpg" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/be156828-3af2-4885-a520-4c62b1c71356/2-interactive-gantt-chart-component-vanillajs.PNG" /></p>
<p>Below you can see the resulting Gantt chart in both views. In the monthly version, I have included three jobs as an example.</p>
<h3>Sample Files And Instructions For Running The Code</h3>
<p>You can find the <strong>full code snippets</strong> of this article in the following files:</p>
<ul>
<li><a href="https://drive.google.com/file/d/1_sU8iuB6e8Dvp2wfeBFSlj_klW9Avmh9/view?usp=sharing">index.html</a></li>
<li><a href="https://drive.google.com/file/d/1qCTn3-2AV78frvkd_pASu0v-SYgLIy7U/view?usp=sharing">index.js</a></li>
<li><a href="https://drive.google.com/file/d/1KVKT7AA65wmF5l68MHPsKPCy31Kj4RVZ/view?usp=sharing">VanillaGanttChart.js</a></li>
<li><a href="https://drive.google.com/file/d/10N0EV_-5PO2FbupE3mn18xTWiRIKaKP3/view?usp=sharing">YearMonthRenderer.js</a></li>
<li><a href="https://drive.google.com/file/d/1k_TYNzg9NJmAcDI8YCGJ166SIqp4OTDs/view?usp=sharing">DateTimeRenderer.js</a>.</li>
</ul>
<p>Since the code contains JavaScript modules, you can only run the example from an <strong>HTTP server</strong> and not from the local file system. For testing on your local PC, I’d recommend the module <a href="https://www.npmjs.com/package/live-server">live-server</a>, which you can install via npm. </p>
<p>Alternatively, you can <a href="https://blaustern.eu/gantt-chart/">try out the example here directly in your browser</a> without installation.</p>
Basic Structure Of The Web Component
<p>I decided to implement the Gantt chart as a web component. This allows us to create a <strong>custom HTML element</strong>, in my case <code>&lt;gantt-chart&gt;&lt;/gantt-chart&gt;</code>, which we can easily reuse anywhere on any HTML page.</p>
<p>You can find some basic information about developing web components in the <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">MDN Web Docs</a>. The following listing shows the structure of the component. It is inspired by the “counter” example from <a href="https://alligator.io/web-components/attributes-properties/">Alligator.io</a>.</p>
<p>The component defines a <strong>template</strong> containing the HTML code needed to display the Gantt chart. For the complete CSS specifications, please refer to the sample files. The specific selection fields for year, month or date cannot be defined here yet, as they depend on the selected level of the view.</p>
<p>The selection elements are projected in by one of the two <strong>renderer classes</strong> instead. The same applies to the rendering of the actual Gantt chart into the element with the ID <code>gantt-container</code>, which is also handled by the responsible renderer class.</p>
<p>The class <code>VanillaGanttChart</code> now describes the behavior of our new HTML element. In the constructor, we first define our rough template as the <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM">shadow DOM</a> of the element.</p>
<p>The component must be initialized with <strong>two arrays</strong>, <code>jobs</code>, and <code>resources</code>. The <code>jobs</code> array contains the tasks that are displayed in the chart as movable green bars. The <code>resources</code> array defines the individual rows in the chart where tasks can be assigned. In the screenshots above, for example, we have 4 resources labeled <em>Task 1</em> to <em>Task 4</em>. The resources can therefore represent the individual tasks, but also people, vehicles, and other physical resources, allowing for a variety of use cases.</p>
<p>Currently, the <code>YearMonthRenderer</code> is used as the <strong>default renderer</strong>. As soon as the user selects a different level, the renderer is changed in the <code>changeLevel</code> method: First, the renderer-specific DOM elements and listeners are deleted from the Shadow DOM using the <code>clear</code> method of the old renderer. Then the new renderer is initialized with the existing jobs and resources and the rendering is started.</p>
<pre><code>import {YearMonthRenderer} from './YearMonthRenderer.js';
import {DateTimeRenderer} from './DateTimeRenderer.js';

const template = document.createElement('template');

template.innerHTML = 
 `&lt;style&gt; … &lt;/style&gt;

  &lt;div id="gantt-settings"&gt;

    &lt;select name="select-level" id="select-level"&gt;
      &lt;option value="year-month"&gt;Month / Day&lt;/option&gt;
      &lt;option value="day"&gt;Day / Time&lt;/option&gt;
    &lt;/select&gt;

    &lt;fieldset id="select-from"&gt;
      &lt;legend&gt;From&lt;/legend&gt;
    &lt;/fieldset&gt;

    &lt;fieldset id="select-to"&gt;
      &lt;legend&gt;To&lt;/legend&gt;
    &lt;/fieldset&gt;
  &lt;/div&gt;

  &lt;div id="gantt-container"&gt;
  &lt;/div&gt;`;

export default class VanillaGanttChart extends HTMLElement {

    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
      this.shadowRoot.appendChild(template.content.cloneNode(true));
      this.levelSelect = this.shadowRoot.querySelector('#select-level');
    }

    _resources = [];
    _jobs = [];
    _renderer;

    set resources(list){…}
    get resources(){…}
    set jobs(list){…}
    get jobs(){…}
    get level() {…}
    set level(newValue) {…} 
    get renderer(){…}
    set renderer(r){…}

    connectedCallback() {
      this.changeLevel = this.changeLevel.bind(this);

      this.levelSelect.addEventListener('change', this.changeLevel);
      this.level = "year-month";   

      this.renderer = new YearMonthRenderer(this.shadowRoot);
      this.renderer.dateFrom = new Date(2021,5,1);
      this.renderer.dateTo = new Date(2021,5,24);
      this.renderer.render();
    }

    disconnectedCallback() {  
      if(this.levelSelect)
        this.levelSelect.removeEventListener('change', this.changeLevel);
      if(this.renderer)
        this.renderer.clear();
    }

    changeLevel(){
      if(this.renderer)
        this.renderer.clear();

      var r;   

      if(this.level == "year-month"){
        r = new YearMonthRenderer(this.shadowRoot);    
      }else{
        r = new DateTimeRenderer(this.shadowRoot);
      }

      r.dateFrom = new Date(2021,5,1);
      r.dateTo = new Date(2021,5,24);
      r.resources = this.resources;
      r.jobs = this.jobs;
      r.render();
      this.renderer = r;
    }
  }

  window.customElements.define('gantt-chart', VanillaGanttChart);</code></pre>

<p>Before we get deeper into the rendering process, I would like to give you an overview of the connections between the different scripts:</p>
<ul>
<li><strong>index.html</strong> is your web page where you can use the tag <code>&lt;gantt-chart&gt;&lt;/gantt-chart&gt;</code></li>
<li><strong>index.js</strong> is a script in which you initialize the instance of the web component that is associated with the Gantt chart used in index.html with the appropriate jobs and resources (of course you can also use multiple Gantt charts and thus multiple instances of the web component)</li>
<li>The component <strong><code>VanillaGanttChart</code></strong> delegates rendering to the two renderer classes <code>YearMonthRenderer</code> and <code>DateTimeRenderer</code>.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5f80bf86-6f3c-4e82-83c3-d944018be93a/3-interactive-gantt-chart-component-vanillajs.jpg" /></p>
Rendering Of The Gantt chart With JavaScript And CSS Grid
<p>In the following, we discuss the <strong>rendering process</strong> using the <code>YearMonthRenderer</code> as an example. Please note that I have used a so-called <a href="https://www.javascripttutorial.net/javascript-constructor-function/">constructor function</a> instead of the <code>class</code> keyword to define the class. This allows me to distinguish between public properties (<code>this.render</code> and <code>this.clear</code>) and private variables (defined with <code>var</code>).</p>
<p>The rendering of the chart is broken down into several sub-steps:</p>
<ol>
<li><code>initSettings</code><br />Rendering of the controls which are used to define the planning horizon.</li>
<li><code>initGantt</code><br />Rendering of the Gantt chart, basically in four steps: <ul>
<li><code>initFirstRow</code> (draws 1 row with month names)</li>
<li><code>initSecondRow</code> (draws 1 row with days of the month)</li>
<li><code>initGanttRows</code> (draws 1 row for each resource with grid cells for each day of the month)</li>
<li><code>initJobs</code> (positions the draggable jobs in the chart)</li>
</ul>
</li>
</ol>
<pre><code>export function YearMonthRenderer(root){

    var shadowRoot = root;
    var names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];    

    this.resources=[];
    this.jobs = [];

    this.dateFrom = new Date();
    this.dateTo = new Date();

    //select elements
    var monthSelectFrom;
    var yearSelectFrom;
    var monthSelectTo;
    var yearSelectTo;

    var getYearFrom = function() {…}
    var setYearFrom = function(newValue) {…}

    var getYearTo = function() {…}
    var setYearTo = function(newValue) {…}

    var getMonthFrom = function() {…}
    var setMonthFrom = function(newValue) {…}

    var getMonthTo = function() {…}
    var setMonthTo = function(newValue) {…}  

    this.render = function(){
      this.clear();
      initSettings();
      initGantt();
    }

    //remove select elements and listeners, clear gantt-container 
    this.clear = function(){…}

    //add HTML code for the settings area (select elements) to the shadow root, initialize associated DOM elements and assign them to the properties monthSelectFrom, monthSelectTo etc., initialize listeners for the select elements
    var initSettings = function(){…}

    //add HTML code for the gantt chart area to the shadow root, position draggable jobs in the chart
    var initGantt = function(){…}

    //used by initGantt: draw time axis of the chart, month names
    var initFirstRow = function(){…}

    //used by initGantt: draw time axis of the chart, days of month
    var initSecondRow = function(){…}

    //used by initGantt: draw the remaining grid of the chart
    var initGanttRows = function(){…}.bind(this);

    //used by initGantt: position draggable jobs in the chart cells
    var initJobs = function(){…}.bind(this);    

   //drop event listener for jobs
   var onJobDrop = function(ev){…}.bind(this);

   //helper functions, see example files
   ...
}</code></pre>

<h3>Rendering The Grid</h3>
<p>I recommend CSS Grid for drawing the diagram area because it makes it very easy to create <strong>multi-column layouts</strong> that adapt dynamically to the screen size. </p>
<p>In the first step, we have to determine the <strong>number of columns</strong> of the grid. In doing so, we refer to the first row of the chart which (in the case of the <code>YearMonthRenderer</code>) represents the individual months. </p>
<p>Consequently, we need:</p>
<ul>
<li>one column for the names of the resources, e.g. with a fixed width of 100px.</li>
<li>one column for each month, of the same size and using the full space available.</li>
</ul>
<p>This can be achieved with the setting <code>100px repeat(${n_months}, 1fr)</code> for the property <code>gridTemplateColumns</code> of the chart container. </p>
<p>This is the initial part of the <code>initGantt</code> method:</p>
<pre><code>var container = shadowRoot.querySelector("#gantt-container");
container.innerHTML = "";

var first_month = new Date(getYearFrom(), getMonthFrom(), 1);
var last_month = new Date(getYearTo(), getMonthTo(), 1);

//monthDiff is defined as a helper function at the end of the file
var n_months =  monthDiff(first_month, last_month)+1;

container.style.gridTemplateColumns = `100px repeat(${n_months},1fr)`;</code></pre>

<p>In the following picture you can see a chart for two months with <code>n_months=2</code>:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73076bcc-a5f7-4bdd-943a-66f37bcb8034/chart-2-months.png" /></p>
<p>After we have defined the outer columns, we can start <strong>filling the grid</strong>. Let's stay with the example from the picture above. In the first row, I insert 3 <code>div</code>s with the classes <code>gantt-row-resource</code> and <code>gantt-row-period</code>. You can find them in the following snippet from the DOM inspector. </p>
<p>In the second row, I use the same three <code>div</code>s to keep the vertical alignment. However, the month <code>div</code>s get child elements for the individual days of the month.</p>
<pre><code>&lt;div id="gantt-container"
  style="grid-template-columns: 100px repeat(2, 1fr);"&gt;
  &lt;div class="gantt-row-resource"&gt;&lt;/div&gt;
  &lt;div class="gantt-row-period"&gt;Jun 2021&lt;/div&gt;
  &lt;div class="gantt-row-period"&gt;Jul 2021&lt;/div&gt;
  &lt;div class="gantt-row-resource"&gt;&lt;/div&gt;
  &lt;div class="gantt-row-period"&gt;
    &lt;div class="gantt-row-period"&gt;1&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;2&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;3&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;4&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;5&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;6&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;7&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;8&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;9&lt;/div&gt;
    &lt;div class="gantt-row-period"&gt;10&lt;/div&gt;
  ...
  &lt;/div&gt;
  ...
&lt;/div&gt;
</code></pre>  

<p>For the child elements to be arranged horizontally as well, we need the setting <code>display: grid</code> for the class <code>gantt-row-period</code>. In addition, we do not know exactly how many columns are required for the individual months (28, 30, or 31). Therefore, I use the setting <code>grid-auto-columns</code>. With the value <code>minmax(20px, 1fr);</code> I can ensure that a minimum width of 20px is maintained and that otherwise the available space is fully utilized:</p>
<pre><code>#gantt-container {
  display: grid;
}

.gantt-row-resource {
  background-color: whitesmoke;
  color: rgba(0, 0, 0, 0.726);
  border: 1px solid rgb(133, 129, 129);
  text-align: center;
}

.gantt-row-period {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: minmax(20px, 1fr);
  background-color: whitesmoke;
  color: rgba(0, 0, 0, 0.726);
  border: 1px solid rgb(133, 129, 129);
  text-align: center;
}</code></pre>

<p>The remaining rows are generated according to the second row, however as <strong>empty cells</strong>.</p>
<p>Here is the JavaScript code for generating the individual grid cells of the first row. The methods <code>initSecondRow</code> and <code>initGanttRows</code> have a similar structure.</p>
<pre><code>var initFirstRow = function(){

  if(checkElements()){
        var container = shadowRoot.querySelector("#gantt-container");

        var first_month = new Date(getYearFrom(), getMonthFrom(), 1);
        var last_month = new Date(getYearTo(), getMonthTo(), 1);

        var resource = document.createElement("div");
        resource.className = "gantt-row-resource";
        container.appendChild(resource);   

        var month = new Date(first_month);

        for(month; month &lt;= last_month; month.setMonth(month.getMonth()+1)){    
          var period = document.createElement("div");
          period.className = "gantt-row-period";
          period.innerHTML = names[month.getMonth()] + " " + month.getFullYear();
          container.appendChild(period);
        }
  }
}</code></pre>

<h3>Rendering The Jobs</h3>
<p>Now each <code>job</code> has to be drawn into the diagram at the <strong>correct position</strong>. For this I make use of the HTML data attributes: every grid cell in the main chart area is associated with the two attributes <code>data-resource</code> and <code>data-date</code> indicating the position on the horizontal and vertical axis of the chart (see function <code>initGanttRows</code> in the files <code>YearMonthRenderer.js</code> and <code>DateTimeRenderer.js</code>).</p>
<p>As an example, let's look at the <strong>first four grid cells</strong> in the first row of the chart (we are still using the same example as in the pictures above):</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e8eaf9c3-f594-41e2-afa0-1a4ed3ee10a9/6-interactive-gantt-chart-component-vanillajs.PNG" /></p>
<p>In the DOM inspector you can see the values of the data attributes that I have assigned to the individual cells:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/06e65da7-ef17-4f28-aa4b-dbba36acb02f/7-interactive-gantt-chart-component-vanillajs.PNG" /></p>
<p>Let's now see what this means for the function <code>initJobs</code>. With the help of the function <code>querySelector</code>, it is now quite easy to find the grid cell into which a job should be placed.</p>
<p>The next challenge is to determine the correct width for a <code>job</code> element. Depending on the selected view, each grid cell represents a <strong>unit of one day</strong> (level <code>month/day</code>) or one hour (level <code>day/time</code>). Since each job is the child element of a cell, the <code>job</code> duration of 1 unit (day or hour) corresponds to a width of <code>1*100%</code>, the duration of 2 units corresponds to a width of <code>2*100%</code>, and so on. This makes it possible to use the CSS <code>calc</code> function to <strong>dynamically set the width of a <code>job</code> element</strong>, as shown in the following listing.</p>
<pre><code>var initJobs = function(){

    this.jobs.forEach(job =&gt; {

        var date_string = formatDate(job.start);

        var ganttElement = shadowRoot.querySelector(`div[data-resource="${job.resource}"][data-date="${date_string}"]`);

        if(ganttElement){

          var jobElement = document.createElement("div");
          jobElement.className="job";
          jobElement.id = job.id;

          //helper function dayDiff - get difference between start and end in days
          var d = dayDiff(job.start, job.end);           

          //d --&gt; number of grid cells covered by job + sum of borderWidths
          jobElement.style.width = "calc("+(d*100)+"% + "+ d+"px)";
          jobElement.draggable = "true";

          jobElement.ondragstart = function(ev){
              //the id is used to identify the job when it is dropped
              ev.dataTransfer.setData("job", ev.target.id); 
          };

          ganttElement.appendChild(jobElement);
        }
    });
  }.bind(this);</code></pre>

<p>In order to make a <code>job</code> <strong>draggable</strong>, there are three steps required:</p>
<ul>
<li>Set the property <code>draggable</code> of the job element to <code>true</code> (see listing above).</li>
<li>Define an event handler for the event <code>ondragstart</code> of the job element (see listing above).</li>
<li>Define an event handler for the event <code>ondrop</code> for the grid cells of the Gantt chart, which are the possible drop targets of the job element (see function <code>initGanttRows</code> in the file <code>YearMonthRenderer.js</code>).</li>
</ul>
<p>The event handler for the event <code>ondrop</code> is defined as follows:</p>
<pre><code>var onJobDrop = function(ev){

      // basic null checks
      if (checkElements()) {

        ev.preventDefault(); 

        // drop target = grid cell, where the job is about to be dropped
        var gantt_item = ev.target;

        // prevent that a job is appended to another job and not to a grid cell
        if (ev.target.classList.contains("job")) {
          gantt_item = ev.target.parentNode;
        }

        // identify the dragged job
        var data = ev.dataTransfer.getData("job");               
        var jobElement = shadowRoot.getElementById(data);  

        // drop the job
        gantt_item.appendChild(jobElement);

        // update the properties of the job object
        var job = this.jobs.find(j =&gt; j.id == data );

        var start = new Date(gantt_item.getAttribute("data-date"));
        var end = new Date(start);
        end.setDate(start.getDate()+dayDiff(job.start, job.end));

        job.start = start;
        job.end = end;
        job.resource = gantt_item.getAttribute("data-resource");
      }
    }.bind(this);</code></pre>

<p> All changes to the job data made by drag and drop are thus reflected in the list <code>jobs</code> of the Gantt chart component.</p>
Integrating The Gantt Chart Component In Your Application
<p>You can use the tag <code>&lt;gantt-chart&gt;&lt;/gantt-chart&gt;</code> anywhere in the HTML files of your application (in my case in the file <code>index.html</code>) under the following conditions: </p>
<ul>
<li>The script <code>VanillaGanttChart.js</code> must be integrated as a module so that the tag is interpreted correctly.</li>
<li>You need a separate script in which the Gantt chart is initialized with <code>jobs</code> and <code>resources</code> (in my case the file <code>index.js</code>).</li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
 &lt;head&gt;
   &lt;meta charset="UTF-8"/&gt;
   &lt;title&gt;Gantt chart - Vanilla JS&lt;/title&gt;
   &lt;script type="module" src="VanillaGanttChart.js"&gt;&lt;/script&gt;   
 &lt;/head&gt;

 &lt;body&gt;

  &lt;gantt-chart id="g1"&gt;&lt;/gantt-chart&gt; 

  &lt;script type="module" src="index.js"&gt;&lt;/script&gt;
 &lt;/body&gt; 
&lt;/html&gt;</code></pre>

<p>For example, in my case the file <code>index.js</code> looks as follows:</p>
<pre><code>import VanillaGanttChart from "./VanillaGanttChart.js";

var chart = document.querySelector("#g1");

chart.jobs = [
    {id: "j1", start: new Date("2021/6/1"), end: new Date("2021/6/4"), resource: 1},
    {id: "j2", start: new Date("2021/6/4"), end: new Date("2021/6/13"), resource: 2},
    {id: "j3", start: new Date("2021/6/13"), end: new Date("2021/6/21"), resource: 3},
];

chart.resources = [{id:1, name: "Task 1"}, {id:2, name: "Task 2"}, {id:3, name: "Task 3"}, {id:4, name: "Task 4"}];
</code></pre>

<p>However, there is still one requirement open: when the user makes changes by dragging jobs in the Gantt chart, the respective changes in the property values of the jobs should be reflected in the list <em>outside</em> the component.</p>
<p>We can achieve this with the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">JavaScript Proxy Objects</a>: Each <code>job</code> is nested in a <strong>proxy object</strong>, which we provide with a so-called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#validation">validator</a>. It becomes active as soon as a property of the object is changed (function <code>set</code> of the validator) or retrieved (function <code>get</code> of the validator). In the set function of the validator, we can store code that is executed whenever the start time or the resource of a task is changed.</p>
<p>The following listing shows a different version of the file <code>index.js</code>. Now a list of proxy objects is assigned to the Gantt chart component instead of the original jobs. In the validator <code>set</code> I use a simple console output to show that I have been notified of a property change.</p>
<pre><code>import VanillaGanttChart from "./VanillaGanttChart.js";

var chart = document.querySelector("#g1");

var jobs = [
    {id: "j1", start: new Date("2021/6/1"), end: new Date("2021/6/4"), resource: 1},
    {id: "j2", start: new Date("2021/6/4"), end: new Date("2021/6/13"), resource: 2},
    {id: "j3", start: new Date("2021/6/13"), end: new Date("2021/6/21"), resource: 3},
];
var p_jobs = [];

chart.resources = [{id:1, name: "Task 1"}, {id:2, name: "Task 2"}, {id:3, name: "Task 3"}, {id:4, name: "Task 4"}];

jobs.forEach(job =&gt; {

    var validator = {
        set: function(obj, prop, value) {

          console.log("Job " + obj.id + ": " + prop + " was changed to " + value);
          console.log();

          obj[prop] = value;
          return true;
        },

        get: function(obj, prop){

            return obj[prop];
        }
    };

    var p_job = new Proxy(job, validator);
    p_jobs.push(p_job);
});

chart.jobs = p_jobs;</code></pre>

Outlook
<p>The Gantt chart is an example that shows how you can use the technologies of Web Components, CSS Grid, and JavaScript Proxy to develop a <strong>custom HTML element</strong> with a somewhat more complex graphical interface. You are welcome to develop the project further and/or use it in your own projects together with other JavaScript frameworks.</p>
<p>Again, you can find <a href="#sample-files-and-instructions-for-running-the-code">all sample files and instructions</a> at the top of the article.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Anna Prenzel)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3bcf1248-c58e-47f4-a94f-3cbac5c60b45/interactive-gantt-chart-component-vanillajs.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Free Open-Source Icons]]></title>
            <link>https://smashingmagazine.com/2021/08/open-source-icons/</link>
            <guid>https://smashingmagazine.com/2021/08/open-source-icons/</guid>
            <pubDate>Tue, 17 Aug 2021 07:25:00 GMT</pubDate>
            <description><![CDATA[Your project is on a tight budget? We’ve collected some wonderful, free icons and goodies that we’ve discovered lately and that are bound to give your design the finishing touch. We’ve also just recently covered [Figma plugins](https://www.smashingmagazine.com/2021/08/figma-tools-plugins-resources/), [SVG generators](https://www.smashingmagazine.com/2021/03/svg-generators/), [accessible front-end components](https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/) and [front-end boilerplates](https://www.smashingmagazine.com/2021/06/useful-frontend-boilerplates-starter-kits/) &mdash; you might find them useful, too.]]></description>
            <content:encoded><![CDATA[<p>It’s incredible to see people from all across the world putting all their <strong>love and lots of hours</strong> into something that they then release for free, for everybody to use. They help projects on a tight budget shine, without asking for anything in return — and, of course, they never cease to inspire.</p>
<p>In this post, we’ll celebrate some of these wonderful <strong>freebies</strong> that we came across recently. All of these <strong>free icons, illustrations, avatars, and animations</strong> have slightly different licenses (so please check them), but they are free to use in private and commercial work. But of course, the credit is always much appreciated.</p>
<p>If you’re interested in more goodies like these ones, please do <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">take a look at our lovely email newsletter</a>, so you can get tips like these delivered right into your inbox.</p>
Open-Source Flag Icons
<p>Icons are a fantastic way to help convey meaning and add some character to a design. An icon set that comes in particularly handy in e-commerce projects is <a href="https://flagpack.xyz/">Flagpack</a>. It includes more than <strong>250 open-source flag icons</strong> — from Andorra to Zimbabwe.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9835be86-482b-4c16-b823-8b071fc62479/01-flags-opt.jpg" /></p>
<p>The Flagpack icons are optimized for small sizes which makes them a perfect fit for all your UI needs. They come with <strong>several predefined styles</strong> or you can customize the look to your liking, if you prefer. Two versions available: Designers can use the Flagpack in Figma and Sketch, developers can install it directly within their code project (React, Vue, and Svelte are supported). Nice!</p>
Boring Avatars And Absurd Illustrations
<p>Do you need some SVG-based avatars for your project? <a href="https://boringavatars.com/">Boring Avatars</a> has got you covered. But don’t let the name fool you: The avatars are anything but boring.</p>
<p>The tiny React library generates <strong>custom, SVG-based, round avatars</strong> from any username and color palette. Six different styles are available, abstract patterns just like friendly smileys. You can either choose a random color palette or create your own from scratch to tailor the avatars to your design. A friendly little detail.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9954a3af-8771-4579-be84-b121eb9e71ab/absurd-illustrations-opt.png" /></p>
<p>Another fantastic resource with a name that might leave you puzzled for a moment are the <a href="https://absurd.design/">Absurd Illustrations</a> that Diana Valeanu created. Her series of illustrations combines absurdity and a <strong>deep sense of childishness</strong> and naivety to take every user on an individual journey through their imagination. A beautiful celebration of the imperfect that we’re sometimes missing in this digital era, absurdity that, well, makes sense.</p>
Open-Source Health Icons
<p>When people from all across the globe share the same vision and work together on one common goal, great things can happen. Things like the <a href="https://healthicons.org/">Health Icons</a> project. The project is a volunteer effort to create a ‘global good’ for health projects all over the world. It includes more than <strong>870 public-domain icons</strong> that can be used for free in any type of project.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ed89252-afd3-495d-9e72-faa9ab88d59f/health-icons-opt.png" /></p>
<p>Blood types, body parts and organs, diagnostics, medications, medical devices, vehicles, and people — the set covers <strong>everything health-related</strong> you could possibly ask for. Each icon comes in three different styles (outlined, filled, negative) and is available in SVG and PNG formats. There’s also a Figma plugin that makes it easy to find and include icons in your design.</p>
Open-Source Life Science Icons
<p>Vaccines, viruses, genetics, physiology, bioinformatics. These are just some of the topics that the fascinating <a href="https://bioicons.com/">Bioicons</a> set that Simon Duerr created covers. In total, you’ll find <strong>1,700 open-source life science illustrations</strong> in the set — easily searchable and filterable, of course.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fffcb5f9-7704-4134-af0d-e9d134ef9a8f/02-bio-opt.jpg" /></p>
<p>The site supports two modes: you can copy the icons as SVG into the clipboard and paste them directly into Illustrator to change colors or delete parts. Alternatively, you can download the SVG to use it on the web, in graphics software, and even Microsoft Office products. An <strong>encyclopedia-like set</strong> — if you don’t find what you’re looking for there, you probably won’t find it anywhere.</p>
Weather-Themed Icons And CSS
<p><strong>222 weather-themed icons</strong>, complete with 28 moon phases, the Beaufort wind force scale, and maritime wind warnings — that’s what you’ll get in the free <a href="https://erikflowers.github.io/weather-icons/">Weather Icons</a> set that Erik Flowers created.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e36eb25-c9ac-4d04-84b4-f50bef6d43df/04-weather-opt.jpg" /></p>
<p>You can copy and paste the icons into your favorite design app right from the site. CSS makes it easy to style and <strong>customize the icons</strong> just like you would do with text, so feel free to change their color, add shadows, or scale, rotate, or flip them to make the icons fit into your design nicely. Popular weather API classes are also supported, by the way, in case you should need it.</p>
Summer And Tourism Icons
<p>Barbecues, a trip to the beach, exploring a new city — summer is the time to make memories. To bring some of the <strong>summer feeling</strong> into your projects, you might want to take a look at the <a href="https://graphicsurf.com/item/summer-time-vector-free-icon-set/">Summer Time</a> and <a href="https://graphicsurf.com/item/tourism-vector-free-icon-set/">Tourism</a> icon sets which the folks at Design Zone offer for free download. Each set includes 20 vector icons (in colored and linear versions) and comes in AI, EPS, and PNG formats. You can use the icons for both personal and commercial projects. Happy summer!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/337b471a-0798-410d-9670-1d63c5bebfdc/05-tourism.jpg" /></p>
Flat Illustrations With Character
<p>No more boring business websites! The <a href="https://www.getillustrations.com/illustration-packs">Flat Illustrations</a> set that Getillustrations.com offers is bound to add some personality to your project. It features <strong>free compositions</strong> for businesses, online stores, and marketing. Characters in various poses and scenes, colorful, relaxed, and friendly.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cd8db032-1092-4884-8e21-6261bd214efc/06-characters-opt.jpg" /></p>
<p>The site features ever-changing free sets (link attribution is required), and also the commercial versions come with customizable vectors for Figma, Sketch, Ai, SVG, AdobeXD, and Iconjar. Good vibes guaranteed!</p>
A World Of Open-Source Icons
<p>What started as a semester project by Interaction and Communication Design students, has grown to a comprehensive open-source emoji and icon library: <a href="http://openmoji.org/">OpenMoji</a>. Almost <strong>4,000 icons have been carefully designed</strong> and reviewed for the project, ranging from UX and technology-themed emojis to animals, nature, food, people, activities, places, and much more. The icons are available in colored as well as outlined versions in SVG and PNG formats.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc67b871-1a03-41a4-897a-e2b63772df30/openmoji-opt.png" /></p>
Hand-Curated Mesh Gradients
<p>Beautiful gradients? Yes, please! If you don’t have the time to create them yourself or are looking for some fresh inspiration, Gene Maryushenko’s <a href="https://www.meshgradients.design/">hand-curated collection of mesh gradients</a> is sure to have you covered.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/32fa6cfc-b52e-45ef-82c7-e92210c9aa47/mesh-gradients-opt.png" /></p>
<p>Unhappy with what he found online, Gene created <strong>100 gradients</strong> that will make your site stand out, without being loud. The gradients can be downloaded for free as JPEGs. CSS and SVG will be added later. Enjoy!</p>
Open Peeps
<p>584,688 possible combinations. That’s the number of different characters you could create with Pablo Stanley’s hand-drawn illustration library <a href="https://www.openpeeps.com/">Open Peeps</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de9ee388-c756-449c-84e0-3318aba74f78/open-peeps-opt.png" /></p>
<p>Open Peeps lets you mix and match different vector elements to create <strong>diverse personalities</strong>: combine clothing and hairstyles, change emotion with facial expressions, set the scene with different poses — the possibilities are sheer endless. And if you’re in a hurry, Pablo also prepared some ready-to-download Peeps that you can use right away. A great way to add a handmade touch to your design.</p>
Free Vector Illustrations
<p>A cow kidnapped by aliens, a dropped ice cream cone with a sad face, the Lochness monster emerging from the water. These are some of the fun error state animations that the folks at Pixel True Studios offer for free download in their set of <a href="https://www.pixeltrue.com/free-illustrations">vector illustrations and animations</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/07dede13-7f45-4765-923e-84184ba54652/pixeltrue-700px-opt.png" /></p>
<p>Apart from error state animations, the set includes more than <strong>500 illustrations, icons, and animations</strong> to depict everything a web project could call for: backgrounds, emoji, avatars, and more. The illustrations are available in SVG, PNG, AI, Sketch, and Figma, the animations are made with Lottie. A great way to add a fun and friendly touch to a design.</p>
Thank You!
<p>A huge thank-you to the creative minds who designed these freebies — and of course to everyone who gives back to the community in one sense or another. The web wouldn’t be the same without you. ❤️</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/337b471a-0798-410d-9670-1d63c5bebfdc/05-tourism.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[How To Develop Your Business’ Technology Roadmap]]></title>
            <link>https://smashingmagazine.com/2021/08/develop-business-technology-roadmap/</link>
            <guid>https://smashingmagazine.com/2021/08/develop-business-technology-roadmap/</guid>
            <pubDate>Mon, 16 Aug 2021 06:55:00 GMT</pubDate>
            <description><![CDATA[Software development without a roadmap is akin to driving off a cliff &mdash; an undertaking that seriously jeopardizes your product’s life. Here’s how to develop a business technology roadmap that ensures your project safely reaches its final destination.]]></description>
            <content:encoded><![CDATA[<p>When people have an idea for a piece of software or an app, they tend to be pretty energized about getting it to market as quickly as possible. It’s exciting to create an app or piece of software no one’s ever imagined or built before. As software developers, we’re usually right there with them.</p>
<p>At some point, though, we need to sit down with clients and give them a sometimes sobering reality: software development without a <strong>business technology roadmap</strong> can be a lot like driving aimlessly from point A to point Z. Sure, you get to discover new worlds and experience unexpected adventures, but you also frequently get lost, spend more money, and can lose enthusiasm for the journey.</p>
“Agile” And “Fast” Are Not The Same In Software Development
<p>Many people think an Agile approach to software development discards long-term planning. Perhaps it’s because we so often use the word <strong>“sprint”</strong> in conversation. In reality, all good software development <a href="https://www.cio.com/article/3489778/what-is-a-technology-roadmap-a-plan-for-managing-digital-transformation.html">must flow</a> from a business technology roadmap, as it:</p>
<ul>
<li><strong>Provides context</strong> around the development team’s daily work.</li>
<li><strong>Responds to shifts</strong> in, among other things, the competitive landscape.</li>
</ul>
<p>So, what is a business technology roadmap, and how can one be developed to support software development? That’s what we’re here to talk about.</p>
What Is A Business Technology Roadmap?
<p>Unlike detailed blueprints that lay out all tasks, deadlines, bug reports, and more along the way, technology roadmaps are <strong>high-level visual summaries</strong> highlighting a company’s vision or plans.</p>
<p>In an <a href="https://www.zibtek.com/process">Agile</a> approach, a technology roadmap feeds the sprint and grooming processes, providing insight into how the product will travel from start to finish. It makes it easier for development teams to:</p>
<ul>
<li>Understand how the product will evolve.</li>
<li>Make near-term decisions that don’t compromise future work.</li>
<li>Gain awareness of which features are or aren’t working.</li>
</ul>
<p>Companies can use technology roadmaps to <strong>review their internal IT</strong>, DevOps, infrastructure, architecture, software, internal system, and hardware procurement policies and procedures with innovation and efficiency in mind. The roadmap helps them define how a new IT tool, process, or technology supports their business strategy and growth and aligns projects with short and long-term goals.</p>
<p>There are <strong>hundreds of templates</strong> companies use for their tech roadmaps. A typical IT roadmap covers everything from requirements to testing and integrations. A dev team’s work dictates software or development roadmaps, highlighting tech initiatives, epics, and features while communicating the team’s primary goals.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f39cc320-b58d-4cbb-9db2-fbc4206c6d3c/1-develop-business-technology-road-map.jpg" /></p>
<p>For a typical client, a roadmap follows the following structure.</p>
<ul>
<li>We created a list of <strong>all the features</strong> based on competition and wish list,</li>
<li>We narrowed that down based on what we wanted to be and what our beta users wanted, </li>
<li>We used that narrowed list to start <strong>technical planning</strong> and user stories,</li>
<li>As new features came up, we ran that through the roadmap to know if it fits in or how it should be prioritized,</li>
<li>We adjusted the roadmap if needed every 3-5 months.</li>
</ul>
The Role A Technology Roadmap Plays In An Agile Approach
<p>In practice, a technology roadmap in Agile software development:</p>
<ul>
<li><p><strong>Facilitates planning activities</strong> by recognizing the journey is just as important as the destination. It forces teams to “come out of the weeds” and think more strategically.<br /><br /><em>How this might play out:</em> Your dev team suggests that the product needs built-in calling, meeting scheduling, and multi-layer reporting features. That forces you into <strong>planning activities</strong> like grooming meetings and getting outside feedback where you dissect each feature and come up with scenarios for setting them up. You might also discuss things like vendor selection for each feature. Conversations tend to follow an “or” pattern, as in “are we going to do this, or this, or that?” </p>
</li>
<li><p><strong>Highlights key focus areas</strong> and works as a navigational tool to help the entire team succeed.<br /><br /><em>How this might play out:</em> Putting a spotlight on the areas the team needs to focus on forces you to decide who you want to be and what you want to become. Put another way, if you’re tailoring your product to a specific group, say inside sales reps, highlighting core features that matter to this narrower group of users helps eliminate tasks that might be used in other projects. </p>
</li>
<li><p><strong>Works as a critical communication tool</strong> both within the teams and with other key stakeholders.<br /><br /><em>How this might play out:</em> As your project progresses and team members remind you about particular features stakeholders said they wanted, you can easily refer back to the roadmap to see if it was there in the first place. You can see where you <em>chose</em> to make certain development decisions, i.e., “we <em>chose</em> to be an inside sales rep tool,” and “we <em>chose</em> to be this or that.” This acts as sort of a forcing function, helping you revise the roadmap and rearrange the order and priority of tasks based on how they affect your schedule and deadline goals.</p>
</li>
</ul>
<p>Different development companies and teams use different charts to construct their agile product roadmap, but they all tend to include:</p>
<ul>
<li>A <strong>“longer-term strategic theme,”</strong> which points teams in a specific direction based on their assigned tasks.</li>
<li>A list of <strong>quarterly outcomes or objectives</strong> and key results (OKR) goals that each team will focus on to achieve the strategic theme. These goals basically answer the question, “what are the things we may build?” The answer lies in how you define success. Each team gives their best guesses as to how they’ll achieve each quarter’s goals.</li>
<li>Additional columns contain OKR goals, but with fewer and fewer “things we may build” listings. That’s because teams don’t know what they’ll be working on three or four quarters out so there are fewer best guesses. As the project moves forward and goes through testing, the boxes for the later quarters fill up.</li>
</ul>
<p>More detailed software roadmaps cover <strong>milestones</strong> like player launch, product details like user profiles, UX/UI such as desktop icons and wireframes, and dev goals like press-to-play and performance enhancements. </p>
<p>Unlike traditional software development approaches, Agile <strong>focuses on the strategy, not the plan</strong>. That means outcomes, not outputs, are prioritized; tactical plans are left for backlogs. In a way, they’re designed to communicate uncertainty and provide transparency into what stops along the way are likely to remain as is and which might be in flux. For this reason, it’s crucial to update Agile roadmaps often as priorities shift and change.</p>
How A Technology Roadmap Feeds The Agile Sprint And Grooming Processes
<p><strong>Sprints</strong> frequently go off track, which can have a negative effect on downstream operations. A technology roadmap helps teams run more successful sprints by setting a foundation and identifying how work should be organized so activities can be finished in a short time period.</p>
<ul>
<li>A <em>sprint goal</em> refers to what can be delivered in the sprint.</li>
<li>A <em>sprint backlog</em> is the list of tasks to be completed during the sprint to achieve the goal.</li>
</ul>
<p>To illustrate, let’s say you want to develop a new product feature. During the sprint planning meeting, team members need to “groom” the backlog and say which tasks they’ll work on. This is where many teams are led down the wrong path. They assume planning for the next two weeks is easy-peasy. They overlook or forget the work they’re planning must also satisfy the established goal.</p>
<p>A <strong>good backlog</strong>:</p>
<ul>
<li>Lists each work item in order of importance.</li>
<li>Includes full-developed user stories the team can begin to execute on.</li>
<li>Has a current estimate for each work item.</li>
</ul>
<p>Because it’s easy for teams to get bogged down in the details of a project, a technology roadmap helps them <strong>stay focused on high-level objectives</strong> and true customer needs.</p>
The Role Of A Technology Roadmap In Digital Transformation
<p>Today’s digital transformations focus on <strong>three key areas</strong>: customer experience, operational processes, and business models. Whether it’s for a small company or multi-national enterprise, a well-developed business technology roadmap helps companies reach short and long-term digital transformation goals by allowing them to:</p>
<ul>
<li>Remain agile enough to accommodate course changes.</li>
<li>Build long-term value in the product.</li>
<li>Avoid roadblocks and other obstacles.</li>
<li>Because digital transformation is a relatively new concept, it’s often a journey filled with blind spots. What does it mean in terms of the scope and intensity of change? What will the repercussions be of pursuing and implementing it?</li>
</ul>
<p>On the one hand, the digital transformation process is seen as using technologies to create new or modify existing business models. On the other hand, it’s about companies needing to embrace new cultures, structures, and processes that align with their IT architecture. One thing’s for sure: digital transformation is a fundamental change for any company.</p>
<p>A technology roadmap assists overall digital transformation goals by answering some <strong>key questions</strong>:</p>
<ul>
<li>How is digital changing or poised to change the business and its industry?</li>
<li>What new offerings, operating models, and business models can it enable?</li>
<li>How is digital affecting the business’s competitive advantage? Where does the company remain well-positioned, and where is it disadvantaged?</li>
<li>Which digital opportunities are consistent with a company’s strategy based on value potential? In what order should the business pursue them?</li>
<li>What gaps in systems and capabilities need to be filled to succeed?</li>
<li>What are the targets, timelines, and accountabilities for individual projects and programs? What steps are needed to finance the journey?</li>
</ul>
<p>Just about every business can benefit from developing their business technology roadmap as part of their digital transformation plan. New digital advances and the opportunity to improve traditional technologies to change customer relationships and employee experiences put businesses on a clear and rewarding path for turning technology into transformation.</p>
Creating A Technology Roadmap To Drive Successful Innovation
<p>Many businesses already have a technology roadmap. The question is whether that map is pointing to where they want to go, or has it only carried them to the present leg of the journey? Are they focused only on existing projects, or are they anticipating future breakthroughs?</p>
<p>The best technology <strong>roadmaps continually evolve</strong>, adding new destination points and aligning all resources and capabilities behind long-term goals. It’s not an easy process, but a methodical approach helps.</p>
<h3>1. Identify Goals</h3>
<p>Technology roadmaps must integrate <strong>long-term goals and visions</strong>. It’s often best to start at the end and work backward. For instance, in software development, milestones are often thought of as software releases or new versions of a project. But with a business roadmap, goals and initiatives also include things like hitting revenue targets or launching in a new region or market, basically anything that’s a significant result of combined efforts.</p>
<h3>2. Seek Input From Stakeholders</h3>
<p>For smaller businesses, this often means <strong>involving everyone</strong>. Including all pertinent stakeholders and decision-makers brings different views and priorities to the table and helps establish a clear direction for where the company’s headed. As collaboration is key to most business success, it also increases the chance of the roadmap being implemented. For specific projects, it weighs all pros and cons and ensures the new technology meets everyone’s particular needs.</p>
<h3>3. Evaluate Current Systems And Chart A Course</h3>
<p>All business technology roadmaps include <strong>negotiating a budget</strong>. Now’s the time to question previous decisions to see if they still align with the company’s vision. For example, a company has the goal of doubling customers, so assumes it must increase hardware capacity to meet it. That can cost significant sums of money. Another approach might be to make strategic changes to the software or combine current tools with custom software, typically a far less expensive strategy.</p>
<h3>4. Be Open To Change</h3>
<p>Clear vision and a revised budget in hand, it’s now possible to view the business landscape with a critical set of eyes looking. Perhaps a company previously developed a custom app because no existing product satisfied its needs — but now that software exists! The custom software could possibly be retired for the new software that will be supported by someone else.</p>
<p>That makes it possible to use in-house staff to develop new, potentially more profitable products. Sometimes bringing in an outside consultant to <strong>audit systems</strong>, processes, and teams help identify changes a business can make to support improvements and future initiatives.</p>
<h3>5. Set Priorities</h3>
<p>Up next is determining what’s <strong>critical, blocking, or simple</strong>. Items should be prioritized, and continuous feedback should be solicited from stakeholders. Project management tools can simplify the process and ensures items are linked to their dependencies and what needs to be done first is clear.</p>
<h3>6. Build Out Timelines</h3>
<p>Each task or initiative comes with its own level of effort. It’s critical to pull in the right technical people so to get an estimate around each effort. This should not be a long, drawn-out endeavor. Instead, it should be a <strong>quick activity</strong> that verifies how everyone’s on the same page. Often leadership has items it believes can be implemented quickly, but the team is of the mind it will take much longer to pull off.</p>
<h3>7. Devise A Budget</h3>
<p>Once there’s a clear view of what can be worked on, when it can be worked on, and how long it <em>might</em> take to implement, there’s enough information to <strong>fashion a budget</strong> for each item. Each item’s details should be worked through fully to get an as accurate as possible estimate for what’s needed. Budget decisions can also affect how urgent or necessary an item truly is. Some businesses find they’re better off putting something on the back burner or investing in a service that solves the same problem.</p>
<h3>8. Visualize The Roadmap</h3>
<p>Finally! Project implementation planning can now begin. Each project should be laid out and overlaid with the resources needed for project delivery. If working in an Agile software development environment, there’s no need to write out every detail of every feature. Simply <strong>focus on high-level component delivery</strong>, marketing dates, and other top-level deadlines. While building out the software, Agile teams can pull in features on a different schedule, but they should always work towards the company’s high-level schedule.</p>
<p>Many businesses find that creating a steering committee or oversight committee helps to see if initiatives are following a steady path or are veering off-course. These committees can be helpful in that they’re not involved in the day-to-day delivery of a product like development teams are.</p>
Doing What’s Best For The Journey <em>And</em> The Destination
<p>Rushed software development projects don’t save time or money, and they often <strong>negatively affect quality</strong> — the greater a company’s rush to launch, the greater the risk. Before starting any software development project, a business should take the time needed to develop a technology roadmap.</p>
<p>Decades of experience have taught there is a lot of truth in the adage that “prior planning prevents poor performance.” Moving too fast can cause enormous problems for software development, <a href="https://www.forbes.com/sites/forbestechcouncil/2020/03/31/14-common-reasons-software-projects-fail-and-how-to-avoid-them/?sh=479927a2798c">dooming them to failure</a>.</p>
<p>Creating a business technology roadmap gives enterprises the best of all worlds. It drives digital transformation while being agile enough to accommodate course changes. By the time the final destination or launch is reached, long-term value has been built into the product, roadblocks have been avoided, and other obstacles that often run other development projects into a ditch have been overcome.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Cache Merril)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a6b3fa2a-b540-45e6-9423-f299fc4b6835/develop-business-technology-roadmap.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Useful Figma Plugins And Tools]]></title>
            <link>https://smashingmagazine.com/2021/08/Figma-tools-plugins-resources/</link>
            <guid>https://smashingmagazine.com/2021/08/Figma-tools-plugins-resources/</guid>
            <pubDate>Thu, 12 Aug 2021 13:30:00 GMT</pubDate>
            <description><![CDATA[Useful Figma plugins that will help you fix all the little slowdowns and boost your productivity. From color management and image assets to SVG shapes and animation. That’s our new guide to Figma.]]></description>
            <content:encoded><![CDATA[<p>There are literally <a href="https://www.figma.com/community/explore?tab=plugins&amp;fuid=481297175489226426">thousands</a> of <strong>Figma plugins</strong> out there. Which ones do you use? How often do you use them? We’ve scouted for some of the <strong>useful ones</strong>, and we hope that the ones listed below will help you improve your workflow. Whether you’re just starting out with <a href="https://www.smashingmagazine.com/category/figma">Figma</a> or have been using it for a good while now, this post will give you just enough pointers to make your design process faster and smoother.</p>
<h3>Table of Contents</h3>
<p>Below you’ll find quick jumps to specific plugins and guides you may need. Scroll down for a general overview or <a href="#3d-views-and-perspectives-in-figma">skip the table of contents</a>. Also, take a look at the other </p>
<ul>
<li><a href="#3d-views-and-perspectives-in-figma">3D views</a></li>
<li><a href="#accessibility-in-figma">accessibility</a></li>
<li><a href="#animation-editor-in-figma">animation</a></li>
<li><a href="#annotations-made-easy-in-figma">annotations</a></li>
<li><a href="#auto-rename-frames-and-layers-in-figma">auto renaming</a></li>
<li><a href="#avatars-for-design-mockups-in-figma">avatars</a></li>
<li><a href="#brand-logos-embedding-in-figma">brand logos</a></li>
<li><a href="#charts-embedding-in-figma">charts</a></li>
<li><a href="#clean-figma-projects-before-handoff">clean up before handoff</a></li>
<li><a href="#clean-up-a-messy-frame-in-figma">group in a grid</a></li>
<li><a href="#content-placeholders-in-figma">content placeholders</a></li>
<li><a href="#color-palettes-in-figma">color palettes</a></li>
<li><a href="#curve-your-text-in-figma">curve your text</a></li>
<li><a href="#design-tokens-in-figma">design tokens</a></li>
<li><a href="#design-systems-with-figma">design systems</a></li>
<li><a href="#device-mockups-in-figma">device mock-ups</a></li>
<li><a href="#exporting-figma-to-html-css-react">exporting</a>, <a href="#exporting-figma-to-vue-js">exporting 2</a></li>
<li><a href="#perfect-file-structure-in-figma">file structure</a></li>
<li><a href="#fonts-preview-in-figma">fonts preview</a></li>
<li><a href="#google-fonts-pairings-for-figma">Google Fonts</a></li>
<li><a href="#copy-paste-and-sync-google-sheets-in-figma">Google Sheets sync</a></li>
<li><a href="#email-templates-in-figma">HTML email templates</a></li>
<li><a href="#icons-embedding-in-figma">icons</a></li>
<li><a href="#illustrations-embedding-in-figma">illustrations</a></li>
<li><a href="#interactive-components-and-variants-in-figma">interactive components</a></li>
<li><a href="#layout-grid-in-figma">grid</a></li>
<li><a href="#maps-embedding-in-figma">maps</a></li>
<li><a href="#name-conventions-in-figma">name conventions</a></li>
<li><a href="#notepad-for-quick-notes-in-figma">note-taking</a></li>
<li><a href="#patterns-in-your-figma-designs">patterns</a></li>
<li><a href="#photos-embedding-in-figma">photos</a></li>
<li><a href="#remove-backgrounds-in-figma">remove backgrounds</a></li>
<li><a href="#annotations-with-redlines-in-figma">redlines</a></li>
<li><a href="#responsive-design-and-testing-in-figma">responsive design and testing</a></li>
<li><a href="#reverse-the-order-of-layers">reverse the order</a></li>
<li><a href="#shapes-and-svg-in-figma">shapes and SVG</a></li>
<li><a href="#turn-your-designs-into-a-slide-deck">slide deck</a></li>
<li><a href="#table-generator-in-figma">table generator</a></li>
<li><a href="#templates-for-wayfinding-in-figma">wayfinding template</a></li>
<li><a href="#text-replacement-in-figma">text replacement</a></li>
<li><a href="#tracing-images-in-figma">tracing images</a></li>
<li><a href="#typographic-scale-in-figma">type scale</a></li>
<li><a href="#upload-images-from-mobile-in-figma">upload images from mobile</a></li>
<li><a href="#utility-plugins-in-figma">utilities</a></li>
<li><a href="#wireframing-and-prototyping-in-figma">wireframing and prototyping</a></li>
</ul>




3D Views and Perspectives in Figma
<p><a href="https://www.figma.com/community/plugin/769588393361258724/Vectary-3D-Elements">Vectary 3D Elements</a> makes eveything just a little bit more spatial. It’s one of the easier ways of adding 3D mockups to your designs, as well as add layers, wrapping and transforms. You can place your Figma design into a preferred 3D mockup or create your custom 3D element. You can take a closer look at the <a href="https://www.vectary.com/3d-modeling-news/figma-3D-vectary-plugin/">thorough guide and video about the plugin</a> to get started.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/db231a5e-a52d-4976-bd42-6088cdd21ff5/40-vectary-opt.png" /></p>
<p>Additionally, <a href="https://www.figma.com/community/plugin/908688914070762787/Figmockups">Figmockups</a> and <a href="https://www.figma.com/community/plugin/819335598581469537/Clay-Mockups-3D">Clay Mockups 3D</a> include a larger repository of 3D mock-ups, and <a href="https://www.figma.com/community/plugin/946020080871644950/Fig3D">Fig3D</a> converts objects into 3D models, and you can even group shapes and move them to 3D models together.</p>
Accessibility in Figma
<p>We all want to design better and inclusive experiences, but sometimes we might be forgetting about just the right color contrast, or a proper tab order. Luckily, there are plenty of <a href="https://www.figma.com/community/search?model_type=public_plugins&amp;q=accessibility">Figma plugins for accessibility</a>. </p>
<p><a href="https://www.figma.com/community/plugin/732603254453395948/Stark">Stark</a> is a full powerhouse on everything accessibility. It includes contrast checking and vision simulators, and it also allows you to <strong>reorder your sequences in focus order</strong>. It also displays the contrast ratio for any two objects that you select. Alternatively, you can also use <a href="https://www.figma.com/community/plugin/748533339900865323/Contrast">Contrast</a> as well.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d2fe7fe-ef8b-4b56-9d31-75cf660855bd/16-stark-opt.png" /></p>
<p>For accessible color palettes, <a href="https://www.figma.com/community/plugin/887066243068431786/Geenes">Geenes.app</a> is a reliable and sophisticated tool that allows you to create, maintain, sync and test color palettes and their variations. It’s really difficult to imagine any Figma setup that doesn’t have this plugin installed!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/970c4841-4dc7-4e4e-a340-dc82d99b9be0/geenes.jpg" /></p>
<p>If you need to test how a different font size will impact your layout, <a href="https://www.figma.com/community/plugin/892114953056389734/Text-Resizer---Accessibility-Checker">Text Resizer</a> helps you to see what exactly happens with increased or decreased font sizes.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c3631cae-aead-4263-83e3-7900d10cf3be/15-text-resizer-opt.png" /></p>
Animation Editor in Figma
<p>It shouldn’t be a big revelation that creating animations in Figma doesn’t really require sophisticated external tools like Adobe After Effects. With <a href="https://www.figma.com/community/plugin/733025261168520714/Figmotion">Figmotion</a>, you have an advanced animation tool right at your fingertips. You select a frame, add an animation, and then navigate the timeframe via a time handle — with the option to update easing, keyframes and anchor points.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/789e5167-9690-45a9-9b70-f69f881ac90d/22-figmotion-opt.png" /></p>
<p>If you’d like to dive a bit deeper into animation with Figma, a <a href="https://uxdesign.cc/figma-5-ways-to-add-animation-to-your-designs-e3c521aa8902">guide to adding animation to your designs in Figma</a> shows the entire workshop, and various options you have, step-by-step.</p>
Annotations Made Easy in Figma
<p>How do you usually handle annotations when working with Figma? We came across two annotation kits that make communication on a design a lot smoother and less prone to misunderstandings.</p>
<a href="https://www.figma.com/community/file/953682768192596304"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/24e2c8c1-9a47-c41b-739d-701721a17dfb.png" /></a>
<p>One of them is <a href="https://www.figma.com/community/file/806626024182535168">Annotation Kit 2.0</a>: A variety of sticky notes and measuring lines and tools make it easy to add context and annotations for your team members as you’re working.</p>
<p>The <a href="https://www.figma.com/community/file/953682768192596304">A11y Annotation Kit</a> focuses on accessibility considerations that designers might want to share with developers when handing off a design. Whether it’s <strong>adding callouts for elements</strong>, indicating focus order, or specifying keyboard interactions, the kit translates some of the often cryptic WCAG wording into easy-to-use stickers that you can use to highlight key parts of the page. All components are pre-filled with the correct CSS or HTML elements.</p>

Annotations With Redlines in Figma
<p>Annotating a design with detailed measurements and specs to help the developers in charge make sense of it all can be a time-consuming process. <a href="https://www.figma.com/community/plugin/781354942292031141/Redlines">Redlines</a> is here to change that. The plugin helps you quickly measure and plot dimensions of any selected object. All you need to do is select one or more layers, customize the redline settings, and choose a redline option to plot.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/caae7843-3675-471a-883e-b016c43aa7f4/redlines-opt.png" /></p>
Auto Rename Frames and Layers in Figma
<p>When it comes to organizing your design files, <a href="https://www.figma.com/community/plugin/731271836271143349/Rename-It">Rename it</a> has got your back. You can batch rename your frames and layers. You can also rename multiple layers at once by applying custom filters. If you want to convert the layer name case from uppercase to lowercase or even camel case, you can use <code>%*</code> with a combination of letters to convert.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/358f925a-e904-4f61-8362-4c4b8207ebf3/28-rename-it-opt.png" /></p>
Avatars for Design Mockups in Figma
<p>Sometimes we need to plug in a bit more than just text strings, and perhaps we need a few more options for our avatars. That’s where <a href="https://www.figma.com/community/plugin/769664006254845172/UI-Faces">UI Faces</a> can help.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/762370a7-e9f9-4181-b1f1-5d49386e86d7/38eccf33-9957-4732-a7dd-a9fc62330587-cover-1.jpg" /></p>
<p>All avatars are collected from various sources (they are always provided), and they can be filtered by age, gender and emotion, but of course you need to check the source and the license before actually using it. Additionally, take a look at <a href="https://www.figma.com/community/plugin/749945157855564842/User-Profile">User Profiles</a>.</p>
Brand Logos Embedding in Figma
<p>Perhaps you’d like to display some brand logos in reviews or testimonials, so how would you go around finding all the right logos? <a href="https://www.figma.com/community/plugin/733590967040604714/Brandfetch">BrandFetch</a> helps you easily insert brand assets into your design without leaving your Figma window. The plugin has a large library of (literally) millions of logos available at your fingertips. There is also a <a href="https://brandfetch.com/">searchable database</a> for you to find what you are looking for.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d769afdb-7373-4ba4-95d2-019431bc7678/33-brandfetch-opt.png" /></p>
Charts Embedding in Figma
<p>Your design process just got a bit less stressful. With <a href="https://www.figma.com/community/plugin/734590934750866002/Chart">Chart</a>, you can create various charts using real or random data easily. The plugin supports copy and paste from Excel, Google sheet, Numbers and it also can sync with Google Sheets and remote JSON. Alternatively, you can also import CSV and JSON files.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3672a742-0351-4339-9a44-76cdc2a7d645/34-chart-opt.png" /></p>
<p>Another plugin with a similar but slightly different title is the <a href="https://www.figma.com/community/plugin/731451122947612104/Charts">Charts Figma plugin</a>. With it, you can create dashboards and presentations or pretty much any other type of data visualization. The plugin generates editable charts in your Figma design from simple bar charts to more complex heatmaps. You can also find <a href="https://morioh.com/p/ca295bf3269e">a detailed guide on how to use the plugin</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e924b3a8-05b4-48de-b519-cfd3131d73f6/35-charts-opt.png" /></p>
Clean Up A Messy Frame in Figma
<p>Perhaps you’ve dropped a few dozens of icons in a frame, so how would you arrange them in a sensible order? Obviously, we wouldn’t do such a task manually. That’s where <a href="https://www.figma.com/community/plugin/795397421598343178/LilGrid">LilGrid</a> can help.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af77e9a0-51dc-463e-8c3c-b2bade6fc494/lilgrid.jpg" /></p>
<p>The little helper takes elements and arranges them into a grid automatically. You just need to select what you’d like to organize, hit "Organize to Grid" and the tool takes care of the rest, rearranging only top-level elements on your page. Obviously, there is a one-step undo if you need to restore the initial state.</p>
Clean Figma Projects Before Handoff
<p>Hidden layers, single-layer groups, X and Y positions that aren’t quite pixel-perfect — the <a href="https://www.figma.com/community/plugin/767379019764649932/Clean-Document">Clean Document</a> plugin takes care of little flaws like these so you don’t have to. A great little helper to polish up your Figma project before handoff.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c3267a43-28df-4337-9dfc-33b0a28e3c2e/clean-document-opt.png" /></p>
Content Placeholders in Figma
<p>With the <a href="https://www.figma.com/community/plugin/731627216655469013">Content Reel</a> plugin, you can design layouts quickly and easily by using text strings, images, icons and avatars from the same tool. You can search or browse through the already provided set of data, then add them to your designs or create from scratch.</p>
<p>The plugin also lets you create your own text strings, upload up to 20 images, and make your workflow easier and smoother by pinning your frequently used content on your home screen.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0aca40a5-6298-4252-98c1-1ff02d88110d/43-content-reel-opt.png" /></p>
<p>You can also run a <a href="https://www.figma.com/community/plugin/742770131320902341/Random-Name-Generator">Random Name Generator</a> to populate random names into your mock-up.</p>
Color Palettes in Figma
<p>Understanding gradients, palettes, color theory and psychology are essential to creating pleasant visual designs. Figma has plenty of plugins that take a bulk of this work off your shoulders.</p>
<p><a href="https://www.figma.com/community/plugin/740832935938649295">Color Palette</a> provides you with a perfect color palette for your projects. You can choose from a huge library of palettes or search for a specific color code, name or number to apply to your design.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bf94b005-dc32-4a37-a207-8873e5d6e4dd/46-color-palettes-opt.png" /></p>
<p><a href="https://www.figma.com/community/plugin/742549221432366731/Palette">Palette</a> by Dustin Mierau is useful when you want to generate a color palette from images. This plugin uses machine learning to help you generate a color palette that will best fit your project. You can select <strong>up to five shapes</strong> and the plugin will help fill in the shapes with colors fitting for your palette.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/50cd23fd-5f88-468c-93b9-ff85d43a624d/47-palette-opt.png" /></p>
<p>When designing around an image, making the right color choice is easier with the <a href="https://www.figma.com/community/plugin/731841207668879837">Image Palette plugin</a>. It uses any image that you select and generates a color palette from it by selecting the five most prominent colors from the image using a median cut algorithm with a high level of accuracy.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3406d40e-a6bc-442b-bf53-97d882e66a8f/64-image-palette-opt.png" /></p>
<p>With <a href="https://www.figma.com/community/plugin/744909029427810418">UI Gradients</a> and <a href="https://www.figma.com/community/plugin/802147585857776440">Web Gradients</a>, you do not have to create or select gradients one at a time, but instead, you can add several gradients to groups, texts and frames with just a single click.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/055a4b27-5b6e-462a-b2f0-95a955dc4156/48-ui-gradients-opt.png" /></p>
Curve Your Text in Figma
<p>With the <a href="https://www.figma.com/community/plugin/762070688792833472">Arc plugin</a>, you can curve your text upwards, downwards, or even into a circle. The plugin adds an additional toolbar for controlling the bending — it’s another question though how developers would implement it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/07eef7ec-5a9b-49eb-ad8b-680b584ec8db/65-arc-opt.png" /></p>
Design Tokens in Figma
<p>Another Figma plugin you might want to add to your toolkit comes from Lukas Oppermann. If you’re tired of the hassle that working with design tokens usually brings along, the <a href="https://www.figma.com/community/plugin/888356646278934516/Design-Tokens">Design Token</a> plugin does the job for you: styles and tokens are exported and sent to a GitHub repository and tokens are automatically converted using style dictionary. No need for you to leave Figma. A real timesaver.</p>

<a href="https://www.figma.com/community/plugin/888356646278934516/Design-Tokens"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/4c41ca56-32a3-fa63-a013-8dad5d9f4798.png" /></a>

Design Systems With Figma
<p>Imagine you’re making a change in your project’s design system, and it’s immediately cascading through your Figma project. The <a href="https://www.toolabs.com/plugins/figma/">Design System Manager</a> plugin for Figma makes it possible.</p>
<a href="https://www.toolabs.com/plugins/figma/"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/03206b53-80cd-7920-9037-8fa7cfdb47ca.png" /></a>
<p>The plugin lets you define or update <strong>themeable design tokens</strong> in one single panel, manage selected layers grouped by style, and populate a design with real text or image content. To bring your project to life, you can programatically access the design tokens from the GraphQL API or you export them in the format of your choice (CSS, Less, Sass, JSON, YAML, Js, Swift, and Android are supported). A smart solution that makes dealing with design systems a lot more practical.</p>

Device Mockups in Figma
<p>The quality of your presentation as a designer is almost as important as the design itself. With over 700 device mock-ups scenes, <a href="https://www.figma.com/community/plugin/786250770157843670/Mockuuups-Studio">Mockuuups Studio</a> helps you create mockups for products, visual content, or marketing materials with ease and efficiency. You can watch a thorough <a href="https://www.youtube.com/watch?v=EwUk6NeHkMA">walkthrough video on how to use it</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a8feca0-20e4-45cc-858b-8d5384a8f8af/44-mockuuups-opt.png" /></p>
<p>Usually mock-ups only look nicer when a device is displayed in a human's hand, and that's where <a href="https://www.figma.com/community/plugin/951652764251042235/All-Hands-Mockup-Generator-%7C-MetaLab-x-Nappy">All hands mockup generator</a> can help. It includes a large and diverse collection of hands of all shades, shapes and sizes. Select a frame, choose a hand and your designs will be imported into the mockup, all within Figma. You can review the <a href="https://nappy.co/all-hands">full collection of hands</a> as well.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5c94e9c0-7f72-4504-8068-66ec94c185a7/70-hands-opt.png" /></p>
Exporting Figma to HTML, CSS, React
<p><a href="https://www.figma.com/community/plugin/747985167520967365/Figma-to-HTML%2C-CSS%2C-React-%26-more!">HTML &lt;&gt; Figma</a> allows you to export your Figma designs to an HTML prototype. You can select individual layers, or enter an URL you'd like to import, and the plugin will import actual styles immediately. There’s also a <a href="https://chrome.google.com/webstore/detail/html-to-figma/efjcmgblfpkhbjpkpopkgeomfkokpaim/related">Chrome extension</a> that captures a web page and imports it as editable Figma layers. In the background, it generates a <code>page.builder.json</code> file which has all the CSS properties of the current page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/62ff4e5a-41ba-41d3-9ff1-7be3726b31d5/2-figma-to-html-css-react-opt.png" /></p>
<p>There are some limitations though as not all element types and CSS properties are supported. Also, it's worth keeping in mind that all fonts have to be uploaded to Figma or fallback fonts will be used. Still, the plugin is open-source, has a large community around it, and the creators are actively maintaining it.</p>
<p>Alternatively, there is also an <a href="https://www.figma.com/community/plugin/753195897635985866/HtmlGenerator">HTML Generator</a> that supports Google Fonts, has dedicated export options and generates HTML, CSS, image assets and SCSS code and <a href="https://www.figma.com/community/plugin/851183094275736358/Figma-to-HTML">Figma To HTML</a>. And if you need something more sophisticated, <a href="https://www.figma.com/community/plugin/857346721138427857/Anima---Prototype-%26-export-HTML-%26-React-code">Anima</a> creates prototypes and converts them to HTML, CSS and React code — without any dependencies. In fact, you can create interactive prototypes, responsive designs and reusable React components out of the box. (The plugin has a free tier, but you will need to sign up for the <strong>$31</strong> tier to export the code).  </p>
Exporting Figma to Vue.js
<p>If you want to remove some of the friction that turning a Figma prototype into a working application can bring along, Klaus Schaefer’s open-source plugin <a href="https://github.com/KlausSchaefers/figma-low-code">Figma-Low-Code</a> is for you. It lets you use Figma designs directly in <strong>Vue.js applications</strong>.</p>
<a href="https://github.com/KlausSchaefers/figma-low-code"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/154d7e25-472b-c9a7-1a3a-dbc060f548cf.png" /></a>
<p>This low-code approach does not only <strong>reduce the hand-off time</strong> between designers and developers as well as the amount of front-end code, but also ensures that the Figma design stays the single source of truth. The idea is that you design the prototype in Figma, then use the plugin to add data and method binding. Once you’ve done that, you can use your favorite code editor to implement business logic, and — ta-daa! — your application is ready for deployment. Changes you make to the Figma file are automatically propagated to the web app.</p>

Email Templates in Figma
<p>There aren't many people who are very fond of building HTML Emails, but when designing one, we better use some handy little plugins to make the developer's work a little bit easier. In fact, there is a <a href="https://blog.prototypr.io/designing-emails-for-unacademy-using-figma-power-of-nocode-eceee9daf5c6">detailed guide on designing emails in Figma</a> that covers the entire workflow of shipping brand new email designs from scratch.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eee9c20b-25c3-4dec-8257-e6a29fa001d4/emails-example-1.jpg" /></p>
<p>If you are looking for <strong>responsive, production-ready HTML emails</strong> for Figma, <a href="https://www.figma.com/community/plugin/910671699871076601/Emailify-HTML-Email-Builder">Emailify</a> will give you dozens of configurable content modules, allow you to customize your text, images, styles and auto-layout settings amongst other features, with no other APIs, apps, or websites required.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dee43091-9ae4-4e00-8ec0-f8d4f4330275/20-emailify-opt.png" /></p>
<p>If you aren’t frightened of the idea of HTML Email code being generated for you, <a href="https://www.figma.com/community/file/975054125642915558">Email Templates &amp; Code</a> works with the <a href="https://www.figma.com/community/plugin/751436700152214815/Marka-Email-Generator">Marka plugin</a> to actually produce HTML code. You can have customizable emails with designs for newsletters, marketing email and blog-style templates. Also, there are plenty of customizable designs there as well.</p>
Perfect File Structure in Figma
<p>We all know that it can be hard to think of Figma file structure when you’re completely absorbed in getting all those little UI details right in the design you’re currently working on. However, if you keep file structure in mind right from the very beginning, you can ensure that handoff will be buttery smooth. And you’ll save yourself a lot of cleaning up work once the deadline comes closer. Luis Ouriach published a helpful <a href="https://www.figma.com/community/file/1004041613962064465">best-practice guide for structuring your frames in Figma</a> — with consistent naming conventions, descriptive components, and consistent spacing.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/013a76cf-6973-4d28-819d-11f8ec8eb285/figma-file-structure-opt.png" /></p>
Fonts Preview in Figma
<p>Switching between typefaces manually can be a little bit tiring, so obviously there are Figma helpers for that. <a href="https://www.figma.com/community/plugin/739922281164562258/Better-Font-Picker">Better Font Picker</a> and <a href="https://www.figma.com/community/plugin/890494567122693015">Font Preview</a> help you select fonts with a preview.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2fdc7191-324c-4a75-9c9a-64de903027d5/68-font-preview-opt.png" /></p>
Google Fonts Pairings for Figma
<p>If you use Google Fonts, <a href="https://www.figma.com/community/file/843916328104333682">Google Font Pairings</a> can come in handy, too. You can get started at <a href="https://www.figma.com/google-fonts/">Figma’s Google Fonts page</a>. Each of the fonts comes with a tiny type specimen to get a decent preview of the style and feel of the typefaces used.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ab53c751-f000-4926-a942-a57aaa139b85/69-google-fonts-opt.png" /></p>
Icons Embedding in Figma
<p>Having a wide collection of every possible icon out there in one place is arguably one of the best plugin ideas ever. Figma has plugins that contain icon sets in several styles for any type of design project.</p>
<p><a href="https://www.figma.com/community/plugin/791103617505812222">Icons8</a> provides you with a large collection of consistent icons without having to leave your Figma board. It has a library of 120,000+ icons with over 32 popular design styles, searchable and categorized collection, all available in PNG or SVG.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c01d1855-2ad5-4d51-ab3e-5f9a9d29517f/54-icons8-opt.png" /></p>
<p><a href="https://www.figma.com/community/plugin/744098704933821409/Iconscout">Iconscout</a> allows you to insert millions of high-quality icons, illustrations, and 3D into Figma. In a designer mode, you can pick your favorite designer and photographer and access their resources directly without searching in the entire library.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/559a9343-3259-471b-a09f-fe650b2cd1d7/60-iconscout-opt.png" /></p>
Illustrations Embedding in Figma
<p>Illustrate with a vector software, then import it into your design, right? You don’t have to do it all the time as Figma comes with plenty of illustration plugins.</p>
<p>With <a href="https://www.figma.com/community/plugin/838959511417581040">Blush</a>, you can create or <strong>mix-and-match illustrations</strong> customized to your projects. You can also generate random compositions; plus, new illustrations are being added every week. SVGs and high-resolution images are available on a paid plan.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b3770c92-56c8-4b11-b9a6-7572f5d5f560/51-blush-opt.png" /></p>
<p>For lovely icons and illustrations, take a closer look at the <a href="https://www.figma.com/community/plugin/781441863578182316/Illustrations">Free Popular Illustration library</a>, which includes high quality free illustrations released under a Creative Commons license.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b5847c69-f0eb-4c64-8808-6725a5dd327e/87f2b2c5-ea2f-4d8f-9bf8-e6d6cf749603-cover.jpg" /></p>
<p>If you want to add a human illustration to your website, <a href="https://www.figma.com/community/plugin/739503328703046360">Humaaans</a> provides you with already pre-made illustrations of funky and hip people. You can browse from a gallery or search for a specific niche or category.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/60fdf543-356f-4cae-901b-c4b17a3783aa/52-humaaans-opt.png" /></p>
<p>Additionally, you can use <a href="https://www.figma.com/community/plugin/865232148477039928">Storyset</a> with 100s of illustrated concepts available as off-the-shelf illustrations. You can also edit the styles, colors, and background. Plus, you can also animate the illustrations.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d5a24a2b-1f1a-4cac-a3fb-0ead4c1f0db0/53-storyset-opt.png" /></p>
Copy-Paste And Sync Google Sheets in Figma
<p>Quite often, copy-pasting data from Google Docs into Figma is quite time-consuming and frustrating. <a href="https://www.figma.com/community/plugin/735770583268406934/Google-Sheets-Sync">Google Sheet</a> is a handy plugin that speeds up the import of your Google Sheets to Figma. Once you install it, you can fetch and sync data from your Google Sheets. There is also a <a href="https://www.figma.com/community/plugin/735770583268406934/Google-Sheets-Sync">documentation</a> with all the fine details on how to set up a proper sheet structure and how Figma layers should be named to avoid extra work — as well as some examples for you to get started.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/373a5098-ba19-434a-9907-aea38c7b8e4f/27-google-sheet-opt.png" /></p>
Interactive Components And Variants in Figma
<p>A few weeks ago, Figma launched a beta version of their <strong>Interactive Components</strong> feature that allows you to create interactive elements that automatically switch between variants (a button changing from hover to a pressed state, for example). What might seem like a little detail, turns out to reduce the amount of frames and connections you usually need to prototype input fields like checkboxes or toggles tremendously.</p>
<a href="https://www.steveruiz.me/posts/it-wasnt-made-to-do-that"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/9a3b6740-e49b-4522-aea6-6bcc4e40de42.png" /></a>
<p>To dive in deeper into the new feature, Steve Ruiz summarized <a href="https://www.steveruiz.me/posts/it-wasnt-made-to-do-that">what it is capable of</a> and what can be achieved with it if you think outside the box (a Minesweeper or Battleship game running in Figma, anyone?). Another great read: Rodrigo Osornio <a href="https://bootcamp.uxdesign.cc/designing-micro-interactions-with-figma-interactive-components-23a02d10be6b">explored the advantages and possibilities</a> which Interactive Components brings along for <strong>micro interactions</strong> such as input fields, loaders, different kinds of buttons, dropdowns, and subscribe components.</p>
<p>Speaking of components: Luke Cardoni shows how he managed to create a single, content-adaptable, fully customizable, and easily maintainable <a href="https://uxdesign.cc/one-variant-to-rule-them-all-92e685bae918">component with 3,360 variants</a> that serves every possible combination of settings for text input. A mammoth project that illustrates the benefits of Figma’s Variants feature.</p>

Layout Grid in Figma
<p>We often rely on grids to create design systems where every single interface component is properly aligned. So it shouldn’t come as a big surprise that there is no shortage in layout grid plugins for Figma. <a href="https://www.figma.com/community/plugin/841313026689642442/Grids-Generator">Grids Generator</a> allows you to apply a family of various grid style configurations to layouts. <a href="https://www.figma.com/community/plugin/739342962452731553/Guide-Mate">Guide Mate</a> is slightly more flexible: it provides <strong>shortcuts for commonly used grids</strong> and a way to add a custom grid should you need it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c550238f-25d2-4e03-966c-67315c843ef4/screenshot-2021-08-11-at-16.22" /></p>
<p>Once you have a grid in place, you might want to snap your components to it. <a href="https://www.figma.com/community/plugin/773875667263247070/Snap-to-Grid">Snap to Grid</a> not only creates a custom grid, but also <strong>arranges elements on the grid</strong> by organizing each object automatically. When the plugin is running, the canvas elements will snap to the grid when moving and scaling. Andreslav Koslov shows how this plugin works <a href="http://twitter.com/AndreslavKozlov/status/1198003232137764864">in a 3-min video</a>. You can also use keyboard shortcuts Alt + Cmd + P to snap all objects to grid when Figma is online.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/58371a48-421f-47bf-9464-58878ec9aa90/11-snap-to-grid-opt.png" /></p>
Maps Embedding in Figma
<p>Downloading maps for your project does not have to be a long process because <a href="https://www.figma.com/community/plugin/736458162635847353/Mapsicle">Mapsicle</a> by Chris Arvin can help you to easily insert maps into your Figma designs. The plugin allows you to set your map to a particular location, latitude and longitude which you want for your designs, and voilà, it adds just the right snapshot into your design.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21b68eaa-e117-41c8-b04a-194ad6fdfe52/32-mapsicle-opt.png" /></p>
<p>However, if you needed a SVG map of a particular country or region for your design, the <a href="https://www.figma.com/community/plugin/777954172157933782">Vector Maps Plugin</a> can turn out to be very helpful. You can literally browse for countries or regions and insert them directly into your Figma design with  single click. The maps can also be downloaded as SVG or PDF via <a href="https://vector.mapcraft.biz/constructor/">https://vector.mapcraft.biz/constructor/</a>.</p>
Name Conventions in Figma
<p>We’ve all been there: When you’re in a rush, naming conventions are a detail that often doesn’t get the attention it deserves. And before you notice it, you end up with a mess of different formatting styles for your page, frame, component, and layer names.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f3a1193d-b4cb-4250-9c86-3f96721b8a17/namespaces-opt.png" /></p>
<p>The <a href="https://www.figma.com/community/plugin/739106292828562948/namespaces">Namespaces</a> plugin puts an end to the chaos and neatly names your assets following a scheme that makes sense. Also great to unify different naming conventions when working on a shared file together with others.</p>
<p>Of course we all want to be well-organized, but sometimes we might be just a little bit distracting when naming our frames. That's when <a href="https://www.figma.com/community/plugin/818724242728722680/Figma-Exporter">Figma Exporter</a> can help. It lets you select the naming convention you want for your exported files: kebab-case, snake_case or camelCase. The rest will be done automatically!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5218e7c7-a61f-4695-936a-37b10090e4a0/5864f0d5-42fa-4f0b-bc80-c3fabcee7b01-cover.jpg" /></p>
Notepad for Quick Notes in Figma
<p>If you ever wanted to have a dedicated space in Figma to take notes, ideas and comments while working, <a href="https://www.figma.com/community/plugin/739527655081183968/Notepad">Notepad</a> by Dustin Mierau is probably what you were looking for. Notes are automatically saved with your documents and are available to other editors. In a way, you can use Notepad as a shared space for documenting your project with your team. As a side note, you need to reopen Notes to see changes made by other editors if you are working collaboratively.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7383896a-bcf9-4a82-b58b-15bc88f30bc4/29-notepad-opt.png" /></p>
Patterns In Your Figma Designs
<p>Everything is slightly better with patterns! While creating basic patterns is usually quite straightforward, creating custom patterns might be a tricky and intense process, and that’s where Figma’s patterns plug-ins save the day.</p>
<p>The <a href="https://www.figma.com/community/plugin/740556241021336678">Pattern Hero</a> plugin makes inserts your custom elements into a grid and repeats them to form a pattern. You can repeat or shuffle the patterns, create instances and also work with several templates. If you need to make a pattern, this is a good option to use.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc4cdf79-d99b-4b74-8619-fccaf116466a/41-pattern-hero-opt.png" /></p>
<p>Alternatively, <a href="https://www.figma.com/community/plugin/743134103711120154">Hero Patterns</a> is a collection of SVG background patterns. To create a unique set for yourself, you can mix and match different patterns to come up with a desirable pattern.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af942f92-9027-4ed9-a370-c62c71941be6/42-hero-patterns-opt.png" /></p>
<p>There are <a href="https://www.figma.com/community/search?model_type=public_plugins&amp;q=pattern">way more patterns plugins in Figma</a>, so you can get anything from <a href="https://www.figma.com/community/plugin/732876968584257019/Confetti">confetti patterns</a> to <a href="https://www.figma.com/community/plugin/754418010908848797/Looper">trippy generated graphics</a> and <a href="https://www.figma.com/community/plugin/816329785694858088/Geometric">geometric shapes</a>.</p>
<p>If you need to set up some sort of a dot grid pattern in your mock-up, <a href="https://www.figma.com/community/plugin/795474715778185230/Dot-Grid">Dot Grid</a> will automate the task for you. With the tool, you can easily generate beautiful dot grids to serve as guides throughout your design process on Figma with customizable grid width, grid height, dot size, gap, and dot colors.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e02bffd9-c31e-43f9-8e3b-167578e62303/10-dot-grid-opt.png" /></p>
Photos Embedding in Figma
<p>You don’t have to leave Figma to get custom photographic assets for your project. Of course, <a href="https://www.figma.com/community/plugin/738454987945972471">Unsplash</a> is everyone’s go-to page for high-res images and now it is a plugin on Figma. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3d8430f-4c43-4484-8293-3f77033749df/61-unsplash-opt.png" /></p>
Remove Backgrounds in Figma
<p><a href="https://www.figma.com/community/plugin/738992712906748191">Remove backgrounds</a> allows you to pretty much do just that: remove backgrounds of images easily. No need to manually edit the background of images before adding them to your design. A caveat: you will need a <a href="https://www.remove.bg/">remove.bg</a> account to use the plugin.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93952d7b-e474-43d4-9e07-53d877a06196/62-removebg-opt.png" /></p>
Responsive Design And Testing in Figma
<p>Not many people resize boxes for living, but as designers, that’s pretty much what we have to do every now and again. In Figma, <a href="https://www.figma.com/community/plugin/824289601590456356/Breakpoints">Breakpoints</a> is one of the many plugins for testing responsive design. It provides a resizable instance of a frame, and works without the plugin window — so everyone on your team can explore the responsive behavior of the frame without having the plugin installed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d3ec0a-687c-48b1-9c8b-6cd37e4d9c6f/8-breakpoints-opt.png" /></p>
<p>Alternatively, you can also use <a href="https://www.figma.com/community/plugin/743654854885744527/Responsify">Responsify</a>, which allows you to select any frame and set custom device sizes, so you can preview what the website or app will look in that particular view.  <a href="https://www.figma.com/community/plugin/840727678445998968/Responsive">Responsive</a> is similar, and it allows you to test specific edge cases of your responsive layout by clicking on the input frames in the plugin. Nothing groundbreaking, but handy!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d8797e1a-3a94-441d-a66d-cac214d48868/5-responsify-opt.png" /></p>
Reverse The Order Of Layers
<p>Automating small, tedious actions is always a good thing to save you precious time and stay focused on what really matters. When it comes to reversing the order of multiple layers, the <a href="https://www.figma.com/community/plugin/738853407874474111/Reverse-Layer-Order">Reverse Layer Order</a> plugin could become your new best friend. Just as its name implies, it will reverse the order of two or more layers within the same parent. All you need to do is select them and run the plugin.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/665728c1-299b-4eb1-8931-db829b112d5e/reverse-layer-order-opt.png" /></p>
Shapes And SVG in Figma
<p>Creating basic shapes is easy. However, creating complex shapes might take valuable time that you can’t really afford to lose when working on a project. Figma’s plugins all around shapes and SVG can make your work easier, with a variety of shapes to choose from.</p>
<p><a href="https://www.figma.com/community/plugin/739208439270091369/Blobs">Blobs</a> helps you improve the aesthetics of your design. With blobs, you can create and add organic shapes into your Figma designs using two parameters: complexity and contrast. You can also control how unique a shape is as well as the number of points it has.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/db9d348b-c791-4287-8d29-6b5a3fcad712/36-blobs-opt.png" /></p>
<p>Need waves? The <a href="https://www.figma.com/community/plugin/745619465174154496/Get-Waves">Get Waves</a> plugin helps you generate SVG wave patterns for your designs. It can be quite useful when working with charts, graphs or designs with crests and troughs. You just have to choose a curve, adjust the complexity and randomize.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eecae64f-430a-4e46-a3a2-5bfe468360f8/37-get-waves-opt.png" /></p>
<p>If you are trying to create a wave and curve pattern for your design, the <a href="https://www.figma.com/community/plugin/745971189153303901/Wave-%26-%D0%A1urve">Wave &amp; Curve</a> plugin by Andreslav Kozlov can help you generate waves in various patterns. You can also choose the direction of the waves either <code>Top</code> and <code>Bottom</code>, <code>Top</code>, or <code>Bottom</code>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f234639-34c8-4fa8-93f8-bfe3e399d93f/38-wave-curve-opt.png" /></p>
<p>Finally, <a href="https://www.figma.com/community/plugin/751576264585242935/To-Path">To Path</a> helps you put things on a path and can work with texts, shapes, objects, and components. To curve text around a path (a circle, for example), you can install the plugin, then remove circle opacity, select text, and circle, and then use the plugin to link both objects and watch the magic happen.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7490582a-fa4a-4f09-815c-94588989ca38/39-to-path-opt.png" /></p>
<p>Some other features of the plugin include repeating shapes along any path, editing the original shape or text and reflecting changes in real-time (while the plugin is open), and editing the path afterwards, and again, watch the linked objects change.</p>
Turn Your Designs Into A Slide Deck
<p>So you have a Figma design that you want to present to a client, your boss, or your team? <a href="https://www.figma.com/community/plugin/838925615018625519/Pitchdeck-Presentation-Studio">Pitchdeck</a> is here to help you do just that. The plugin turns your design into animated slide decks or, if you prefer, exports it for PowerPoint, Keynote, or Google. PDF export is also supported, as well as a number of handy features like webcam overlay, video embeds, speaker notes, and more. It’s even possible to record your presentation as a video with microphone audio.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e252f8c8-de66-4746-b367-b3b08968df92/pitchdeck-opt.png" /></p>
Table Generator in Figma
<p>Although designing data tables can be quite time-consuming, the <a href="https://www.figma.com/community/plugin/735922920471082658/Table-Generator">Table Generator</a> plugin makes this easier by helping you automate dealing with tabular data. All you need for table generation is to copy and paste the data (currently in CSV format).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a4221c8-35b1-4545-9561-12fe84087ae6/6681a4b9-c319-4421-8364-6d2654cf6e53-cover.jpg" /></p>
<p>Alternatively, you can also use <a href="https://www.figma.com/community/plugin/781208362060364436/Table-Paste">Table-Paste</a> to paste data from an Excel spreadsheets into styled table rows, or <a href="https://www.figma.com/community/plugin/885838970710285271/Table-Creator">Table-Creator</a> to create resizabled custom-styled tables. A little bonus: you can also update all tables anytime your design changes.</p>
Templates For Wayfinding in Figma
<p>First, there’s only one person on the Figma project board, then another one joins in, and soon you’ll see the cursors of designers, developers, project managers, content designers, researchers, and many others spread across the screen. You’ve probably experienced this scenario before. But did all of these people actually <strong>find the information they needed</strong>? Did they have to dig around or was it easily discoverable?</p>
<a href="https://ux.shopify.com/a-template-for-figma-wayfinding-2b3d393f9771"><img src="https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/9eda3e8c-f17e-c80a-d200-40a7778fa08e.png" /></a>
<p>The team at Shopify took these questions as an occasion to <a href="https://ux.shopify.com/a-template-for-figma-wayfinding-2b3d393f9771">rethink the structure of their Figma playground</a> and ensure it meets the diverse needs of teams across the company. Apart from sharing the process in an article, they distilled their findings into a <a href="https://www.figma.com/community/file/938084055059390892">project index template</a> that you can download and use right away. A handy little helper to give everyone involved in <em>your</em> project the context they need, when they need it.</p>

Text Replacement in Figma
<p>Sometimes you’re in a situation where you need to replace a piece of text in your Figma mockup. No big deal — well, unless that piece of text appears in multiple instances across the design. A fantastic little time-saver for those occasions is <a href="https://www.figma.com/community/plugin/731260490045684148/Content-Buddy">Content Buddy</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/178395d2-a8e0-4a69-898e-4488dff4e9d5/content-buddy-opt.png" /></p>
<p>Instead of having to look up all instances, components, frames, and groups one by one and changing the text manually, Content Buddy does the heavy lifting for you: It provides you with a list of each unique text content in your design so that you only need to select the items you want to replace and enter the new replacement text — once.</p>
Tracing Images in Figma
<p>Convert any white and black bitmap images to vectors using the <a href="https://www.figma.com/community/plugin/735707089415755407">Image Tracer plugin</a>. This plugin saves you the time you’d manually trace with the pen tool or use Illustrator to convert to vectors. On running the plugin, you will see a console on the window with options to help you make edits to your taste.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2408ff8f-89fd-4c15-8f3f-b6821460dd71/63-image-tracer-opt.png" /></p>
Typographic Scale in Figma
<p>You’ve been there before. You need to look up the right values for a typographic scale of your design, but you don't have them at hand? Marvin Bruns’ <a href="https://www.figma.com/community/plugin/739825414752646970">Typescales</a> and <a href="https://www.figma.com/community/plugin/892543384437155629/Scaaale">Scaale</a> allow you to generate harmonious, <strong>responsive typographic scales</strong>, based on your choice of ratio — without leaving Figma. As always, you start with a <code>base-value</code>, font-size increments and decrements from that size, and a multiplier. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/abd3f3dd-74a2-4192-9dcb-76110ec9fb63/typescale-opt.jpg" /></p>
<p>Ah, you need to be able to set a custom scale, too? Sam Smith’s <a href="https://www.figma.com/community/plugin/967802396210455992/Typescale">Typescale</a> does that for you (yep, it’s a different plugin with a similar name). Also, <a href="https://www.figma.com/community/plugin/804843548882105498/Textyles">Textyles</a> generates text styles with a font preview, and if you need to generate vertical rhythm by using a modular type scale, grid, and auto-layout, <a href="https://www.figma.com/community/plugin/946636305972061170/Heading-Helper">Heading-Helper</a> has got your back, too.</p>
<p>Finally, <a href="https://www.figma.com/community/plugin/741231992144144738">Font Scale</a> is helpful when you want to keep the proportions between your body text and headings the same, whether it’s on-screen or paper. Jeremy Church’s <a href="http://www.type-scale.com/">Type-Scale</a> is an inspiration for this plugin.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3459400b-6a77-44a4-b408-18f2f9848713/66-font-scale-opt.png" /></p>
Upload Images From Mobile in Figma
<p>We all have been in the situation before where you need to place something on Figma, perhaps just as a sketch or brainstorming session, so you would take a picture, send it to yourself via email, and then paste it in. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7832c4d-939e-49ab-a0d3-2dc2c14970b8/31-mobile-upload-opt.png" /></p>
<p>With <a href="https://www.figma.com/community/plugin/775445260035815307/Mobile-Upload">Mobile upload</a> it’s no longer necessary. With the plugin, you can take a picture with your phone upload it directly to Figma. This is quite useful for notebook sketches and brainstorming sessions.</p>
Utility Plugins in Figma
<p>Have you ever lost resolution when bringing a large image into Figma? Or been frustrated at not being able to input a <strong>spacing value for your layers</strong>? Or maybe you’ve been unable to resize a frame independently of its contents? Yuan Qing Lim, product designer at Shopify, developed <a href="https://ux.shopify.com/the-figma-plugins-that-make-me-a-better-designer-28eb844b0506">nine useful plugins</a> that solve issues like these.</p>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c73a2ac2-e2e7-477f-a76b-96b05dd93c46/1-axeq9x0eu0ety9cxdpsr9a.jpg" /></p>
<p>With the plugins, you can move layers with pixel precision, reisze frames without also resizing their contents, copy a component, insert unblurred large images (beyond the 4096 pixels limitation) and make quick and precise selections. </p>
<p>And if you need a bit more guidance or inspiration, Louis Ouriach has created a <a href="https://www.figma.com/community/file/1004041613962064465">best practice advice</a> on how to structure frames in your files to ensure handoff is as smooth as butter.</p>
Wireframing and Prototyping in Figma
<p>When you are just planning your design, it might come in handy to use wireframing tools to just get a sense of what you are going to design in the first place.</p>
<p>For wireframing in Figma, no conversation will escape the mention of <a href="https://www.figma.com/community/plugin/733902567457592893/Autoflow">AutoFlow</a>. The plugin allows you to select objects and it will automatically draw an arrow to connect them. A great little helper to display and explain ideas!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/426585cf-1a53-43da-80c2-ebd26471247d/25-autoflow-opt.png" /></p>
<p><a href="https://www.figma.com/community/plugin/742764242781786818/Wireframe">Wireframe</a> provides a large set of wireframes, for user flow, prototypes and basic structures. The wireframe components are divided into categories. All files are SVGs, so you can easily edit them for your needs.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/251d723c-da08-4c4e-8eed-b6fab7c0ef89/23-wireframe-opt.png" /></p>
<p>However, sometimes after creating a design, you might want to go back to the wireframe to iterate a bit more, or perhaps create a slightly different flow for your design. <a href="https://www.figma.com/community/plugin/764471577604277919/Wire-Box">Wire Box</a> can be useful for these situtions. It converts your designs from high-fidelity mock-ups to low-fidelity mock-ups, so you can then focus on the overall architecture rather than the fine details of the UI.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f24ca29-7df2-4e88-a22b-9004bbfb063e/24-wirebox-opt.png" /></p>
<p>Finally, you can also use <a href="https://www.figma.com/community/plugin/876352455198080607/oblique">oblique</a> for creating quick shadows, 3D depth and visual perspective, and <a href="https://www.figma.com/community/plugin/787660853629435276/Wireframer">Wireframer Figma plugin</a> to generate placeholder text for wireframes with just one click.</p>
Conclusion
<p>In this article, we explored a myriad of Figma tools, plugins and resources that you can use to make your design process easier. There is still a lot that we have not covered but you can explore them on the Figma community <a href="https://www.figma.com/community/explore">here</a> or share your favorite ones in the comments below!</p>
Further Resources
<ul>
<li><a href="https://figmaelements.com/">Free Figma Resources, Tools and Templates</a></li>
<li><a href="https://www.smashingmagazine.com/2020/10/speed-up-workflow-figma-plugins/">Speed Up Workflow With Figma Plugins</a></li>
<li><a href="https://twitter.com/smashingmag/status/1315643381372997634">Community recommendations for Figma Plugins</a></li>
</ul>
Other Smashing Guides
<p>Wow, you’ve made it so far! Well, if you are looking for similar posts, please check other round-ups we’ve published earlier:</p>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/06/useful-frontend-boilerplates-starter-kits/">Front-end Boilerplates</a></li>
<li><a href="https://www.smashingmagazine.com/2021/03/css-auditing-tools/">CSS Auditing Tools</a></li>
<li><a href="https://www.smashingmagazine.com/2021/03/css-generators/">CSS Generators</a></li>
<li><a href="https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/">Accessible Front-end Components</a></li>
<li><a href="https://www.smashingmagazine.com/2021/05/useful-vs-code-extensions-web-developers/">VS Code Extensions</a></li>
</ul>
<p>And if that’s not enough, you can always <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">subscribe to our newsletter</a> so you don’t miss the next ones. Thanks for being... <em>smashing</em>, of course! ;-)</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Janet John)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2a4221c8-35b1-4545-9561-12fe84087ae6/6681a4b9-c319-4421-8364-6d2654cf6e53-cover.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[New Smashing Workshops on Front-End & Design]]></title>
            <link>https://smashingmagazine.com/2021/08/new-smashing-online-workshops-aug-oct-2021/</link>
            <guid>https://smashingmagazine.com/2021/08/new-smashing-online-workshops-aug-oct-2021/</guid>
            <pubDate>Wed, 11 Aug 2021 13:25:00 GMT</pubDate>
            <description><![CDATA[How do we build and establish a successful, bulletproof design system? What’s the state of HTML Email? And what are new, smart interface design patterns we could use? Let’s find out. With our [brand new online workshops](https://smashingconf.com/online-workshops/) on front-end &amp; design — to help us all boost skills online. ]]></description>
            <content:encoded><![CDATA[<p>You might know it already, but perhaps not yet: we regularly run <a href="https://smashingconf.com/online-workshops/">friendly online workshops</a> around <strong>front-end and design</strong>. We have a couple of workshops coming up soon, and we thought that, you know, you might want to join in as well. All workshops sessions are broken down into <strong>2.5h-segments</strong> across days, so you always have time to ask questions, share your screen and get immediate feedback.</p>

<a href="https://smashingconf.com/online-workshops/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a95c729-8b29-4b44-90b0-d38183b367c0/online-workshops-2021-opt.png" /></a>
Meet <a href="https://smashingconf.com/online-workshops/">Smashing Online Workshops</a>: live, interactive sessions on frontend &amp; UX.


<p><a href="https://www.smashingmagazine.com/2020/10/how-we-run-smashing-online-workshops/">Live discussions and interactive exercises</a> are at the very heart of every workshop, with group work, homework, reviews and live interaction with people around the world. Plus, you get all <strong>video recordings</strong> of all sessions, so you can re-watch at any time, in your comfy chair at your workspace.</p>


Upcoming Live Workshops (Aug–Oct 2021)
<div><a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-forms-aug"><div>Designing The Perfect Web Forms<img src="https://d33wubrfki0l68.cloudfront.net/c21ac313bd003251245fe0ec848a83b26157fef5/a6b54/images/speakers/vitaly-friedman.jpg" /></div><div>Vitaly Friedman</div><div>2 sessions Aug 18 &amp; 20 UX</div></a><a href="https://smashingconf.com/online-workshops/workshops/vitaly-friedman-navigation-aug"><div>Designing The Perfect Navigation<img src="https://d33wubrfki0l68.cloudfront.net/c21ac313bd003251245fe0ec848a83b26157fef5/a6b54/images/speakers/vitaly-friedman.jpg" /></div><div>Vitaly Friedman</div><div>2 sessions Aug 31 – Sep 1 UX</div></a><a href="https://smashingconf.com/online-workshops/workshops/nathan-curtis"><div>Architecting Design Systems<img src="https://d33wubrfki0l68.cloudfront.net/dbd2e283f704c650eb82a2af2da08b42a0d1ea10/b1ca8/images/speakers/nathan-curtis.jpg" /></div><div>Nathan Curtis</div><div>4 sessions Sep 2–10 Workflow</div></a><a href="https://smashingconf.com/online-workshops/workshops/natalia-tepluhina-sep"><div>Vue.js: The Practical Guide<img src="https://d33wubrfki0l68.cloudfront.net/5b3b5c0a788698701f7c8d583f684bd3efcdaea6/cfb20/images/speakers/natalia-tepluhina.jpg" /></div><div>Natalia Tepluhina</div><div>5 sessions Sep 14–28 Dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/remi-parmentier-sep"><div>Building Modern HTML Emails<img src="https://d33wubrfki0l68.cloudfront.net/b098bd83a08d63270dff50aaccc3a19fdb076dcc/cf933/images/speakers/remi-parmentier.jpg" /></div><div>Rémi Parmentier</div><div>4 sessions Sep 16–24 Dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/netlify"><div>Content-Rich eCommerce Sites on Jamstack<img src="https://d33wubrfki0l68.cloudfront.net/164ccfcc04548b8d5fe835bf218caca84404c9bf/436ec/images/speakers/nick-dejesus.jpg" /></div><div>Nick DeJesus</div><div>2 sessions Sep 16–17 Free!</div></a><a href="https://smashingconf.com/online-workshops/workshops/carie-fisher"><div>Accessible Front-End Patterns<img src="https://d33wubrfki0l68.cloudfront.net/f84c61767dea414d2b87f306d86de71eba9bb39e/7502a/images/speakers/carie-fisher.jpg" /></div><div>Carie Fisher</div><div>5 sessions Sep 30 – Oct 14 Dev</div></a><a href="https://smashingconf.com/online-workshops/workshops/rob-hope"><div>Designing Landing Pages That Sell<img src="https://d33wubrfki0l68.cloudfront.net/1ca5aeffa875d1c51417e4fc6376e2ac613b7c73/c6504/images/speakers/rob-hope.jpg" /></div><div>Rob Hope</div><div>5 sessions Oct 5–19 Design</div></a><a href="https://www.smashingconf.com/online-workshops/bundles"><div>10× Tickets Bundle<img src="https://d33wubrfki0l68.cloudfront.net/da6e9dee46f4008c7c1c3735e3571e77086b321a/8aa3f/images/events/online-workshops/summer-cat.png" /></div><div>Save $1250 off the price.</div><div>10 tickets No expiry Smashing!</div></a></div>


What Are Workshops Like?
<p>Do you experience <strong>Zoom fatigue</strong> as well? After all, who really wants to spend more time in front of their screen? That’s exactly why we’ve <a href="https://www.smashingmagazine.com/2020/10/how-we-run-smashing-online-workshops/">designed the online workshop experience from scratch</a>, accounting for the time needed to take in all the content, understand it and have enough time to ask <em>just</em> the right questions.</p>

<a href="https://smashingconf.com/online-workshops/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/394a4d0e-4c57-4d55-a72a-87f244ab1320/kececypa-1.png" /></a>
In <a href="https://smashingconf.com/online-workshops/">our workshops</a>, everybody is just a slightly blurry rectangle on the screen; everybody is equal, and invited to participate.


<p>Our online workshops take place <strong>live</strong> and span <strong>multiple days across weeks.</strong> They are split into 2.5h-sessions, and in every session there is always enough time to bring up your questions or just get a cup of tea. We don’t rush through the content, but instead try to create a welcoming, friendly and inclusive environment for everyone to have time to think, discuss and get feedback.</p>
<p>There are plenty of <a href="https://www.smashingmagazine.com/2021/02/smashing-workshop-form-design-masterclass/">things to expect from a Smashing workshop</a>, but the most important one is focus on <strong>practical examples</strong> and techniques. The workshops aren’t talks; they are <strong>interactive</strong>, with live conversations with attendees, sometimes with challenges, homework and team work.</p>
<p>Of course, you get all workshop materials and <strong>video recordings</strong> as well, so if you miss a session you can re-watch it the same day.</p>

<a href="https://smashingconf.com/online-workshops/"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/066c7368-ae9e-493a-b2f1-8f8ed15de12a/friendly-attendee.svg" /></a>
Meet our <a href="https://smashingconf.com/online-workshops/">friendly frontend &amp; UX workshops</a>. Boost your skills online and learn from experts — live.


<h3>TL;DR</h3>
<ul>
<li>Workshops span <strong>multiple days</strong>, split in <em>2.5h-sessions</em>.</li>
<li>Enough time for live Q&amp;A every day.</li>
<li>Dozens of <strong>practical examples</strong> and techniques.</li>
<li>You’ll get all workshop materials &amp; recordings.</li>
<li><a href="https://www.smashingconf.com/online-workshops/workshops">All workshops</a> are focused on frontend &amp; UX.</li>
<li><a href="https://smashingconf.com/online-workshops/bundles">Get a workshop bundle</a> and <strong>save $250</strong> off the price.</li>
</ul>
<div><a href="https://www.smashingconf.com/online-workshops/">Jump to all workshops →</a></div>

Thank You!
<p>We hope that the <strong>insights from the workshops</strong> will help you improve your skills and the quality of your work. A sincere <em>thank you</em> for your kind, ongoing support and generosity — for being <em>smashing</em>, now and ever. We’d be honored to welcome you.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Iris Lješnjanin)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a95c729-8b29-4b44-90b0-d38183b367c0/online-workshops-2021-opt.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Handling Mounting And Unmounting Of Navigation Routes In React Native]]></title>
            <link>https://smashingmagazine.com/2021/08/mounting-unmounting-navigation-routes-react-native/</link>
            <guid>https://smashingmagazine.com/2021/08/mounting-unmounting-navigation-routes-react-native/</guid>
            <pubDate>Wed, 11 Aug 2021 11:40:00 GMT</pubDate>
            <description><![CDATA[Often you need two different sets of navigation stacks for pre and post user authentication. Usually, to see more content, you have to be authenticated in some way. Let’s look at how to mount and unmount navigation stack based on a met condition in React Native.]]></description>
            <content:encoded><![CDATA[<p>In this article, we are going to walk through <strong>mounting and unmounting of navigation routes</strong> in React Native. An expected behavior of your app is that once the authentication condition is met, a new set of navigation routes are available only to logged-in users, while the other screens which were displayed before authentication is removed and can’t be returned to unless the user signs out of the application.</p>
<p>For security in your app, protected routes provide you with a way to only display certain information/content on your app to specific users, while restricting access from unauthorized persons.</p>
<p>We will be working with <a href="https://expo.io/">Expo</a> for this project because it’ll help us focus on the problem at hand instead of worrying about a lot of setups. The exact same steps in this article could be followed for a bare React Native application.</p>
<p>You need some familiarity with <strong>JavaScript and React Native</strong> to follow through with this tutorial. Here are a few important things you should already be familiar with:</p>
<ul>
<li>Custom components in React Native (how to create components, receive, pass, and use props in a component). <a href="https://www.fastfwd.com/custom-component-in-react-native/">Read more</a>.</li>
<li>React Navigation. <a href="https://reactjs.org/docs/context.html">Read more</a>.</li>
<li>Stack Navigator in React Native. <a href="https://reactnavigation.org/docs/stack-navigator/">Read more</a>.</li>
<li>Basic Knowledge of React Native Core components (<code>&lt;View/&gt;</code>, <code>&lt;Text/&gt;</code>, etc.). <a href="https://reactnative.dev/docs/components-and-apis">Read more</a>.</li>
<li>React Native <code>AsyncStorage</code>. <a href="https://reactnative.dev/docs/asyncstorage">Read more</a>.</li>
<li>Context API. <a href="https://reactjs.org/docs/context.html">Read more</a>.</li>
</ul>
Project Setup And Base Authentication
<p>If you're new to using expo and don’t know how to install expo, <a href="https://docs.expo.io/get-started/installation/">visit the official documentation</a>. Once the installation is complete, go ahead to initialize a new React Native project with expo from our command prompt:</p>
<pre><code>expo init navigation-project</code></pre>

<p>You will be presented with some options to choose how you want the base setup to be:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cf792489-413d-48a1-9f0d-2343e662ab7d/1-mounting-unmounting-navigation-routes-authentication-react-native.PNG" /></p>
<p>In our case, let’s select the first option to set up our project as a blank document. Now, wait until the installation of the JavaScript dependencies is complete.</p>
<p>Once our app is set up, we can change our directory to our new project directory and open it in your favorite code editor. We need to install the library we will be using for <code>AsyncStorage</code> and our navigation libraries. Inside your folder directory in your terminal, paste the command above and choose a template (<code>blank</code> would work) to install our project dependencies.</p>
<p>Let's look at what each of these dependencies is for:</p>
<ul>
<li><strong>@react-native-community/async-storage</strong><br />Like localStorage on the web, it is a React Native API for persisting data on a device in key-value pairs. </li>
<li><strong>@react-native-community/masked-view, react-native-screens, react-native-gesture-handle</strong><br />These dependencies are core utilities that are used by most navigators to create the navigation structure in the app. (Read more in <a href="https://reactnavigation.org/docs/getting-started/">Getting started with React Native navigation</a>.)</li>
<li><strong>@react-navigation/native</strong><br />This is the dependency for React Native navigation.</li>
<li><strong>@react-navigation/stack</strong><br />This is the dependency for stack navigation in React Native.</li>
</ul>
<div>
<pre><code>npm install @react-native-community/async-storage @react-native-community/masked-view @react-navigation/native @react-navigation/stack react-native-screens react-native-gesture-handle</code></pre>
</div>

<p>To start the application use <code>expo start</code> from the app directory in your terminal. Once the app is started, you can use the expo app from your mobile phone to scan the bar code and view the application, or if you have an android emulator/IOS simulator, you can open the app through them from the expo developer tool that opens up in your browser when you start an expo application. For the images examples in this article, we will be using <a href="https://www.genymotion.com/">Genymotions</a> to see our result. Here’s what our final result will look like in Genymotions:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a271a5a6-2d28-4334-a57e-8aff24818578/2-mounting-unmounting-navigation-routes-authentication-react-native.PNG" /></p>
<h3>Folder Structures</h3>
<p>Let us create our folder structure from the start so that it's easier for us to work with it as we proceed:</p>
<p>We need two folders first:</p>
<ul>
<li><strong>context</strong><br />This folder will hold the context for our entire application as we will be working with Context API for global state management.</li>
<li><strong>views</strong><br />This folder will hold both the navigation folder and the views for different screens.</li>
</ul>
<p>Go ahead and create the two folders in your project directory.</p>
<p>Inside the context folder, create a folder called <strong>authContext</strong> and create two file inside of the <strong>authContext</strong> folder:</p>
<ul>
<li><strong>AuthContext.js</strong>,</li>
<li><strong>AuthState.js</strong>.</li>
</ul>
<p>We will need these files when we start working with Context API.</p>
<p>Now go to the <strong>views</strong> folder we created and create two more folders inside of it, namely:</p>
<ul>
<li><strong>navigation</strong>,</li>
<li><strong>screens</strong>.</li>
</ul>
<p>Now, we are not yet finished, inside the <strong>screens</strong> folder, create these two more folders:</p>
<ul>
<li><strong>postAuthScreens</strong>,</li>
<li><strong>preAuthScreens</strong>.</li>
</ul>
<p>If you followed the folder setup correctly, this is how your folder structure should look like at the moment:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ffaf659-afec-4555-9224-de273d1d10c2/3-mounting-unmounting-navigation-routes-authentication-react-native.PNG" /></p>
<h3>Creating Our First Screen</h3>
<p>Now let's create our first screen and call it the <strong>welcomeScreen.js</strong> inside the <strong>preAuthScreens</strong> folder.</p>
<p><strong>preAuthScreens   &gt;   welcomeScreen.js</strong></p>
<p>Here’s the content of our <strong>welcomeScreen.js</strong> file:</p>
<div>
<pre><code>import React from 'react';
import { View, Text, Button, StyleSheet, TextInput } from 'react-native';

const WelcomeScreen = () =&gt; {

  const onUserAuthentication = () =&gt; {
    console.log("User authentication button clicked")
  }

  return (
    &lt;View style={styles.container}&gt;
      &lt;Text style={styles.header}&gt;Welcome to our App!&lt;/Text&gt;
      &lt;View&gt;
        &lt;TextInput style={styles.inputs} placeholder="Enter your email here.." /&gt;
        &lt;TextInput style={styles.inputs} secureTextEntry={true} placeholder="Enter your password here.." /&gt;
&lt;Button  title="AUTHENTICATE" onPress={onUserAuthentication} /&gt;
      &lt;/View&gt;
    &lt;/View&gt;
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  header: {
    fontSize: 25,
    fontWeight: 'bold',
    marginBottom: 30
  },
  inputs: {
    width: 300,
    height: 40,
    marginBottom: 10,
    borderWidth: 1,
  }
})

export default WelcomeScreen
</code></pre>
</div>

<p>Here's what we did in the code block above:</p>
<p>First, we imported the things we need from the React Native library, namely, <code>View</code>, <code>Text</code>, <code>Button</code>, <code>TextInput</code>. Next, we created our functional component <code>WelcomeScreen</code>. </p>
<p>You’ll notice that we imported the <code>StyleSheet</code> from React Native and used it to define styles for our header and also our <code>&lt;TextInput /&gt;</code>.</p>
<p>Lastly, we export the <code>WelcomeScreen</code> component at the bottom of the code.</p>
<p>Now that we are done with this, let's get this component to function as expected by using the <code>useState</code> hook to store the values of the inputs and update their states anytime a change happens in the input fields. We will also bring import the <code>useCallback</code> hook from React as we will be needing it later to hold a function.</p>
<p>First, while we are still in the <code>WelcomeScreen</code> component, we need to import the <code>useState</code> and <code>useCallback</code> from React.</p>
<pre><code>import React, { useState, useCallback } from 'react';</code></pre>

<p>Now inside the <code>WelcomeScreen</code> functional component, let's create the two states for the email and password respectively:</p>
<pre><code>...
const WelcomeScreen = () =&gt; {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  return (
    ...
  )
}
...</code></pre>

<p>Next, we need to modify our <code>&lt;TextInput /&gt;</code> fields so that the get their value from their respective states and update their state when the value of the input is updated:</p>
<div>
<pre><code>import React, { useState, useCallback } from 'react';
import { View, Text, Button, StyleSheet, TextInput } from 'react-native';

const WelcomeScreen = () =&gt; {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  const onInputChange = (value, setState) =&gt; {
    setState(value);
  }
  return (
    &lt;View&gt;
      ...<br />      &lt;View&gt;
        &lt;TextInput
          style={styles.inputs}
          placeholder="Enter your email here.."
          value={email}
          onChangeText={(value) =&gt; onInputChange(value, setEmail)}
        /&gt;
        &lt;TextInput
          style={styles.inputs}
          secureTextEntry={true}
          placeholder="Enter your password here.."
          value={password}
          onChangeText={(value) =&gt; onInputChange(value, setPassword)}
        /&gt;
        ...
      &lt;/View&gt;
    &lt;/View&gt;
  )
}
...
</code></pre>
</div>

<p>In the code above, here is what we did:</p>
<ul>
<li>We made the <code>value</code> of each of the text inputs to point to their respective states.</li>
<li>We added the <code>onChangeText</code> handler to our text inputs. This fires up anytime a new value is entered or deleted from the input fields.</li>
<li>We called our <code>onInputChange</code> function which accepts two arguments:<ul>
<li>The current <code>value</code> is supplied by the <code>onChangeText</code> handler.</li>
<li>The setter of the state that should be updated (for the first input field we pass <code>setEmail</code> and the second we pass <code>setPassword</code>.</li>
<li>Finally, we write our <code>onInputChange</code> function, and our function does only one thing: It updates the respective states with the new value.</li>
</ul>
</li>
</ul>
<p>The next thing we need to work on is the <code>onUserAuthentication()</code> function with is called whenever the button for the form submission is clicked.</p>
<p>Ideally, the user must have already created an account and login will involve some backend logic of some sort to check that the user exists and then assign a token to the user. In our case, since we are not using any backend, we will create an object holding the correct user login detail, and then only authenticate a user when the values they enter matches our fixed values from the login object of <code>email</code> and <code>password</code> that we will create.</p>
<p>Here’s the code we need to do this:</p>
<div>
<pre><code>...

const correctAuthenticationDetails = {
  email: <a href="mailto:'demouser@gmail.com">'demouser@gmail.com</a>',
  password: 'password'
}
const WelcomeScreen = () =&gt; {
  ...

  // This function gets called when the <code>AUTHENTICATE</code> button is clicked
  const onUserAuthentication = () =&gt; {
    if (
      email !== correctAuthenticationDetails.email ||
      password !== correctAuthenticationDetails.password
    ) {
      alert('The email or password is incorrect')
      return
    }
      // In here, we will handle what happens if the login details are       // correct
  }

  ...
  return (
    ...
  )
}
...
</code></pre>
</div>

<p>One of the first things you’ll notice in the code above is that we defined a <code>correctAuthenticationDetails</code> (which is an object that holds the correct login details we expect a user to supply)  outside of the <code>WelcomeScreen()</code> functional component.</p>
<p>Next, we wrote the content of the <code>onUserAuthentication()</code> function and used a conditional statement to check if the <code>email</code> or <code>password</code> held in the respective states does not match the one we supplied in our object.</p>
<p>If you would like to see what we have done so far, import the <strong>WelcomeScreen</strong> component into your <strong>App.js</strong> like this:</p>
<p>Open the <strong>App.js</strong> file and put this replace the entire code with this:</p>
<div>
<pre><code>import { StatusBar } from 'expo-status-bar';
import React from 'react';
import { View } from 'react-native';
import WelcomeScreen from './views/screens/preAuthScreens/welcomeScreen';
export default function App() {
  return (
    &lt;View&gt;
      &lt;StatusBar style="auto" /&gt;
      &lt;WelcomeScreen /&gt;
    &lt;/View&gt;
  );
}
</code></pre>
</div> 

<p>Looking closely at the code above, you’ll see that what we did was import the <strong>WelcomeScreen</strong> component and then used it in the <code>App()</code> function.</p>
<p>Here’s what the result looks like of our <code>WelcomeScreen</code> looks like:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ecde0ee-f05f-4a93-91e1-371f5d3fa834/4-mounting-unmounting-navigation-routes-authentication-react-native.PNG" /></p>
<p>Now that we are done building the <strong>WelcomeScreen</strong> component, let’s move ahead and start working with Context API for managing our global state.</p>
<h3>Why Context API?</h3>
<p>Using Context API, we do not need to install any additional library into ReactJS, it is less stressful to set up, and is one of the most popular ways of handling global state in ReactJS. For lightweight state management, it is a good choice.</p>
<h3>Creating Our Context</h3>
<p>If you recall, we created a <strong>context</strong> folder earlier and created a subfolder inside of it called the <strong>authContext</strong>.</p>
<p>Now let’s navigate to the <strong>AuthContext.js</strong> file in the <strong>authContext</strong> folder and create our context:</p>
<p><em>context &gt; authContext &gt; AuthContext.js</em></p>
<pre><code>
import React, { createContext } from 'react';
const AuthContext = createContext();
export default AuthContext;
</code></pre>

<p>The <code>AuthContext</code> we just created holds the <code>loading</code> state value and the <code>userToken</code> state values. Currently, in the <code>createContext</code> we declared in the code-block above, we didn’t initialize any default values here so our context is currently <code>undefined</code>.  An example value of the auth context could be <code>{loading: false, userToken: 'abcd}</code></p>
<p>The <strong>AuthState.js</strong> file holds our Context API logic and their state values. Functions written here can be called from anywhere in our app and when they update values in state, it is updated globally also.</p>
<p>First, let’s bring in all the imports we will need in this file:</p>
<p><em>context &gt; AuthContext &gt; AuthState.js</em></p>
<div>
<pre><code>import React, { useState } from 'react';
import AuthContext from './AuthContext';
import AsyncStorage from '@react-native-community/async-storage';</code></pre>
</div>

<p>We imported the <code>useState()</code> hook from ReactJS to hold our states, we imported the <strong>AuthContext</strong> file we created above because this is where our empty context for authentication is initialized and we will need to use it as you’ll see later on while we progress, finally we import the <code>AsyncStorage</code> package (similar to localStorage for the web). </p>
<p><code>AsyncStorage</code> is a React Native API that allows you to persist data offline over the device in a React Native application.</p>
<pre><code>...

const AuthState = (props) =&gt; {
    const [userToken, setUserToken] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    const onAuthentication = async() =&gt; {
        const USER_TOKEN = "drix1123q2"
        await AsyncStorage.setItem('user-token', USER_TOKEN);
        setUserToken(USER_TOKEN);
        console.warn("user has been authenticated!")
    }

    return (
        &lt;AuthContext.Provider
            value={{
                onAuthentication,
            }}
        &gt;
            {props.children}
        &lt;/AuthContext.Provider&gt;
    )
}
export default AuthState;
</code></pre>  

<p>In the code block above here's what we did:</p>
<ul>
<li><p>We declared two states for the <code>userToken</code> and <code>isLoading</code>. The <code>userToken</code> state will be used to store the token saved to <code>AsyncStorage</code>, while the <code>isLoading</code> state will be used to track the loading status (initially it is set to <code>true</code>). We will find out more about the use of these two states as we proceed.</p>
</li>
<li><p>Next, we wrote our <code>onAuthentication()</code> function. This function is an <code>async</code> function that gets called when the login button is clicked from the <code>welcomeScreen.jsx</code> file. This function will only get called if the email and password the user has supplied matches the correct user detail object we provided. Usually what happens during authentication is that a token is generated for the user after the user is authenticated on the backend using a package like <a href="https://jwt.io/introduction">JWT</a>, and this token is sent to the frontend. Since we are not going into all of that for this tutorial, we created a static token and kept it in a variable called <code>USER_TOKEN</code>.</p>
</li>
<li><p>Next, we use the <code>await</code> keyword to set our user token to AsyncStorage with the name <code>user-token</code>. The <code>console.warn()</code> statement is just used to check that everything went right, you can take it off whenever you like.</p>
</li>
<li><p>Finally, we pass our <code>onAuthenticated</code> function as a value inside our <code>&lt;AuthContext.Provider&gt;</code> so that we can access and call the function from anywhere in our app.</p>
</li>
</ul>
<p><em>screens &gt; preAuth &gt; welcomeScreen.js</em></p>
<p>First, import <code>useContext</code> from ReactJS and import the <code>AuthContext</code> from the <code>AuthContext.js</code> file.</p>
<div>
<pre><code>import React, { useState, useContext } from 'react';
import AuthContext from '../../../context/authContext/AuthContext'
...</code></pre>
</div>

<p>Now, inside the <code>welcomeScreen()</code> functional component, let’s use the context which we have created:</p>
<pre><code>...
const WelcomeScreen = () =&gt; {
  const { onAuthentication } = useContext(AuthContext)
  const onUserAuthentication = () =&gt; {
    if (
      email !== correctAuthenticationDetails.email ||
      password !== correctAuthenticationDetails.password
    ) {
      alert('The email or password is incorrect')
      return
    }
    onAuthentication()
  }
  return (
    ...
  )
}
...
</code></pre>

<p>In the above code block, we destructured the <code>onAuthentication</code> function from our <code>AuthContext</code> and then we called it inside our <code>onUserAuthentication()</code> function and removed the <code>console.log()</code> statement which was there before now.</p>
<p>Right now, this will throw an error because we don’t yet have access to the <code>AuthContext</code>. To use the <code>AuthContext</code> anywhere in your application, we need to wrap the top-level file in our app with the <code>AuthState</code> (in our case, it is the <strong>App.js</strong> file).</p>
<p>Go to the <strong>App.js</strong> file and replace the code there with this:</p>
<div>
<pre><code>import React from 'react';
import WelcomeScreen from './views/screens/preAuthScreens/welcomeScreen';
import AuthState from './context/authContext/AuthState'

export default function App() {
  return (
    &lt;AuthState&gt;
      &lt;WelcomeScreen /&gt;
    &lt;/AuthState&gt;
  );
}
</code></pre>
</div>

<p>We've come so far and we're done with this section. Before we move into the next section where we set up our routing, let's create a new screen. The screen we are about to create will be the <strong>HomeScreen.js</strong> file which is supposed to show up only after successful authentication.</p>
<p>Go to: <em>screens &gt; postAuth</em>.</p>
<p>Create a new file called <strong>HomeScreen.js</strong>. Here's the code for the <strong>HomeScreen.js</strong> file:</p>
<p><em>screens &gt; postAuth &gt;</em> <strong><em>HomeScreen.js</em></strong></p>
<pre><code>import React from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';

const HomeScreen = () =&gt; {

  const onLogout = () =&gt; {
    console.warn("Logout button cliked")
  }

  return (
    &lt;View style={styles.container}&gt;
      &lt;Text&gt;Now you're authenticated! Welcome!&lt;/Text&gt;
      &lt;Button title="LOG OUT" onPress={onLogout} /&gt;
    &lt;/View&gt;
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
})

export default HomeScreen
</code></pre>

<p>For now, the logout button has a dummy <code>console.log()</code> statement. Later on, we will create the logout functionality and pass it to the screen from our context.</p>
Setting Up Our Routes
<p>We need to create three (3) files inside our navigation folder:</p>
<ul>
<li><strong>postAuthNavigator.js</strong>,</li>
<li><strong>preAuthNavigator.js</strong>,</li>
<li><strong>AppNavigator.js</strong>.</li>
</ul>
<p>Once you’ve created these three files, navigate to the <strong>preAuthNaviagtor.js</strong> file you just created and write this:</p>
<p><em>navigation &gt; preAuthNavigator.js</em></p>
<div>
<pre><code>import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import WelcomeScreen from "../screens/preAuthScreens/welcomeScreen";

const PreAuthNavigator = () =&gt; {
    const { Navigator, Screen } = createStackNavigator();

    return (
        &lt;Navigator initialRouteName="Welcome"&gt;
            &lt;Screen
                name="Welcome"
                component={WelcomeScreen}
            /&gt;
        &lt;/Navigator&gt;
    )
}
export default PreAuthNavigator;
</code></pre>
</div>

<p>In the file above, here's what we did:</p>
<ul>
<li>We imported the <code>createStackNavigator</code> from the <code>@react-navigation/stack</code> which we are using for our stack navigation. The <code>createStackNavigator</code>Provides a way for your app to transition between screens where each new screen is placed on top of a stack. By default the stack navigator is configured to have the familiar iOS and Android look &amp; feel: new screens slide in from the right on iOS, fade in from the bottom on Android. Click <a href="https://reactnavigation.org/docs/stack-navigator/">here</a> if you want to learn more about the <a href="https://reactnavigation.org/docs/stack-navigator/">stack navigator in React Native</a>.</li>
<li>We destructured <code>Navigator</code> and <code>Screen</code> from the <code>createStackNavigator()</code>.</li>
<li>In our return statement, we created our navigation with the <code>&lt;Navigator/&gt;</code> and created our screen with the <code>&lt;Screen/&gt;</code>. this means that if we had multiple screens that can be accessed before authentication, we will have multiple <code>&lt;Screen/&gt;</code> tags here representing them.</li>
<li>Finally, we export our <code>PreAuthNavigator</code> component.</li>
</ul>
<p>Let us do a similar thing for the <code>postAuthNavigator.js</code> file.</p>
<p><em>navigation &gt; postAuthNavigator.js</em></p>
<div>
<pre><code>import React from "react";
import { createStackNavigator } from "@react-navigation/stack";
import HomeScreen from "../screens/postAuthScreens/HomeScreen";
const PostAuthNavigator = () =&gt; {
  const { Navigator, Screen} = createStackNavigator();
  return (
    &lt;Navigator initialRouteName="Home"&gt;
      &lt;Screen
        name="Home"
        component={HomeScreen}
      /&gt;
    &lt;/Navigator&gt; 
  )
}
export default PostAuthNavigator;
</code></pre>
</div>

<p>As we see in the code above, the only difference between the <strong>preAuthNavigator.js</strong> and the <strong>postAuthNavigator.js</strong> is the screen being rendered. While the first one takes the <code>WelcomeScreen</code>, the <strong>postAuthNavigator.js</strong> takes the <code>HomeScreen</code>.</p>
<p>To create our <strong>AppNavigator.js</strong> we need to create a few things.</p>
<p>Since the <strong>AppNavigator.js</strong> is where we will be switching and checking which route will be available for access by the user, we need several screens in place for this to work properly, let’s outline the things we need to create first:</p>
<ol>
<li><strong>TransitionScreen.js</strong><br />While the app decides which navigation it is going to mount, we want a transition screen to show up. Typically, the transition screen will be a loading spinner or any other custom animation chosen for the app, but in our case, we will use a basic <code>&lt;Text/&gt;</code> tag to display <em><code>loading…</code></em>.</li>
<li><code>checkAuthenticationStatus()</code><br />This function is what we will be calling to check the authentication status which will determine which navigation stack is going to be mounted. We will create this function in our context and use it in the <strong>Appnavigator.js</strong>.</li>
</ol>
<p>Now, let's go ahead and create our <strong>TransitionScreen.js</strong> file.</p>
<p><em>screens &gt;</em> <strong><em>TransitionScreen.js</em></strong></p>
<pre><code>import React from 'react';
import { Text, View } from 'react-native';

const TransitionScreen = () =&gt; {
  return (
    &lt;View&gt;
      &lt;Text&gt;Loading...&lt;/Text&gt;
    &lt;/View&gt;
  )
}

export default TransitionScreen
</code></pre>

<p>Our transition screen is just a simple screen that shows loading text. We will see where to use this as we proceed in this article.</p>
<p>Next, let us go to our <strong>AuthState.js</strong> and write our <code>checkAuthenticationStatus()</code>:</p>
<p><em>context &gt; authContext &gt;</em> <strong><em>AuthState.js</em></strong></p>
<div>
<pre><code>import React, { useState, useEffect } from 'react';
import AuthContext from './AuthContext';
import AsyncStorage from '@react-native-community/async-storage';

const AuthState = (props) =&gt; {
    const [userToken, setUserToken] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    ...
    useEffect(() =&gt; {
        checkAuthenticationStatus()
    }, [])

    const checkAuthenticationStatus = async () =&gt; {
        try {
            const returnedToken = await AsyncStorage.getItem('user-toke             n');
            setUserToken(returnedToken);
            console.warn('User token set to the state value)
        } catch(err){
            console.warn(<code>Here's the error that occured while retrievin             g token: ${err}</code>) 
        }
        setIsLoading(false)
    }


    const onAuthentication = async() =&gt; {
        ...
    }

    return (
        &lt;AuthContext.Provider
            value={{
                onAuthentication,
                userToken,
                isLoading,
            }}
        &gt;
            {props.children}
        &lt;/AuthContext.Provider&gt;
    )
}
export default AuthState;
</code></pre>
</div>

<p>In the code block above, we wrote the function <code>checkAuthenticationStatus()</code>. In our function, here's what we are doing:</p>
<ul>
<li>We used the <code>await</code> keyword to get our token from <code>AsyncStorage</code>. With <code>AsyncStorage</code>, if there’s no token supplied, it returns <code>null</code>. Our initial <code>userToken</code> state is set to <code>null</code> also.</li>
<li>We use the <code>setUserToken</code> to set our returned value from <code>AsyncStorage</code> as our new <code>userToken</code>. If the returned value is <code>null</code>, it means our <code>userToken</code> remains <code>null</code>.</li>
<li>After the <code>try{}…catch(){}</code> block, we set <code>isLoading</code> to false because the function to check authentication status is complete. We’ll need the value of <code>isLoading</code> to know if we should still be displaying the <code>TransitionScreen</code> or not. It’s worth considering setting an error if there is an error retrieving the token so that we can show the user a “Retry” or “Try Again” button when the error is encountered.</li>
<li>Whenever <code>AuthState</code> mounts we want to check the authentication status, so we use the <code>useEffect()</code> ReactJS hook to do this. We call our <code>checkAuthenticationStatus()</code> function inside the <code>useEffect()</code> hook and set the value of <code>isLoading</code> to <code>false</code> when it is done.</li>
<li>Finally, we add our states to our <code>&lt;AuthContext.Provider/&gt;</code> values so that we can access them from anywhere in our app covered by the Context API.</li>
</ul>
<p>Now that we have our function, it is time to go back to our <strong>AppNavigator.js</strong> and write the code for mounting a particular stack navigator based on the authentication status:</p>
<p><em>navigation &gt; AppNavigator.js</em></p>
<p>First, we will import all we need for our <strong>AppNavigator.js</strong>.</p>
<div>
<pre><code>import React, { useEffect, useContext } from "react";
import PreAuthNavigator from "./preAuthNavigator";
import PostAuthNavigator from "./postAuthNavigator";
import { NavigationContainer } from "@react-navigation/native"
import { createStackNavigator } from "@react-navigation/stack";
import AuthContext from "../../context/authContext/AuthContext";
import TransitionScreen from "../screens/TransitionScreen";
</code></pre>
</div>

<p>Now that we have all our imports, let’s create the <code>AppNavigator()</code> function.</p>
<pre><code>...
const AppNavigator = () =&gt; {

}

export default AppNavigator
</code></pre>

<p>Next, we will now go ahead to write the content of our <code>AppNavigator()</code> function:</p>
<div>
<pre><code>import React, { useState, useEffect, useContext } from "react";
import PreAuthNavigator from "./preAuthNavigator";
import PostAuthNavigator from "./postAuthNavigator";
import { NavigationContainer } from "@react-navigation/native"
import { createStackNavigator } from "@react-navigation/stack";
import AuthContext from "../../context/authContext/AuthContext";
import TransitionScreen from "../screens/transition";

const AppNavigator = () =&gt; {
    const { Navigator, Screen } = createStackNavigator();
    const authContext = useContext(AuthContext);
    const { userToken, isLoading } = authContext;
    if(isLoading) {
      return &lt;TransitionScreen /&gt;
    }
    return (
    &lt;NavigationContainer&gt;
      &lt;Navigator&gt;
        { 
          userToken == null ? (
            &lt;Screen
              name="PreAuth"
              component={PreAuthNavigator}
              options={{ header: () =&gt; null }}
            /&gt;
          ) : (
            &lt;Screen 
              name="PostAuth"
              component={PostAuthNavigator}
              options={{ header: () =&gt; null }}
            /&gt;
          )
        }
      &lt;/Navigator&gt;
    &lt;/NavigationContainer&gt;
  )
}

export default AppNavigator
</code></pre>
</div>

<p>In the above block of code, here's an outline of what we did:</p>
<ul>
<li>We created a stack navigator and destructured the <code>Navigator</code> and <code>Screen</code> from it.</li>
<li>We imported the <code>userToken</code> and the <code>isLoading</code> from our <code>AuthContext</code></li>
<li>When the <code>AuthState</code> mounts, the <code>checkAuthenticationStatus()</code> is called in the <code>useEffecct</code> hook there. We use the <code>if</code> statement to check if  <code>isLoading</code> is <code>true</code>, if it is <code>true</code> the screen we return is our <code>&lt;TransitionScreen /&gt;</code> which we created earlier because the <code>checkAuthenticationStatus()</code> function is not yet complete.</li>
<li>Once our <code>checkAuthenticationStatus()</code> is complete, <code>isLoading</code> is set to <code>false</code> and we return our main Navigation components.</li>
<li>The <code>NavigationContainer</code> was imported from the <code>@react-navigation/native</code>. It is only used once in the main top-level navigator. Notice that we are not using this in the <strong>preAuthNavigator.js</strong> or the <strong>postAuthNavigator.js.</strong></li>
<li>In our <code>AppNavigator()</code>, we still create a stack navigator. If the <code>userToken</code> gotten from our Context API is <code>null</code>, we mount the <code>PreAuthNavigator</code>, if its value is something else (meaning that the <code>AsyncStorage.getItem()</code> in the <code>checkAuthenticationStatus()</code> returned an actual value), then we mount the <code>PostAuthNavigator</code>. Our conditional rendering is done using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">ternary operator</a>.</li>
</ul>
<p>Now we’ve set up our <strong>AppNavigator.js</strong>. Next, we need to pass our <code>AppNavigator</code> into our <strong>App.js</strong> file.</p>
<p>Let’s pass our <code>AppNavigator</code> into the <strong>App.js</strong> file:</p>
<p><em>App.js</em></p>
<pre><code> ...
import AppNavigator from './views/navigation/AppNavigator';

...
return (
    &lt;AuthState&gt;
      &lt;AppNavigator /&gt;
    &lt;/AuthState&gt;
  );
</code></pre>

<p>Let's now see what our app looks like at the moment:</p>
<p>Here’s what happens when you supply an incorrect credential while trying to log in:</p>
<h3>Adding The Logout Functionality</h3>
<p>At this point, our authentication and route selection process is complete. The only thing left for our app is to add the logout functionality.</p>
<p>The logout button is in the <strong>HomeScreen.js</strong> file. We passed an <code>onLogout()</code> function to the <code>onPress</code> attribute of the button. For now, we have a simple <code>console.log()</code> statement in our function, but in a little while that will change.</p>
<p>Now, let’s go to our <strong>AuthState.js</strong> and write the function for logout. This function simply clears the <code>AsyncStorage</code> where the user token is saved.</p>
<p><em>context &gt; authContext &gt; AuthState.js</em></p>
<pre><code>...
const AuthState = (props) =&gt; {
    ...

    const userSignout = async() =&gt; {
        await AsyncStorage.removeItem('user-token');
        setUserToken(null);
    }


    return (
      ...
    )
}

export default AuthState;
</code></pre>

<p>The <code>userSignout()</code> is an asynchronous function that removes the <code>user-token</code> from our <code>AsyncStorage</code>.</p>
<p>Now we need to call the <code>userSignout()</code> function in our <strong>HomeScreen.js</strong> any time the logout button is clicked on.</p>
<p>Let’s go to our <strong>HomeScreen.js</strong> and use ther <code>userSignout()</code> from our <code>AuthContext</code>.</p>
<p><em>screens &gt; postAuthScreens &gt;</em> <strong><em>HomeScreen.js</em></strong></p>
<div>
<pre><code>import React, { useContext } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import AuthContext from '../../../context/authContext/AuthContext'

const HomeScreen = () =&gt; {
  const { userSignout } = useContext(AuthContext)

  const onLogout = () =&gt; {
    userSignout()
  }
  return (
    &lt;View style={styles.container}&gt;
      &lt;Text&gt;Now you're authenticated! Welcome!&lt;/Text&gt;
 &lt;Button title="LOG OUT" onPress={onLogout} /&gt;
    &lt;/View&gt;
  )
}
...
</code></pre>
</div>

<p>In the above code block we imported thee <code>useContext</code> hook from ReactJS, then we imported our AuthContext. Next, we destructured the <code>userSignout</code> function from our <code>AuthContext</code> and this <code>userSignout()</code> function is called in our <code>onLogout()</code> function.</p>
<p>Now whenever our logout button is clicked, the user token in our <code>AsyncStorage</code> is cleared.</p>
<p>Voila! our entire process is finished.</p>
<p>Here’s what happens when you press the back button after you’re logged in:</p>
<p>Here’s what happens when you press the back button after logging out:</p>
<p>Here are some  different behaviors we notice when using this pattern in our navigation stack switching:</p>
<ol>
<li>You’ll notice that there was nowhere we needed to make use of <code>navigation.navigate()</code> or <code>navigation.push()</code> to go to another route after login. Once our state is updated with the user token, the navigation stack rendered is automatically changed.</li>
<li>Pressing the back button on your device after login is successful cannot take you back to the login page, instead, it closes the app entirely. This behavior is important because you don’t want the user to be able to return back to the login page except they log out of the app. The same thing applies to logging out — once the user logs out, they cannot use the back button to return to the <code>HomeScreen</code> screen, but instead, the app closes.</li>
</ol>
Conclusion
<p>In many Apps, authentication is one of the most important parts because it confirms that the person trying to gain access to protected content has the right to access the information. Learning how to do it right is an important step in building a great, intuitive, and easy to use/navigate the application.</p>
<p>Building on top of this code, here are a few things you might consider adding:</p>
<ul>
<li>Form validation for validating input fields. Check out <a href="https://blog.logrocket.com/react-native-form-validations-with-formik-and-yup/">React Native form validation with Formik and Yup</a>.</li>
<li>Firebase authentication for integrating authentication with Gmail, Github, Facebook, Twitter, or your custom interface. Check out <a href="https://rnfirebase.io/auth/usage">React Native Firebase</a>.</li>
<li><a href="https://uxdesign.cc/code-concepts-for-designers-authentication-authorization-24b72ab33a62">Code concepts for designers: Authentication and Authorization.</a></li>
</ul>
<p>Here are also some important resources I found that will enlighten you more about authentication, security and how to do it right:</p>
<h3>Resources</h3>
<ul>
<li><a href="https://rossbulat.medium.com/react-native-user-authentication-flow-explained-d988905ba106">React Native: User Authentication Flow Explained</a></li>
<li><a href="https://snyk.io/blog/10-react-security-best-practices/">10 React Security Best Practices</a></li>
<li><a href="https://www.idrnd.ai/5-authentication-methods-that-can-prevent-the-next-breach/">Authentication Methods That Can Prevent The Next Breach</a></li>
<li>View a live build/preview of our application <a href="https://snack.expo.io/@danieldon/github.com-chiagozielam-reactnative_authentication_navigation_pattern">here</a>;</li>
<li>View the project on <a href="https://github.com/Chiagozielam/ReactNative_authentication_navigation_pattern">GitHub</a>.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Daniel Don)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/03d97d60-d23b-419c-acb3-23e467d4cc16/mounting-unmounting-navigation-routes-react-native.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Cookieless Alternative To Embed HTML, CSS And JS Code Snippets]]></title>
            <link>https://smashingmagazine.com/2021/08/cookieless-alternative-embed-html-css-js-code-examples/</link>
            <guid>https://smashingmagazine.com/2021/08/cookieless-alternative-embed-html-css-js-code-examples/</guid>
            <pubDate>Tue, 10 Aug 2021 11:45:00 GMT</pubDate>
            <description><![CDATA[Embedding code examples with third-party scripts often leads to tracking or cookies. We always wanted to have a simple website with a good UX, so setting cookies for no reason wasn’t an option for us. Now, with Indiepen, we are proud to introduce a privacy-friendly alternative.]]></description>
            <content:encoded><![CDATA[<p>When we implement websites today, we are <strong>confronted by a lot of things</strong> we need to take care of. Ideally, we want to have a fast, secure, accessible, and fair website. At the same time, we want to have an interactive website with comments, polls, videos, code examples, and many more. </p>
<p>Together with a friend, I launched a tech blog last year and we ran exactly into that issue. We wanted to have a simple solution to embedding HTML, CSS, and JavaScript code examples but existing solutions often include <strong>tracking, cookies</strong>, a ton of features or bad performance. After some research, we realized that we had to build an alternative.</p>
<p>Let’s have a look: </p>


<p><a href="https://indiepen.tech/">Indiepen</a> is a <strong>privacy-friendly, lightweight,</strong> and accessible solution to embed code examples. In fact, we don’t set any cookies or tracking! </p>
Get Started
<p>Indiepen can preview every website that follows a very simple convention. You need to provide a website with the following file structure: </p>
<pre><code>.
├── index.html
├── main.js
└── styles.css</code></pre>

<p>Deploy the code example with your favorite hosting provider (e.g. GitHub Pages, Netlify, or Vercel) and copy the URL. After that, go to <a href="https://indiepen.tech/#code-snippet-generator">our start page</a> and use the code snippet generator. </p>
<p>The generated code looks like this:</p>
<pre><code>&lt;iframe class="indiepen"
  src="https://indiepen.tech/embed/?url=https%3A%2F%2Findiepen.tech%2Fexample%2F&amp;tab=result"
  style="width: 100%; overflow: hidden; display: block; border: 0;"
  title="Indiepen Embed"
  loading="lazy"
  width="100%"
  height="450"&gt;
&lt;/iframe&gt;</code></pre>

<p>You can now use the code snippet and integrate it on your website. That’s it! You should now see your code example with an editor to discover the code. </p>
Under The Hood
<p>It sounds a bit strange nowadays but we haven’t used any JavaScript framework like React or Vue.js. It’s <strong>pure HTML, CSS and JavaScript</strong> with some help from Lea Verou’s <a href="https://prismjs.com/">Prism.js</a> for syntax highlighting. Those libraries are very helpful to implement and maintain complex web applications but in our case, we just have three files we need to fetch and pass onto Prism.js.</p>
<p>Additionally, we have three buttons in the upper right corner to <strong>switch between the HTML, CSS, and JavaScript views</strong>. By introducing a UI framework, we couldn’t deliver a lightweight solution with less than 20 kb in size. For us, it was good learning, that UI libraries are important in our day-to-day business but we should carefully consider them and don’t forget the good old vanilla JavaScript.</p>
Final Words
<p><a href="https://indiepen.tech/">Indiepen</a> is our first open-source project and we are very excited to share our ideas with you. We would love to get feedback and have discussions about a fair web. Get in touch with me on <a href="https://twitter.com/henrik_fricke">Twitter</a> or check out the project on <a href="https://github.com/yetanother-blog/indiepen/">GitHub</a>. </p>
<p>Last but not least, I’d like to mention that Indiepen has a limited scope and we want to <strong>keep it simple by design</strong>. If you need to deal with more complex code examples, preprocessors for CSS or JavaScript, or you want to benefit from a platform to share your ideas, then please consider more sophisticated solutions like <a href="https://codepen.io/">CodePen</a> or <a href="https://jsfiddle.net/">JSFiddle</a>. </p>
<p>Happy coding, everyone!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Henrik Fricke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0fa2ab15-b98d-48b5-ab26-8a1fde75c13f/cookieless-alternative-embed-html-css-js-code-examples.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Smashing Podcast Episode 41 With Eva PenzeyMoog: Designing For Safety]]></title>
            <link>https://smashingmagazine.com/2021/08/smashing-podcast-episode-41/</link>
            <guid>https://smashingmagazine.com/2021/08/smashing-podcast-episode-41/</guid>
            <pubDate>Tue, 10 Aug 2021 05:00:00 GMT</pubDate>
            <description><![CDATA[In this episode, we’re talking about designing for safety. What does it mean to consider vulnerable users in our designs? Drew McLellan talks to expert Eva PenzeyMoog to find out.]]></description>
            <content:encoded><![CDATA[<p>In this episode, we’re talking about designing for safety. What does it mean to consider vulnerable users in our designs? Drew McLellan talks to expert Eva PenzeyMoog to find out.</p>


<h3>Show Notes</h3>
<ul>
<li><a href="https://abookapart.com/products/design-for-safety">Design for Safety</a> from A Book Apart</li>
<li><a href="https://www.theinclusivesafetyproject.com">The Inclusive Safety Project</a></li>
<li>Eva <a href="https://twitter.com/epenzeymoog">on Twitter</a></li>
<li>Eva’s <a href="http://evapenzeymoog.com">personal site </a></li>
</ul>
<h4>Weekly Update</h4>
<ul>
<li><a href="https://www.smashingmagazine.com/2021/07/ecommerce-angular11-headless-paypal/">How To Build An E-Commerce Site With Angular 11, Commerce Layer And Paypal</a> written by Zara Cooper </li>
<li><a href="https://www.smashingmagazine.com/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/">Refactoring CSS: Strategy, Regression Testing And Maintenance</a> written by Adrian Bece </li>
<li><a href="https://www.smashingmagazine.com/2021/08/build-resilient-javascript-ui/">How To Build Resilient JavaScript UIs</a> written by Callum Hart</li>
<li><a href="https://www.smashingmagazine.com/2021/08/react-children-iteration-methods/">React Children And Iteration Methods</a> written by Arihant Verma</li>
<li><a href="https://www.smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/">Frustrating Design Patterns: Disabled Buttons</a> written by Vitaly Friedman</li>
</ul>
<h3>Transcript</h3>
<p></p><p><a href="https://twitter.com/epenzeymoog"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c718c5c7-cf08-41c8-b888-322a8e6da675/epenzeymoog-200x200.jpg" /></a>Drew McLellan: She’s the founder of The Inclusive Safety Project, an author of the book, Designed For Safety, which launches this month from A Book Apart. She is the Principal Designer at 8th Light, where she designs and builds custom software and consults on safe and inclusive design strategy. We know she’s an expert on designing technology to protect the vulnerable, but did you know she’s the international record holder for the most doughnuts performed in a forklift truck? My smashing friends, please welcome, Eva PenzeyMoog. Hi, Eva, how are you?</p>
<p>Eva PenzeyMoog: I’m smashing.</p>
<p>Drew: It’s good to hear. I wanted to talk to you today about the principles of designing products and experiences with the safety of vulnerable users in mind. Would it be fair right from the outset to give some sort of trigger warning for any particular subjects that we might touch on?</p>
<p>Eva: Absolutely, yes. Thank you for bringing that up. Definitely trigger warning for explicit mentions of domestic violence, also possibly some elder abuse and child abuse.</p>
<p>Drew: That’s important. Feel free. If you worry any of those issues, it might be triggers for you. Feel free to skip them. We’ll see you on the next episode. Frame the conversation for us, Eva. When we’re talking about Design For Safety, what sort of safety issues are we talking about? We’re not talking about interfaces for self driving cars. It’s not that sort of safety, is it?</p>
<p>Eva: Right, exactly. Yeah. When I’m talking about safety, I’m really talking about interpersonal safety, the ways that users can weaponize our products to harm each other in an interpersonal way. People who know each other, live together, lots of domestic violence from romantic partners, but also parents and children. There’s also a bit of employers and employees more in the realm of surveillance. But there’s that inner personal actual relationship required in the terms of safety that I’m talking about, as opposed to, yeah, someone anonymous on the internet or some anonymous entity trying to get your data, things like that.</p>
<p>Drew: Could it be issues as simple as ... I think of everyday you see on social networks where there’s the ability for different users to direct message each other, and how that’s supposed to be a helpful little tool to enable people to take a conversation offline or out of public. But that sort of thing could also, without the right safeguards, be a vector for some sort of abuse of control.</p>
<p>Eva: Yeah, absolutely. Definitely anytime you’re allowing users to send any type of text to each other, there’s the possibility for abuse. The Facebook messaging, that one’s a little more obvious, and I think ... Well, I would hope that they do have some safeguards in place that they recognize that maybe you don’t want to see certain messages or want to let someone contact you. But one that’s really interesting and related that I came across while doing research is a lot of different banking applications or services like Venmo that let you share money. There’s often a space for a message. At least with Venmo, it’s required.</p>
<p>Eva: Some banks, it’s optional, but people will send one penny to someone and then have some abusive message or something really harmful or scary or threatening, and there’s not really a way for the user receiving those messages to flag that or to say, "I want to block this user, because why would you want to stop someone sending money from you." That’s a situation where I think the designer simply haven’t considered that abusers are always looking for ways to do things like that. They’re very creative, and it hasn’t been considered in the design.</p>
<p>Drew: We often talk about designing the happy path where everything is used as it’s designed to be used and the experience goes smoothly. Then as engineers, we think about, well, how things might go wrong in terms of validation failing or APIs being down. But I’m not sure ... As an industry, do we have a big blind spot about ways the technologies could be misused when it comes to considering the safety of our users?</p>
<p>Eva: Yeah. I absolutely think there’s a giant blind spot. People are very familiar with these sort of various threat models, like I mentioned, of the anonymous person harassing you on Twitter, different entities trying to hack into a banking company’s data, things like that. But we call it the domestic violence threat model, which is super different and it’s one that most people aren’t thinking about and that’s always been the feedback when I did my talk, designing against domestic violence in the before times before the pandemic stopped conferences. That was always the feedback, is people saying, "I had never heard of this. I had no idea." That’s the goal with my speaking and my book and my work in general is to help people understand what this is and what to do about it because it is something that’s just an enormous blind spot.</p>
<p>Drew: I think we do have a tendency, and obviously it’s dangerous to presume that every user is just like us. Just like the people who are building the service or product, just like our soldiers, like our friends and our family and the people that we know, and to presume that everyone is in a stable home situation and has full ownership or control of their services and devices. That’s not always the case, is it?</p>
<p>Eva: Yeah, absolutely. Definitely not always the case. I think we might look at our friends and family and think that everyone is in a good relationship, but something that I’ve found is that definitely most people who go through domestic violence aren’t exactly telling everyone in their life and shouting it from the rooftops. Most people, just based on the statistics, it’s so common. You probably do know someone who’s been in that situation or is currently in that situation, and they just aren’t really talking about it or they’re not maybe sharing the full extent of the behavior.</p>
<p>Eva: In a lot of ways, it’s understandable that it’s not something people have really thought about in the workplace because it’s not something we think about in society and life in general and we reproduce that in our workplace. My work is trying to get us to talk about it a little more explicitly.</p>
<p>Drew: What are some of the things we should be thinking about when it comes to these considerations? Just thinking about when somebody else might have access to your account, or if a partner knows your password and can get in, you would think that that products have been designed to be controlled by one person, but now maybe somebody nefarious is accessing it. What sort of considerations are there there?</p>
<p>Eva: Yeah. Well, there are so many different things, but that is a really big one that I have ... Three main chapters in my new book are focused on the three big different areas where this happens, and what you just mentioned is the focus of one of them about control and power issues with products that are designed for multiple people. Things like a shared banking account, things like Netflix or Spotify, things like all the sort of different home devices, Internet of Things devices, that are ostensibly meant for multiple people. But there’s the assumption that everyone is a respectful person who’s not looking to find another way to enact power and control over the people around them.</p>
<p>Eva: A lot of joint bank accounts or things like shared credit card service masquerade as a joint account, but really one person has more power. For example, this happened to me and it was really frustrating because I handle most of the finances in my marriage. But when we set up our first joint bank account years ago, they set my husband as the primary user, which basically meant that it was his publicly available data that got used to create a security quiz. When I log into our bank from a new Wi-Fi network, I have to ask him like which of these streets did you live on when you were a kid? They’re actually mostly ... Some of them I can answer.</p>
<p>Eva: I know he’s never lived in California, but a lot of them are actually really good, and I have to ask him even though we’ve been together for a long time. They’re pretty effective at keeping someone out. But it’s like this is supposed to be a joint account, why is it actually ... It’s actually just an account for him that I also have access to. A lot of issues with that where they’re allowing someone to have more control because he could just not give me the answers and then I wouldn’t have access to our finances without having to call the bank or go through something and go through a different process. Yeah. Lots of different issues with control.</p>
<p>Eva: I think whenever you’re designing a product that is going to involve multiple users thinking through how is one user going to use this to control another person, and then how can we put in some safeguards to that, either making it so that one person doesn’t have control. If that’s not possible, how can we at least make sure that the other person understands exactly what’s happening and knows exactly how to regain power? Can we give them a number to call, some sort of setting to change? Whatever it is, it all gets kind of complicated.</p>
<p>Eva: I do have a whole process in the book about what this actually looks like in practice, something a little more specific than just consider domestic violence or just consider who’s in control. I don’t find that type of advice super useful. I do have a very thorough process that designers can put in on top of their actual existing design process to get at some of this stuff.</p>
<p>Drew: I guess, where you have these account ... Having an account is such a commonplace concept. We’re building products or services that the fundamental building block is, okay, we’ve got a user account. We probably don’t even really think too closely about the sorts of issues when setting that up and thinking is the account different from the people who are responsible for the account? Often, they’re just considered to be one entity, and then you have to tack other entities on to it to create joint accounts and those sorts of things. But also considering the issue of what happens to that account if two people go in separate ways, how can that be split apart in the future? Is that something that we should be thinking about from the outset?</p>
<p>Eva: Yeah, absolutely. That’s a really good point you bring up. I think one of the things that I feel really strongly about is that when we center the survivors of different types of abuse in our design, we end up making products that are better for everyone. I did interview a fair amount of people about specifically the financial abuse element, which is really common in domestic violence settings. The statistic is 99% of people in a domestic violence relationship, there’s some element of financial abuse that’s really common. But I also ended up interviewing some people who had tragically lost their spouse, person had died, and they had a joint account.</p>
<p>Eva: That is like a pretty ... It’s a very common, sadly, scenario, but it’s not something that lots of these products are designed to handle, and it can take years to actually get full control over a shared account or over something like ... When my grandma died, she had a lot of foresight and she had given my dad access to everything. But even with that, it still took him a long time to actually get everything squared away because these products just aren’t designed to handle things like that. But if we were to center survivors and think about like, yeah, what does it look like when two people split up, and be able to handle that effectively, that would ultimately help a bunch of other people in other situations.</p>
<p>Drew: We think a lot of think about the onboarding process and creating new accounts and bringing people into a product, and then forget to consider what happens when they leave by whatever means, whether they unfortunately die or how does that get rounded off at the other end of the process. I think it’s something that doesn’t get the attention that it could really benefit from.</p>
<p>Eva: Yeah.</p>
<p>Drew: We carry phones around in our pockets, and they are very personal devices and they’re often literally the keys to our access to information and finances and communication. In a negative situation, that could easily ... The fact that it’s such a personal device can become a vector for control and abuse. Just thinking about things like location services, services like Apple’s Find My, which is great if you’ve got school aged kids and you can check in and see where they are, see they’re where they’re supposed, they’re safe. It is a safety feature in a lot of ways, but that feature can be subverted, can’t it?</p>
<p>Eva: Yeah, absolutely. Yeah, and I’m glad you bring that up because so many of these products are safety features for kids. Yeah, of course, parents want to know where their kids are, they want to make sure that they’re safe, and that can be a really effective tool. I do think there are a lot of issues with parents overusing these products. I found some cases of college students who are still being checked in on by their parents and will get a call if they go to a party off campus like why aren’t you in your dorm room? Things like that. It can get to be too much. But yeah, for the most part, those are great products. But a lot of people do then misuse those to track adults who are not consenting to having their location tracked, and a lot of times they either ...</p>
<p>Eva: You have to go into the service like with Google Maps, for example, location sharing. You have to go into it to see that you’re sharing it with someone. There’s no alert. Similar with Find My. The user whose location is being tracked does get an alert, but in a domestic violence situation, it’s really easy for the abuser to just delete the alert off the person’s phone before they can see it, and then there’s not really another way that that person is going to realize that this is even happening. I think that’s a good example of something that abuse cases are just not being considered when we’re creating things that are ultimately about safety for kids. But we have to realize that there are tons of people out there who are going to use it for not kids in these other settings.</p>
<p>Drew: I suppose in a relationship, you may give consent for your location to be tracked quite willingly at one point in time, and then you may not understand that that continues, and might not be aware that that’s still going on and you’re being tracked without realizing.</p>
<p>Eva: Yeah. That’s a really important thing to consider because within abusive relationships, it’s not like ... The abuse doesn’t start on day one, for the most part. It’s usually a really great relationship at first, and then they slowly introduce different forms of control and taking power and removing the person from their support network, and this all happens over time, often over the years, because if you just started doing this on the first date, most people would be like, "Yeah, no, I’m out." But once there’s this loving relationship, it becomes a lot harder to just leave that person.</p>
<p>Eva: But yeah, a lot of times things that were totally safe to do in the beginning of the relationship are no longer safe, but the person has long since forgotten that they shared their location with this person, and then again there’s not a good way to be reminded. There are some things like to their credit, Google sends an email every 30 days, although some people have said that they don’t actually receive them that frequently, and some people do. I’m not sure what exactly is going on, but they do send a summary email with these are all the people who you’re sharing your location with, which is really awesome.</p>
<p>Eva: But I do think a lot of damage can be done in 30 days. I would prefer something that’s more frequent or even an omnipresent thing that’s letting you know that this is happening, or something that’s happening more frequently, then would enable the abuser to just delete that notification. Yeah, that’s a really good point, is that consent. It’s a lot of things that come from sexual assaults consent practices. I think there’s so much relevance for tech. Just because you consented to something in the past doesn’t mean you consent to it now or in the future. But in tech, we are like, "Well, they consented five years ago, so that consent, it’s still valid," and that’s really not the case. We should be getting their consent again later on.</p>
<p>Drew: Yes, it presents all sorts of challenges, doesn’t it? In how these things are designed, because you don’t want to put so many roadblocks into the design of a product that it becomes not useful. Or in a case where you’re tracking a child and they’ve not really reconsented that day, and all of a sudden, they’re missing, and they haven’t got the service enabled. But again, making sure that that consent is only carrying on for as long as it’s truly given. I think it’s easy enough in a shared document, if you’re using Google Documents, or whatever, to see who’s looking at that document at that time, all the icons appear, if ... The avatars of all the different users who were there and have access. You thought those sorts of solutions could work equally well for when people are accessing your location?</p>
<p>Eva: Yeah, totally. Yeah, it does get sticky. There aren’t a lot of straightforward, easy solutions with this stuff, and the stuff about, yeah, you want to ... Maybe it’s not a great idea to let your eight-year-olds give consent every single day because what if one day they’re just like, "No," or they mistakenly say no or whatever, and then all of a sudden, you can’t find them. Yeah, that’s a real scenario. I think, with some of this stuff, it’s like I don’t think it’s going to be realistic to say, "Well, this production shouldn’t exist or you should get consent every day."</p>
<p>Eva: But then in those cases, there are still things you can do like telling the person that this person, this other user can view their location even if there’s not a lot that they can do about it. At the very least giving them that information so that they clearly understand what’s happening and then can take actions to keep themselves safe if they’re in that abusive relationship, it’s going to be really useful. Maybe now they know, okay, I’m not going to take my phone with me when I leave the office during my lunch hour to see my friend who my partner doesn’t approve of because she is always very much advocating that I leave the relationship and he would know that I had gone somewhere if I bring my phone.</p>
<p>Eva: But if I just keep my phone at the office, then he won’t know. Being able to make those types of informed decisions. Even if you’re not able to necessarily end the location sharing, there are definitely other things that we can do that will keep users safe while still conserving the core functionality of the feature product.</p>
<p>Drew: Yes. It comes down to design decisions, isn’t it? And finding solutions to difficult problems, but first understanding that the problem is there and needs to be solved for, which I think is where this conversation is so important in understanding the different ways things are used. Increasingly, we have devices with microphones and cameras in them. We have plenty of surveillance cameras in our homes and on our doorbells, and covert surveillance isn’t just something from spy movies and cop shows anymore, is it?</p>
<p>Eva: Yeah. Oh, yeah. It’s such a huge problem. I have very strong feelings about this stuff, and I know a lot of people are really into these devices and I think that’s totally fine. I do think that they’re misused a lot for surveillance. I think a lot of spouses and family members, but also a lot of ... This is where I think getting into stuff with children, to me at least, it becomes a little more clear cut that even children have some rights to privacy, and especially when you look at teenagers need a lot more independence and they need space, and there’s literally brain development stuff going on around independence.</p>
<p>Eva: I think there’s ways to help your kids be safe online and make good decisions, and also to sometimes check in on what they’re doing without it being something where you’re constantly watching them or constantly injecting yourself into their lives in ways that they don’t want. But yeah, the plethora of different surveillance devices is just out of control, and people are using these all the time to covertly watch each other or to not even overtly. Sometimes it’s out in the open like, "Yeah, I’m watching you. What are you going to do about it? You can’t because we’re in this relationship where I’ve chosen to use violence to keep my power and control over you."</p>
<p>Eva: It becomes a really big problem. Something that I came across a lot is people ... It becomes one more way for the abuser to isolate the survivor away from their support network. You can’t have a private phone conversation with your friend or your sibling or your therapist. Suddenly, there’s nowhere in your home that’s actually a private space, which has also been a really big problem during the pandemic where people are forced to be at home. We’ve seen such a huge increase in domestic violence, as well as the tech facilitated domestic violence because abusers have had more time to figure out how to do these things, and it’s a much smaller space that they have to wire up for control. A lot of people have been doing that. It’s been a really big problem.</p>
<p>Drew: I would expect that the makers of these sorts of products, surveillance cameras and what have you, would say, "We’re just making tools here. We don’t have any responsibility over how they’re used. We can’t do anything about that." But would you argue that, yes, they do have a responsibility for how those tools are used?</p>
<p>Eva: Yeah, I would. I would, first of all, tell someone who said that, "You’re a human being first before you’re an employee at a tech company, capitalist moneymaker person. You’re a human being and your products are affecting human beings and you’re responsible for that." The second thing I would say is that just demanding a higher level of tech literacy from our users is a really problematic mindset to have, because it’s easy for those of us who work in tech to say, "Well, people just need to learn more about it. We’re not responsible if someone doesn’t understand how our product is being used."</p>
<p>Eva: But the majority of people don’t work in tech and they’re still, obviously, some really plenty of really tech savvy people out there who don’t work in tech. But demanding that people understand exactly how every single app they have, every single thing that they’re using on their phone or their laptop, every single device that they have in their homes, understanding every single feature and identifying the ways that it could be used against them, that’s such a huge burden. It might not seem like a big deal if you’re just thinking about your one product like, oh, well, of course, people should take the time to understand it.</p>
<p>Eva: But we’re talking about dozens of products that we’re putting the onus on people who are going through a dangerous situation to understand, which is just very unrealistic and pretty inhumane, especially considering what abuse and surveillance and these different things do to your brain if you’re constantly in a state of being threatened and in this survival mode all the time. Your brain isn’t going to be able to have full executive functioning over figuring out, looking at this app and trying to identify how is my husband using this to watch me or to control me or whatever it is. I would say that that’s really just, honestly, a crappy mindset to have and that we are responsible for how people use our products.</p>
<p>Drew: When you think most people don’t understand more than one or two buttons on their microwave, how can we be expected to understand the capabilities and the functioning of all the different apps and services that we come into contact with?</p>
<p>Eva: Absolutely. Yeah.</p>
<p>Drew: When it comes to designing products and services, I feel as a straight white English speaking male that I’ve got a huge blind spot through the privileged position that society affords me, and I feel very naïve and I’m aware that could lead to problematic design choices in things that I’m making. Are there steps that we can take and a process we can follow to make sure that we’re exposing those blind spots and doing our best to step outside our own realm of experience and include more scenarios?</p>
<p>Eva: Yes, absolutely. I have so many thoughts about this. I think there’s a couple things. First, we’re all responsible for educating ourselves about our blind spots. Everyone has blind spots. I think maybe a cis white male has more blind spots than other groups, but it’s not like there’s some group that is going to have no blind spots. Everyone has them. I think educating ourselves about the different ways that our tech can be misused. I think it’s more than ... Obviously, interpersonal safety is my thing that I work on. But there’s all these other things, too, that I’m also constantly trying to learn about and figure out how do I make sure that the tech I’m working on isn’t going to perpetuate these different things.</p>
<p>Eva: I really like Design For Real Life by Sara Wachter-Boettcher and Eric Meyer is great for inclusive design and compassionate design. But then also I’ve been learning about algorithms and racism and sexism and different issues with algorithms. There’s so many different things that we need to consider, and I think we’re all responsible for learning about those things. Then I also think bringing in the lived experience of people who have gone through these things once you’ve identified, okay, racism is going to be an issue with this product, and we need to make sure that we’re dealing with that and trying to prevent it and definitely giving ways for people to report racism or what have you.</p>
<p>Eva: One of the things, the example I give in my book is Airbnb has a lot of issues with racism and racist hosts. Even just the study about if you have ... If your photo is of a black person, you’re going to get denied. Your request for booking a stay are going to get denied more frequently than if you have a white person in your photo. I think me as a white person, that’s something that I don’t think I could just go and learn about and then speak as an authority on the issue. I think in that case, you need to bring in someone with that lived experience who can inform you, so hiring a black designer consultant because obviously we know there’s not great diversity actually in tech.</p>
<p>Eva: Ideally, you would already have people on your team who could speak to that, but I think ... But then it’s so complicated. This is where it gets into do we demand that sort of labor from our teammates? That can be problematic too. The black person on your team is probably already going to be facing a lot of different things, and then to have the white people be like, "Hey, talk to me about traumatic experiences you’ve had because of your race." We shouldn’t probably be putting that type of burden on people, unless ...</p>
<p>Eva: Plenty of people will willingly bring that up and speak about it, and I will speak about things, my experience as a woman, but it’s maybe not something I’m wanting to do every single day. In that case, hiring people who do do that for work and then always paying people for their lived experiences and making it not exploitative in terms of actually compensating people for that knowledge and that lived experience.</p>
<p>Drew: Yeah. I think it really does underscore how incredibly important and beneficial is to have diverse teams working on products, bringing in all sorts of different experiences.</p>
<p>Eva: Yeah, absolutely.</p>
<p>Drew: One of the things that you cover in your book in the design process is creating abuser and survivor archetypes to help you test your features against. Could you tell us a little bit about that idea?</p>
<p>Eva: Yeah. This came out of wanting to have sort of persona artifact that would help people understand very clearly what is the problem. This is something that comes after the team has done research into the issue and has identified the different likely issues when it comes to interpersonal safety and can very clearly articulate what those are. Then you make the abuser archetype, which is the person who is trying to use your product for whatever the harm is, and then the survivor archetype, who is going to be the victim of that harm. The important thing about these is having the goals. It’s pretty much just like you find a picture, or you don’t even need a picture, but it just articulates what the abuse is and then the person’s goals.</p>
<p>Eva: If it’s someone who wants to figure out where their ex girlfriend lives now because he wants to stalk her, his goal is to stalk her. Then the survivor’s goal ... Well, sorry, the abuser’s goal would be to use your product. Let’s say it’s Strava, for example, is one of the ones I use as an example in the book. I want to use Strava to track down my ex girlfriend, and then the survivor archetype is saying, "I want to keep my location secret from my ex who is trying to stalk me." Then you can use those goals to help inform some of your design and to test your product to see is there anything about the survivor’s location data that is publicly available to someone who’s trying to find their location, even if they have enabled all of their privacy features?</p>
<p>Eva: I use Strava as the example because up until a few months ago, there was that ability. There was something that even if you had put everything to private, if you were running or exercising nearby someone else using the app for a certain amount of time, it’s unclear how close you have to be or how long you have to be running the same street as this other person, it’ll tag them as having appeared in your workout. That would be an example where the abuser was able to meet his goals, he was able to find his ex in this way. Then you would know, okay, we need to work against it and prevent that goal from being successful.</p>
<p>Drew: Especially, you can’t think up every scenario. You can’t work out what an abuser would try to do in all circumstances. But by covering some key apparent problems that could crop up, then I guess you’re closing lots of doors for other lines of abuse that you haven’t thought of.</p>
<p>Eva: Yes. Yeah, exactly. That brings up a really good other related point, which is that, yeah, you’re probably not going to think of everything. Then having ways for users to report issues and then being the type of team and company that can take those criticisms or issues that users identify with some grace and quickly course correcting because there’s always going to be things you don’t think about and users are going to cover all sorts of things. I feel like this always happens. Being able to have a way to get that feedback and then to quickly course correct is also a really big part of the whole process of designing for safety.</p>
<p>Drew: Is there a process that would help you come up with these potential problems? Say you’re designing a product that uses location data, what process would you go through to think of the different ways it could be abused? Is there anything that helps in that regard?</p>
<p>Eva: Yeah. This is something I get more in depth about in the book, but having some research around it first is the first thing. With location services is a pretty easy one, so to speak. There’s so many documented issues with location services. There’s also been academic studies done on this stuff, there’s lots of literature out there that could help inform the issues that you’re going to face. Then the other thing that I suggest that teams do is after doing this research is doing a brainstorm for novel of use cases that have not been covered elsewhere.</p>
<p>Eva: The way I usually do this is I have the team do a Black Mirror brainstorm. Let’s make a Black Mirror episode. What’s the worst, most ridiculous, just anything goes, worst case scenario for this product or feature that we’re talking about? People usually come up with some really wild stuff and it’s actually usually really fun. Then you say, "Okay, let’s dial it back. Let’s use this as inspiration for some more realistic issues that we might come across," and then people are usually able to identify all sorts of things that their product might enable.</p>
<p>Drew: For people listening who feel like they would really love to champion this area of work within their organization, do you have any advice as to how they could go about doing that?</p>
<p>Eva: Yeah. There is a lot of stuff about this in the book, about integrating this into your practice and bringing it to your company. Advice for things like talking to a reluctant stakeholder whose only concern is, well, how much is this going to cost me? How much extra time is this going to take? Being able to give really explicit answers about things like that is really useful. Also, I have recordings of my conference talk which people usually say, "I had just had no idea that this was a thing." You can help educate your team or your company.</p>
<p>Eva: I talked about this in the book too, honestly, it can be awkward and weird to bring this stuff up and just being mentally prepared for how it’s going to feel to be like, "We should talk about domestic violence," or, "We should talk about invasive child surveillance." It can be really hard and just weird. One of the pieces of advice I give is for people to talk to a supportive coworker ahead of time, who can back them up if you’re going to bring this up in a meeting and just help reduce the weirdness, and there are some other tactics in the book. But those are definitely the big ones.</p>
<p>Drew: I would normally ask at this point where our listeners should go to find out more about the topic. But I know that the answer is actually to go and read your book. We’ve only really just scratched the surface on what’s covered in Design For Safety, which is out now, this August 2021 from A Book Apart. The book, for me, it’s sometimes an uneasy read in terms of content, but it’s superbly written and it really opened my eyes to a very important topic. One thing I really like about all the A Book Apart books is they’re small and focused and they’re easy to consume. I would really recommend that listeners check out the book if the topic is interesting to them.</p>
<p>Eva: Yeah, thanks for that. Theinclusivesafetyproject.com is the website I have to house all of this information. There’s a lot of great resources in the back of the book for people who want to learn more. But if you just want something and more immediately, you can go to Theinclusivesafetyproject.com and there’s a resources page there that has different sort of articles or studies to look at different people working in related spaces to follow on Twitter, books to read, things like that.</p>
<p>Drew: Right. I’ve been learning what it means to design for safety. What have you been learning about, Eva?</p>
<p>Eva: I have been learning about data. I’m reading a really interesting book called Living in Data by Jer Thorp, which I thought it was going to be all about different issues with big data, which is such a big thing but it’s actually an extremely thoughtful, much more interesting approach to what it means to live in data and just how much data is taken from us every day and what’s done with it and just data out there in the world. It’s really interesting and important, and yeah, I would definitely recommend that book.</p>
<p>Drew: No, amazing. If you the listener would like to hear more from Eva, you can follow her on Twitter where she’s @epenzeymoog, and you can find all her work linked from her website at evapenzeymoog.com. Design For Safety is published abookapart.com and is available now. Thanks for joining us today, Eva. Do you have any parting words?</p>
<p>Eva: Please get vaccinated so that we can go back to normal.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Drew McLellan)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7449af49-11de-4b63-b8fd-ff823d54b095/smashing-podcast-episode-41.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[HTTP/3 From A To Z: Core Concepts (Part 1)]]></title>
            <link>https://smashingmagazine.com/2021/08/http3-core-concepts-part1/</link>
            <guid>https://smashingmagazine.com/2021/08/http3-core-concepts-part1/</guid>
            <pubDate>Mon, 09 Aug 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[What exactly is HTTP/3? Why was it needed so soon after HTTP/2 (which was only finalized in 2015)? How can or should you use it? And especially, how does this improve web performance? Let’s find out.]]></description>
            <content:encoded><![CDATA[<p>You may have read some blog posts or heard conference talks on this topic and think you know the answers. You’ve probably heard things like: “HTTP/3 is much faster than HTTP/2 when there is packet loss”, or “HTTP/3 connections have less latency and take less time to set up”, and probably “HTTP/3 can send data more quickly and can send more resources in parallel”.</p>
<p>These statements and articles typically skip over some <strong>crucial technical details</strong>, are lacking in nuance, and usually are only partially correct. Often they make it seem as if HTTP/3 is a revolution in performance, while it is really a more modest (yet still useful!) <strong>evolution</strong>. This is dangerous, because the new protocol will probably not be able to live up to these high expectations in practice. I fear this will lead to many people ending up disappointed and to newcomers being confused by heaps of blindly perpetuated misinformation.</p>
<p>I’m afraid of this because we’ve seen exactly the same happen with HTTP/2. It was heralded as an amazing performance revolution, with exciting new features such as server push, parallel streams, and prioritization. We would have been able to stop bundling resources, stop sharding our resources across multiple servers, and heavily streamline the page-loading process. Websites would magically become 50% faster with the flip of a switch!</p>
<p>Five years later, we know that <a href="https://www.ctrl.blog/entry/http2-push-chromium-deprecation.html">server push doesn’t really work</a> in practice, <a href="https://github.com/andydavies/http2-prioritization-issues">streams and prioritization are often badly implemented</a>, and, consequently, (reduced) <a href="https://jakearchibald.com/2021/f1-perf-part-7/#lots-of-little-resources-vs-one-big-resource">resource</a> <a href="https://twitter.com/yoavweiss/status/1254650804524507136">bundling</a> and <a href="https://twitter.com/zachleat/status/1055219667894259712">even sharding</a> are <a href="https://speeder.edm.uhasselt.be/webist/files/h2bestpractices_RobinMarx_WEBIST2017.pdf">still good practices</a> in some situations.</p>
<p>Similarly, other mechanisms that tweak protocol behavior, such as <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content">preload hints</a>, often contain <a href="https://twitter.com/csswizardry/status/1349681832393109510">hidden</a> <a href="https://twitter.com/programmingart/status/1351557858354225159">depths</a> and <a href="https://andydavies.me/blog/2019/02/12/preloading-fonts-and-the-puzzle-of-priorities/">bugs</a>, making them difficult to use correctly.</p>
<p>As such, I feel it is important to prevent this type of misinformation and these <strong>unrealistic expectations</strong> from spreading for HTTP/3 as well.</p>
<p>In this article series, I will discuss the new protocol, especially its <strong>performance features</strong>, with more nuance. I will show that, while HTTP/3 indeed has some promising new concepts, sadly, their impact will likely be relatively limited for most web pages and users (yet potentially crucial for a small subset). HTTP/3 is also quite challenging to set up and use (correctly), so take care when configuring the new protocol.</p>
<p>This series is divided into three parts:</p>
<ol>
<li><strong>HTTP/3 history and core concepts</strong><br />This is targeted at people new to HTTP/3 and protocols in general, and it mainly discusses the basics.</li>
<li><a href="https://www.smashingmagazine.com/2021/08/http3-performance-improvements-part2/"><strong>HTTP/3 performance features</strong></a><br />This is more in depth and technical. People who already know the basics can start here.</li>
<li><strong>Practical HTTP/3 deployment options</strong> (<em>coming up soon!</em>)<br />This explains the challenges involved in deploying and testing HTTP/3 yourself. It details how and if you should change your web pages and resources as well.</li>
</ol>
<p><em>This series is aimed mainly at web developers who do not necessarily have a deep knowledge of protocols and would like to learn more. However, it does contain enough technical details and many links to external sources to be of interest to more advanced readers as well.</em></p>
Why Do We Need HTTP/3?
<p>One question I’ve often encountered is, “Why do we need HTTP/3 so soon after HTTP/2, which was only standardized in 2015?” This is indeed strange, until you realize that we didn’t really need a new HTTP version in the first place, but rather an upgrade of the underlying <em>Transmission Control Protocol</em> (TCP).</p>
<p>TCP is the main protocol that provides crucial services such as <strong>reliability and in-order delivery</strong> to other protocols such as HTTP. It’s also one of the reasons we can keep using the Internet with many concurrent users, because it smartly limits each user’s bandwidth usage to their fair share.</p>
<blockquote><strong>Did You Know?</strong><br /><br />When using HTTP(S), you’re really using several protocols besides HTTP at the same time. Each of the protocols in this “stack” has its own features and responsibilities (see image below). For example, while HTTP deals with URLs and data interpretation, Transport Layer Security (TLS) ensures security by encryption, TCP enables reliable data transport by retransmitting lost packets, and Internet Protocol (IP) routes packets from one endpoint to another across different devices in between (middleboxes).</blockquote>

<p>This “layering” of protocols on top of one another is done to allow easy reuse of their features. Higher-layer protocols (such as HTTP) don’t have to reimplement complex features (such as encryption) because lower-layer protocols (such as TLS) already do that for them. As another example, most applications on the Internet use TCP internally to ensure that all of their data are transmitted in full. For this reason, TCP is one of the most widely used and deployed protocols on the Internet.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/37fc4bc9-65cb-4290-a1ed-6ad39762f18a/protocol-stack-preview.png" /></p>
<p>TCP has been a cornerstone of the web for decades, but it started to show its age in the late 2000s. Its intended replacement, a new transport protocol named <a href="https://www.rfc-editor.org/rfc/rfc9000.html">QUIC</a>, differs enough from TCP in a few key ways that running HTTP/2 directly on top of it would be very difficult. As such, HTTP/3 itself is a relatively small adaptation of HTTP/2 to make it compatible with the new QUIC protocol, which includes most of the new features people are excited about.</p>
<p>QUIC is needed because TCP, which has been around since the early days of the Internet, <strong>was not really built with maximum efficiency</strong> in mind. For example, TCP requires a “<a href="https://developer.mozilla.org/en-US/docs/Glossary/TCP_handshake">handshake</a>” to set up a new connection. This is done to ensure that both client and server exist and that they’re willing and able to exchange data. It also, however, takes a <strong>full network round trip</strong> to complete before anything else can be done on a connection. If the client and server are geographically distant, each round-trip time (RTT) can take over 100 milliseconds, incurring noticeable delays.</p>
<p>As a second example, TCP sees all of the data it transports as a <strong>single “file” or byte stream</strong>, even if we’re actually using it to transfer several files at the same time (for example, when downloading a web page consisting of many resources). In practice, this means that if TCP packets containing data of a single file are lost, then all other files will also get delayed until those packets are recovered.</p>
<p>This is called <em>head-of-line (HoL) blocking</em>. While these inefficiencies are quite manageable in practice (otherwise, we wouldn’t have been using TCP for over 30 years), they do affect higher-level protocols such as HTTP in a noticeable way.</p>
<p>Over time, we’ve tried to evolve and upgrade TCP to improve some of these issues and even introduce new performance features. For example, <a href="https://squeeze.isobar.com/2019/04/11/the-sad-story-of-tcp-fast-open">TCP Fast Open</a> gets rid of the handshake overhead by allowing higher-layer protocols to send data along from the start. Another effort is called <a href="https://www.multipath-tcp.org">MultiPath TCP</a>. Here, the idea is that your mobile phone typically has both Wi-Fi and a (4G) cellular connection, so why not use them both at the same time for extra throughput and robustness?</p>
<p>It’s not terribly difficult to implement these TCP extensions. However, it is extremely <strong>challenging to actually deploy them at Internet scale</strong>. Because TCP is so popular, almost every connected device has its own implementation of the protocol on board. If these implementations are too old, lack updates, or are buggy, then the extensions won’t be practically usable. Put differently, all implementations need to know about the extension in order for it to be useful.</p>
<p>This wouldn’t be much of a problem if we were only talking about end-user devices (such as your computer or web server), because those can relatively easily be updated manually. However, many other devices are sitting between the client and the server that also have their own TCP code on board (examples include firewalls, load balancers, routers, caching servers, proxies, etc.).</p>
<p>These <strong>middleboxes</strong> are often more difficult to update and sometimes more strict in what they accept. For example, if the device is a firewall, it might be configured to block all traffic containing (unknown) extensions. In practice, it turns out that an enormous number of active middleboxes make certain assumptions about TCP that no longer hold for the new extensions.</p>
<p>Consequently, it can take <strong>years to even over a decade</strong> before enough (middlebox) TCP implementations become updated to actually use the extensions on a large scale. You could say that it has become <em>practically</em> impossible to evolve TCP.</p>
<p>As a result, it was clear that we would need a replacement protocol for TCP, rather than a direct upgrade, to resolve these issues. However, due to the sheer complexity of TCP’s features and their various implementations, creating something new but better from scratch would be a monumental undertaking. As such, in the early 2010s it was decided to postpone this work.</p>
<p>After all, there were issues not only with TCP, <a href="https://hpbn.co/http2/#design-and-technical-goals">but also with HTTP/1.1</a>. We chose to split up the work and first “fix” HTTP/1.1, leading to what is now HTTP/2. When that was done, the work could start on the replacement for TCP, which is now QUIC. Originally, we had hoped to be able to run HTTP/2 on top of QUIC directly, but in practice this would make implementations too inefficient (mainly due to feature duplication).</p>
<p>Instead, <strong>HTTP/2 was adjusted in a few key areas</strong> to make it compatible with QUIC. This tweaked version was eventually named HTTP/3 (instead of HTTP/2-over-QUIC), mainly for marketing reasons and clarity. As such, the differences between HTTP/1.1 and HTTP/2 are much more substantial than those between HTTP/2 and HTTP/3.</p>
<h3>Takeaway</h3>
<p>The key takeaway here is that what we needed was not really HTTP/3, but rather <strong>“TCP/2”</strong>, and we got HTTP/3 “for free” in the process. The main features we’re excited about for HTTP/3 (faster connection set-up, less HoL blocking, connection migration, and so on) are really all coming from QUIC.</p>
What Is QUIC?
<p>You might be wondering why this matters? Who cares if these features are in HTTP/3 or QUIC? I feel this is important, because <strong>QUIC is a generic transport protocol</strong> which, much like TCP, can and will be used for many use cases in addition to HTTP and web page loading. For example, DNS, SSH, SMB, RTP, and so on can all run over QUIC. As such, let’s look at QUIC a bit more in depth, because it’s here where most of the misconceptions about HTTP/3 that I’ve read come from.</p>
<p>One thing you might have heard is that QUIC runs on top of yet another protocol, called the <em>User Datagram Protocol</em> (UDP). This is true, but not for the (performance) reasons many people claim. Ideally, QUIC would have been a fully independent new transport protocol, running directly on top of IP in the protocol stack shown in the image I shared above.</p>
<p>However, doing that would have led to the same issue we encountered when trying to evolve TCP: All devices on the Internet would first have to be updated in order to recognize and allow QUIC. Luckily, we can build QUIC on top of the one other broadly supported transport-layer protocol on the Internet: UDP.</p>
<blockquote><strong>Did You Know?</strong><br /><br />
UDP is the most bare-bones transport protocol possible. It really doesn’t provide any features, besides so-called port numbers (for example, HTTP uses port 80, HTTPS is on 443, and DNS employs port 53). It does not set up a connection with a handshake, nor is it reliable: If a UDP packet is lost, it is not automatically retransmitted. UDP’s “best effort” approach thus means that it’s about as performant as you can get:

There’s no need to wait for the handshake and there’s no HoL blocking. In practice, UDP is mostly used for live traffic that updates at a high rate and thus suffers little from packet loss because missing data is quickly outdated anyway (examples include live video conferencing and gaming). It’s also useful for cases that need low up-front delay; for example, DNS domain name lookups really should only take a single round trip to complete.</blockquote>

<p>Many sources claim that HTTP/3 is built on top of UDP because of performance. They say that HTTP/3 is faster because, just like UDP, it doesn’t set up a connection and doesn’t wait for packet retransmissions. <strong>These claims are wrong.</strong> As we’ve said above, UDP is used by QUIC and, thus, HTTP/3 mainly because the hope is that it will make them easier to deploy, because it is already known to and implemented by (almost) all devices on the Internet.</p>
<p>On top of UDP, then, <strong>QUIC essentially reimplements almost all features that make TCP such a powerful and popular (yet somewhat slower) protocol</strong>. QUIC is absolutely reliable, using <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-generating-acknowledgments">acknowledgements for received packets</a> and <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-retransmission-of-informati">retransmissions</a> to make sure lost ones still arrive. QUIC also still sets up a connection and has a <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-cryptographic-and-transport">highly complex handshake</a>.</p>
<p>Finally, QUIC also uses so-called <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-flow-control">flow-control</a> and <a href="https://www.rfc-editor.org/rfc/rfc9002.html">congestion-control</a> mechanisms that prevent a sender from overloading the network or the receiver, but that also make TCP slower than what you could do with raw UDP. The key thing is that QUIC implements these features in a smarter, more performant way than TCP. It combines decades of deployment experience and best practices of TCP with some core new features. We will discuss these features in more depth later in this article.</p>
<h3>Takeaway</h3>
<p>The key takeaway here is that there is no such thing as a free lunch. HTTP/3 isn’t magically faster than HTTP/2 just because we swapped TCP for UDP. Instead, we’ve reimagined and implemented a much more advanced version of TCP and called it QUIC. And because we want to make QUIC easier to deploy, we run it over UDP.</p>
The Big Changes
<p>So, how exactly does QUIC improve upon TCP, then? What is so different? There are several new concrete features and opportunities in QUIC (0-RTT data, connection migration, more resilience to packet loss and slow networks) that we will discuss in detail in the next part of the series. However, all of these new things basically boil down to four main changes:</p>
<ol>
<li>QUIC deeply integrates with TLS.</li>
<li>QUIC supports multiple <em>independent</em> byte streams.</li>
<li>QUIC uses connection IDs.</li>
<li>QUIC uses frames.</li>
</ol>
<p>Let’s take a closer look at each of these points.</p>
<h3>There Is No QUIC Without TLS</h3>
<p>As mentioned, TLS (the <a href="https://www.cloudflare.com/en-gb/learning/ssl/transport-layer-security-tls/">Transport Layer Security protocol</a>) is in charge of securing and encrypting data sent over the Internet. When you use HTTPS, your plaintext HTTP data is first encrypted by TLS, before being transported by TCP.</p>
<blockquote><strong>Did You Know?</strong><br /><br />TLS’s <a href="https://hpbn.co/transport-layer-security-tls/">technical details</a>, luckily, aren’t really necessary here; you just need to know that encryption is done using some pretty advanced math and very large (prime) numbers. These mathematical parameters are negotiated between the client and the server during a separate TLS-specific cryptographic handshake. Just like the TCP handshake, this negotiation can take some time.

In older versions of TLS (say, version 1.2 and lower), this typically takes two network round trips. Luckily, newer versions of TLS (1.3 is the latest) reduce this to just one round trip. This is mainly because TLS 1.3 severely limits the different mathematical algorithms that can be negotiated to just a handful (the most secure ones). This means that the client can just immediately guess which ones the server will support, instead of having to wait for an explicit list, saving a round trip.</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f2240cb4-eb62-4054-ad19-0e72190e0a4f/connection-setup.png" /></p>
<p>In the early days of the Internet, encrypting traffic was quite costly in terms of processing. Additionally, it was also not deemed necessary for all use cases. Historically, TLS has thus been a fully separate protocol that can <em>optionally</em> be used on top of TCP. This is why we have a distinction between HTTP (without TLS) and HTTPS (with TLS).</p>
<p>Over time, our attitude towards security on the Internet has, of course, changed to “<a href="https://blog.chromium.org/2021/03/a-safer-default-for-navigation-https.html">secure by default</a>”. As such, while HTTP/2 can, in theory, run directly over TCP without TLS (and this is even defined in the RFC specification as <a href="https://tools.ietf.org/html/rfc7540#section-3.1">cleartext HTTP/2</a>), no (popular) web browser actually supports this mode. In a way, the browser vendors made a conscious trade-off for more security at the cost of performance.</p>
<p>Given this clear evolution towards always-on TLS (especially for web traffic), it is no surprise that the designers of QUIC decided to take this trend to the next level. Instead of simply not defining a cleartext mode for HTTP/3, they elected to ingrain encryption deeply into QUIC itself. While the first Google-specific versions of QUIC used a custom set-up for this, standardized QUIC uses the existing TLS 1.3 itself directly.</p>
<p>For this, it sort of breaks the typical clean <strong>separation between protocols in the protocol stack</strong>, as we can see in the previous image. While TLS 1.3 can still run independently on top of TCP, QUIC instead sort of encapsulates TLS 1.3. Put differently, there is no way to use QUIC without TLS; QUIC (and, by extension, HTTP/3) is always fully encrypted. Furthermore, QUIC encrypts almost all of its packet header fields as well; transport-layer information (such as packet numbers, which are never encrypted for TCP) is no longer readable by intermediaries in QUIC (even some of the packet header flags are encrypted).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbf86b42-8f20-4b27-aea5-f1fc164b2683/tcp-vs-quic-packetization.png" /></p>
<p>For all this, QUIC first uses the TLS 1.3 handshake more or less as you would with TCP to establish the mathematical encryption parameters. After this, however, QUIC takes over and encrypts the packets itself, whereas with TLS-over-TCP, TLS does its own encryption. This seemingly small difference represents a fundamental conceptual change towards always-on encryption that is enforced at ever lower protocol layers.</p>
<p>This approach provides QUIC with several benefits:</p>
<ol>
<li><strong>QUIC is more secure for its users.</strong><br />There is no way to run cleartext QUIC, so there are also fewer options for attackers and eavesdroppers to listen in on. (Recent research has shown <a href="https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c">how dangerous HTTP/2’s cleartext option can be</a>.)</li>
<li><strong>QUIC’s connection set-up is faster.</strong><br />While for TLS-over-TCP, both protocols need their own separate handshakes, QUIC instead combines the transport and cryptographic handshake into one, saving a round trip (see image above). We’ll discuss this in more detail in part 2 (<em>coming soon!</em>).</li>
<li><strong>QUIC can evolve more easily.</strong><br />Because it is fully encrypted, middleboxes in the network can no longer observe and interpret its inner workings like they can with TCP. Consequently, they also can no longer break (accidentally) in newer versions of QUIC because they failed to update. If we want to add new features to QUIC in the future, we “only” have to update the end devices, instead of all of the middleboxes as well.</li>
</ol>
<p>Next to these benefits, however, there are also some potential downsides to extensive encryption:</p>
<ol>
<li><strong>Many networks will hesitate to allow QUIC.</strong><br />Companies might want to block it on their firewalls, because detecting unwanted traffic becomes more difficult. ISPs and intermediate networks might block it because metrics such as average delays and packet loss percentages are no longer easily available, making it more difficult to detect and diagnose problems. This all means that QUIC will probably never be universally available, which we’ll discuss more in part 3 (<em>coming soon!</em>).</li>
<li><strong>QUIC has a higher encryption overhead.</strong><br />QUIC encrypts each individual packet with TLS, whereas TLS-over-TCP can encrypt several packets at the same time. This potentially makes QUIC slower for high-throughput scenarios (as we’ll see in part 2 (<em>coming soon!</em>)).</li>
<li><strong>QUIC makes the web more centralized.</strong><br />A complaint I’ve encountered often is something like, “QUIC is being pushed by Google because it gives them full access to the data while sharing none of it with others”. I mostly disagree with this. First, QUIC doesn’t hide more (or less!) user-level information (for example, which URLs you are visiting) from outside observers than TLS-over-TCP does (QUIC keeps the status quo).</li>
</ol>
<p>Secondly, while Google initiated the QUIC project, the final protocols we’re talking about today were designed by a much wider team in the Internet Engineering Task Force (IETF). IETF’s QUIC is technically very different from Google’s QUIC. Still, it is true that the people in the IETF are mostly from larger companies like Google and Facebook and CDNs like Cloudflare and Fastly. Due to QUIC’s complexity, it will be mainly those companies that have the necessary know-how to correctly and performantly deploy, for example, HTTP/3 in practice. This will probably lead to more centralization in those companies, which _is_ a real concern.</p>
<blockquote><strong>On A Personal Note:</strong><br /><br />This is one of the reasons I write these types of articles and do a lot of <a href="https://www.youtube.com/results?search_query=robin+marx+quic">technical talks</a>: to make sure more people understand the protocol’s details and can use them independently of these big companies.</blockquote>

<h4>Takeaway</h4>
<p>The key takeaway here is that QUIC is <strong>deeply encrypted by default</strong>. This not only improves its security and privacy characteristics, but also helps its deployability and evolvability. It makes the protocol a bit heavier to run but, in return, allows other optimizations, such as faster connection establishment.</p>
<h3>QUIC Knows About Multiple Byte Streams</h3>
<p>The second big difference between TCP and QUIC is a bit more technical, and we will explore its repercussions in more detail in part 2 (<em>coming soon!</em>). For now, though, we can understand the main aspects in a high-level way.</p>
<blockquote><strong>Did You Know?</strong><br /><br />Consider first that even a simple web page is made up of a number of independent files and resources. There’s HTML, CSS, JavaScript, images, and so on. Each of these files can be seen as a simple “binary blob” — a collection of zeroes and ones that are interpreted in a certain way by the browser.

When sending these files over the network, we don’t transfer them all at once. Instead, they are subdivided into smaller chunks (typically, of about 1400 bytes each) and sent in individual packets. As such, we can view each resource as being a separate “byte stream”, as data is downloaded or “streamed” piecemeal over time.</blockquote>

<p>For HTTP/1.1, the resource-loading process is quite simple, because <strong>each file is given its own TCP connection</strong> and downloaded in full. For example, if we have files A, B, and C, we would have three TCP connections. The first would see a byte stream of AAAA, the second BBBB, the third CCCC (with each letter repetition being a TCP packet). This works but is also very inefficient because each new connection has some overhead. </p>
<p>In practice, <strong>browsers impose limits</strong> on how many concurrent connections may be used (and thus how many files may be downloaded in parallel) — typically, between 6 and 30 per page load. Connections are then reused to download a new file once the previous has fully transferred. These limits eventually started to hinder web performance on modern pages, which often load many more than 30 resources.</p>
<p>Improving this situation was one of the main goals for HTTP/2. The protocol does this by no longer opening a new TCP connection for each file, but instead downloading the different resources over a single TCP connection. This is achieved by <strong>“multiplexing” the different byte streams</strong>. That’s a fancy way of saying that we mix data of the different files when transporting it. For our three example files, we would get a single TCP connection, and the incoming data might look like AABBCCAABBCC (although <a href="https://blog.cloudflare.com/better-http-2-prioritization-for-a-faster-web/">many other ordering schemes are possible</a>). This seems simple enough and indeed works quite well, making HTTP/2 typically just as fast or a bit faster than HTTP/1.1, but with much less overhead.</p>
<p>Let’s take a closer look at the difference:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/900ea8f0-3782-4505-b1b6-99ca2954bbce/multiplexing-basic.png" /></p>
<p>However, there is a problem on the TCP side. You see, because TCP is a much older protocol and not made for just loading web pages, it doesn’t know about A, B, or C. Internally, <strong>TCP thinks it’s transporting just a single file</strong>, X, and it doesn’t care that what it views as XXXXXXXXXXXX is actually AABBCCAABBCC at the HTTP level. In most situations, this doesn’t matter (and it actually makes TCP quite flexible!), but that changes when there is, for example, packet loss on the network.</p>
<p>Suppose the third TCP packet is lost (the one containing the first data for file B), but all of the other data are delivered. TCP deals with this loss by <strong>retransmitting a new copy of the lost data</strong> in a new packet. This retransmission can, however, take a while to arrive (at least one RTT). You might think that’s not a big problem, as we see there is no loss for resources A and C. As such, we can start processing them while waiting for the missing data for B, right?</p>
<p>Sadly, that’s not the case, because the retransmission logic happens at the TCP layer, and TCP does not know about A, B, and C! TCP instead thinks that a part of the single X file has been lost, and thus it feels it has to keep the rest of X’s data from being processed until the hole is filled. Put differently, while at the HTTP/2 level, we know that we could already process A and C, TCP does not know this, causing things to be <strong>slower than they potentially could be</strong>. This inefficiency is an example of the <a href="https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/">“head-of-line (HoL) blocking” problem</a>.</p>
<p><strong>Solving HoL blocking at the transport layer was one of the main goals of QUIC</strong>. Unlike TCP, QUIC is intimately aware that it is multiplexing multiple, <em>independent</em> byte streams. It, of course, doesn’t know that it’s transporting CSS, JavaScript, and images; it just knows that the streams are separate. As such, QUIC can perform packet loss detection and recovery logic on a per-stream basis.</p>
<p>In the scenario above, it would only hold back the data for stream B, and unlike TCP, it would deliver any data for A and C to the HTTP/3 layer as soon as possible. (This is illustrated below.) In theory, this could lead to performance improvements. In practice, however, the story is much more nuanced, as we’ll discuss in part 2 (<em>coming soon!</em>).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7981cb82-395c-4484-8873-46fd92804b4d/hol-blocking-basic.png" /></p>
<p>We can see that we now have a fundamental difference between TCP and QUIC. This is, incidentally, also one of the main reasons why we can’t just run HTTP/2 as is over QUIC. As we said, HTTP/2 also includes a concept of running multiple streams over a single (TCP) connection. As such, HTTP/2-over-QUIC would have two different and competing stream abstractions on top of one another.</p>
<p>Making them work together nicely would be very complex and error-prone; so, one of the key differences between HTTP/2 and HTTP/3 is that the latter <strong>removes the HTTP stream logic and reuses QUIC streams instead</strong>. As we’ll see in part 2 (<em>coming soon!</em>), though, this has other repercussions in how features such as server push, header compression, and prioritization are implemented.</p>
<h4>Takeaway</h4>
<p>The key takeaway here is that TCP was never designed to transport multiple, independent files over a single connection. Because that is exactly what web browsing requires, this has led to many inefficiencies over the years. QUIC solves this by making multiple byte streams a core concept at the transport layer and handling packet loss on a per-stream basis.</p>
<h3>QUIC Supports Connection Migration</h3>
<p>The third major improvement in QUIC is the fact that connections can stay alive longer.</p>
<blockquote><strong>Did You Know?</strong><br /><br />We often use the concept of a “connection” when talking about web protocols. However, what exactly is a connection? Typically, people speak of a TCP connection once there has been a handshake between two endpoints (say, the browser or client and the server). This is why UDP is often (somewhat misguidedly) said to be “connectionless”, because it doesn’t do such a handshake. However, the handshake is really nothing special: It’s just a few packets with a specific form being sent and received. It has a few goals, main among them being to make sure there is something on the other side and that it’s willing and able to talk to us. It’s worth repeating here that QUIC also performs a handshake, even though it runs over UDP, which by itself doesn’t.</blockquote>

<p>So, the question becomes, how do those packets arrive at the correct destination? On the Internet, IP addresses are used to route packets between two unique machines. However, just having the IPs for your phone and the server isn’t enough, because both want to be able to run multiple networked programs at each end simultaneously.</p>
<p>This is why each individual connection is also assigned a <strong>port number</strong> on both endpoints to differentiate connections and the applications they belong to. Server applications typically have a fixed port number depending on their function (for example ports 80 and 443 for HTTP(S), and port 53 for DNS), while clients usually choose their port numbers (semi-)randomly for each connection.</p>
<p>As such, to define a unique connection across machines and applications, we need these four things, the so-called <strong>4-tuple: client IP address + client port + server IP address + server port</strong>.</p>
<p>In TCP, connections are identified by just the 4-tuple. So, if just one of those four parameters changes, the connection becomes invalid and needs to be re-established (including a new handshake). To understand this, imagine the parking-lot problem: You are currently using your smartphone inside of a building with Wi-Fi. As such, you have an IP address on this Wi-Fi network.</p>
<p>If you now move outside, your phone might switch to the cellular 4G network. Because this is a new network, it will get a completely new IP address, because those are network-specific. Now, the server will see TCP packets coming in from a client IP that it hasn’t seen before (although the two ports and the server IP could, of course, stay the same). This is illustrated below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9413b221-47e9-427b-b958-b0e62fe7f681/1-migration-tcp.png" /></p>
<p>But how can the server know that these packets from a new IP belong to the “connection”? How does it know these packets don’t belong to a <em>new</em> connection from another client in the cellular network that chose the same (random) client port (which can easily happen)? Sadly, it cannot know this.</p>
<p>Because TCP was invented before we were even dreaming of cellular networks and smartphones, there is, for example, no mechanism that allows the client to let the server know it has changed IPs. There isn’t even a way to “close” the connection, because a TCP reset or fin command sent to the old 4-tuple wouldn’t even reach the client anymore. As such, in practice, every network change means that <strong>existing TCP connections can no longer be used</strong>.</p>
<p>A new TCP (and possibly TLS) handshake has to be executed to set up a new connection, and, depending on the application-level protocol, in-process actions would need to be restarted. For example, if you were downloading a large file over HTTP, then that file might have to be re-requested from the start (for example, if the server doesn’t support <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests">range requests</a>). Another example is live video conferencing, where you might have a short blackout when switching networks.</p>
<p>Note that there are other reasons why the 4-tuple might change (for example, <a href="https://blog.cloudflare.com/the-road-to-quic/#onenattobringthemallandinthedarknessbindthem">NAT rebinding</a>), which we’ll discuss more in part 2 (<em>coming soon!</em>).</p>
<p>Restarting the TCP connections can thus have a severe impact (waiting for new handshakes, restarting downloads, re-establishing context). To solve this problem, QUIC introduces a new concept named the <strong>connection identifier (CID)</strong>. Each connection is assigned another number on top of the 4-tuple that uniquely identifies it between two endpoints.</p>
<p>Crucially, because this CID is defined at the transport layer in QUIC itself, it doesn’t change when moving between networks! This is shown in the image below. To make this possible, the CID is included at the front of each and every QUIC packet (much like how the IP addresses and ports are also present in each packet). (It’s actually one of the few things in the QUIC packet header that aren’t encrypted!)</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6ae0ec1-3b85-49a9-9707-ee21ce5b02b3/2-migration-single-cid.png" /></p>
<p>With this set-up, even when one of the things in the 4-tuple changes, the QUIC server and client <strong>only need to look at the CID</strong> to know that it’s the same old connection, and then they can keep using it. There is no need for a new handshake, and the download state can be kept intact. This feature is typically called <em>connection migration</em>. This is, in theory, better for performance, but, as we will discuss in part 2 (<em>coming soon!</em>), it’s, of course, a nuanced story again.</p>
<p>There are other challenges to overcome with the CID. For example, if we would indeed use just a single CID, it would make it extremely easy for hackers and eavesdroppers to follow a user across networks and, by extension, deduce their (approximate) physical locations. To prevent this privacy nightmare, <strong>QUIC changes the CID every time a new network is used</strong>.</p>
<p>That might confuse you, though: Didn’t I just say that the CID is supposed to be the same across networks? Well, that was an oversimplification. What really happens internally is that the client and server agree on a <strong>common list of (randomly generated) CIDs</strong> that all map to the same conceptual “connection”.</p>
<p>For example, they both know that CIDs K, C, and D in reality all map to connection X. As such, while the client might tag packets with K on Wi-Fi, it can switch to using C on 4G. These common lists are negotiated fully encrypted in QUIC, so potential attackers won’t know that K and C are really X, but the client and server would know this, and they can keep the connection alive.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/715f189e-4ae6-4c4c-8db8-9fd8170049d8/3-migration-multi-cid.png" /></p>
<p>It gets even more complex, because clients and servers will have different lists of CIDs that they choose themselves (much like they have different port numbers). This is mainly to support with routing and load balancing in large-scale server set-ups, as we’ll see in more detail in part 3 (<em>coming soon!</em>).</p>
<h4>Takeaway</h4>
<p>The key takeaway here is that in TCP, connections are defined by <strong>four parameters</strong> that can change when endpoints change networks. As such, these connections sometimes need to be restarted, leading to some downtime. QUIC adds another parameter to the mix, called the connection ID. Both the QUIC client and server know which connection IDs map to which connections and are thus more robust against network changes.</p>
<h3>QUIC Is Flexible and Evolvable</h3>
<p>A final aspect of QUIC is that it’s specifically made to be easy to evolve. This is accomplished in several different ways. First, as discussed, the fact that QUIC is almost fully encrypted means that we only need to update the endpoints (clients and servers), and not all middleboxes, if we want to deploy a newer version of QUIC. That still takes time, but typically in the order of months, not years.</p>
<p>Secondly, unlike TCP, QUIC does not use a single fixed packet header to send all protocol meta data. Instead, QUIC has short packet headers and uses a <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-frames-and-frame-types">variety of “frames”</a> (kind of like miniature specialized packets) inside the packet payload to communicate extra information. There is, for example, an <code>ACK</code> frame (for acknowledgements), a <code>NEW_CONNECTION_ID</code> frame (to help set up connection migration), and a <code>STREAM</code> frame (to carry data), as shown in the image below.</p>
<p>This is mainly done as an optimization, because not every packet carries all possible meta data (and so the TCP packet header usually wastes quite some bytes — see also the image above). A very useful side effect of using frames, however, is that defining new frame types as extensions to QUIC will be very easy in the future. A very important one, for example, is the <a href="https://datatracker.ietf.org/doc/html/draft-ietf-quic-datagram-02"><code>DATAGRAM</code> frame</a>, which allows unreliable data to be sent over an encrypted QUIC connection.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88c76a7a-2752-4e5b-a829-290cd4951af3/quic-framing.png" /></p>
<p>Thirdly, QUIC uses a custom TLS extension to carry what are called <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-transport-parameters">transport parameters</a>. These allow the client and server to choose a configuration for a QUIC connection. This means they can negotiate which features are enabled (for example, whether to allow connection migration, which extensions are supported, etc.) and communicate sensible defaults for some mechanisms (for example, maximum supported packet size, flow control limits). While the QUIC standard defines a <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-transport-parameter-definit">long list</a> of these, it also allows extensions to define new ones, again making the protocol more flexible.  </p>
<p>Lastly, while not a real requirement of QUIC by itself, most implementations are currently done in “user space” (as opposed to TCP, which is usually done in “kernel space”). The details are discussed in part 2 (<em>coming soon!</em>), but this mainly means that it’s much easier to experiment with and deploy QUIC implementation variations and extensions than it is for TCP.  </p>
<h4>Takeaway</h4>
<p>While QUIC has now been standardized, it should really be regarded as <strong>QUIC version 1</strong> (which is also clearly stated in the <a href="https://www.rfc-editor.org/rfc/rfc9000.html#name-overview">Request For Comments (RFC)</a>), and there is a clear intent to create version 2 and more fairly quickly. On top of that, QUIC allows for the easy definition of extensions, so even more use cases can be implemented.</p>
Conclusion
<p>Let’s summarize what we’ve learned in this part. We have mainly talked about the omnipresent TCP protocol and how it was designed in a time when many of today’s challenges were unknown. As we tried to evolve TCP to keep up, it became clear this would be difficult in practice, because almost every device has its own TCP implementation on board that would need to be updated.</p>
<p>To bypass this issue while still improving TCP, we created the <strong>new QUIC protocol</strong> (which is really TCP 2.0 under the hood). To make QUIC easier to deploy, it is run on top of the UDP protocol (which most network devices also support), and to make sure it can evolve in the future, it is almost entirely encrypted by default and makes use of a flexible framing mechanism.</p>
<p>Other than this, <strong>QUIC mostly mirrors known TCP features</strong>, such as the handshake, reliability, and congestion control. The two main changes besides encryption and framing are the awareness of multiple byte streams and the introduction of the connection ID. These changes were, however, enough to prevent us from running HTTP/2 on top of QUIC directly, necessitating the creation of HTTP/3 (which is really HTTP/2-over-QUIC under the hood).</p>
<p>QUIC’s new approach gives way to a number of performance improvements, but their potential gains are more nuanced than typically communicated in articles on QUIC and HTTP/3. Now that we know the basics, we can discuss these nuances in more depth in the next part of this series. <a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Stay tuned!</a></p>
<p>This series is divided into three parts:</p>
<ol>
<li><strong>HTTP/3 history and core concepts</strong><br />This is targeted at people new to HTTP/3 and protocols in general, and it mainly discusses the basics.</li>
<li><a href="https://www.smashingmagazine.com/2021/08/http3-performance-improvements-part2/"><strong>HTTP/3 performance features</strong></a><br />This is more in depth and technical. People who already know the basics can start here.</li>
<li><strong>Practical HTTP/3 deployment options</strong> (<em>coming up soon!</em>)<br />This explains the challenges involved in deploying and testing HTTP/3 yourself. It details how and if you should change your web pages and resources as well.</li>
</ol>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Robin Marx)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8f9f9146-4b77-494d-af72-4db28567a6fe/http3-core-concepts-part1.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Four Useful VSCode Extensions For Web Developers]]></title>
            <link>https://smashingmagazine.com/2021/08/useful-vscode-extensions-web-developers/</link>
            <guid>https://smashingmagazine.com/2021/08/useful-vscode-extensions-web-developers/</guid>
            <pubDate>Fri, 06 Aug 2021 10:00:00 GMT</pubDate>
            <description><![CDATA[VS Code can be supercharged wuth hundreds of [VS Code extensions](https://www.smashingmagazine.com/2021/05/useful-vs-code-extensions-web-developers/). In this article, Leonardo shares four useful extensions that help him in his daily work.]]></description>
            <content:encoded><![CDATA[Inline Parameters
<p>Which <code>param</code> is the array and which is the callback in PHP functions <code>array_map</code> and <code>array_filter</code>? I can never get it right. To avoid this confusion we can use <a href="https://marketplace.visualstudio.com/items?itemName=liamhammett.inline-parameters">Inline Parameters</a>, which prints inline the names of the function parameters (for JavaScript, TypeScript, PHP, and Lua).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c82dbb79-64df-4f04-85db-1a225a08f882/1-useful-vscode-extensions-web-developers.png" /></p>
HTML End Tag Labels
<p>With deeply nested <code>&lt;div&gt;</code> tags we can easily get lost, not knowing which is their ending <code>&lt;/div&gt;</code>. <a href="https://marketplace.visualstudio.com/items?itemName=anteprimorac.html-end-tag-labels">HTML End Tag Labels</a> helps us understand the structure of the HTML code, by having the class names of the opening tag be displayed next to its closing tag.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ba35f5bf-791f-4e4f-91a9-82af4d3aeae3/2-useful-vscode-extensions-web-developers.png" /></p>
TO-DO Tree
<p>You have something to do in your code, but you don't have time for it now. Better do it later. Quick and easy reminder: add a "TODO" in your code. Fast forward 6 months, and you've accumulated 150 TODOs, and you need to take care of them. The <a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">Todo Tree</a> will help you find all TODOs in your code.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f984846-0510-48f5-a415-326027d14a88/3-useful-vscode-extensions-web-developers.png" /></p>
Code Snippet Screenshots
<p>You created some really beautiful code, and you want to share it with the world? You can take a screenshot, download it, go to Twitter, upload it and send it. Or you can select the code right within the editor, and have <a href="https://marketplace.visualstudio.com/items?itemName=JeffersonLicet.snipped">Snipped</a> generate a beautiful image of it and send it straight to Twitter.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bdda62e5-fe54-44eb-903b-c1c6771f34b1/4-useful-vscode-extensions-web-developers.png" /></p>
<p>These four extensions have proven very handy for my work with web development. What other useful extensions do you use? Let me know in the comments.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Leonardo Losoviz)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f984846-0510-48f5-a415-326027d14a88/3-useful-vscode-extensions-web-developers.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Frustrating Design Patterns: Disabled Buttons]]></title>
            <link>https://smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/</link>
            <guid>https://smashingmagazine.com/2021/08/frustrating-design-patterns-disabled-buttons/</guid>
            <pubDate>Thu, 05 Aug 2021 13:30:00 GMT</pubDate>
            <description><![CDATA[How can we make disabled buttons more inclusive? When do they work well, and when do they fail on us? And finally, when do we actually need them, and how can we avoid them? Let’s find out.]]></description>
            <content:encoded><![CDATA[<p>Imagine a world in which <strong>every button is disabled by default</strong>. Usually it’s grey, subtle and slightly out of focus, often with poor contrast and a subdued text label that’s a bit difficult to decipher. It’s not destined to remain disabled forever though. It does become active <em>eventually</em> once a well-formed input is provided. But before it can breathe life into the page with its full color gradient extravaganza, it just sits there calmly and silently, minding its own business. Would you like to live in this world?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3870912d-4d9d-4135-b3a0-c695eb03668c/1-disabled-buttons.png" /></p>
<p>Admittedly, there might be <strong>very good reasons</strong> for making buttons disabled by default. After all, as designers and developers, we want to make it more difficult for our users to make mistakes. We want to avoid wasteful jumps back and forth between error messages. We want to ensure that the input is perfectly correct <em>before</em> the data is even sent to the server. And we want to indicate that something important is missing before users continue to the next step.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/427d1d2f-4411-46a2-8b34-ac8f42e4c133/2-disabled-buttons.png" /></p>
<p>So we invest time and effort into a resilient and <strong>reliable inline validation</strong>. And we try our best to provide helpful feedback as users make their way from one input field to another. And, of course, we make the buttons disabled by default to avoid premature clicks and taps that will only lead to the waltz with error messages.</p>
<p>This approach might work very well for <em>some</em> scenarios, but it turns out to be a <strong>disastrous design pattern</strong> for <em>many</em> scenarios, often to the point that customers are completely locked out, without a single chance to convey their intent to the interface. In this article, we’ll look into common usability issues with disabled buttons, how to fix these issues and when disabling buttons actually makes sense. We’ll start from the beginning, looking into when disabled buttons cause more trouble than help.</p>
<div>
<h4>Part Of: <a href="/category/design-patterns/">Design Patterns</a></h4>
<ul>
<li>Part 1: <a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Perfect Accordion</a></li>
<li>Part 2: <a href="https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/">Perfect Responsive Configurator</a></li>
<li>Part 3: <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-date-time-picker/">Perfect Date and Time Picker</a></li>
<li>Part 4: <a href="https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/">Perfect Feature Comparison</a></li>
<li>Part 5: <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">Perfect Slider</a></li>
<li>Part 6: <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/">Perfect Birthday Picker</a></li>
<li>Part 7: <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/">Perfect Mega-Dropdown Menus</a></li>
<li>Part 8: <a href="https://www.smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/">Perfect Filters</a></li>
<li>Part 9: <strong>Disabled Buttons</strong></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

How Users Deal With Disabled Interfaces
<p>Whenever <em>anything</em> in the interface is disabled, it’s an indicator that <strong>something is wrong</strong>. That seemingly obvious observation might not be obvious at the first glance though. For example, what if you want to uncheck a checkbox but the interface won’t allow you to do so? What exactly is the problem? Is there an issue with your Internet connection? Are there any issues with user privileges? Do you need to wait and hope for the best, or should you rather refresh the page? And if you do refresh the page, will all the data that you’ve so carefully and thoughtfully typed in persist in the form, or gone forever?</p>
<p>When we encounter a <em>disabled button</em>, the situation isn’t much different. <strong>We are blocked, but we don’t know why.</strong> It might be that something else is missing that’s required for us to move forward. Or we’ve overlooked some fine print somewhere. Or perhaps we’ve made a typo in one of the input fields. Or we didn’t fill in the data the <em>right</em> way. Or perhaps there is no mistake on our end at all, and it’s a system bug that’s absolutely out of our control.</p>
<p>There are so many things that could be causing the button to be disabled, and more often than not users are basically left in the woods having to figure out what’s the missing piece of the puzzle. In these situations, they usually show <strong>two kinds of slightly different behaviors</strong>, and these behaviors depend on what exactly is inaccessible in the UI.</p>
<h3>When Large Parts of The Interface Are Disabled</h3>
<p>Observing customers interacting with disabled state reveals a few common usability patterns. When <strong>large parts of the interface are disabled</strong>, most customers will assume that the <strong>system is busy</strong>, and some process is happening in the background on the page. And because something is happening, they usually exercise a good amount of patience first. They’ll just sit there waiting for a spinner to appear, or the page to come back eventually. The more valuable the input, the longer they will be sitting there and waiting.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d36e32f-f4c7-4ab0-9fb6-07daac29e9c2/4-disabled-buttons.png" /></p>
<p>You probably will behave the same way. Why is that? As it turns out, we do so just to <strong>avoid any disruptions</strong> or interruptions of the ongoing process. Just like we don’t know if Schoredinger’s cat is alive or not without looking into the box, we just don’t know if the booking got through or not until we look into the system, or speak with someone who does.</p>
<p>If something unexpected happens during the booking process, or we accidentally hit a wrong button at a wrong time, we are just left out there not knowing what actually happened. We might be getting more reassurance once we receive a confirmation email, but even then, we won’t know for sure unless we can log into the system and verify our booking. And if the email does not arrive, we won’t be much smarter either.</p>
<p>If we do want to find out what happened, we have to embark on a long-winded journey full of hops from one customer support department to another, and sometimes spend hours in chat widgets trying to get reassurance that the card isn’t going to be charged twice, or we indeed did cancel a subscription.</p>
<p>Interrupting an ongoing process <strong>feels risky and unpredictable</strong>, so we’d rather just sit and wait in front of a disabled interface — the patience threshold is large enough for us to not jump into all that hassle and trouble of finding out right away.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6821e9df-4e54-47af-b599-858d801b530a/5-disabled-buttons.png" /></p>
<p>However, eventually even that threshold is reached, and users will cautiously start moving their mouse pointer across the screen, or attempt to start tabbing around on their keyboard, or try to scroll up and down on their mobile devices. If that doesn’t work, they’ll move to the next stage, trying to bring the page back to life with a few dozens of <strong>stubborn rage clicks</strong> or taps.</p>
<p>And if this doesn’t work either, some will <strong>take a screenshot</strong> of the interface as a proof or as a reference, and perhaps will try to open the same page in another browser tab. Savvy users would go as far as opening the page in another browser altogether because some systems log out users trying to log into the same account from multiple tabs.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e7b51ec-6280-4a78-9b5d-98009143a200/6-disabled-buttons.png" /></p>
<p>The reason for all of that trouble is that we, as users, don’t want to lose the <em>state</em> and the <em>data</em> of the disabled page. We might have typed in all the right data, and have chosen all the right settings, and perhaps even went to the trouble of finding a working discount code, and even have crafted a perfect gift message. So as a very least, we should try to <strong>capture all the work we’ve done already</strong> and re-fill that data in another tab or window, rather than doing all the hard work again.</p>
<h3>When Only a Single Button Is Disabled</h3>
<p>The behavior above might appear expected for pages that block user input entirely, but it surely should be different in cases when only a small part of the interface — let’s say a humble “Continue” button — isn’t accessible? Ironically, same issues appear with standalone buttons as well, albeit admittedly to a lesser degree.</p>
<p>With disabled buttons, because the rest of the interface <em>is</em> accessible, users seem to have more confidence that there is a <strong>problem directly related to their input</strong>. That’s why it’s uncommon to see people sitting and waiting for the “Continue” button to come back to life or change miraculously.</p>
<p>One problem that does show up though when users encounter a disabled button late in the process, especially on mobile. Many <strong>don’t realize if the button was disabled from the very start</strong>, or there is something in their input that actually <em>made</em> it disabled along the way. Some people will even re-open the same page in another tab to check what the initial state was.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/594ee7c8-b776-4fff-bf7a-4e8b2edd6c99/7-disabled-buttons.png" /></p>
<p>So once the form on a page seems to be completed, users immediately head to the “Continue” button almost on auto-pilot. If that button is disabled, the very first thing that one can almost sense by looking at the movements of users is a <strong>massive slowdown of interaction</strong>. It’s literally as if users were hitting a wall. Some people will want to verify that the button is indeed disabled, by hovering over it, trying to click/tap on it, or tab to it with the keyboard — oftentimes clicking multiple times to see if it’s actually going to respond after all. Most of the time not much will be happening though.</p>
<p>If the button doesn’t respond, users first look out for the usual suspects — wrong formatting, missing punctuation or accent characters that caused the trouble. If it doesn’t help, most users <strong>will go through the entire form</strong>, often field by field, from top to bottom and backwards again, and try to eliminate all potential issues that might be causing the disabled state.</p>
<p>For example, it’s common to see people retyping the phone number, with and without <code>+</code>, with and without a leading zero, with and without empty spaces. Sometimes they even retype <em>all</em> the input again field-by-field, because they assume that the browser might have received “incorrect” data with the browser’s auto-fill that was used for some input fields.</p>
<p>In fact, they try out <strong>all possible combinations</strong> of street formatting, order number references, dates and times and last names and salutations and everything in-between — which in many ways is nothing more than guesswork because we never know how the application works and what input changes will affect its behavior.</p>
<p>Now, that’s a fine example of a truly frustrating experience. And of course usually we assume that all of this hassle is easily avoidable with a state-of-the-art inline validation that will catch errors early. As it turns out, often it’s not that straightforward.</p>
Inline Validation Is Never Bulletproof
<p>In theory, everything we’ve covered in the previous sections should never ever happen. After all, isn’t that what <strong>inline validation</strong> is supposed to fix in the first place? Rather than showing error messages after all the input has been done, we show them one-by-one as users are making their mistakes — usually after leaving the input field. <strong>But how often did it fail on you?</strong></p>
<p>Has it ever happened that your delivery address wasn’t accepted by an address validator — maybe because the building has just been built recently? Or perhaps you’ve used a perfectly valid but slightly convoluted syntax to avoid spam, e.g. <a href="mailto:*k.giraudel+smashing@bmx.de">*k.giraudel+smashing@bmx.de</a>,* yet the email validator has assumed that the <code>+</code> character can’t be a part of the email?</p>
<p>What if you don’t have a business email yet, but the service won’t accept a Gmail address? Or maybe there is some data that you didn’t want to provide — e.g. age, gender, birthday, or a phone number — and although they are highlighted as optional, the interface doesn’t let an empty value through?</p>
<p>While there are many scenarios when inline validation works well, there are just as many exceptions and edge cases <strong>when inline validation doesn’t work at all</strong>:</p>
<ul>
<li>when a postal address can’t be confirmed by a slightly outdated address validator or autosuggestions,</li>
<li>when a non-conforming tax number (TIN/VAT) doesn’t validate although it’s perfectly valid but isn’t standardized across countries just yet,</li>
<li>when some sort of <strong>anti-spam protection</strong> is used in the form, but it’s blocked by an aggressive ad-blocker,</li>
<li>when the user <strong>blocks tracking</strong> but the location input desperately wants to detect user’s location and breaks,</li>
<li>when third-party browser extensions fill in data (e.g. coupon codes), but are eventually blocked by the system, with no way to continue,</li>
<li>when the user saves their input in a complex form one day, returns back eventually, but the “Continue” button is disabled because submitted documents are being processes.</li>
<li>when any input is based on a particular group of frequent customers, and a perfectly valid input doesn’t match the requirements tailored to them,</li>
<li>when an email has perfectly valid prefixes or characters, but the inline validation isn’t quite accurate and doesn’t recognize certain characters.</li>
</ul>
<p>In practice, even the most sophisticated <strong>inline validation will be faulty at times</strong>. And when it fails, it fails big time. A user who happens to be blocked by an inline validator has absolutely no chance of submitting the form successfully because the submit button will always be inaccessible. That situation guarantees a 100% abandonment rate for these customers.</p>
<p>Of course there might be only a handful of people having this experience, or a few thousands on a given day. Tracking how many people actually end up in this situation is a good start to understand <strong>how severe disabled buttons are</strong> for your business.</p>
<p>Not only that is the cost though. By its nature, inline validation is a <strong>hard boundary</strong> with very specific, strict requirements. Yet very often users find themselves in complex situations which can’t be predicted ahead of time. Perhaps <em>most</em> details are known, and the deadlines are looming, yet <em>some</em> documents are missing, and hence the entire input has to be abandoned.</p>
<p>That usually results in an <strong>increase in customer support calls and inquiries</strong>, or just disgruntled customers who cancel their account and never look back.</p>
<p>In many ways, dealing with disabled buttons might feel a bit like rolling a dice. Users might be lucky and erroneous input fields will be highlighted, or they might be less lucky and the interface will provide no meaningful clues at all. They will then have to find and fix these issues, pass through validation, and then finally unlock the almighty button to continue. This is frustrating on desktop, but gets even more frustrating on mobile when the button is often not visible as it is off screen at the bottom of the page.</p>
<p>As Matthew Standage <a href="https://uxdesign.cc/why-heuristics-are-only-rules-of-thumb-the-case-of-the-disabled-button-4824958627e9">notes</a>, “when we disable a button on a form we are often disabling the call-to-action — that thing on the page we trying to encourage users to click to proceed with their journey.“ And as such, it’s a quite <strong>dangerous and fragile</strong> undertaking, because we never know with absolute certainty how bulletproof our code is, even although it might be heavily tested.</p>
The Downsides Of Disabled Buttons
<p>The examples above indicate a very common problem that lies in the very nature of many implementations. <strong>Disabled buttons</strong> <strong>don’t explain what’s wrong</strong>. They communicate that <em>something</em> is off, but very often it’s just not good enough. As a result, too often users are left wondering what’s actually missing, and consequently locked out entirely.</p>
<p>Not too mention plenty of accessibility nightmares that come along. As Adam Silver notes in his excellent book “<a href="https://formdesignpatterns.com/">Form Design Patterns</a>”, usually disabled buttons <strong>are not focusable</strong> and hence users can’t reach them with a keyboard. The reason why we usually skip focus on these buttons is because they can’t really be interacted with. (We’ll see below that there is some room for improvement there as we will though).</p>
<p>By their nature, disabled buttons also suffer from <strong>insufficient contrast</strong> as they should look different compared to regular buttons. As such, they are also hard to read as they are usually greyed out. They rely on JavaScript and inline validation, and on the fact that users can spot and correct errors easily — which might be difficult to do in a complex form on a narrow screen, for example.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa579cd7-a16b-4f16-9edc-af7f738cdf69/8-disabled-buttons.png" /></p>
<p>And then there is a question of <strong>timing</strong>. At which point should we <strong>enable a disabled button</strong>? Most implementations enable the button only if <em>all</em> required input seems to be well-formed, or/and has been verified by an inline validator. That’s definitely the <em>latest</em> time to flip the switch, but what about situations when it could be happening earlier?</p>
<p>What if a customer is opening their bank account, and they need to verify their place of tax residency, along with a few other documents? Or perhaps what if some input can not be verified immediately, but needs to be proxied through another service, yet this service keeps timing out? Or perhaps some vendors haven’t submitted their final quotes yet, but the project needs to be added into the system urgently?</p>
<p>In all of these scenarios, <strong>users don’t have all the required documents</strong> at hand at the time when they fill in the form. Now imagine that all these services provide a 14-days-window after opening the account when the missing documents could be submitted. Technically customers still should be able to proceed without these documents, but for that, they’d need to choose "Submit later" for each missing document as they are filling in the form.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/35cf6012-785f-43b8-83d3-1c3effd7c2b6/9-disabled-buttons.png" /></p>
<p>So when should we enable the disabled button? Should we change the state only when the user has asked to submit the documents later for all of them, or should we let them through even if they haven’t opted in (and remind them that we need them to be uploaded within 14 days)? Most of us will agree that the first option is probably more obvious, but only if the user can spot the option to submit documents later. The second option is probably going to increase conversion and bring in more leads though.</p>
<p>The <em>bottom line</em> is: the more conditional logic of that kind we have in our user flows — and it can become quite convoluted in large enterprise and B2B-forms — the more cautious we need to be when flipping that switch.</p>
<p>All of that not to say that disabled buttons should always be avoided at all costs though. They work well when they serve a very small, and a very specific purpose.</p>
When Disabled Buttons (And States) Work Well
<p>Imagine you are purchasing a pair of jeans that happens to be on sale. The interface tells you that there is exactly one item left, so full of hope you rush to the product page, swiftly choose your size, add the item to the cart — just to realize that the item is <strong>no longer available</strong>. That’s not the most uplifting user experience. Here, making the “add to cart” button disabled when an option isn’t available is only reasonable to avoid confusion and frustration.</p>
<p>Or perhaps you are about to <strong>transfer large funds</strong> from one bank account to another. You’ve double checked all the input fields, the amount, the recipient, the IBAN and SWIFT, and reviewed all the fees, and you are ready to proceed — fortunately, a shiny green button is right there waiting for you to continue. And just at that moment, full of focus and excitement, your mouse slips away or your finger jumps over the touchscreen — and you hit that shiny green button twice.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7929e3cf-223b-4a8e-87a6-97cbf1e582cd/05-currency.jpg" /></p>
<p>What is going to happen? You probably don’t want to send the funds twice. And you don’t particularly enjoy back and forth-jumps between your 2-factor-authentication app and the bank interface either — however, the system has sent you two confirmation codes, and it’s not obvious which one you should use to confirm the payment.</p>
<p>So having a button turning disabled once you hit it once is a good indicator that the <strong>state has changed</strong>, and that something is happening, and that nothing else needs to be done for the operation to proceed, and that you need to just sit there and wait for the interface to come back. That’s where disabled buttons are helpful.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b326205-5cc2-4c68-9355-2461c5a4ab5d/11-disabled-buttons.png" /></p>
<p>When an option or a feature isn’t available or something is happening in the background, we need to communicate it early and clearly. A visible change of the button helps there, but we can also explain <em>why</em> the button is disabled, and what exactly is happening. For example, we could change the label on the button to say “Adding to cart…” with a <strong>looping loading indicator</strong> to make it more obvious what exactly is happening.</p>
<p>Communicating that’s something isn’t possible is as important as preventing users from making costly mistakes. Here are a few scenarios where this might come in handy:</p>
<ul>
<li><strong>to avoid wrong purchases</strong>: if the price depends on some attributes, it’s reasonable to disable the button and adjust its label while the price is being adjusted,</li>
<li><a href="https://css-tricks.com/making-disabled-buttons-more-inclusive/"><strong>to avoid double bookings</strong></a>: once a button is clicked, it’s reasonable to make the button disabled and replace a CTA with a progress spinner or change the label to “Waiting…”. A hint could provide more help and insight into what’s happening. We could then change the label yet again if it takes too much time to get a response from the server. Of course, we also want to <a href="https://adamsilver.io/blog/form-design-from-zero-to-hero-all-in-one-blog-post/">stop listening to click/tap</a> after the first click/tap (the exceptions are <em>Undo</em> buttons and steppers where you expect customers to tap on the same button multiple times — there having a disabled button is probably not a very good idea).</li>
<li><strong>to validate magic sign-in/SMS code</strong> or to validate a character count: there, keeping the buttons disabled until the input is complete might be reasonable. However, it’s a good idea to test if an active “Validate” button would work worse. Chances are high that it won’t.</li>
</ul>
<p>Disabling buttons might be a good idea in some scenarios after all. But we can probably do better than a greyed out button with insufficient contrast. Let’s take a look at some techniques to make disabled buttons slightly more inclusive.</p>
Making Disabled Buttons More Inclusive
<p>So what if our implementation relies on disabled buttons, or due to technical limitations and legacy constraints it’s just incredibly difficult to move away from them? In her excellent article on <a href="https://css-tricks.com/making-disabled-buttons-more-inclusive/">Making Disabled Buttons More Inclusive</a>, Sandrina Pereira highlights a couple of excellent techniques (and code snippets) to make disabled buttons better if you have to use them.</p>
<p>Here are a couple of useful strategies that Sandrina has suggested:</p>
<ul>
<li><strong>change the cursor</strong> on a disabled button to indicate that users can’t interact with it (<code>cursor: not-allowed</code>),</li>
<li>show a <a href="https://inclusive-components.design/tooltips-toggletips/">tooltip</a> or a hint explaining why the button is disabled; if a customer uses a mouse/touch, we can show a tooltip on hover, click or tap, and when a user navigates to the button via the “Tab” key, we can trigger the tooltip as well (however, the button has to be focusable),</li>
<li><strong>prevent the click programmatically via JavaScript</strong> by using <code>aria-disabled</code> attribute, and thus avoiding the temporary loss of the keyboard focus while the form is submitting (which would be the case with the <code>disabled</code> attribute alone),</li>
<li><code>aria-disabled</code> will still focus the button and announce that it exists, but that it isn’t enabled yet; the same way you might perceive it visually,</li>
<li><strong>use ARIA live regions</strong> to announce dynamic content,</li>
<li>avoid  <code>pointer-events: none</code> in CSS; it does indeed prevent a mouse click, but it won’t prevent focus and keyboard navigation.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f9028f67-41dd-4c95-acc0-7acbf7d18e08/error-messages.jpg" /></p>
<p>Alternatively to the tooltip or hint, we could <a href="https://twitter.com/jordanmoore/status/1250026238762266624">guide the user to the errors</a> in the form, either with a link to the error summary at the top of the page, or with jump-links to specific input fields that seem to contain errors. And we could just include a hint next to the disabled button to explain why it’s disabled (as shown below).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7f7894c-9d37-4901-ad46-ec9072bbc3f8/01-lock-in.jpg" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88e8d1ee-1a8c-4e4a-83e7-2372282de1c4/12-disabled-buttons.png" /></p>
<p>With all these little helpers in place, we can explain much better what’s actually wrong and how to fix it. But if we want to reduce the rates of dead-ends and abandonments more aggressively, we can take it a little bit further.</p>
Always Provide A Way Out
<p>As reality is complex, sometimes it’s incredibly difficult for an interface to <strong>predict all the options</strong> that customers might want to choose ahead of time. Often user’s context is simply unpredictable, and is influenced by things that are outside of our reach. So in the case of an ill-formed input or an error, we should give our customers the benefit of the doubt and provide a way out to complete the form, even although it doesn’t entirely meet our requirements or expectations.</p>
<p>A useful technique that we discovered in user testing is to not only add a hint next to a disabled button that explains what’s wrong, but also add a <strong>“way out”-link</strong> under it. The link prompts the customers to get in touch with the customer support in case they can’t proceed.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b60f7eb6-5cbb-45d4-ba00-a0f85bd4c14a/02-lock-in.jpg" /></p>
<p>The button literally says: “Can’t proceed? Let us know and we’ll get back to you.” By clicking on the link, users can leave their email or phone number and choose to be contacted by customer support. Or we can go even further by <strong>automatically sending an email to the customer support</strong> with all the details typed in the form on behalf of the customer, with an option to call back or reply via email.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4a646ad-c625-41cf-a97d-c56250e0d93d/04-continue-with-errors-orange.jpg" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d867566-958b-4a76-b0a9-c33cb73050e8/03-continue-with-errors-1.jpg" /></p>
<p>Another option is to allow customers to <strong>continue despite errors,</strong> e.g. even if the postal address doesn’t seem to be right, or a phone number seems to be off. Of course we need to notify them that something seems to be wrong, ask them to review and verify their input, and ask for a permission to contact them in case any issues show up. We might want to refer to errors one more time before they hit the 'Purchase now' button though.</p>
<p>Now, these minor changes won’t bring abandonment to 0, but at least they give us a chance to keep the customer in case they can’t proceed, and get their business by resolving technical difficulties for them, rather than offloading these issues on them.</p>
Do We Need Inline Validation?
<p>With these enhancement in place, it might be a good idea to revisit the role of inline validation. There are so many questions that need a discussion — when should we start validating, when do we trigger a validator if a user is editing a valid or invalid field, when do we show error messages or confirmation that the input is correct. All these questions deserve a separate article, but in general, keeping inline validation while providing a way out is reasonable, yet it doesn’t need to go hand in hand with disabled buttons.</p>
<p>In fact, inline validation is likely to be <strong>more helpful without a disabled button</strong> as users might get a better overview of the correct and incorrect input by having erroneous input fields highlight on submit. That, of course, requires buttons to be accessible at all times. In fact, it’s not such a bad idea at all.</p>
An Alternative To Disabled Buttons
<p>To avoid all the hassle customers have to endure with disabled buttons, we could make the experience much more straightforward by <strong>keeping the “Continue” button accessible</strong> at all times, and using the click to communicate to the user what’s actually wrong.</p>
<p>Below is a <strong>good overall strategy</strong> that always proves to be working without any usability issues:</p>
<ul>
<li>validate the input on submit,</li>
<li>on submit, explain that there are errors and show how many errors there are (as a tooltip or an error message),</li>
<li>if there is only 1 error, point users directly to the input fields that contains the error (with a simple text link),</li>
<li>if there are more errors, show an error summary on the top of the page and show a link to the error summary on submit.</li>
</ul>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eae323bf-0002-4a72-80aa-eb5a2b700ae5/13-disabled-buttons.gif"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eae323bf-0002-4a72-80aa-eb5a2b700ae5/13-disabled-buttons.gif" /></a>Enable the button, then show errors when needed. (Image source: <a href="https://stories.justinewin.com/disabled-buttons-dont-have-to-suck-10da0bb6d37e">Disabled Buttons Don’t Have To Suck</a>)

<p>Simple, straightforward, accessible, easy to implement, and without any reliance on code to be working flawlessly to bring a disabled button back to life.</p>
<p>If, however, user’s selection needs to done, perhaps we could get away by relying on <strong>frequently used default values</strong> instead of asking the user to make a selection explicitly. For example, <a href="https://www.blueapron.com/pricing">Blue Apron</a> provides a default selection for its number of recipes delivered per week, and so the “Select” button is active because it always indicates the next step.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/771a436e-f1be-4c80-bb41-3088f3fb880d/3-disabled-buttons.png" /></p>
<p>And sometimes disabled buttons could be replaced with something slightly <strong>more actionable</strong>. In the case when an item is no longer available, for example, we could include the number of available items in the size selector. If an option is unavailable, we could show that the option isn’t available rather than hiding it altogether. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2d71ee81-7abc-4c4f-9850-c0ab0abed7d1/01-size-not-availabile-asos.png" /></p>
<p>Alternatively, we could add a hint above the button explaining that the item is out of stock, or even allow users to get notified once it’s back in stock again. Below is an example of this pattern on <a href="https://en.zalando.de/edited-etta-cardigan-cardigan-black-edd21i06l-q11.html">Zalando</a>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a02129f8-4cbf-47b1-9547-34f6d5b11f47/02-out-of-stock-zalando.png" /></p>
<p>Whenever dealing with disabled buttons, we might want to ask ourselves if there is <strong>any better way to communicate the options</strong> that the user has, and think about the ways connect with them despite the errors — with a default selection, tooltips and hints, as well as actionable calls to action (e.g. be notified about updates).</p>
Wrapping Up
<p>You can’t know what you can’t measure. If you already have an implementation with a disabled button, study how many people actually end up in <strong>locked-out situations</strong> and can’t proceed. That will give you a good start to understand how severe disabled buttons are for your business.</p>
<p>If you need to use disabled buttons, consider ways to <strong>make them focusable and useful</strong> by also making them more inclusive and providing a way out for customers to send all the details to the customer support. If you don’t need to make the buttons disabled, validate on submit and guide users directly to errors with sensible error messages. Either way, inline validation can be helpful in giving users a sense of progress as they are making their way through the form, but make sure that users can proceed even if inline validation fails.</p>
<p>That should be enough to avoid frustration and hassle when dealing with disabled buttons, and hopefully will clear a path towards an accessible and simple form that has fewer abandonments and faster completion.</p>
Disabled Buttons Checklist
<p>As usual, here's a <strong>checklist</strong> with pretty much everything to ask and double check when designing or building an interface with disabled buttons:</p>
<ol>
<li>Do we need the button to be disabled by default (e.g. item is unavailable)?</li>
<li>If not, can we keep it enabled and validate user input on submit?</li>
<li>If not, can we rely on default values to keep the button enabled by default?</li>
<li>When should the button become disabled (e.g. prevent double bookings)?</li>
<li>Do we want to grey out any part of the interface along with the disabled button?</li>
<li>Do we want to use a skeleton screen animation along with the disabled button?</li>
<li>Do we want to use a loading spinner for the UI to indicate that the system is busy?</li>
<li>Do we want to use a progress indicator on the button to indicate progress?</li>
<li>Should the wording on the button be different when it’s disabled?</li>
<li>Does it have sufficient color contrast in the disabled state?</li>
<li>Do we want to add a note under the button explaining why it is disabled?</li>
<li>Do we keep the disabled button focusable?</li>
<li>What happens when a user hovers or taps on the disabled button?</li>
<li>What happens when a user tries to activate or focus on the disabled button?</li>
<li>Do we change the cursor to <code>not-allowed</code> to indicate that the action isn’t allowed?</li>
<li>Do we want to use a tooltip explaining why the button is disabled?</li>
<li>Do we prevent the click via JavaScript by using <code>aria-disabled</code>?</li>
<li>Do we use ARIA live regions to announce dynamic content?</li>
<li>Do we avoid <code>pointer-events: none</code> as it doesn’t prevent focus/keyboard navigation?</li>
<li>Do we guide users towards errors when they tap/click/tab to the disabled button?</li>
<li>When do we enable a disabled button?</li>
<li>Can we add a link that sends all user’s input to support if they are locked out?</li>
<li>In that case, do we ask users for their consent to be contacted?</li>
<li>Do we use inline validation (positive or negative)?</li>
<li>When and how do we show error messages?</li>
<li>Do we include an option to continue even if inline validation fails?</li>
<li>Do we need to update the state of the button after every user input?</li>
<li>How will the button change while updating its state?</li>
<li>Do we change the label of the button (“Updating…”) while it’s updating?</li>
<li>Do we change the colors of the button while it’s updating?</li>
<li>Do we want to add a loading spinner while the button is updating?</li>
<li>Should we stop listening to click/tap after the first click/tap?</li>
<li>Do we not stop listening to click/tap for Undo buttons and steppers?</li>
<li>Can we make the disabled button sticky on narrow screens?</li>
<li>Do we track how many people can’t proceed and abandon the flow altogether?</li>
<li>If applicable, can we test if a design without disabled buttons performs better?</li>
</ol>
<div>
<h4>Part Of: <a href="/category/design-patterns/">Design Patterns</a></h4>
<ul>
<li>Part 1: <a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Perfect Accordion</a></li>
<li>Part 2: <a href="https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/">Perfect Responsive Configurator</a></li>
<li>Part 3: <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-date-time-picker/">Perfect Date and Time Picker</a></li>
<li>Part 4: <a href="https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/">Perfect Feature Comparison</a></li>
<li>Part 5: <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">Perfect Slider</a></li>
<li>Part 6: <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/">Perfect Birthday Picker</a></li>
<li>Part 7: <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/">Perfect Mega-Dropdown Menus</a></li>
<li>Part 8: <a href="https://www.smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/">Perfect Filters</a></li>
<li>Part 9: <strong>Disabled Buttons</strong></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

<h3>Further Resources</h3>
<ul>
<li>“<a href="https://uxdesign.cc/why-heuristics-are-only-rules-of-thumb-the-case-of-the-disabled-button-4824958627e9">Why Heuristics Are Only Rules Of Thumb: The Case Of The Disabled Button</a>,” Matthew Standage, UX Collective</li>
<li>“<a href="https://uxdesign.cc/why-you-shouldnt-include-disabled-interaction-elements-in-your-design-system-76a2d4307faf">Why You Shouldn’t Include Disabled Interaction Elements In Your Design System</a>,” Chris Atherton, UX Collective</li>
<li>“<a href="https://axesslab.com/disabled-buttons-suck/">Disabled Buttons Suck</a>,” Hampus Sethfors, Axess Lab</li>
<li>“<a href="https://stories.justinewin.com/disabled-buttons-dont-have-to-suck-10da0bb6d37e">Disabled Buttons Don’t Have To Suck</a>,” Justine Win, Medium</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9a10b5d-3bad-4083-a83c-082ff772fa9f/frustrating-design-patterns-disabled-buttons.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[React Children And Iteration Methods]]></title>
            <link>https://smashingmagazine.com/2021/08/react-children-iteration-methods/</link>
            <guid>https://smashingmagazine.com/2021/08/react-children-iteration-methods/</guid>
            <pubDate>Wed, 04 Aug 2021 10:30:00 GMT</pubDate>
            <description><![CDATA[In this article, we’ll discuss and learn about the use case of iterating over React `children` and the ways to do it. In particular, we will deep dive into one of the utility methods, `React.Children.toArray`, that React gives us, which helps to iterate over the <code>children</code> in a way which ensures performance and determinism.]]></description>
            <content:encoded><![CDATA[<p>The most obvious and common prop that developers work with within React is the <code>children</code> prop. In the majority of cases, there is no need to understand how the <code>children</code> prop looks like. But in some cases, we want to inspect the <code>children</code> prop to maybe wrap each child in another element/component or to reorder or slice them. In those cases inspecting how the <code>children</code> prop looks like becomes essential.</p>
<p>In this article, we’ll look at a React utility <code>React.Children.toArray</code> which lets us prepare the <code>children</code> prop for inspection and iteration, some of its shortcomings and how to overcome them — through a small open-source package, to keep our React code function the way it is deterministically supposed to behave, keeping performance intact. If you know the basics of React and have at least an idea about what the <code>children</code> prop in React is, this article is for you.</p>
<p>While working with React, most of the time we do not touch the <code>children</code> prop any more than using it in React components directly.</p>
<pre><code>function Parent({ children }) {
  return &lt;div className="mt-10"&gt;{children}&lt;/div&gt;;
}</code></pre>

<p>But sometimes we have to iterate over the <code>children</code> prop so that we can enhance or change the children without having the user of the components explicitly do it themselves. One common use case is to pass the iteration index-related information to child components of a parent like so:</p>
<pre><code>import { Children, cloneElement } from "react";

function Breadcrumbs({ children }) {
  const arrayChildren = Children.toArray(children);

  return (
    &lt;ul
      style={{
        listStyle: "none",
        display: "flex",
      }}
    &gt;
      {Children.map(arrayChildren, (child, index) =&gt; {
        const isLast = index === arrayChildren.length - 1;

        if (! isLast &amp;&amp; ! child.props.link ) {
          throw new Error(
            `BreadcrumbItem child no. ${index + 1}
            should be passed a 'link' prop`
          )
        } 

        return (
          &lt;&gt;
            {child.props.link ? (
              &lt;a
                href={child.props.link}
                style={{
                  display: "inline-block",
                  textDecoration: "none",
                }}
              &gt;
                &lt;div style={{ marginRight: "5px" }}&gt;
                  {cloneElement(child, {
                    isLast,
                  })}
                &lt;/div&gt;
              &lt;/a&gt;
            ) : (
              &lt;div style={{ marginRight: "5px" }}&gt;
                {cloneElement(child, {
                  isLast,
                })}
              &lt;/div&gt;
            )}
            {!isLast &amp;&amp; (
              &lt;div style={{ marginRight: "5px" }}&gt;
                &gt;
              &lt;/div&gt;
            )}
          &lt;/&gt;
        );
      })}
    &lt;/ul&gt;
  );
}

function BreadcrumbItem({ isLast, children }) {
  return (
    &lt;li
      style={{
        color: isLast ? "black" : "blue",
      }}
    &gt;
      {children}
    &lt;/li&gt;
  );
}

export default function App() {
  return (
    &lt;Breadcrumbs&gt;
      &lt;BreadcrumbItem
        link="https://goibibo.com/"
      &gt;
        Goibibo
      &lt;/BreadcrumbItem&gt;

      &lt;BreadcrumbItem
        link="https://goibibo.com/hotels/"
      &gt;
        Hotels
      &lt;/BreadcrumbItem&gt;

      &lt;BreadcrumbItem&gt;
       A Fancy Hotel Name
      &lt;/BreadcrumbItem&gt;
    &lt;/Breadcrumbs&gt;
  );
}
</code></pre>

<p>Take a look at the <a href="https://codesandbox.io/embed/sm-article-21-lt6le?fontsize=14&amp;hidenavigation=1&amp;theme=dark">Codesandbox demo</a>. Here we’re doing the following:</p>
<ol>
<li>We are using the <code>React.Children.toArray</code> method to ensure that the <code>children</code> prop is always an array. If we do not do that, doing <code>children.length</code> might blow because the <code>children</code>  prop can be an object, an array, or even a function. Also, if we try to use the array <code>.map</code> method on <code>children</code> directly it might blow up.</li>
<li>In the parent <code>Breadcrumbs</code> component we are iterating over its children by using the utility method <code>React.Children.map</code>.</li>
<li>Because we have access to <code>index</code> inside the iterator function (second argument of callback function of <code>React.Children.map</code>) we are able to detect if the child is last-child or not.</li>
<li>If it is the last child we clone the element and pass in the <code>isLast</code> prop to it so that the child can style itself based on it.</li>
<li>If it is not the last child, we ensure that all those children which aren’t the last child have a <code>link</code> prop on them by throwing an error if they don’t. We clone the element as we did in step 4. and pass the <code>isLast</code> prop as we did before, but we also additionally wrap this cloned element in an anchor tag. </li>
</ol>
<p>The user of <code>Breadcrumbs</code> and <code>BreadcrumbItem</code> doesn’t have to worry about which children should have links and how they should be styled. Inside the <code>Breadcrumbs</code> component, it automatically gets handled.</p>
<p>This pattern of <em>implicitly</em> passing in props and/or having <code>state</code> in the parent and passing the state and state changers down to the children as props is called the <a href="https://kentcdodds.com/blog/compound-components-with-react-hooks/">compound component pattern</a>. You might be familiar with this pattern from React Router’s <code>Switch</code> component, which takes <code>Route</code> components as its children:</p>
<pre><code>// example from react router docs
// https://reactrouter.com/web/api/Switch

import { Route, Switch } from "react-router";

let routes = (
  &lt;Switch&gt;
    &lt;Route exact path="/"&gt;
      &lt;Home /&gt;
    &lt;/Route&gt;
    &lt;Route path="/about"&gt;
      &lt;About /&gt;
    &lt;/Route&gt;
    &lt;Route path="/:user"&gt;
      &lt;User /&gt;
    &lt;/Route&gt;
    &lt;Route&gt;
      &lt;NoMatch /&gt;
    &lt;/Route&gt;
  &lt;/Switch&gt;
);</code></pre>

<p>Now that we have established that there are needs where we have to iterate over <code>children</code> prop sometimes, and having used two of the children utility methods <code>React.Children.map</code> and <code>React.Children.toArray</code>, let’s refresh our memory about one of them: <code>React.Children.toArray</code>.</p>
<code>React.Children.toArray</code>
<p>Let’s start by seeing with an example what this method does and where it might be useful.</p>
<pre><code>import { Children } from 'react'

function Debugger({children}) {
  // let’s log some things
  console.log(children);
  console.log(
    Children.toArray(children)
  )
  return children;
}

const fruits = [
  {name: "apple", id: 1},
  {name: "orange", id: 2},
  {name: "mango", id: 3}
]

export default function App() {
  return (
    &lt;Debugger&gt;
        &lt;a
          href="https://css-tricks.com/"
          style={{padding: '0 10px'}}
        &gt;
          CSS Tricks
        &lt;/a&gt;

        &lt;a
          href="https://smashingmagazine.com/"
          style={{padding: '0 10px'}}
        &gt;
          Smashing Magazine
        &lt;/a&gt;

        {
          fruits.map(fruit =&gt; {
            return (
              &lt;div key={fruit.id} style={{margin: '10px'}}&gt;
                {fruit.name}
              &lt;/div&gt;
            )
          })
        }
    &lt;/Debugger&gt;
  )
}</code></pre>

<p>Take a look at the <a href="https://codesandbox.io/embed/sm-article-22-hhuws?fontsize=14&amp;hidenavigation=1&amp;theme=dark">Codesandbox demo</a>. We have a <code>Debugger</code> component, which does nothing much in terms of rendering — it just returns <code>children</code> as is. But it does log two values: <code>children</code> and <code>React.Children.toArray(children)</code>.</p>
<p>If you open up the console, you’d be able to see the difference.</p>
<ul>
<li>The first statement which logs <code>children</code> prop, shows the following as its value’s data structure: </li>
</ul>
<pre><code>[
  Object1, ----&gt; first anchor tag
  Object2, ----&gt; second anchor tag
  [
    Object3, ----&gt; first fruit
    Object4, ----&gt; second fruit
    Object5] ----&gt; third fruit
  ]
]</code></pre>

<ul>
<li>The second statement which logs <code>React.Children.toArray(children)</code> logs:</li>
</ul>
<pre><code>[
  Object1, ----&gt; first anchor tag
  Object2, ----&gt; second anchor tag
  Object3, ----&gt; first fruit
  Object4, ----&gt; second fruit
  Object5, ----&gt; third fruit
]</code></pre>

<p>Let’s read the method’s documentation in React docs to make sense of what is happening.</p>
<blockquote>
<p><code>React.Children.toArray</code> returns the <code>children</code> opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice <code>children</code> before passing it down.</p>
</blockquote>
<p>Let’s break that down:</p>
<ol>
<li>Returns the <code>children</code> opaque data structure as a flat array.</li>
<li>With keys assigned to each child.</li>
</ol>
<p>The first point says that that <code>children</code> (which is an opaque data structure, meaning it can be an object, array, or a function, as described earlier) is converted to a flat array. Just like we saw in the example above. Additionally, this <a href="https://github.com/facebook/react/issues/6889#issuecomment-221858162">GitHub issue comment</a> also explains its behavior:</p>
<blockquote>
<p>It (<code>React.Children.toArray</code>) does not pull children out of elements and flatten them, that wouldn’t really make any sense. It flattens nested arrays and objects, i.e. so that <code>[['a', 'b'],['c', ['d']]]</code> becomes something similar to <code>['a', 'b', 'c', 'd']</code>.</p>
</blockquote>
<pre><code>React.Children.toArray(
  [
    ["a", "b"],
    ["c", ["d"]]
  ]
).length === 4;</code></pre>

<p>Let’s see what the second point (‘With keys assigned to each child.’) says, by expanding one child each from the previous logs of the example.</p>
<h3>Expanded Child From  <code>console.log(children)</code></h3>
<pre><code>{
  $$typeof: Symbol(react.element),
  key: null,
  props: {
    href: "https://smashingmagazine.com",
    children: "Smashing Magazine",
    style: {padding: "0 10px"}
  },
  ref: null,
  type: "a",
  // … other properties
}</code></pre>



<h3>Expanded Child From <code>console.log(React.Children.toArray(children))</code></h3>
<pre><code>{
  $$typeof: Symbol(react.element),
  key: ".0",
  props: {
    href: "https://smashingmagazine.com",
    children: "Smashing Magazine",
    style: {padding: "0 10px"}
  },
  ref: null,
  type: "a",
  // … other properties
}</code></pre>

<p>As you can see, besides flattening the <code>children</code> prop into a flat array, it also adds unique keys to each of its children. From the React docs:</p>
<blockquote><code>React.Children.toArray()</code> changes keys to preserve the semantics of nested arrays when flattening lists of children. That is, <code>toArray</code> prefixes each key in the returned array so that each element’s key is scoped to the input array containing it.</blockquote>

<p>Because the <code>.toArray</code> method might change the order and place of <code>children</code>, it has to make sure that it maintains unique keys for each of them for <a href="https://reactjs.org/docs/reconciliation.html#recursing-on-children">reconciliation and rendering optimization</a>.</p>
<p>Let’s give a little bit more attention to <em><code>so that each element’s key is scoped to the input array containing it.</code></em>, by looking at the keys of each element of the second array (corresponding to <code>console.log(React.Children.toArray(children))</code>).</p>
<pre><code>import { Children } from 'react'

function Debugger({children}) {
  // let’s log some things
  console.log(children);
  console.log(
    Children.map(Children.toArray(children), child =&gt; {
      return child.key
    }).join('\n')
  )
  return children;
}

const fruits = [
  {name: "apple", id: 1},
  {name: "orange", id: 2},
  {name: "mango", id: 3}
]

export default function App() {
  return (
    &lt;Debugger&gt;
        &lt;a
          href="https://css-tricks.com/"
          style={{padding: '0 10px'}}
        &gt;
          CSS Tricks
        &lt;/a&gt;
        &lt;a
          href="https://smashingmagazine.com/"
          style={{padding: '0 10px'}}
        &gt;
          Smashing Magazine
        &lt;/a&gt;
        {
          fruits.map(fruit =&gt; {
            return (
              &lt;div key={fruit.id} style={{margin: '10px'}}&gt;
                {fruit.name}
              &lt;/div&gt;
            )
          })
        }
    &lt;/Debugger&gt;
  )
}</code></pre>

<pre><code>.0  ----&gt; first link
.1  ----&gt; second link
.2:$1 ----&gt; first fruit
.2:$2 ----&gt; second fruit
.2:$3 ----&gt; third fruit</code></pre>

<p>As you can see that the fruits, which were originally a nested array inside the original <code>children</code> array, have keys that are prefixed with <code>.2</code>. The <code>.2</code> corresponds to the fact that they were a part of an array. The suffix, namely <code>:$1</code> ,<code>:$2</code>, <code>:$3</code>, is corresponding to the jsx parent <code>div</code> element corresponding to fruits. If we had used index as key instead, then we’d have got <code>:0</code>, <code>:1</code>, <code>:2</code> as suffixes.</p>
<p>So suppose you had three level of nesting inside <code>children</code> array, like so:</p>
<pre><code>import { Children } from 'react'

function Debugger({children}) {
  const retVal = Children.toArray(children)
  console.log(
    Children.map(retVal, child =&gt; {
      return child.key
    }).join('\n')
  )
  return retVal
}

export default function App() {
  const arrayOfReactElements = [
    &lt;div key="1"&gt;First&lt;/div&gt;,
    [
      &lt;div key="2"&gt;Second&lt;/div&gt;,
      [
        &lt;div key="3"&gt;Third&lt;/div&gt;
      ]
    ]
  ];
  return (
    &lt;Debugger&gt;
      {arrayOfReactElements}
    &lt;/Debugger&gt;
  )
}</code></pre>

<p>The keys will look like</p>
<pre><code>.$1
.1:$2
.1:1:$3</code></pre>

<p>Check the <a href="https://codesandbox.io/embed/sm-article-23-5fwrd?fontsize=14&amp;hidenavigation=1&amp;theme=dark">Codesandbox demo</a>. The <code>$1</code>, <code>$2</code>, <code>$3</code> suffixes are because of the original keys put on the React elements in an array, otherwise React complains of lack of keys 😉 .</p>
<p>From whatever we’ve read so far we can come to two use cases for <code>React.Children.toArray</code>.</p>
<ol>
<li><p>If there’s an absolute need that <code>children</code> should always be an array, you can use <code>React.Children.toArray(children)</code> instead. It’ll work perfectly even when <code>children</code> is an object or a function too.</p>
</li>
<li><p>If you have to sort, filter, or slice <code>children</code> prop you can rely on <code>React.Children.toArray</code> to always preserve unique keys of all the children.</p>
</li>
</ol>
<p><strong>There’s a problem with <code>React.Children.toArray</code></strong> 🤔. Let’s look at this piece of code to understand what the problem is:</p>
<pre><code>import { Children } from 'react'

function List({children}) {
  return (
    &lt;ul&gt;
      {
        Children.toArray(
          children
        ).map((child, index) =&gt; {
          return (
            &lt;li
              key={child.key}
            &gt;
              {child}
            &lt;/li&gt;
          )
        })
      }
    &lt;/ul&gt;
  )
}

export default function App() {
  return (
    &lt;List&gt;
      &lt;a
        href="https://css-tricks.com"
        style={{padding: '0 10px'}}
      &gt;
        Google
      &lt;/a&gt;
      &lt;&gt;
        &lt;a
          href="https://smashingmagazine.com"
          style={{padding: '0 10px'}}
        &gt;
          Smashing Magazine
        &lt;/a&gt;
        &lt;a
          href="https://arihantverma.com"
          style={{padding: '0 10px'}}
        &gt;
          {"Arihant’s Website"}
        &lt;/a&gt;
      &lt;/&gt;
    &lt;/List&gt;
  )
}</code></pre>

<p>Check the <a href="https://codesandbox.io/embed/sm-article-24-dqld3?fontsize=14&amp;hidenavigation=1&amp;theme=dark">Codesandbox demo</a>. If you see what gets rendered for the children of the fragment, you’ll see that both of the links get rendered inside one <code>li</code> tag! 😱</p>
<p>This is because <a href="https://github.com/facebook/react/issues/6889"><code>React.Children.toArray</code></a> <a href="https://github.com/facebook/react/issues/6889">doesn’t traverse into fragments</a>. So what can we do about it? Fortunately, nothing 😅 . We already have an open-sourced package called <a href="https://github.com/grrowl/react-keyed-flatten-children"><code>react-keyed-flatten-children</code></a>. It’s a small function that does its magic. </p>
<p>Let’s see what it does. In pseudo-code (these points are linked in the actual code below), it does this:</p>
<ol>
<li>It is a function that takes <code>children</code> as its only necessary argument.</li>
<li>Iterates over <code>React.Children.toArray(children)</code> and gathers children in an accumulator array.</li>
<li>While iterating, if a child node is a string or a number, it pushes the value as is in the accumulator array.</li>
<li>If the child node is a valid React element, it clones it, gives it the appropriate key, and pushes it to the accumulator array.</li>
<li>If the child node is a fragment, then the function calls itself with fragment’s children as its argument (this is how it <em>traverses through a fragment</em>) and pushes the result of calling itself in the accumulator array.</li>
<li>While doing all this it keeps the track of the depth of traversal (of fragments), so that the children inside fragments would have correct keys, the same way as keys work with nested arrays, as we saw earlier above.</li>
</ol>
<pre><code>import {
  Children,
  isValidElement,
  cloneElement
} from "react";

import { isFragment } from "react-is";

import type {
  ReactNode,
  ReactChild,
} from 'react'

/*************** 1. ***************/
export default function flattenChildren(
  // only needed argument
  children: ReactNode,
  // only used for debugging
  depth: number = 0,
  // is not required, start with default = []
  keys: (string | number)[] = [] 
): ReactChild[] {
  /*************** 2. ***************/
  return Children.toArray(children).reduce(
    (acc: ReactChild[], node, nodeIndex) =&gt; {
      if (isFragment(node)) {
        /*************** 5. ***************/
        acc.push.apply(
          acc,
          flattenChildren(
            node.props.children,
            depth + 1,
            /*************** 6. ***************/
            keys.concat(node.key || nodeIndex)
          )
        );
      } else {
        /*************** 4. ***************/
        if (isValidElement(node)) {
          acc.push(
            cloneElement(node, {
              /*************** 6. ***************/
              key: keys.concat(String(node.key)).join('.')
            })
          );
        } else if (
          /*************** 3. ***************/
          typeof node === "string"
          || typeof node === "number"
        ) {
          acc.push(node);
        }
      }
      return acc; 
    },
    /*************** Acculumator Array ***************/
    []
  );
}</code></pre>

<p>Let’s retry our previous example to use this function and see for ourselves that it fixes our problem.</p>
<pre><code>import flattenChildren from 'react-keyed-flatten-children'
import { Fragment } from 'react'

function List({children}) {
  return (
    &lt;ul&gt;
      {
        flattenChildren(
          children
        ).map((child, index) =&gt; {
          return &lt;li key={child.key}&gt;{child}&lt;/li&gt;
        })
      }
    &lt;/ul&gt;
  )
}
export default function App() {
  return (
    &lt;List&gt;
      &lt;a
        href="https://css-tricks.com"
        style={{padding: '0 10px'}}
      &gt;
        Google
      &lt;/a&gt;
      &lt;Fragment&gt;
        &lt;a
          href="https://smashingmagazine.com"
          style={{padding: '0 10px'}}&gt;
          Smashing Magazine
        &lt;/a&gt;

        &lt;a
          href="https://arihantverma.com"
          style={{padding: '0 10px'}}
        &gt;
          {"Arihant’s Website"}
        &lt;/a&gt;
      &lt;/Fragment&gt;
    &lt;/List&gt;
  )
}</code></pre>

<p>And <a href="https://codesandbox.io/embed/sm-article-25-b76gn?fontsize=14&amp;hidenavigation=1&amp;theme=dark">here’s the final result</a> (on Codesandbox)! <em>Woooheeee!</em> It works.</p>
<p>As an add-on, if you are new to testing — like I am at the point of this writing — you might be interested in <a href="https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.spec.tsx">7 tests</a> written for this utility function. It’ll be fun to read the tests to deduce the functionality of the function.</p>
The Long Term Problem With <code>Children</code> Utilities
<blockquote>“<code>React.Children</code> is a leaky abstraction, and is in maintenance mode.”<br /><br />— <a href="https://github.com/reactjs/rfcs/pull/61#issuecomment-431247764">Dan Abramov</a></blockquote>

<p>The problem with using <code>Children</code> methods to change <code>children</code> behavior is that they only work for one level of nesting of components. If we wrap one of our <code>children</code> in another component, we lose composability. Let’s see what I mean by that, by picking up the first example that we saw — the breadcrumbs.</p>
<pre><code>import { Children, cloneElement } from "react";

function Breadcrumbs({ children }) {
  return (
    &lt;ul
      style={{
        listStyle: "none",
        display: "flex",
      }}
    &gt;
      {Children.map(children, (child, index) =&gt; {
        const isLast = index === children.length - 1;
        // if (! isLast &amp;&amp; ! child.props.link ) {
        //   throw new Error(`
        //     BreadcrumbItem child no.
        //     ${index + 1} should be passed a 'link' prop`
        //   )
        // } 
        return (
          &lt;&gt;
            {child.props.link ? (
              &lt;a
                href={child.props.link}
                style={{
                  display: "inline-block",
                  textDecoration: "none",
                }}
              &gt;
                &lt;div style={{ marginRight: "5px" }}&gt;
                  {cloneElement(child, {
                    isLast,
                  })}
                &lt;/div&gt;
              &lt;/a&gt;
            ) : (
              &lt;div style={{ marginRight: "5px" }}&gt;
                {cloneElement(child, {
                  isLast,
                })}
              &lt;/div&gt;
            )}
            {!isLast &amp;&amp; (
              &lt;div style={{ marginRight: "5px" }}&gt;&gt;&lt;/div&gt;
            )}
          &lt;/&gt;
        );
      })}
    &lt;/ul&gt;
  );
}

function BreadcrumbItem({ isLast, children }) {
  return (
    &lt;li
      style={{
        color: isLast ? "black" : "blue",
      }}
    &gt;
      {children}
    &lt;/li&gt;
  );

}
const BreadcrumbItemCreator = () =&gt;
  &lt;BreadcrumbItem
    link="https://smashingmagazine.com"
  &gt;
    Smashing Magazine
  &lt;/BreadcrumbItem&gt;

export default function App() {
  return (
    &lt;Breadcrumbs&gt;
      &lt;BreadcrumbItem
        link="https://goibibo.com/"
      &gt;
        Goibibo
      &lt;/BreadcrumbItem&gt;

      &lt;BreadcrumbItem
        link="https://goibibo.com/hotels/"
      &gt;
        Goibibo Hotels
      &lt;/BreadcrumbItem&gt;

      &lt;BreadcrumbItemCreator /&gt;

      &lt;BreadcrumbItem&gt;
        A Fancy Hotel Name
      &lt;/BreadcrumbItem&gt;
    &lt;/Breadcrumbs&gt;
  );
}</code></pre>

<p>Take a look at the <a href="https://codesandbox.io/embed/sm-article-26-7067h?fontsize=14&amp;hidenavigation=1&amp;theme=dark">Codesandbox demo</a>. Although our new component <code>&lt;BreadcrumbItemCreator /&gt;</code> rendered, our <code>Breadcrumb</code> component doesn’t have any way to extract out the <code>link</code> prop from it, because of which, it doesn’t render as link.</p>
<p>To fix this problem React team had come with — now defunct — experimental API called <a href="https://www.npmjs.com/package/react-call-return">react-call-return</a>.</p>
<p><a href="https://www.youtube.com/watch?v=60MfXWyQhRE">Ryan Florence’s Video</a> explains this problem in detail, and how <code>react-call-return</code> fixed it. Since the package was never published in any version of React, <a href="https://github.com/reactjs/rfcs/pull/61#issuecomment-584402735">there are plans to take inspiration from it and make something production-ready.</a></p>
Conclusion
<p>To conclude, we learned about:</p>
<ol>
<li>The <code>React.Children</code> utility methods. We saw two of them: <code>React.Children.map</code> to see how to use it to make compound components, and <code>React.Children.toArray</code> in depth.</li>
<li>We saw how <code>React.Children.toArray</code> converts opaque <code>children</code> prop — which could be either object, array or function — into a flat array, so that one could operate over it in required manner — sort, filter, splice, etc…</li>
<li>We learned that <code>React.Children.toArray</code> doesn’t traverse through React Fragments.</li>
<li>We learned about an open-source package called <code>react-keyed-flatten-children</code> and understood how it solves the problem.</li>
<li>We saw that <code>Children</code> utilities are in maintenance mode <a href="https://twitter.com/0xca0a/status/1371016849664704513">because they do not compose well</a>.</li>
</ol>
<p>You might also be interested in reading how to use other <code>Children</code> methods to do everything you can do with <code>children</code> in Max Stoiber’s blog post <a href="https://mxstbr.blog/2017/02/react-children-deepdive/">React Children Deep Dive</a>.</p>
<h3>Resources</h3>
<ul>
<li><a href="https://kentcdodds.com/blog/compound-components-with-react-hooks/">Compound components with react hooks</a></li>
<li><a href="https://github.com/facebook/react/issues/6889#issuecomment-221858162">React.Children.toArray array flattening github issue explanation</a></li>
<li><a href="https://reactjs.org/docs/reconciliation.html#recursing-on-children">React reconciliation: Recursing on children</a></li>
<li><a href="https://github.com/facebook/react/issues/6889"><code>React.Children.toArray</code> doesn’t traverse into fragments</a></li>
<li><a href="https://github.com/grrowl/react-keyed-flatten-children"><code>react-keyed-flatten-children</code></a></li>
<li><a href="https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.spec.tsx"><code>react-keyed-flatten-children</code></a> <a href="https://github.com/grrowl/react-keyed-flatten-children/blob/master/index.spec.tsx">tests</a></li>
<li><a href="https://www.npmjs.com/package/react-call-return">react-call-return</a></li>
<li><a href="https://www.youtube.com/watch?v=60MfXWyQhRE">Ryan Florence’s Video explaining react-call-return</a></li>
<li><a href="https://github.com/reactjs/rfcs/pull/61#issuecomment-584402735">React team’s plan to replace <code>Children</code> utilities with something more composable</a></li>
<li><a href="https://mxstbr.blog/2017/02/react-children-deepdive/">Max Stoiber’s <code>React Children</code> Deep Dive</a></li>
<li><a href="https://github.com/reactjs/rfcs/pull/61#issuecomment-431247764"><code>React.Children</code> is a leaky abstraction, and is in maintenance mode</a></li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Arihant Verma)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ae9c0d62-009e-45c0-a600-d747533e49e5/react-children-iteration-methods.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[How To Build Resilient JavaScript UIs]]></title>
            <link>https://smashingmagazine.com/2021/08/build-resilient-javascript-ui/</link>
            <guid>https://smashingmagazine.com/2021/08/build-resilient-javascript-ui/</guid>
            <pubDate>Tue, 03 Aug 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[Resilience is intrinsic to the web and therefore us, web developers. This article explores how graceful degradation, defensive coding, observability, and a healthy attitude towards failures better equips us before, during, and after an error occurs.]]></description>
            <content:encoded><![CDATA[<p>Things on the web can break — the odds are stacked against us. Lots can go wrong: a network request fails, a third-party library breaks, a JavaScript feature is unsupported (assuming JavaScript is even available), a CDN goes down, a user behaves unexpectedly (they double-click a submit button), the list goes on.</p>
<p>Fortunately, we as engineers can avoid, or at least mitigate the impact of breakages in the web apps we build. This however requires a conscious effort and mindset shift towards thinking about unhappy scenarios just as much as happy ones.</p>
<p><strong>The User Experience (UX) doesn’t need to be all or nothing — just what is usable.</strong> This premise, known as graceful degradation allows a system to continue working when parts of it are dysfunctional — much like an electric bike becomes a regular bike when its battery dies. If something fails only the functionality dependent on that should be impacted.</p>
<p>UIs should adapt to the functionality they can offer, whilst providing as much value to end-users as possible.</p>
Why Be Resilient
<p>Resilience is <a href="https://www.w3.org/TR/html-design-principles/#degrade-gracefully">intrinsic to the web</a>.</p>
<p>Browsers ignore invalid HTML tags and unsupported CSS properties. This liberal attitude is known as Postel’s Law, which is conveyed superbly by Jeremy Keith in <a href="https://resilientwebdesign.com/chapter4/">Resilient Web Design</a>:</p>
<blockquote>“Even if there are errors in the HTML or CSS, the browser will still attempt to process the information, skipping over any pieces that it can’t parse.”</blockquote>

<p>JavaScript is less forgiving. Resilience is extrinsic. We instruct JavaScript what to do if something unexpected happens. If an API request fails the onus falls on us to catch the error, and subsequently decide what to do. And that decision directly impacts users.</p>
<p>Resilience builds trust with users. A buggy experience reflects poorly on the brand. According to <a href="https://hbr.org/2000/09/knowing-a-winning-business-idea-when-you-see-one">Kim and Mauborgne, convenience (availability, ease of consumption)</a> is one of six characteristics associated with a successful brand, which makes graceful degradation synonymous with brand perception.</p>
<p>A robust and reliable UX is a signal of quality and trustworthiness, both of which feed into the brand. A user unable to perform a task because something is broken will naturally face disappointment they could associate with your brand.</p>
<p>Often system failures are chalked up as "corner cases" — things that rarely happen, however, the web has many corners. Different browsers running on different platforms and hardware, respecting our user preferences and browsing modes (Safari Reader/ assistive technologies), being served to geo-locations with varying latency and intermittency increase the likeness of something not working as intended.</p>
Error Equality
<p>Much like content on a webpage has hierarchy, failures — things going wrong — also follow a pecking order. Not all errors are equal, some are more important than others.</p>
<p>We can categorize errors by their impact. How does XYZ not working prevent a user from achieving their goal? The answer generally mirrors the content hierarchy.</p>
<p>For example, a dashboard overview of your bank account contains data of varying importance. The total value of your balance is more important than a notification prompting you to check in-app messages. <a href="https://en.wikipedia.org/wiki/MoSCoW_method">MoSCoWs method of prioritization</a> categorizes the former as a must-have, and the latter a nice to have.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f7486947-6755-43ad-9426-5b3773aa7b14/8-resilience-is-a-feature.png" /></p>
<p>If primary information is unavailable (i.e: network request fails) we should be transparent and let users know, usually via an error message. If secondary information is unavailable we can still provide the core (must have) experience whilst gracefully hiding the degraded component.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09ab88dd-1e87-4c40-995f-9cbf380e4fe3/3-resilience-is-a-feature.png" /></p>
<p>Knowing when to show an error message or not can be represented using a simple decision tree:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f3b257e8-88c8-4c84-b567-b30641195f2d/14-resilience-is-a-feature.png" /></p>
<p>Categorization removes the 1-1 relationship between failures and error messages in the UI. Otherwise, we risk bombarding users and cluttering the UI with too many error messages. Guided by content hierarchy we can cherry-pick what failures are surfaced to the UI, and what happen unbeknownst to end-users.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/86ca5913-57f4-44e7-a77f-20a119a1de39/2-resilience-is-a-feature.png" /></p>
Prevention is Better than Cure
<p>Medicine has an adage that prevention is better than cure.</p>
<p>Applied to the context of building resilient UIs, preventing an error from happening in the first place is more desirable than needing to recover from one. <strong>The best type of error is one that doesn’t happen.</strong></p>
<p>It’s safe to assume never to make assumptions, especially when consuming remote data, interacting with third-party libraries, or using newer language features. Outages or unplanned API changes alongside what browsers users choose or must use are outside of our control. Whilst we cannot stop breakages outside our control from occurring, we can protect ourselves against their (side) effects.</p>
<p>Taking a more defensive approach when writing code helps reduce programmer errors arising from making assumptions. Pessimism over optimism favours resilience. The code example below is too optimistic:</p>
<pre><code>const debitCards = useDebitCards();

return (
  &lt;ul&gt;
    {debitCards.map(card =&gt; {
      &lt;li&gt;{card.lastFourDigits}&lt;/li&gt;
    })}
  &lt;/ul&gt;
);
</code></pre>

<p>It assumes that debit cards exist, the endpoint returns an Array, the array contains objects, and each object has a property named <code>lastFourDigits</code>. The current implementation forces end-users to test our assumptions. It would be safer, and more user friendly if these assumptions were embedded in the code:</p>
<pre><code>const debitCards = useDebitCards();

if (Array.isArray(debitCards) &amp;&amp; debitCards.length) {
  return (
    &lt;ul&gt;
      {debitCards.map(card =&gt; {
        if (card.lastFourDigits) {
          return &lt;li&gt;{card.lastFourDigits}&lt;/li&gt;
        }
      })}
    &lt;/ul&gt;
  );
}

return "Something else";
</code></pre>

<p>Using a third-party method without first checking the method is available is equally optimistic:</p>
<pre><code>stripe.handleCardPayment(/* ... */);
</code></pre>

<p>The code snippet above assumes that the <code>stripe</code> object exists, it has a property named <code>handleCardPayment</code>, and that said property is a function. It would be safer, and therefore more defensive if these assumptions were verified by us beforehand:</p>
<pre><code>if (
  typeof stripe === 'object' &amp;&amp; 
  typeof stripe.handleCardPayment === 'function'
) {
  stripe.handleCardPayment(/* ... */);
}
</code></pre>

<p>Both examples check something is available before using it. Those familiar with feature detection may recognize this pattern:</p>
<pre><code>if (navigator.clipboard) {
  /* ... */
}
</code></pre>

<p>Simply asking the browser whether it supports the Clipboard API before attempting to cut, copy or paste is a simple yet effective example of resilience. The UI can adapt ahead of time by hiding clipboard functionality from unsupported browsers, or from users yet to grant permission.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/788ea5b0-a67a-43e8-a2f3-80e1bbb0de6e/5-resilience-is-a-feature.png" /></p>
<p>User browsing habits are another area living outside our control. Whilst we cannot dictate how our application is used, we can instill guardrails that prevent what we perceive as "misuse". Some people double-click buttons — a behavior mostly redundant on the web, however not a punishable offense.</p>
<p>Double-clicking a button that submits a form should not submit the form twice, especially for <a href="https://developer.mozilla.org/en-US/docs/Glossary/Idempotent#technical_knowledge">non-idempotent HTTP methods</a>. During form submission, prevent subsequent submissions to mitigate any fallout from multiple requests being made.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/396cd330-df81-4582-a8e2-24c189329dd9/12-resilience-is-a-feature.png" /></p>
<p>Preventing form resubmission in JavaScript alongside using <code>aria-disabled="true"</code> is more usable and accessible than the <code>disabled</code> HTML attribute. Sandrina Pereira explains <a href="https://css-tricks.com/making-disabled-buttons-more-inclusive/">Making Disabled Buttons More Inclusive</a> in great detail.</p>
Responding to Errors
<p>Not all errors are preventable via defensive programming. This means responding to an operational error (those occurring within correctly written programs) falls on us.</p>
<p>Responding to an error can be modelled using a decision tree. We can either recover, fallback or acknowledge the error:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4804ef49-a1b1-463f-a579-f290871ca53d/6-resilience-is-a-feature.png" /></p>
<p>When facing an error, the first question should be, “can we recover?” For example, does retrying a network request that failed for the first time succeed on subsequent attempts? Intermittent micro-services, unstable internet connections, or eventual consistency are all reasons to try again. Data fetching libraries such as <a href="https://swr.vercel.app/">SWR</a> offer this functionality for free.</p>
<p>Risk appetite and surrounding context influence what HTTP methods you are comfortable retrying. At Nutmeg we retry failed reads (GET requests), but not writes (POST/ PUT/ PATCH/ DELETE). Multiple attempts to retrieve data (portfolio performance) is safer than mutating it (resubmitting a form).</p>
<p>The second question should be: If we cannot recover, can we provide a fallback? For example, if an online card payment fails can we offer an alternative means of payment such as via PayPal or Open Banking.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f115d83a-b305-421d-91b6-f8799c1c5a08/1-resilience-is-a-feature.png" /></p>
<p>Fallbacks don’t always need to be so elaborate, they can be subtle. Copy containing text dependant on remote data can fallback to less specific text when the request fails:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8a9290b3-a920-4fe4-ba95-32740fb3d100/4-resilience-is-a-feature.png" /></p>
<p>The third and final question should be: If we cannot recover, or fallback how important is this failure (which relates to "Error Equality"). The UI should acknowledge primary errors by informing users something went wrong, whilst providing actionable prompts such as contacting customer support or linking to relevant support articles.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/66669728-b30a-42f3-ac19-16241d06959b/7-resilience-is-a-feature.png" /></p>
Observability
<p>UIs adapting to something going wrong is not the end. There is another side to the same coin.</p>
<p>Engineers need visibility on the root cause behind a degraded experience. Even errors not surfaced to end-users (secondary errors) must propagate to engineers. Real-time error monitoring services such as <a href="https://sentry.io/">Sentry</a> or <a href="https://rollbar.com/">Rollbar</a> are invaluable tools for modern-day web development.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/49acff6d-a19d-4d40-a317-6c55fffb59b5/11-resilience-is-a-feature.png" /></p>
<p>Most error monitoring providers capture all unhandled exceptions automatically. Setup requires minimal engineering effort that quickly pays dividends for an improved healthy production environment and MTTA (mean time to acknowledge).</p>
<p>The real power comes when explicitly logging errors ourselves. Whilst this involves more upfront effort it allows us to enrich logged errors with more meaning and context — both of which aid troubleshooting. Where possible aim for error messages that are understandable to non-technical members of the team.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/637a48c0-d69b-40de-8e96-1a715233ce01/13-resilience-is-a-feature.png" /></p>
<p>Extending the earlier Stripe example with an else branch is the perfect contender for explicit error logging:</p>
<pre><code>if (
  typeof stripe === "object" &amp;&amp;
  typeof stripe.handleCardPayment === "function"
) {
  stripe.handleCardPayment(/* ... */);
} else {
  logger.capture(
    "[Payment] Card charge — Unable to fulfill card payment because stripe.handleCardPayment was unavailable"
  );
}
</code></pre>

<p><strong>Note</strong>: <em>This defensive style needn’t be bound to form submission (at the time of error), it can happen when a component first mounts (before the error) giving us and the UI more time to adapt.</em></p>
<p>Observability helps pinpoint weaknesses in code and areas that can be hardened. Once a weakness surfaces look at if/ how it can be hardened to prevent the same thing from happening again. Look at trends and risk areas such as third-party integrations to identify what could be wrapped in an operational feature flag (otherwise known as kill switches).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6e961101-47fc-4939-be4e-fb59d2990c13/10-resilience-is-a-feature.png" /></p>
<p>Users forewarned about something not working will be less frustrated than those without warning. Knowing about road works ahead of time helps manage expectations, allowing drivers to plan alternative routes. When dealing with an outage (hopefully discovered by monitoring and not reported by users) be transparent.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d900508-6f8f-4fc7-878c-c4e3f2242936/9-resilience-is-a-feature.png" /></p>
Retrospectives
<p>It’s very tempting to gloss over errors.</p>
<p>However, they provide valuable learning opportunities for us and our current or future colleagues. Removing the stigma from the inevitability that things go wrong is crucial. In <a href="https://www.goodreads.com/book/show/24611735-black-box-thinking">Black box thinking</a> this is described as:</p>
<blockquote>“In highly complex organizations, success can happen only when we confront our mistakes, learn from our own version of a black box, and create a climate where it’s safe to fail.”</blockquote>

<p>Being analytical helps prevent or mitigate the same error from happening again. Much like black boxes in the aviation industry record incidents, we should document errors. At the very least documentation from prior incidents helps reduce the MTTR (mean time to repair) should the same error occur again.</p>
<p>Documentation often in the form of RCA (root cause analysis) reports should be honest, discoverable, and include: what the issue was, its impact, the technical details, how it was fixed, and actions that should follow the incident.</p>
Closing Thoughts
<p>Accepting the fragility of the web is a necessary step towards building resilient systems. A more reliable user experience is synonymous with happy customers. Being equipped for the worst (proactive) is better than putting out fires (reactive) from a business, customer, and developer standpoint (less bugs!).</p>
<p>Things to remember:</p>
<ul>
<li>UIs should adapt to the functionality they can offer, whilst still providing value to users;</li>
<li>Always think what can wrong (never make assumptions);</li>
<li>Categorize errors based on their impact (not all errors are equal);</li>
<li>Preventing errors is better than responding to them (code defensively);</li>
<li>When facing an error, ask whether a recovery or fallback is available;</li>
<li>User facing error messages should provide actionable prompts;</li>
<li>Engineers must have visibility on errors (use error monitoring services);</li>
<li>Error messages for engineers/ colleagues should be meaningful and provide context;</li>
<li>Learn from errors to help our future selves and others.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Callum Hart)</author>
            <enclosure url="blob:http://www.smashingmagazine.com/c8b93225-8b34-431c-94f1-2f2d0a4fb95a" length="0" type="image/com/c8b93225-8b34-431c-94f1-2f2d0a4fb95a"/>
        </item>
        <item>
            <title><![CDATA[Refactoring CSS: Strategy, Regression Testing And Maintenance (Part 2)]]></title>
            <link>https://smashingmagazine.com/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/</link>
            <guid>https://smashingmagazine.com/2021/08/refactoring-css-strategy-regression-testing-maintenance-part2/</guid>
            <pubDate>Mon, 02 Aug 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[In this article, we’ll take a deep dive into the refactoring process itself, and cover incremental refactoring strategy, visual regression testing, and maintaining the refactored codebase.]]></description>
            <content:encoded><![CDATA[<p>In <a href="https://www.smashingmagazine.com/2021/07/refactoring-css-introduction-part1/">Part 1</a>, we’ve covered the side effects of low-quality CSS codebase on end-users, development teams, and management. Maintaining, extending, and working with the low-quality codebase is difficult and often requires additional time and resources. Before bringing up the refactoring proposal to the management and stakeholders, it can be useful to back up the suggestion with some hard data about the <strong>codebase health</strong> — not only to convince the management department, but also have a measurable goal for the refactoring process.</p>
<p>Let’s assume that management has approved the CSS refactoring project. The development team has analyzed and pinpointed the weaknesses in the CSS codebase and has set target goals for the refactor (file size, specificity, color definitions, and so on). In this article, we’ll take a deep dive into the refactoring process itself, and cover incremental refactoring strategy, visual regression testing, and maintaining the refactored codebase.</p>
<div>
<h4>Part Of: <a href="/category/refactoring/">CSS Refactoring</a></h4>
<ul>
<li>Part 1: <a href="/2021/07/refactoring-css-introduction-part1/">CSS Refactoring: Introduction</a></li>
<li>Part 2: <strong>CSS Refactoring: Strategy, Regression Testing And Maintenance</strong></li>
<li>Part 3: <a href="/2021/08/refactoring-css-optimizing-size-performance-part3/">CSS Refactoring: Optimizing Size And Performance</a></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

Preparation And Planning
<p>Before starting the refactoring process, the team needs to go over the codebase issues <a href="https://www.smashingmagazine.com/2021/07/refactoring-css-introduction-part1/#auditing-css-codebase-health">and</a> <a href="https://www.smashingmagazine.com/2021/07/refactoring-css-introduction-part1/#auditing-css-codebase-health">CSS health audit data</a> (CSS file size, selector complexity, duplicated properties, and declarations, etc.) and discuss individual issues about how to approach them and what challenges to expect. These issues and challenges are specific to the codebase and can make the refactoring process or testing difficult. As concluded in the <a href="https://www.smashingmagazine.com/2021/07/refactoring-css-introduction-part1/">previous article</a>, it’s important to establish internal rules and codebase standards and keep them documented to make sure that the team is on the same page and has a more <strong>unified and standardized approach to refactoring</strong>.</p>
<p>The team also needs to outline the individual refactoring tasks and set the deadlines for completing the refactoring project, taking into account current tasks and making sure that refactoring project doesn’t prevent the team from addressing urgent tasks or working on planned features. Before estimating the time duration and workload of the refactoring project, the team needs to consult with the management about the short-term plans and adjust their estimates and workload based on the planned features and regular maintenance procedures.</p>
<p>Unlike regular features and bug fixes, the refactoring process yields little to no visible and measurable changes on the front end, and management cannot keep track of the progress on their own. It’s important to establish <strong>transparent communication</strong> to keep the management and other project stakeholders updated on the refactoring progress and results. Online collaborative workspace tools like <a href="https://miro.com/">Miro</a> or <a href="https://www.mural.co/">MURAL</a> can also be used for effective communication and collaboration between the team members and management, as well as a quick and simple task management tool.</p>
<p>Christoph Reinartz pointed out the importance of transparency and clear communication while the <a href="https://tech.trivago.com/2016/02/02/large-scale-css-refactoring-at-trivago/">team at trivago</a> was working on the CSS refactoring project.</p>
<blockquote>“Communication and clearly making the progress and any upcoming issues visible to the whole company were our only weapon. We decided to build up a very simple Kanban board, established a project stand-up and a project Slack channel, and kept management and the company up-to-date via our internal social cast network.”</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0cd05d84-1be6-4da6-9115-692cbcbadddc/1-refactoring-css-strategy-regression-testing-maintenance-part2.png" /></p>
<p>The most crucial element of planning the refactoring process is to keep the CSS refactoring task scope as small as possible. This makes the tasks more manageable, and easier to test and integrate.</p>
<p>Harry Roberts refers to these tasks as “<a href="https://csswizardry.com/2017/06/refactoring-tunnels/">refactoring tunnels</a>”. For example, refactoring the entire codebase to follow the BEM methodology all at once can yield a massive improvement to the codebase and the development process. This might seem like a simple search-and-replace task at first. However, this task affects all elements on every page (high scope) and the team cannot “see the light at the end of the tunnel” right away; a lot of things can break in the process and unexpected issues can slow down the progress and <strong>no one can tell when the task is going to be finished</strong>. The team can spend days or weeks working on it and risk hitting a wall, accumulate additional technical debt, or making the codebase even less healthy. The team ends up either giving up on the task of starting over, wasting time and resources in the process.</p>
<p>By contrast, improving just the navigation component CSS is a smaller scope task and is much more manageable and doable. It is also easier to test and verify. This task can be done in a few days. Even with potential issues and challenges that slow down the task, there is a high chance of success. The team can always “see the end of the tunnel” while they’re working on the task because they know the task will be completed once the component has been refactored and all issues related to the component have been fixed.</p>
<p>Finally, the team needs to agree on the refactoring strategy and regression testing method. This is where the refactoring process gets challenging — refactoring should be as streamlined as possible and shouldn’t introduce any regressions or bugs. </p>
<p>Let’s dive into one of the <strong>most effective CSS refactoring strategies</strong> and see how we can use it to improve the codebase quickly and effectively.</p>
Incremental Refactoring Strategy
<p>Refactoring is a challenging process that is much more complex than simply deleting the legacy code and replacing it with the refactored code. There is also the matter of integrating the refactored codebase with the legacy codebase and avoiding regressions, accidental code deletions, preventing stylesheet conflicts, etc. To avoid these issues, I would recommend using an incremental (or granular) refactoring strategy.</p>
<p>In my opinion, this is one of the safest, most logical, and most recommended CSS refactoring strategies I’ve come across so far. Harry Roberts has <a href="https://www.youtube.com/watch?v=fvTryZjGyg8">outlined this strategy</a> in 2017. and it has been my personal go-to CSS refactoring strategy since I first heard about it.</p>
<p>Let’s go over this strategy step by step.</p>
<h3>Step 1: Pick A Component And Develop It In Isolation</h3>
<p>This strategy relies on individual tasks having low scope, meaning that we should refactor the project component by component. It’s recommended to start with low-scope tasks (individual components) and then move onto higher-scoped tasks (global styles).</p>
<p>Depending on the project structure and CSS selectors, individual component styles consist of a combination of component (class) styles and global (wide-ranging element) styles. Both component styles and global styles can be the source of the codebase issues and might need to be refactored. </p>
<p>Let’s take a look at the <strong>more common CSS codebase issues</strong> which can affect a single component. Component (class) selectors might be too complex, difficult to reuse, or can have high specificity and enforce the specific markup or structure. Global (element) selectors might be greedy and leak unwanted styles into multiple components which need to be undone with high-specificity component selectors.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7b5a165e-537a-4554-819e-6b9e47ae134d/3-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<p>After choosing a component to refactor (a lower-scoped task), we need to develop it in an isolated environment away from the legacy code, its weaknesses, and conflicting selectors. This is also a good opportunity to improve the HTML markup, remove unnecessary nestings, use better CSS class names, use ARIA attributes, etc. </p>
<p>You don’t have to go out of your way to set up a whole build system for this, you can even use <a href="https://codepen.io/">CodePen</a> to rebuild the individual components. To avoid conflicts with the legacy class names and to separate the refactored code from the legacy code more clearly, we’ll use an <code>rf-</code> prefix on CSS class name selectors.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/af7ed03e-4d73-47ec-91a4-95294d593239/4-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<h3>Step 2: Merge With The Legacy Codebase And Fix Bugs</h3>
<p>Once we’ve finished rebuilding the component in an isolated environment, we need to replace the legacy HTML markup with refactored markup (new HTML structure, class names, attributes, etc.) and add the refactored component CSS alongside the legacy CSS.</p>
<p>We don’t want to act too hastily and remove legacy styles right away. By making too many changes simultaneously, we’ll lose track of the issues that might happen due to the conflicting codebases and multiple changes. For now, let’s replace the markup and add refactored CSS to the existing codebase and see what happens. Keep in mind that refactored CSS should have the <code>.rf-</code> prefix in their class names to prevent conflicts with the legacy codebase.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8896e361-f959-4004-b007-cec12612efaf/5-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<p>Legacy component CSS and global styles can cause unexpected side-effects and leak unwanted styles into the refactored component. Refactored codebase might be missing the faulty CSS which was required to undo these side-effects. Due to those styles having a wider reach and possibly affecting other components, we cannot simply edit the problematic code directly. We need to use a different approach to tackle these conflicts.</p>
<p>We need to create a separate CSS file, which we can name <code>overrides.css</code> or <code>defend.css</code> which will contain hacky, high-specificity code that combats the unwanted leaked styles from the legacy codebase.</p>
<p><code>overrides.css</code> which will contain high-specificity selectors which make sure that the refactored codebase works with the legacy codebase. This is only a temporary file and it will be removed once the legacy code is deleted. For now, add the high-specificity style overrides to unset the styles applied by legacy styles and test if everything is working as expected.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d821412-5eea-4ccd-a969-84b91b99d5bf/6-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<p>If you notice any issues, check if the refactored component is missing any styles by going back to the isolated environment or if any other styles are leaking into the component and need to be overridden. If the component looks and works as expected after adding these overrides, remove the legacy code for the refactored component and check if any issues happen. Remove related hacky code from <code>overrides.css</code> and test again. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ce07ddae-979c-4d8d-9e00-7825cb52613f/7-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<p>Depending on the case, you probably won’t be able to remove every override right away. For example, if the issue lies within a global element selector which leaks styles into other components that also need to be refactored. For those cases, we won’t risk expanding the scope of the task and the pull request but rather <strong>wait until all components have been refactored</strong> and tackle the high-scope tasks after we’ve removed the same style dependency from all other components.</p>
<p>In a way, you can treat the <code>overrides.css</code> file as your makeshift TODO list for refactoring greedy and wide-reaching element selectors. You should also consider updating the task board to include the newly uncovered issues. Make sure to add useful comments in the <code>overrides.css</code> file so other team members are on the same page and instantly know why the override has been applied and in response to which selector.</p>
<pre><code>/* overrides.css */
/* Resets dimensions enforced by ".sidebar &gt; div" in "sidebar.css" */
.sidebar &gt; .card {
  min-width: 0;
}

/* Resets font size enforced by ".hero-container" in "hero.css"*/
.card {
  font-size: 18px;
}
</code></pre>

<h3>Step 3: Test, Merge And Repeat</h3>
<p>Once the refactored component has been successfully integrated with the legacy codebase, create a Pull Request and run an automated visual regression test to catch any issues that might have gone unnoticed and fix them before merging them into one of the main git branches. Visual regression testing can be treated as the last line of defense before merging the individual pull requests. We’ll cover visual regression testing in more detail in one of the upcoming sections of this article.</p>
<p>Now rinse and repeat these three steps until the codebase has been refactored and <code>overrides.css</code> is empty and can be safely removed.</p>
<h3>Step 4: Moving From Components To Global Styles</h3>
<p>Let’s assume that we have refactored all individual low-scoped components and all that is left in the <code>overrides.css</code> file are related to global wide-reaching element selectors. This is a very realistic case, speaking from the experience, as many CSS issues are caused by wide-reaching element selectors leaking styles into multiple components.</p>
<p>By tackling the individual components first and shielding them from the global CSS side-effects using <code>overrides.css</code> file, we’ve made these higher-scoped tasks much more manageable and less risky to do. We can move onto refactoring global CSS styles more safely than before and remove duplicated styles from the individual components and replacing them with general element styles and utilities — buttons, links, images, containers, inputs, grids, and so on. By doing so, we’re going to incrementally remove the code from our makeshift TODO <code>overrides.css</code> file and duplicated code repeated in multiple components.</p>
<p>Let’s apply the same three steps of the incremental refactoring strategy, starting by developing and testing the styles in isolation.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ef08ea8-4d4c-4238-be9b-e21b2fe5a70e/8-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<p>Next, we need to add the refactored global styles to the codebase. We might encounter the same issues when merging the two codebases and we can add the necessary overrides in the <code>overrides.css</code>. However, this time, we can expect that as we are gradually removing legacy styles, we will also be able to gradually remove overrides that we’ve introduced to combat those unwanted side-effects.</p>
<p>The <strong>downside of developing components in isolation</strong> can be found in element styles that are shared between multiple components — style guide elements like buttons, inputs, headings, and so on. When developing these in isolation from the legacy codebase, we don’t have access to the legacy style guide. Additionally, we don’t want to create those dependencies between the legacy codebase and refactored codebase.</p>
<p>That is why it’s easier to remove the duplicated code blocks and move these styles into separate, more general style guide components and selectors later on. It allows us to address these changes right at the end and with the lower risk as we are working with a much healthier and consistent codebase, instead of the messy, inconsistent, and buggy legacy codebase. Of course, any unintended side-effects and bugs can still happen and these should be caught with the visual regression testing tools which we’ll cover in one of the following sections of the article.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e87fa4c-2750-49c8-94db-7fdf06298e1f/9-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
<p>When the codebase has been completely refactored and we’ve removed all makeshift TODO items from the <code>overrides.css</code> file, we can safely remove it and we are left with the refactored and improved CSS codebase.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bed7a19f-1d3c-4f29-bfad-285eb3f42184/10-refactoring-css-strategy-regression-testing-maintenance-part2.jpg" /></p>
Incremental CSS Refactoring Example
<p>Let’s use the incremental refactoring strategy to refactor a simple page that consists of a title element and two card components in a grid component. Each card element consists of an image, title, subtitle, description, and a button and is placed in a 2-column grid with horizontal and vertical spacing.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3646bf6c-a2be-4be3-b7cc-335a27894924/11-refactoring-css-strategy-regression-testing-maintenance-part2.png" /></p>
<p>Depending on the project, testing tools don’t need to be complex or sophisticated to be effective. While working on <a href="https://www.kirbyyardley.com/work/sundance-design-system">refactoring the Sundance Institute’s</a> CSS codebase, the development team used a simple static style guide page generated by Jekyll to test the refactored components.</p>
<blockquote>“One unintended consequence of executing the refactor in abstraction on a Jekyll instance was that we could now publish it to Github pages as a <a href="https://sundance-org.github.io/styles/cards/">living style guide</a>. This has become an invaluable resource for our dev team and for external vendors to reference.”</blockquote>

<p>Once the CSS refactor tasks have been completed and the refactored code is ready for production, the team can also consider doing an <strong>A/B test to check the effect of the refactored codebase on users</strong>. For example, if the goal of the refactoring process was to reduce the overall CSS file size, the A/B test can potentially yield significant improvements for mobile users, and these results can also be beneficial to project stakeholders and management. That’s exactly how the <a href="https://tech.trivago.com/2016/02/02/large-scale-css-refactoring-at-trivago/">team at Trivago</a> approached the deployment of their large-scale refactoring project.</p>
<blockquote>“(…) we were able to release the technical migration as an A/B Test. We tested the migration for one week, with positive results on mobile devices where mobile-first paid out and accepted the migration after only four weeks.”</blockquote>

Keeping Track Of Refactoring Progress
<p>Kanban board, GitHub issues, GitHub project board, and standard project management tools can do a great job of keeping track of the refactoring progress. However, depending on the tools and how the project is organized, it may be difficult to estimate the progress on a per-page basis or do a quick check on which components need to be refactored.</p>
<p>This is where our <code>.rf</code>-prefixed CSS classes come in. Harry Roberts has talked about the <a href="https://www.youtube.com/watch?v=fvTryZjGyg8">benefits of using the prefix</a> in detail. The bottom line is — not only do these classes allow developers to <strong>clearly separate the refactored CSS codebase from the legacy codebase</strong>, but also to quickly show the progress to the project managers and other project stakeholders on a per-page basis.</p>
<p>For example, management may decide to test the effects of the refactored codebase early by deploying only the refactored homepage code and they would want to know when the homepage components will be refactored and ready for A/B testing.</p>
<p>Instead of wasting some time comparing the homepage components with the available tasks on the Kanban board, developers can just temporarily add the following styles to highlight the refactored components which have the <code>rf-</code> prefix in their class names, and the components that need to be refactored. That way, they can reorganize the tasks and prioritize refactoring homepage components.</p>
<pre><code>/* Highlights all refactored components */
[class*="rf-"] {
  outline: 5px solid green;
}

/* Highlights all components that havent been refactored */
[class]:not([class*="rf-"]),
body *:not([class]) {
  outline: 5px solid red;
}</code></pre>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0eb881b0-0e6c-4cda-8216-725e8948fb29/13-refactoring-css-strategy-regression-testing-maintenance-part2.png" /></p>
Maintaining The Refactored Codebase
<p>After the refactoring project has been completed, the team needs to make sure to maintain the codebase health for the foreseeable future — new features will be developed, some new features might even be rushed and produce technical debt, various bugfixes will also be developed, etc. All in all, the development team needs to make sure that the codebase health remains stable as long as they’re in charge of the codebase.</p>
<p>Technical debt which can result in potentially faulty CSS code should be isolated, documented, and implemented in a <a href="https://csswizardry.com/2013/04/shame-css/">separate CSS file</a> which is often named as <code>shame.css</code>.</p>
<p><strong>It’s important to document the rules and best practices</strong> that were established and applied during the refactoring projects. Having those rules in writing allows for standardized code reviews, faster project onboarding for new team members, easier project handoff, etc.</p>
<p>Some of the rules and best practices can also be enforced and documented with automated code-checking tools like <a href="https://stylelint.io/">stylelint</a>. Andrey Sitnik, the author of widely-used CSS development tools like PostCSS and Autoprefixer, has noted how automatic linting tools can make code reviews and onboarding <a href="https://evilmartians.com/chronicles/five-years-of-postcss-state-of-the-union">easier and less stressful</a>.</p>
<blockquote>“However, automatic linting is not the only reason to adopt Stylelint in your project. It can be extremely helpful for onboarding new developers on the team: a lot of time (and nerves!) are wasted on code reviews until junior developers are fully aware of accepted code standards and best practices. Stylelint can make this process much less stressful for everyone.”</blockquote>

<p>Additionally, the team can create a <a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/creating-a-pull-request-template-for-your-repository">Pull Request template</a> and include the checklist of standards and best practices and a link to the project code rules document so that the developers making the Pull Request can check the code themselves and make sure that it follows the agreed standards and best practices.</p>
Conclusion
<p>Incremental refactoring strategy is one of the safest and most recommended approaches when it comes to refactoring CSS. The development team needs to refactor the codebase component by component to ensure that the tasks have a low scope and are manageable. Individual components need to be then developed in isolation — away from the faulty code — and then merged with the existing codebase. The issues that may come up from the conflicting codebases can be solved by adding a temporary CSS file that contains all the necessary overrides to <strong>remove the conflicts in CSS styles</strong>. After that, legacy code for the target component can be removed and the process continues until all components have been refactored and until the temporary CSS file which contains the overrides is empty.</p>
<p>Visual regression testing tools like Percy and Chromatic can be used for testing and to detect any regressions and unwanted changes on the Pull Request level, so developers can fix these issues before the refactored code is deployed to the live site.</p>
<p>Developers can use A/B testing and use monitoring tools to make sure that the refactoring doesn’t negatively affect performance and user experience before finally launching the refactored project on a live site. Developers will also need to ensure that the agreed standards and best practices are used on the project continues to maintain the codebase health and quality in the future.</p>
<div>
<h4>Part Of: <a href="/category/refactoring/">CSS Refactoring</a></h4>
<ul>
<li>Part 1: <a href="/2021/07/refactoring-css-introduction-part1/">CSS Refactoring: Introduction</a></li>
<li>Part 2: <strong>CSS Strategy, Regression Testing And Maintenance</strong></li>
<li>Part 3: <a href="/2021/08/refactoring-css-optimizing-size-performance-part3/">Optimizing Size And Performance</a></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

<h3>References</h3>
<ul>
<li>“<a href="https://www.youtube.com/watch?v=fvTryZjGyg8">Refactoring CSS Without Losing Your Mind</a>,” Harry Roberts (Video, WeAreDevelopers Conference, 2017)</li>
<li>“<a href="https://tech.trivago.com/2016/02/02/large-scale-css-refactoring-at-trivago/">Large Scale CSS Refactoring At Trivago</a>,” Christoph Reinartz</li>
<li>“<a href="https://csswizardry.com/2017/06/refactoring-tunnels/">Refactoring Tunnels</a>,” Harry Roberts</li>
<li>“<a href="https://www.kirbyyardley.com/work/sundance-design-system">Sundance.org Design System And CSS Refactor</a>,” Kirby Yardley</li>
<li>“<a href="https://evilmartians.com/chronicles/five-years-of-postcss-state-of-the-union">Five Years Of PostCSS: State Of The Union</a>,” Andrey Sitnik</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Adrian Bece)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1005065b-5daf-4b21-8ac6-89b91effa5b9/refactoring-css-strategy-regression-testing-maintenance-part2.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Good Vibes In August (2021 Desktop Wallpapers Edition)]]></title>
            <link>https://smashingmagazine.com/2021/07/desktop-wallpaper-calendars-august-2021/</link>
            <guid>https://smashingmagazine.com/2021/07/desktop-wallpaper-calendars-august-2021/</guid>
            <pubDate>Sat, 31 Jul 2021 07:15:00 GMT</pubDate>
            <description><![CDATA[New month, new wallpapers! In this post, you’ll find unique and inspiring wallpapers for August 2021. Created with love by the community for the community, they come in versions with and without a calendar for the month.]]></description>
            <content:encoded><![CDATA[<p>Everybody loves a beautiful wallpaper to freshen up their desktops and home screens, right? To cater for new and unique artworks on a regular basis, we started our <a href="https://www.smashingmagazine.com/category/wallpapers">monthly wallpapers challenge</a> more than ten years ago, and from the very beginning to today, artists and designers from all across the world have accepted the challenge and submitted their designs to it. Just like this month.</p>

<p>In this post, you’ll find their wallpapers for <strong>August 2021</strong>. All of them come in versions with and without a calendar, so no matter if you need to count down the days to a big deadline (or a few days off, maybe?) or plan to use your favorite wallpaper even after the month has ended, we’ve got you covered. A big thank-you to everyone who shared their designs with us — we sincerely appreciate it!</p>

<p>As a little bonus goodie, we also added some “oldies” at the end of this post, timeless wallpaper treasures that we rediscovered way down in our archives and that are just too good to be forgotten. Now there’s only one question left to be answered: Which one to choose? Happy August!</p>

<ul>
<li>You can <strong>click on every image to see a larger preview</strong>,</li>
<li>We respect and carefully consider the ideas and motivation behind each and every artist’s work. This is why we give all artists the <strong>full freedom to explore their creativity</strong> and express emotions and experience through their works. This is also why the themes of the wallpapers weren’t anyhow influenced by us but rather designed from scratch by the artists themselves.</li>
</ul>

<div>
<h3>Submit a wallpaper!</h3>
<p>Did you know that <em>you</em> could get featured in our next wallpapers post, too? We are always <strong>looking for creative talent</strong>! <a href="https://www.smashingmagazine.com/desktop-wallpaper-calendars-join-in/">Join in! →</a></p>
</div>

Cowabunga
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/aug-21-cowabunga-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44276d4d-0b57-4f7a-91cd-c6f3708d09d7/aug-21-cowabunga-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/aug-21-cowabunga-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/cal/aug-21-cowabunga-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/cowabunga/nocal/aug-21-cowabunga-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Work Hard, Play Hard
<p>“It seems the feeling of summer breaks we had back in school never leaves us. The mere thought of alarm clocks feels wrong in the summer, especially if you’ve recently come back from a trip to the seaside. So, we try to do our best during working hours and then compensate with fun activities and plenty of rest. Cheers!” — Designed by <a href="https://activecollab.com">ActiveCollab</a> from the United States.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/aug-21-work-hard-play-hard-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0233fe-5ae7-47ea-9f63-eaf58ef9e27f/aug-21-work-hard-play-hard-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/aug-21-work-hard-play-hard-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/cal/aug-21-work-hard-play-hard-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/work-hard-play-hard/nocal/aug-21-work-hard-play-hard-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Easy Peasy Lemon Squeezy
<p>Designed by <a href="https://www.embee.me/">Melissa Bogemans</a> from Belgium.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/aug-21-easy-peasy-lemon-squeezy-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a719c612-8187-4b5e-bfe0-de6fa2d13a84/aug-21-easy-peasy-lemon-squeezy-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/aug-21-easy-peasy-lemon-squeezy-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/cal/aug-21-easy-peasy-lemon-squeezy-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/easy-peasy-lemon-squeezy/nocal/aug-21-easy-peasy-lemon-squeezy-nocal-2560x1440.png">2560x1440</a></li>
</ul>

Ivory Tower
<p>“August 12th marks World Elephant Day, highlighting the need for the protection and conservation of wild elephants across Asia and Africa. Today, African elephants are endangered due to wildlife crime, primarily poaching for the illegal ivory trade, whereas Asian elephants face habitat loss due to human-elephant conflict. Driven to the brink of extinction, elephants rely on us to create a non-exploitive and sustainable environment where these magnificent creatures can be safe.” — Designed by <a href="https://www.popwebdesign.net/web-development-serbia.html">PopArt Studio</a> from Novi Sad, Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/aug-21-ivory-tower-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/431a79c1-3428-4e6d-a3fd-1fad27f8dda5/aug-21-ivory-tower-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/aug-21-ivory-tower-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-1980x1200.jpg">1980x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/cal/aug-21-ivory-tower-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-1980x1200.jpg">1980x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/ivory-tower/nocal/aug-21-ivory-tower-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Do What You Love
<p>“The whole purpose of life is to enjoy and do what you love. When you are not able to enjoy your life, you are missing your life’s purpose and your chance to make a difference in your world.” — Designed by <a href="https://www.linkedin.com/in/hiteshpuri/">Hitesh Puri</a> from Delhi, India.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/aug-21-do-what-you-love-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8fb1df9-8600-4b28-b924-909b850d1d59/aug-21-do-what-you-love-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/aug-21-do-what-you-love-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/cal/aug-21-do-what-you-love-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/do-what-you-love/nocal/aug-21-do-what-you-love-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Love Is In The Air
<p>Designed by <a href="https://www.ricardogimenes.com/">Ricardo Gimenes</a> from Sweden.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/aug-21-love-is-in-the-air-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73e4f079-279e-44f8-a4e5-9abb7733ee96/aug-21-love-is-in-the-air-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/aug-21-love-is-in-the-air-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/cal/aug-21-love-is-in-the-air-cal-3840x2160.png">3840x2160</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/love-is-in-the-air/nocal/aug-21-love-is-in-the-air-nocal-3840x2160.png">3840x2160</a></li>
</ul>

Senior Citizen’s Day
<p>“It’s a day to give thanks for all the selfless support grandparents offer to their grandchildren and working parents. For all the wisdom bestowed over the years and all the love and encouragement provided. Here’s to you all, you Grandmas, Grandpas, Memas, Nanas, Pops, Granddads, and all those other fond names you’ve been given!” — Designed by <a href="https://www.everincreasingcircles.com/">Ever Increasing Circles</a> from the United Kingdom.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/aug-21-senior-citizens-day-full.jpg"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/aeeb2661-eb89-463a-b4ba-e09e7bc3538c/aug-21-senior-citizens-day-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/aug-21-senior-citizens-day-preview.jpg">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1080x1080.jpg">1080x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/cal/aug-21-senior-citizens-day-cal-2560x1440.jpg">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1080x1080.jpg">1080x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/senior-citizens-day/nocal/aug-21-senior-citizens-day-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

Balance Of Nature
<p>“We have been disturbing the fragile balance of nature for too long due to our own greed. The time has come to weigh what is more valuable to us, those superficial material riches or the health and well-being of our only home.” — Designed by <a href="https://www.librafire.com/">LibraFire</a> from Serbia.</p>
<a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/aug-21-balance-of-nature-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/82785eaa-bf5d-43c6-ac03-e741be65996d/aug-21-balance-of-nature-preview-opt.png" /></a>
<ul>
<li><a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/aug-21-balance-of-nature-preview.png">preview</a></li>
<li>with calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/cal/aug-21-balance-of-nature-cal-2560x1440.png">2560x1440</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-21/balance-of-nature/nocal/aug-21-balance-of-nature-nocal-2560x1440.png">2560x1440</a></li>
</ul>



Oldies But Goodies

<p>Childhood memories, camping under the stars, or a simple pencil and a piece of paper — <strong>a lot of things have inspired the design community</strong> to create an August wallpaper in the last few years. Here are some favorites from our archives. (Please note that these designs don’t come with a calendar.)</p>

<h3>Live In The Moment</h3>
<p>“My dog Sami inspired me for this one. He lives in the moment and enjoys every second with a big smile on his face. I wish we could learn to enjoy life like he does! Happy August everyone!” — Designed by <a href="http://westievibes.com/">Westie Vibes</a> from Portugal.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1ab25b5a-40a4-4e39-9206-2c3b12c04aa4/aug-20-live-in-the-moment-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c117def9-f04a-432a-9f1a-5cae806a2418/aug-20-live-in-the-moment-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c117def9-f04a-432a-9f1a-5cae806a2418/aug-20-live-in-the-moment-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-20/live-in-the-moment/nocal/aug-20-live-in-the-moment-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-20/live-in-the-moment/nocal/aug-20-live-in-the-moment-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-20/live-in-the-moment/nocal/aug-20-live-in-the-moment-nocal-1080x1920.png">1080x1920</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-20/live-in-the-moment/nocal/aug-20-live-in-the-moment-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-20/live-in-the-moment/nocal/aug-20-live-in-the-moment-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-20/live-in-the-moment/nocal/aug-20-live-in-the-moment-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<h3>Childhood Memories</h3>
<p>Designed by <a href="http://capitanbollito.com">Francesco Paratici</a> from Australia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0e78c0ea-650c-4284-a61a-3f281d4d4413/august-12-childhood-memories-4-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a92e8178-2097-4bf1-9803-1d85bb2710a5/august-12-childhood-memories-4-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a92e8178-2097-4bf1-9803-1d85bb2710a5/august-12-childhood-memories-4-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-childhood_memories__4-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<h3>Bee Happy!</h3>
<p>“August means that fall is just around the corner, so I designed this wallpaper to remind everyone to ‘bee happy’ even though summer is almost over. Sweeter things are ahead!” — Designed by Emily Haines from the United States.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fe3c5086-c859-4d07-b477-164a15433f15/aug-16-bee-happy-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9652bddf-d511-4014-867d-585b4b05e9c0/aug-16-bee-happy-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9652bddf-d511-4014-867d-585b4b05e9c0/aug-16-bee-happy-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/bee-happy/nocal/aug-16-bee-happy-nocal-2560x1440.png">2560x1440</a></li></ul>

<h3>Psst, It’s Camping Time…</h3>
<p>“August is one of my favorite months, when the nights are long and deep and crackling fire makes you think of many things at once and nothing at all at the same time. It’s about heat and cold which allow you to touch the eternity for a few moments.” — Designed by <a href="http://izhik.com">Igor Izhik</a> from Canada.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7a3b4015-afe0-4299-9696-22c3543d2665/aug-16-psst-its-camping-time-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a263dc14-0e54-40ad-9a5f-bc7dc2adee15/aug-16-psst-its-camping-time-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a263dc14-0e54-40ad-9a5f-bc7dc2adee15/aug-16-psst-its-camping-time-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/psst-its-camping-time/nocal/aug-16-psst-its-camping-time-nocal-2560x1440.jpg">2560x1440</a></li></ul>

<h3>Hello Again</h3>
<p>“In Melbourne it is the last month of quite a cool winter so we are looking forward to some warmer days to come.” — Designed by <a href="http://www.tazi.com.au">Tazi</a> from Australia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/812278fd-ebf0-46a6-90c1-c65032ca65e0/aug-17-hello-again-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f767666c-03bf-42c5-b5ee-2e0ebc0ef441/aug-17-hello-again-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f767666c-03bf-42c5-b5ee-2e0ebc0ef441/aug-17-hello-again-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/hello-again/nocal/aug-17-hello-again-nocal-2560x1440.png">2560x1440</a></li></ul>

<h3>Launch</h3>
<p>“The warm, clear summer nights make me notice the stars more — that’s what inspired this space-themed design!” — Designed by <a href="https://www.behance.net/jamesmitchell23">James Mitchell</a> from the United Kingdom.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/15036fdd-19a2-4174-8a5e-c8238ff3c6c7/aug-17-launch-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52b3dace-6489-4ac1-962e-e8b31910f35a/aug-17-launch-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52b3dace-6489-4ac1-962e-e8b31910f35a/aug-17-launch-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1366x768.png">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-2560x1440.png">2560x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/launch/nocal/aug-17-launch-nocal-2880x1800.png">2880x1800</a></li>
</ul>

<h3>Leo</h3>
<p>“I’m always interested in learning more about the zodiac signs. July 23 to August 23 is the time of the Lion, Leo. I based my wallpaper design around this and included the constellation of Leo as well. Enjoy!” Designed by <a href="http://www.frannyvaneyck.com">Franny Van Eyck</a> from Wisconsin, USA.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fb611739-0589-482d-ad74-98d5e6a7aabe/aug-13-leo-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3600a5c1-ccea-4030-b9d9-e9845ca58990/aug-13-leo-preview-opt.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3600a5c1-ccea-4030-b9d9-e9845ca58990/aug-13-leo-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-13/leo/nocal/aug-13-leo-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/leo/nocal/aug-13-leo-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/leo/nocal/aug-13-leo-nocal-1440x1050.jpg">1440x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/leo/nocal/aug-13-leo-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/leo/nocal/aug-13-leo-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/leo/nocal/aug-13-leo-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>



<h3>Dessert First</h3>
<p>Designed by <a href="http://www.doud.be">Elise Vanoorbeek</a> from Belgium.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0435b82c-2352-44f5-9820-c19ca229a835/aug-14-dessert-first-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2fdf9f1-6c7c-4412-8fc2-3781a43cf37d/aug-14-dessert-first-preview-opt.png" /> </a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2fdf9f1-6c7c-4412-8fc2-3781a43cf37d/aug-14-dessert-first-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1024x764.jpg">1024x764</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/dessert-first/nocal/aug-14-dessert-first-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<h3>Happiness Happens In August</h3>
<p>“Many people find August one of the happiest months of the year because of holidays. You can spend days sunbathing, swimming, birdwatching, listening to their joyful chirping, and indulging in sheer summer bliss. August 8th is also known as the Happiness Happens Day, so make it worthwhile.” — Designed by <a href="https://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c02105d1-3e31-49e7-b909-ddb84982b7e0/aug-17-happiness-happens-in-august-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9d979d10-f87f-4935-828a-de2ecd2de311/aug-17-happiness-happens-in-august-preview.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9d979d10-f87f-4935-828a-de2ecd2de311/aug-17-happiness-happens-in-august-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-17/happiness-happens-in-august/nocal/aug-17-happiness-happens-in-august-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<h3>Ahoy</h3>
<p>Designed by Webshift 2.0 from South Africa.</p>
<a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/39971420-6ade-49ef-94ed-c3be10022163/august-12-ahoy-16-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2a98c90-a4a6-42dd-8971-f36a1526dc49/august-12-ahoy-16-preview.png" /></a>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2a98c90-a4a6-42dd-8971-f36a1526dc49/august-12-ahoy-16-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-ahoy__16-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-ahoy__16-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-ahoy__16-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-ahoy__16-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-ahoy__16-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-ahoy__16-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<h3>A Bloom Of Jellyfish</h3>

<p></p><p>“I love going to aquariums – the colours, patterns and array of blue hues attract the nature lover in me while still appeasing my design eye. One of the highlights is always the jellyfish tanks. They usually have some kind of light show in them, which makes the jellyfish fade from an intense magenta to a deep purple – and it literally tickles me pink. On a recent trip to uShaka Marine World, we discovered that the collective noun for jellyfish is a bloom and, well, it was love-at-first-collective-noun all over again. I’ve used some intense colours to warm up your desktop and hopefully transport you into the depths of your own aquarium.” — Designed by <a href="http://wonderlandcollective.co.za/">Wonderland Collective</a> from South Africa.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ced7bcdb-b285-4c0f-8c6e-16a34b2bd713/aug-15-a-bloom-of-jellyfish-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/31e2973d-50fa-4151-a61b-d2936ed260ad/aug-15-a-bloom-of-jellyfish-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/31e2973d-50fa-4151-a61b-d2936ed260ad/aug-15-a-bloom-of-jellyfish-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/a-bloom-of-jellyfish/nocal/aug-15-a-bloom-of-jellyfish-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Rain, Rain Go Away!</h3><p></p>
<p></p><p>“Remember the nursery rhyme where the little boy pleads the rain to go away? It is one of the most pleasant and beautiful seasons when the whole universe buckles up to dance to the rhythm of the drizzles that splash across the earth. And, it is August, the time of the year when monsoons add a lot of color and beauty to nature. We welcome everyone to enjoy the awesomeness of monsoons.” — Designed by <a href="http://acodez.in/">Acodez</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5e8acc26-fee0-4c6c-9ed6-161ea66993fd/aug-16-rain-rain-go-away-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71df680a-4ec7-4826-8776-b5e9f6329b62/aug-16-rain-rain-go-away-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/71df680a-4ec7-4826-8776-b5e9f6329b62/aug-16-rain-rain-go-away-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1440x1050.jpg">1440x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/rain-rain-go-away/nocal/aug-16-rain-rain-go-away-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>World Alpinism Day</h3><p></p>
<p></p><p>“International Day of Alpinism and Climbing.” Designed by cheloveche.ru from Russia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4cc78ee0-7319-4f73-8f8b-ac0bd94d2c86/aug-13-world-alpinism-day-full.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feabc3d9-33b4-45b8-8325-ef3de2bf0bac/aug-13-world-alpinism-day-preview.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/feabc3d9-33b4-45b8-8325-ef3de2bf0bac/aug-13-world-alpinism-day-preview.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-13/world-alpinism-day/nocal/aug-13-world-alpinism-day-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/world-alpinism-day/nocal/aug-13-world-alpinism-day-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/world-alpinism-day/nocal/aug-13-world-alpinism-day-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/world-alpinism-day/nocal/aug-13-world-alpinism-day-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/world-alpinism-day/nocal/aug-13-world-alpinism-day-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/world-alpinism-day/nocal/aug-13-world-alpinism-day-nocal-1920x1200.jpg">1920x1200</a></li>
</ul>

<p></p><h3>Olympic Summer</h3><p></p>
<p></p><p>“The Summer Olympic Games promise two weeks of superhuman struggle for eternal glory. Support your favorites and enjoy hot August.” — Designed by <a href="http://www.popwebdesign.net/index_eng.html">PopArt Studio</a> from Serbia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/279a0f45-ab8d-4e20-8fec-0e8d62c8c8b4/aug-16-olympic-summer-of-2016-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ad90669-30be-48c8-a1d6-981be12aa451/aug-16-olympic-summer-of-2016-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ad90669-30be-48c8-a1d6-981be12aa451/aug-16-olympic-summer-of-2016-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1366x768.jpg">1366x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-16/olympic-summer-of-2016/nocal/aug-16-olympic-summer-of-2016-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>The Ocean Is Waiting</h3><p></p>
<p></p><p>“In August, make sure you swim a lot. Be cautious though.” — Designed by <a href="http://izhik.com">Igor Izhik</a> from Canada.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c6e183fe-8c84-4b78-bfa2-53094bbca1c4/aug-15-the-ocean-is-waiting-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97eb3c16-1979-4087-86ce-f4568054cd7d/aug-15-the-ocean-is-waiting-preview-opt.png" /> </a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/97eb3c16-1979-4087-86ce-f4568054cd7d/aug-15-the-ocean-is-waiting-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-15/the-ocean-is-waiting/nocal/aug-15-the-ocean-is-waiting-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>



<p></p><h3>Handwritten August</h3><p></p>
<p></p><p>“I love typograhy handwritten style.” — Designed by Chalermkiat Oncharoen from Thailand.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4011a427-17f6-4223-9eb4-f759f54251f7/aug-13-handwritten-august-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52bea7de-ac48-4387-baf7-aaea0311e27a/aug-13-handwritten-august-preview-opt.png" /> </a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52bea7de-ac48-4387-baf7-aaea0311e27a/aug-13-handwritten-august-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-320x480.png">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-640x480.png">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-800x480.png">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-800x600.png">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1024x768.png">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1024x1024.png">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1152x864.png">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1280x720.png">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1280x800.png">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1280x960.png">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1280x1024.png">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1400x1050.png">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1440x900.png">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1600x1200.png">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1680x1050.png">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1680x1200.png">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1920x1080.png">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1920x1200.png">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-1920x1440.png">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/handwritten-august/nocal/aug-13-handwritten-august-nocal-2560x1440.png">2560x1440</a></li>
</ul>

<p></p><h3>Embrace Summer!</h3><p></p>
<p></p><p>“You’ve waited 300 days for summer, better hold on to it!” — Designed by <a href="http://cre8mania.com">Mira Hoayek</a> from Lebanon.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1cde726c-573f-437a-8184-ce641872f277/aug-14-embrace-summer-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9643c3da-e030-452e-b867-4e6e8b2766a1/aug-14-embrace-summer-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9643c3da-e030-452e-b867-4e6e8b2766a1/aug-14-embrace-summer-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-320x480.jpg">320x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-640x480.jpg">640x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1280x720.jpg">1280x720</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/embrace-summer/nocal/aug-14-embrace-summer-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Oh La La…. Paris’ Night</h3><p></p>
<p></p><p>“I like the Paris’ night! All is very bright!” — Designed by <a href="http://www.silocreativo.com/en">Verónica Valenzuela</a> from Spain.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f30e0e86-d6cc-40ec-8cf9-b331785ce2c4/aug-14-oh-la-la-paris-night-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d06b93-8eda-40af-bd31-3efbf2e73625/aug-14-oh-la-la-paris-night-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5d06b93-8eda-40af-bd31-3efbf2e73625/aug-14-oh-la-la-paris-night-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-800x480.jpg">800x480</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1680x1200.jpg">1680x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-14/oh-la-la-paris-night/nocal/aug-14-oh-la-la-paris-night-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Monsoon Sale!</h3><p></p>
<p></p><p>“Hey monsoon is here! So grab your umbrella in this monsoon sale, and don’t miss the fun in the rain.” Designed by <a href="http://www.behance.net/debobrata">Debobrata Debnath</a> from India.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7ebafd7f-7293-4e61-930b-024cacbb2062/aug-13-monsoon-sale-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9da6cd3c-5fb5-4a52-92d9-60360d32733f/aug-13-monsoon-sale-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9da6cd3c-5fb5-4a52-92d9-60360d32733f/aug-13-monsoon-sale-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/aug-13/monsoon-sale/nocal/aug-13-monsoon-sale-nocal-1024x1024.jpg">1024x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/monsoon-sale/nocal/aug-13-monsoon-sale-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/monsoon-sale/nocal/aug-13-monsoon-sale-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/monsoon-sale/nocal/aug-13-monsoon-sale-nocal-1920x1080.jpg">1920x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/monsoon-sale/nocal/aug-13-monsoon-sale-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/aug-13/monsoon-sale/nocal/aug-13-monsoon-sale-nocal-2560x1440.jpg">2560x1440</a></li>
</ul>

<p></p><h3>Searching for Higgs Boson</h3><p></p>
<p></p><p>Designed by <a href="http://www.vladstudio.com">Vlad Gerasimov</a> from Russia.</p><p></p>
<p></p><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/85adaefa-8054-4237-94e9-df37f849f5a4/august-12-2012-08-92-full-opt.png"><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/96410b87-8914-4496-8416-15ef65130c03/august-12-2012-08-92-preview-opt.png" /></a><p></p>
<ul>
<li><a href="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/96410b87-8914-4496-8416-15ef65130c03/august-12-2012-08-92-preview-opt.png">preview</a></li>
<li>without calendar: <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-800x600.jpg">800x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-960x600.jpg">960x600</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1024x768.jpg">1024x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1152x864.jpg">1152x864</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1229x768.jpg">1229x768</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1280x800.jpg">1280x800</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1280x960.jpg">1280x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1280x1024.jpg">1280x1024</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1400x1050.jpg">1400x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1440x900.jpg">1440x900</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1440x960.jpg">1440x960</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1600x1200.jpg">1600x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1680x1050.jpg">1680x1050</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1728x1080.jpg">1728x1080</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1920x1200.jpg">1920x1200</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-1920x1440.jpg">1920x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-2304x1440.jpg">2304x1440</a>, <a href="http://files.smashingmagazine.com/wallpapers/august-12/august-12-2012_08__92-nocal-2560x1600.jpg">2560x1600</a></li>
</ul>

]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/44276d4d-0b57-4f7a-91cd-c6f3708d09d7/aug-21-cowabunga-preview-opt.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How To Build An E-Commerce Site With Angular 11, Commerce Layer And Paypal]]></title>
            <link>https://smashingmagazine.com/2021/07/ecommerce-angular11-headless-paypal/</link>
            <guid>https://smashingmagazine.com/2021/07/ecommerce-angular11-headless-paypal/</guid>
            <pubDate>Fri, 30 Jul 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[Having an e-commerce store is crucial for any store owner as more and more customers are turning to online shopping. In this tutorial, we shall go through how to create an e-commerce site with Angular 11. The site will use the Commerce Layer as a headless e-commerce API and use Paypal to process payments.]]></description>
            <content:encoded><![CDATA[<p>Nowadays it’s essential to have an online presence when running a business. A lot more shopping is done online than in previous years. Having an e-commerce store allows shop owners to open up other streams of revenue they couldn't take advantage of with just a brick and mortar store. Other shop owners however, run their businesses online entirely without a physical presence. This makes having an online store crucial. </p>
<p>Sites such as Etsy, Shopify and Amazon make it easy to set up a store pretty quickly without having to worry about developing a site. However, there may be instances where shop owners may want a personalized experience or maybe save on the cost of owning a store on some of these platforms. </p>
<p>Headless e-commerce API platforms provide backends that store sites can interface with. They manage all processes and data related to the store like customer, orders,  shipments, payments, and so on. All that’s needed is a frontend to interact with this information. This gives owners a lot of flexibility when it comes to deciding how their customers will experience their online store and how they choose to run it.  </p>
<p>In this article, we will cover how to build an e-commerce store using Angular 11. We shall use <a href="https://commercelayer.io/">Commerce Layer</a> as our headless e-commerce API. Although there may be tonnes of ways to process payments, we’ll demonstrate how to use just one, <a href="https://paypal.com">Paypal</a>.  </p>
<ul>
<li><a href="https://github.com/zaracooper/lime-app">View source code on GitHub →</a></li>
</ul>
Prerequisites
<p>Before building the app, you need to have Angular CLI installed. We shall use it to initialize and scaffold the app. If you don’t have it installed yet, you can get it through <a href="https://www.npmjs.com/">npm</a>.  </p>
<pre><code>npm install -g @angular/cli</code></pre>

<p>You’ll also need a Commerce Layer developer account. Using the developer account, you will need to create a test organization and seed it with test data. Seeding makes it easier to develop the app first without worrying about what data you’ll have to use. You can create an account at this <a href="https://core.commercelayer.io/users/sign_up">link</a> and an organization <a href="https://core.commercelayer.io/admin/account/organizations/new">here</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f242a4e3-fa42-4400-8a44-0aea63771a30/7-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/072c5747-6d1d-4cb3-9690-db2f5741d76e/11-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p>Lastly, you will need a Paypal Sandbox account. Having this type of account will allow us to test transactions between businesses and users without risking actual money. You can create one <a href="https://developer.paypal.com/developer/accounts/">here</a>. A sandbox account has a test business and test personal account already created for it. </p>
Commerce Layer And Paypal Config
<p>To make Paypal Sandbox payments possible on Commerce Layer, you’ll need to set up API keys. Head on over to the <a href="https://developer.paypal.com/developer/accounts/">accounts overview</a> of your Paypal developer account. Select a business account and under the API credentials tab of the account details, you will find the <strong>Default Application</strong> under <strong>REST Apps</strong>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bfecf28c-ff68-4c7c-8703-d87b1c91657e/12-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f276596c-cc2c-4757-bbdd-52f6134f66c4/14-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p>To associate your Paypal business account with your Commerce Layer organization, go to your organization’s dashboard. Here you will add a Paypal payment gateway and a Paypal payment method for your various markets. Under <strong>Settings &gt; Payments</strong>, select <strong>Payment Gateways &gt; Paypal</strong> and add your Paypal client Id and secret. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0270ffe3-2ede-4045-acc5-4065af3245b4/8-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p>After creating the gateway, you will need to create a Paypal payment method for each market you are targeting to make Paypal available as an option. You’ll do this under <strong>Settings &gt; Payments &gt; Payment Methods &gt; New Payment Method</strong>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a7e7b7d8-d6de-4927-9726-6ecb3e4cce14/22-jamstack-e-commerce-site-angular-11-scull.png" /></p>
A Note About Routes Used
<p>Commerce Layer provides a route for authentication and another different set of routes for their API. Their <code>/oauth/token</code> authentication route exchanges credentials for a token. This token is required to access their API. The rest of the API routes take the pattern <code>/api/:resource</code>.  </p>
<p>The scope of this article only covers the frontend portion of this app. I opted to store the tokens server side, use sessions to track ownership, and provide http-only cookies with a session id to the client. This will not be covered here as it is outside the scope of this article. However, the routes remain the same and exactly correspond to the Commerce Layer API. Although, there are a couple of custom routes not available from the Commerce Layer API that we’ll use. These mainly deal with session management. I’ll point these out as we get to them and describe how you can achieve a similar result.</p>
<p>Another inconsistency you may notice is that the request bodies differ from what the Commerce Layer API requires. Since the requests are passed on to another server to get populated with a token, I structured the bodies differently. This was to make it easier to send requests. Whenever there are any inconsistencies in the request bodies, these will be pointed out in the services.  </p>
<p>Since this is out of scope, you will have to decide how to store tokens securely. You’ll also need to slightly modify request bodies to match exactly what the Commerce Layer API requires. When there is an inconsistency, I will link to the <a href="https://docs.commercelayer.io/api/">API reference</a> and <a href="https://docs.commercelayer.io/guides/">guides</a> detailing how to correctly structure the body.</p>
App Structure
<p>To organize the app, we will break it down into four main parts. A better description of what each of the modules does is given under their corresponding sections:</p>
<ol>
<li>the core module,</li>
<li>the data module,</li>
<li>the shared module,</li>
<li>the feature modules.</li>
</ol>
<p>The feature modules will group related pages and components together. There will be four feature modules: </p>
<ol>
<li>the auth module,</li>
<li>the product module,</li>
<li>the cart module,</li>
<li>the checkout module.</li>
</ol>
<p>As we get to each module, I’ll explain what its purpose is and break down its contents. </p>
<p>Below is a tree of the <code>src/app</code> folder and where each module resides.   </p>
<pre><code>src
├── app
│   ├── core
│   ├── data
│   ├── features
│   │   ├── auth
│   │   ├── cart
│   │   ├── checkout
│   │   └── products
└── shared</code></pre>

Generating The App And Adding Dependencies
<p>We’ll begin by generating the app. Our organization will be called <strong>The LIme Brand</strong> and will have test data already seeded by Commerce Layer. </p>
<pre><code>ng new lime-app</code></pre>

<p>We’ll need a couple of dependencies. Mainly <a href="https://material.angular.io/">Angular Material</a> and <a href="https://material.angular.io/">Until Destroy</a>. Angular Material will provide components and styling. Until Destroy automatically unsubscribes from observables when components are destroyed. To install them run:</p>
<pre><code>npm install @ngneat/until-destroy
ng add @angular/material</code></pre>

Assets
<p>When adding addresses to Commerce Layer, an alpha-2 country code needs to be used. We’ll add a json file containing these codes to the <code>assets</code> folder at <code>assets/json/country-codes.json</code>. You can find this file <a href="https://github.com/zaracooper/lime-app/blob/main/src/assets/json/country-codes.json">linked here</a>. </p>
Styles
<p>The components we’ll create share some global styling. We shall place them in <code>styles.css</code> which can be found at <a href="https://github.com/zaracooper/lime-app/blob/main/src/styles.css">this link</a>.</p>
Environment
<p>Our configuration will consist of two fields. The <code>apiUrl</code> which should point to the Commerce Layer API. <code>apiUrl</code> is used by the services we will create to fetch data. The <code>clientUrl</code> should be the domain the app is running on. We use this when setting redirect URLs for Paypal. You can find this file at <a href="https://github.com/zaracooper/lime-app/blob/main/src/environments/environment.ts">this link</a>.</p>
Shared Module
<p>The shared module will contain services, pipes, and components shared across the other modules. </p>
<pre><code>ng g m shared</code></pre>

<p>It consists of three components, one pipe, and two services. Here’s what that will look like. </p>
<pre><code>src/app/shared
├── components
│   ├── item-quantity
│   │   ├── item-quantity.component.css
│   │   ├── item-quantity.component.html
│   │   └── item-quantity.component.ts
│   ├── simple-page
│   │   ├── simple-page.component.css
│   │   ├── simple-page.component.html
│   │   └── simple-page.component.ts
│   └── title
│       ├── title.component.css
│       ├── title.component.html
│       └── title.component.ts
├── pipes
│   └── word-wrap.pipe.ts
├── services
│   ├── http-error-handler.service.ts
│   └── local-storage.service.ts
└── shared.module.ts</code></pre>

<p>We shall also use the shared module to export some commonly used Angular Material components. This makes it easier to use them out of the box instead of importing each component across various modules. Here’s what <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/shared/shared.module.ts"><code>shared.module.ts</code></a> will contain. </p>
<div>
<pre><code>@NgModule({
  declarations: [SimplePageComponent, TitleComponent, WordWrapPipe, ItemQuantityComponent],
  imports: [CommonModule, MatIconModule, MatButtonModule, MatTooltipModule, MatMenuModule, RouterModule],
  exports: [
    CommonModule,
    ItemQuantityComponent,
    MatButtonModule,
    MatIconModule,
    MatSnackBarModule,
    MatTooltipModule,
    SimplePageComponent,
    TitleComponent,
    WordWrapPipe
  ]
})
export class SharedModule { }</code></pre>
</div>

<h3>Components</h3>
<h4>Item Quantity Component</h4>
<p>This component sets the quantity of items when adding them to the cart. It will be used in the cart and products modules. A material selector would have been an easy choice for this purpose. However, the style of the material select didn’t match the material inputs used in all the other forms. A material menu looked very similar to the material inputs used. So I decided to create a select component with it instead.  </p>
<pre><code>ng g c shared/components/item-quantity</code></pre>

<p>The component will have three input properties and one output property. <code>quantity</code> sets the initial quantity of items, <code>maxValue</code> indicates the maximum number of items that can be selected in one go, and <code>disabled</code> indicates whether the component should be disabled or not. The <code>setQuantityEvent</code> is triggered when a quantity is selected. </p>
<p>When the component is initialized, we’ll set the values that appear on the material menu. There also exists a method called <code>setQuantity</code> that will emit <code>setQuantityEvent</code> events. </p>
<p><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/shared/components/item-quantity/item-quantity.component.ts">This</a> is the component file.</p>
<pre><code>@Component({
  selector: 'app-item-quantity',
  templateUrl: './item-quantity.component.html',
  styleUrls: ['./item-quantity.component.css']
})
export class ItemQuantityComponent implements OnInit {
  @Input() quantity: number = 0;
  @Input() maxValue?: number = 0;
  @Input() disabled?: boolean = false;
  @Output() setQuantityEvent = new EventEmitter&lt;number&gt;();

  values: number[] = [];

  constructor() { }

  ngOnInit() {
    if (this.maxValue) {
      for (let i = 1; i &lt;= this.maxValue; i++) {
        this.values.push(i);
      }
    }
  }

  setQuantity(value: number) {
    this.setQuantityEvent.emit(value);
  }
}</code></pre>

<p>This is its template.</p>
<div>
<pre><code>&lt;button mat-stroked-button [matMenuTriggerFor]="menu" [disabled]="disabled"&gt;
    {{quantity}}
    &lt;mat-icon <em>ngIf="!disabled"&gt;expand_more&lt;/mat-icon&gt;
&lt;/button&gt;
&lt;mat-menu #menu="matMenu"&gt;
    &lt;button </em>ngFor="let no of values" (click)="setQuantity(no)" mat-menu-item&gt;{{no}}&lt;/button&gt;
&lt;/mat-menu&gt;</code></pre>
</div>

<p>Here is its styling.</p>
<pre><code>button {
    margin: 3px;
}</code></pre>

<h4>Title Component</h4>
<p>This component doubles as a stepper title as well as a plain title on some simpler pages. Although Angular Material provides a stepper component, it wasn’t the best fit for a rather long checkout process, wasn’t as responsive on smaller displays, and required a lot more time to implement. A simpler title however could be repurposed as a stepper indicator and be useful across multiple pages.</p>
<pre><code>ng g c shared/components/title</code></pre>

<p>The component has four input properties: a <code>title</code>, a <code>subtitle</code>, a number (<code>no</code>), and <code>centerText</code>, to indicate whether to center the text of the component.</p>
<pre><code>@Component({
  selector: 'app-title',
  templateUrl: './title.component.html',
  styleUrls: ['./title.component.css']
})
export class TitleComponent {
  @Input() title: string = '';
  @Input() subtitle: string = '';
  @Input() no?: string;
  @Input() centerText?: boolean = false;
}</code></pre>

<p>Below is its template. You can find its styling linked <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/shared/components/title/title.component.css">here</a>.</p>
<pre><code>&lt;div id="header"&gt;
    &lt;h1 *ngIf="no" class="mat-display-1" id="no"&gt;{{no}}&lt;/h1&gt;
    &lt;div [ngClass]="{ 'centered-section': centerText}"&gt;
        &lt;h1 class="mat-display-2"&gt;{{title}}&lt;/h1&gt;
        &lt;p id="subheading"&gt;{{subtitle}}&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

<h4>Simple Page Component</h4>
<p>There are multiple instances where a title, an icon, and a button were all that were needed for a page. These include a 404 page, an empty cart page, an error page, a payment page, and an order placement page. That’s the purpose the simple page component will serve. When the button on the page is clicked, it will either redirect to a route or perform some action in response to a <code>buttonEvent</code>. </p>
<p>To make it:</p>
<pre><code>ng g c shared/components/simple-page</code></pre>

<p><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/shared/components/simple-page/simple-page.component.ts">This</a> is its component file.</p>
<pre><code>@Component({
  selector: 'app-simple-page',
  templateUrl: './simple-page.component.html',
  styleUrls: ['./simple-page.component.css']
})
export class SimplePageComponent {
  @Input() title: string = '';
  @Input() subtitle?: string;
  @Input() number?: string;
  @Input() icon?: string;
  @Input() buttonText: string = '';
  @Input() centerText?: boolean = false;
  @Input() buttonDisabled?: boolean = false;
  @Input() route?: string | undefined;
  @Output() buttonEvent = new EventEmitter();

  constructor(private router: Router) { }

  buttonClicked() {
    if (this.route) {
      this.router.navigateByUrl(this.route);
    } else {
      this.buttonEvent.emit();
    }
  }
}</code></pre>

<p>And its template contains:</p>
<div>
<pre><code>&lt;div id="container"&gt;
    &lt;app-title no="{{number}}" title="{{title}}" subtitle="{{subtitle}}" [centerText]="centerText"&gt;&lt;/app-title&gt;
    &lt;div *ngIf="icon" id="icon-container"&gt;
        &lt;mat-icon color="primary" class="icon"&gt;{{icon}}&lt;/mat-icon&gt;
    &lt;/div&gt;
    &lt;button mat-flat-button color="primary" (click)="buttonClicked()" [disabled]="buttonDisabled"&gt;
        {{buttonText}}
    &lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>

<p>It’s styling can be found <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/shared/components/simple-page/simple-page.component.css">here</a>.</p>
<h3>Pipes</h3>
<h4>Word Wrap Pipe</h4>
<p>Some products' names and other types of information displayed on the site are really long. In some instances, getting these long sentences to wrap in material components is challenging. So we’ll use this pipe to cut the sentences down to a specified length and add ellipses to the end of the result. </p>
<p>To create it run:</p>
<pre><code>ng g pipe shared/pipes/word-wrap</code></pre>

<p>It will contain:</p>
<pre><code>import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'wordWrap'
})
export class WordWrapPipe implements PipeTransform {
  transform(value: string, length: number): string {
    return `${value.substring(0, length)}...`;
  }
}</code></pre>

<h3>Services</h3>
<h4>HTTP Error Handler Service</h4>
<p>There are quite a number of http services in this project. Creating an error handler for each method is repetitive. So creating one single handler that can be used by all methods makes sense. The error handler can be used to format an error and also pass on the errors to other external logging platforms.</p>
<p>Generate it by running:</p>
<pre><code>ng g s shared/services/http-error-handler</code></pre>

<p>This service will contain only one method. The method will format the error message to be displayed depending on whether it’s a client or server error. However, there is room to improve it further.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class HttpErrorHandler {

  constructor() { }

  handleError(err: HttpErrorResponse): Observable {
    let displayMessage = '';

    if (err.error instanceof ErrorEvent) {
      displayMessage = <code>Client-side error: ${err.error.message}</code>;
    } else {
      displayMessage = <code>Server-side error: ${err.message}</code>;
    }

    return throwError(displayMessage);
  }
}</code></pre>
</div>

<h4>Local Storage Service</h4>
<p>We shall use local storage to keep track of the number of items in a cart. It’s also useful to store the Id of an order here. An order corresponds to a cart on Commerce Layer. </p>
<p>To generate the local storage service run:</p>
<pre><code>ng g s shared/services/local-storage</code></pre>

<p>The service will contain four methods to add, delete, and get items from local storage and another to clear it. </p>
<pre><code>import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class LocalStorageService {

  constructor() { }

  addItem(key: string, value: string) {
    localStorage.setItem(key, value);
  }

  deleteItem(key: string) {
    localStorage.removeItem(key);
  }

  getItem(key: string): string | null {
    return localStorage.getItem(key);
  }

  clear() {
    localStorage.clear();
  }
}</code></pre>

Data Module
<p>This module is responsible for data retrieval and management. It’s what we’ll use to get the data our app consumes. Below is its structure:</p>
<pre><code>src/app/data
├── data.module.ts
├── models
└── services</code></pre>

<p>To generate the module run:</p>
<pre><code>ng g m data</code></pre>

<h3>Models</h3>
<p>The models define how the data we consume from the API is structured. We’ll have 16 interface declarations. To create them run:</p>
<pre><code>for model in \
address cart country customer-address \
customer delivery-lead-time line-item order \
payment-method payment-source paypal-payment \
price shipment shipping-method sku stock-location; \
do ng g interface "data/models/${model}"; done</code></pre>

<p>The following table links to each file and gives a description of what each interface is.</p>
<table>
    <thead>
        <tr>
            <th>Interface</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/address.ts">Address</a></td>
            <td>Represents a general address.</td>
        </tr>
        <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/cart.ts">Cart</a></td>
            <td>Client side version of an order tracking the number of products a customer intends to purchase.</td>
        </tr>
        <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/country.ts">Country</a></td>
            <td>Alpha-2 country code.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/customer-address.ts">Customer Address</a></td>
            <td>An address associated with a customer.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/customer.ts">Customer</a></td>
            <td>A registered user.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/delivery-lead-time.ts">Delivery Lead Time</a></td>
            <td>Represents the amount of time it will take to delivery a shipment.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/line-item.ts">Line Item</a></td>
            <td>An itemized product added to the cart.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/order.ts">Order</a></td>
            <td>A shopping cart or collection of line items.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/payment-method.ts">Payment Method</a></td>
            <td>A payment type made available to an order.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/payment-source.ts">Payment Source</a></td>
            <td>A payment associated with an order.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/paypal-payment.ts">Paypal Payment</a></td>
            <td>A payment made through Paypal</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/price.ts">Price</a></td>
            <td>Price associated with an SKU.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/shipment.ts">Shipment</a></td>
            <td>Collection of items shipped together.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/shipping-method.ts">Shipping Method</a></td>
            <td>Method through which a package is shipped.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/sku.ts">SKU</a></td>
            <td>A unique stock-keeping unit.</td>
        </tr>
    <tr>
            <td><a href="https://github.com/zaracooper/lime-app/blob/main/src/app/data/models/stock-location.ts">Stock Location</a></td>
            <td>Location that contains SKU inventory.</td>
        </tr>
    </tbody>
</table>

<h3>Services</h3>
<p>This folder contains the services that create, retrieve, and manipulate app data. We’ll create 11 services here. </p>
<pre><code>for service in \
address cart country customer-address \
customer delivery-lead-time line-item \
order paypal-payment shipment sku; \
do ng g s "data/services/${service}"; done</code></pre>

<h4>Address Service</h4>
<p>This service creates and retrieves addresses. It’s important when creating and assigning shipping and billing addresses to orders. It has two methods. One to create an address and another to retrieve one.  </p>
<p>The route used here is <code>/api/addresses</code>. If you’re going to use the Commerce Layer API directly, make sure to structure the data as demonstrated in <a href="https://docs.commercelayer.io/api/resources/addresses/create_address#example">this example</a>.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class AddressService {
  private url: string = <code>${environment.apiUrl}/api/addresses</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  createAddress(address: Address): Observable&lt;Address&gt; {
    return this.http.post&lt;Address&gt;(this.url, address)
      .pipe(catchError(this.eh.handleError));
  }

  getAddress(id: string): Observable&lt;Address&gt; {
    return this.http.get&lt;Address&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h3>Cart Service</h3>
<p>The cart is responsible for maintaining the quantity of items added and the order Id. Making API calls to get the number of items in an order everytime a new line item is created can be expensive. Instead, we could just use local storage to maintain the count on the client. This eliminates the need to make unnecessary order fetches every time an item is added to the cart. </p>
<p>We also use this service to store the order Id. A cart corresponds to an order on Commerce Layer. Once the first item is added to the cart, an order is created. We need to preserve this order Id so we can fetch it during the checkout process. </p>
<p>Additionally, we need a way to communicate to the header that an item has been added to the cart. The header contains the cart button and displays the amount of items in it. We’ll use an observable of a <code>BehaviorSubject</code> with the current value of the cart. The header can subscribe to this and track changes in the cart value. </p>
<p>Lastly, once an order has been completed the cart value needs to be cleared. This ensures that there’s no confusion when creating subsequent newer orders. The values that were stored are cleared once the current order is marked as placed. </p>
<p>We’ll accomplish all this using the local storage service created earlier.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class CartService {
  private cart = new BehaviorSubject({
    orderId: this.orderId,
    itemCount: this.itemCount
  });

  cartValue$ = this.cart.asObservable();

  constructor(private storage: LocalStorageService) { }

  get orderId(): string {
    const id = this.storage.getItem('order-id');
    return id ? id : '';
  }

  set orderId(id: string) {
    this.storage.addItem('order-id', id);
    this.cart.next({ orderId: id, itemCount: this.itemCount });
  }

  get itemCount(): number {
    const itemCount = this.storage.getItem('item-count');

    return itemCount ? parseInt(itemCount) : 0;
  }

  set itemCount(amount: number) {
    this.storage.addItem('item-count', amount.toString());
    this.cart.next({ orderId: this.orderId, itemCount: amount });
  }

  incrementItemCount(amount: number) {
    this.itemCount = this.itemCount + amount;
  }

  decrementItemCount(amount: number) {
    this.itemCount = this.itemCount - amount;
  }

  clearCart() {
    this.storage.deleteItem('item-count');
    this.cart.next({ orderId: '', itemCount: 0 });
  }
}</code></pre>
</div>

<h4>Country Service</h4>
<p>When adding addresses on Commerce Layer, the country code has to be an <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">alpha 2 code</a>. This service reads a json file containing these codes for every country and returns it in its <code>getCountries</code> method.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class CountryService {

  constructor(private http: HttpClient) { }

  getCountries(): Observable&lt;Country[]&gt; {
    return this.http.get&lt;Country[]&gt;('./../../../assets/json/country-codes.json');
  }
}</code></pre>
</div>

<h4>Customer Address Service</h4>
<p>This service is used to associate addresses with customers. It also fetches a specific or all addresses related to a customer. It is used when the customer adds their shipping and billing addresses to their order. The <code>createCustomer</code> method creates a customer, <code>getCustomerAddresses</code> gets all of a customer’s addresses, and <code>getCustomerAddress</code> gets a specific one. </p>
<p>When creating a customer address, be sure to structure the post body according to <a href="https://docs.commercelayer.io/api/resources/customer_addresses/create_customer_address#example">this example</a>.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class CustomerAddressService {
  private url: string = <code>${environment.apiUrl}/api/customer_addresses</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  createCustomerAddress(addressId: string, customerId: string): Observable&lt;CustomerAddress&gt; {
    return this.http.post&lt;CustomerAddress&gt;(this.url, {
      addressId: addressId, customerId: customerId
    })
      .pipe(catchError(this.eh.handleError));
  }

  getCustomerAddresses(): Observable&lt;CustomerAddress[]&gt; {
    return this.http.get&lt;CustomerAddress[]&gt;(<code>${this.url}</code>)
      .pipe(catchError(this.eh.handleError));
  }

  getCustomerAddress(id: string): Observable&lt;CustomerAddress&gt; {
    return this.http.get&lt;CustomerAddress&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Customer Service</h4>
<p>Customers are created and their information retrieved using this service. When a user signs up, they become a customer and are created using the <code>createCustomerMethod</code>. <code>getCustomer</code> returns the customer associated with a specific Id. <code>getCurrentCustomer</code> returns the customer currently logged in. </p>
<p>When creating a customer, structure the data like <a href="https://docs.commercelayer.io/api/resources/customers/create_customer#example">this</a>. You can add their first and last names to the metadata, as shown in its <a href="https://docs.commercelayer.io/api/resources/customers/create_customer#arguments">attributes</a>.</p>
<p>The route <code>/api/customers/current</code> is not available on Commerce Layer. So you’ll need to figure out how to get the currently logged in customer.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class CustomerService {
  private url: string = <code>${environment.apiUrl}/api/customers</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  createCustomer(email: string, password: string, firstName: string, lastName: string): Observable&lt;Customer&gt; {
    return this.http.post&lt;Customer&gt;(this.url, {
      email: email,
      password: password,
      firstName: firstName,
      lastName: lastName
    })
      .pipe(catchError(this.eh.handleError));
  }

  getCurrentCustomer(): Observable&lt;Customer&gt; {
    return this.http.get&lt;Customer&gt;(<code>${this.url}/current</code>)
      .pipe(catchError(this.eh.handleError));
  }

  getCustomer(id: string): Observable&lt;Customer&gt; {
    return this.http.get&lt;Customer&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Delivery Lead Time Service</h4>
<p>This service returns information about shipping timelines from various stock locations.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class DeliveryLeadTimeService {
  private url: string = <code>${environment.apiUrl}/api/delivery_lead_times</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  getDeliveryLeadTimes(): Observable&lt;DeliveryLeadTime[]&gt; {
    return this.http.get&lt;DeliveryLeadTime[]&gt;(this.url)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Line Item Service</h4>
<p>Items added to the cart are managed by this service. With it, you can create an item the moment it is added to the cart. An item’s information can also be fetched. The item may also be updated when its quantity changes or deleted when removed from the cart. </p>
<p>When creating items or updating them, structure the request body as shown in this <a href="https://docs.commercelayer.io/api/resources/line_items/create_line_item#example">example</a>.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class LineItemService {
  private url: string = <code>${environment.apiUrl}/api/line_items</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  createLineItem(lineItem: LineItem): Observable&lt;LineItem&gt; {
    return this.http.post&lt;LineItem&gt;(this.url, lineItem)
      .pipe(catchError(this.eh.handleError));
  }

  getLineItem(id: string): Observable&lt;LineItem&gt; {
    return this.http.get&lt;LineItem&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }

  updateLineItem(id: string, quantity: number): Observable&lt;LineItem&gt; {
    return this.http.patch&lt;LineItem&gt;(<code>${this.url}/${id}</code>, { quantity: quantity })
      .pipe(catchError(this.eh.handleError));
  }

  deleteLineItem(id: string): Observable&lt;LineItem&gt; {
    return this.http.delete&lt;LineItem&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Order Service</h4>
<p>Similar to the line item service, the order service allows you to create, update, delete, or get an order. Additionally, you may choose to get the shipments associated with an order separately using the <code>getOrderShipments</code> method. This service is used heavily throughout the checkout process. </p>
<p>There are different kinds of information about an order that are required throughout checkout. Since it may be expensive to fetch a whole order and its relations, we specify what we want to get from an order using <code>GetOrderParams</code>. The equivalent of this on the CL API is the <a href="https://docs.commercelayer.io/api/including-associations">include query parameter</a> where you list the <a href="https://docs.commercelayer.io/api/resources/orders#the-order-object">order relationships</a> to be included. You can check what fields need to be included for the cart summary <a href="https://docs.commercelayer.io/guides/shopping-cart/displaying-the-cart-summary#example">here</a> and for the various checkout stages <a href="https://docs.commercelayer.io/guides/checkout">here</a>. </p>
<p>In the same manner, when updating an order, we use <code>UpdateOrderParams</code> to specify update fields. This is because in the server that populates the token, some extra operations are performed depending on what field is being updated. However, if you’re making direct requests to the CL API, you do not need to specify this. You can do away with it since the CL API doesn’t require you to specify them. Although, the request body should resemble <a href="https://docs.commercelayer.io/api/resources/orders/update_order#example">this example</a>.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private url: string = <code>${environment.apiUrl}/api/orders</code>;

  constructor(
    private http: HttpClient,
    private eh: HttpErrorHandler) { }

  createOrder(): Observable&lt;Order&gt; {
    return this.http.post&lt;Order&gt;(this.url, {})
      .pipe(catchError(this.eh.handleError));
  }

  getOrder(id: string, orderParam: GetOrderParams): Observable&lt;Order&gt; {
    let params = {};
    if (orderParam != GetOrderParams.none) {
      params = { [orderParam]: 'true' };
    }

    return this.http.get&lt;Order&gt;(<code>${this.url}/${id}</code>, { params: params })
      .pipe(catchError(this.eh.handleError));
  }

  updateOrder(order: Order, params: UpdateOrderParams[]): Observable&lt;Order&gt; {
    let updateParams = [];
    for (const param of params) {
      updateParams.push(param.toString());
    }

    return this.http.patch&lt;Order&gt;(
      <code>${this.url}/${order.id}</code>,
      order,
      { params: { 'field': updateParams } }
    )
      .pipe(catchError(this.eh.handleError));
  }

  getOrderShipments(id: string): Observable&lt;Shipment[]&gt; {
    return this.http.get&lt;Shipment[]&gt;(<code>${this.url}/${id}/shipments</code>)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Paypal Payment Service</h4>
<p>This service is responsible for creating and updating Paypal payments for orders. Additionally, we can get a Paypal payment given its id. The post body should have a structure similar to <a href="https://docs.commercelayer.io/api/resources/paypal_payments/create_paypal_payment#example">this example</a> when creating a Paypal payment.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class PaypalPaymentService {
  private url: string = <code>${environment.apiUrl}/api/paypal_payments</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  createPaypalPayment(payment: PaypalPayment): Observable&lt;PaypalPayment&gt; {
    return this.http.post&lt;PaypalPayment&gt;(this.url, payment)
      .pipe(catchError(this.eh.handleError));
  }

  getPaypalPayment(id: string): Observable&lt;PaypalPayment&gt; {
    return this.http.get&lt;PaypalPayment&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }

  updatePaypalPayment(id: string, paypalPayerId: string): Observable&lt;PaypalPayment&gt; {
    return this.http.patch&lt;PaypalPayment&gt;(
      <code>${this.url}/${id}</code>,
      { paypalPayerId: paypalPayerId }
    )
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Shipment Service</h4>
<p>This service gets a shipment or updates it given its id. The request body of a shipment update should look similar to <a href="https://docs.commercelayer.io/api/resources/shipments/update_shipment#example">this example</a>.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class ShipmentService {
  private url: string = <code>${environment.apiUrl}/api/shipments</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  getShipment(id: string): Observable&lt;Shipment&gt; {
    return this.http.get&lt;Shipment&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }

  updateShipment(id: string, shippingMethodId: string): Observable&lt;Shipment&gt; {
    return this.http.patch&lt;Shipment&gt;(
      <code>${this.url}/${id}</code>,
      { shippingMethodId: shippingMethodId }
    )
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>SKU Service</h4>
<p>The SKU service gets products from the store.  If multiple products are being retrieved, they can be paginated and have a page size set. Page size and page number should be set as query params like in <a href="https://docs.commercelayer.io/api/pagination#example">this example</a> if you’re making direct requests to the API. A single product can also be retrieved given its id.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class SkuService {
  private url: string = <code>${environment.apiUrl}/api/skus</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  getSku(id: string): Observable&lt;Sku&gt; {
    return this.http.get&lt;Sku&gt;(<code>${this.url}/${id}</code>)
      .pipe(catchError(this.eh.handleError));
  }

  getSkus(page: number, pageSize: number): Observable&lt;Sku[]&gt; {
    return this.http.get&lt;Sku[]&gt;(
      this.url,
      {
        params: {
          'page': page.toString(),
          'pageSize': pageSize.toString()
        }
      })
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>



Core Module
<p>The core module contains everything central to and common across the application. These include components like the header and pages like the 404 page. Services responsible for authentication and session management also fall here, as well as app-wide interceptors and guards. </p>
<p>The core module tree will look like this.</p>
<pre><code>src/app/core
├── components
│   ├── error
│   │   ├── error.component.css
│   │   ├── error.component.html
│   │   └── error.component.ts
│   ├── header
│   │   ├── header.component.css
│   │   ├── header.component.html
│   │   └── header.component.ts
│   └── not-found
│       ├── not-found.component.css
│       ├── not-found.component.html
│       └── not-found.component.ts
├── core.module.ts
├── guards
│   └── empty-cart.guard.ts
├── interceptors
│   └── options.interceptor.ts
└── services
    ├── authentication.service.ts
    ├── header.service.ts
    └── session.service.ts</code></pre>

<p>To generate the module and its contents run:</p>
<div>
<pre><code>ng g m core
ng g g core/guards/empty-cart
ng g s core/header/header
ng g interceptor core/interceptors/options
for comp in header error not-found; do ng g c "core/${comp}"; done
for serv in authentication session; do ng g s "core/authentication/${serv}"; done</code></pre>
</div>

<p>The core module file should like this. Note that routes have been registered for the <code>NotFoundComponent</code> and <code>ErrorComponent</code>.</p>
<div>
<pre><code>@NgModule({
  declarations: [HeaderComponent, NotFoundComponent, ErrorComponent],
  imports: [
    RouterModule.forChild([
      { path: '404', component: NotFoundComponent },
      { path: 'error', component: ErrorComponent },
      { path: '**', redirectTo: '/404' }
    ]),
    MatBadgeModule,
    SharedModule
  ],
  exports: [HeaderComponent]
})
export class CoreModule { }</code></pre>
</div>

<h3>Services</h3>
<p>The services folder holds the authentication, session, and header services. </p>
<h4>Authentication Service</h4>
<p>The <code>AuthenticationService</code> allows you to acquire <a href="https://docs.commercelayer.io/api/authentication/client-credentials">client</a> and <a href="https://docs.commercelayer.io/api/authentication/password">customer tokens</a>. These tokens are used to access the rest of the API’s routes. Customer tokens are returned when a user exchanges an email and password for it and have a wider range of permissions. Client tokens are issued without needing credentials and have narrower permissions. </p>
<p><code>getClientSession</code> gets a client token. <code>login</code> gets a customer token. Both methods also create a session. The body of a client token request should look <a href="https://docs.commercelayer.io/api/authentication/client-credentials#examples">like this</a> and that of a customer token <a href="https://docs.commercelayer.io/api/authentication/password#example">like this</a>.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class AuthenticationService {
  private url: string = <code>${environment.apiUrl}/oauth/token</code>;

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  getClientSession(): Observable&lt;object&gt; {
    return this.http.post&lt;object&gt;(
      this.url,
      { grantType: 'client_credentials' })
      .pipe(catchError(this.eh.handleError));
  }

  login(email: string, password: string): Observable&lt;object&gt; {
    return this.http.post&lt;object&gt;(
      this.url,
      { username: email, password: password, grantType: 'password' })
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Session Service</h4>
<p>The <code>SessionService</code> is responsible for session management. The service will contain an observable from a <code>BehaviorSubject</code> called <code>loggedInStatus</code> to communicate whether a user is logged in. <code>setLoggedInStatus</code> sets the value of this subject, <code>true</code> for logged in, and <code>false</code> for not logged in. <code>isCustomerLoggedIn</code> makes a request to the server to check if the user has an existing session. <code>logout</code> destroys the session on the server. The last two methods access routes that are unique to the server that populates the request with a token. They are not available from Commerce Layer. You’ll have to figure out how to implement them. </p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class SessionService {
  private url: string = <code>${environment.apiUrl}/session</code>;
  private isLoggedIn = new BehaviorSubject(false);

  loggedInStatus = this.isLoggedIn.asObservable();

  constructor(private http: HttpClient, private eh: HttpErrorHandler) { }

  setLoggedInStatus(status: boolean) {
    this.isLoggedIn.next(status);
  }

  isCustomerLoggedIn(): Observable&lt;{ message: string }&gt; {
    return this.http.get&lt;{ message: string }&gt;(<code>${this.url}/customer/status</code>)
      .pipe(catchError(this.eh.handleError));
  }

  logout(): Observable&lt;{ message: string }&gt; {
    return this.http.get&lt;{ message: string }&gt;(<code>${this.url}/destroy</code>)
      .pipe(catchError(this.eh.handleError));
  }
}</code></pre>
</div>

<h4>Header Service</h4>
<p>The <code>HeaderService</code> is used to communicate whether the cart, login, and logout buttons should be shown in the header. These buttons are hidden on the login and signup pages but present on all other pages to prevent confusion. We’ll use an observable from a <code>BehaviourSubject</code> called <code>showHeaderButtons</code> that shares this. We’ll also have a <code>setHeaderButtonsVisibility</code> method to set this value.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class HeaderService {
  private headerButtonsVisibility = new BehaviorSubject(true);

  showHeaderButtons = this.headerButtonsVisibility.asObservable();

  constructor() { }

  setHeaderButtonsVisibility(visible: boolean) {
    this.headerButtonsVisibility.next(visible);
  }
}</code></pre>
</div>

<h3>Components</h3>
<h4>Error Component</h4>
<p>This component is used as an error page. It is useful in instances when server requests fail and absolutely no data is displayed on a page. Instead of showing a blank page, we let the user know that a problem occurred. Below is it’s template.</p>
<div>
<pre><code>&lt;app-simple-page title="An error occurred" subtitle="There was a problem fetching your page" buttonText="GO TO HOME" icon="report" [centerText]="true" route="/"&gt;
&lt;/app-simple-page&gt;</code></pre>
</div>

<p>This is what the component will look like.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfaae995-ac3a-482b-a9fe-803253d20ced/6-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h4>Not Found Component</h4>
<p>This is a 404 page that the user gets redirected to when they request a route not available on the router. Only its template is modified. </p>
<div>
<pre><code>&lt;app-simple-page title="404: Page not found" buttonText="GO TO HOME" icon="search" subtitle="The requested page could not be found" [centerText]="true" route="/"&gt;&lt;/app-simple-page&gt;</code></pre>
</div>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4d18e10-3de2-4a65-aecf-a539c10c1846/2-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h4>Header Component</h4>
<p>The HeaderComponent is basically the header displayed at the top of a page. It will contain the app title, the cart, login, and logout buttons. </p>
<p>When this component is initialized, a request is made to check whether the user has a current session. This happens when subscribing to <code>this.session.isCustomerLoggedIn()</code>. We subscribe to <code>this.session.loggedInStatus</code> to check if the user logs out throughout the life of the app. The <code>this.header.showHeaderButtons</code> subscription decides whether to show all the buttons on the header or hide them. <code>this.cart.cartValue$</code> gets the count of items in the cart. </p>
<p>There exists a <code>logout</code> method that destroys a user’s session and assigns them a client token. A client token is assigned because the session maintaining their customer token is destroyed and a token is still required for each API request. A material snackbar communicates to the user whether their session was successfully destroyed or not.</p>
<p>We use the <code>@UntilDestroy({ checkProperties: true })</code> decorator to indicate that all subscriptions should be automatically unsubscribed from when the component is destroyed.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit {
  cartAmount: number = 0;
  isLoggedIn: boolean = false;
  showButtons: boolean = true;

  constructor(
    private session: SessionService,
    private snackBar: MatSnackBar,
    private cart: CartService,
    private header: HeaderService,
    private auth: AuthenticationService
  ) { }

  ngOnInit() {
    this.session.isCustomerLoggedIn()
      .subscribe(
        () =&gt; {
          this.isLoggedIn = true;
          this.session.setLoggedInStatus(true);
        }
      );

    this.session.loggedInStatus.subscribe(status =&gt; this.isLoggedIn = status);

    this.header.showHeaderButtons.subscribe(visible =&gt; this.showButtons = visible);

    this.cart.cartValue$.subscribe(cart =&gt; this.cartAmount = cart.itemCount);
  }

  logout() {
    concat(
      this.session.logout(),
      this.auth.getClientSession()
    ).subscribe(
      () =&gt; {
        this.snackBar.open('You have been logged out.', 'Close', { duration: 4000 });
        this.session.setLoggedInStatus(false);
      },
      err =&gt; this.snackBar.open('There was a problem logging you out.', 'Close', { duration: 4000 })
    );
  }
}</code></pre>
</div>

<p>Below is the header template and <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/core/components/header/header.component.css">linked here</a> is its styling.</p>
<div>
<pre><code>&lt;div id="header-container"&gt;
    &lt;div id="left-half" routerLink="/"&gt;
        &lt;h1&gt;&lt;span id="lime-text"&gt;Lime&lt;/span&gt;&lt;span id="store-text"&gt;Store&lt;/span&gt;&lt;/h1&gt;
    &lt;/div&gt;
    &lt;div id="right-half"&gt;
        &lt;div id="button-container" <em>ngIf="showButtons"&gt;
            &lt;button mat-icon-button color="primary" aria-label="shopping cart"&gt;
                &lt;mat-icon [matBadge]="cartAmount" matBadgeColor="accent" aria-label="shopping cart" routerLink="/cart"&gt;shopping_cart&lt;/mat-icon&gt;
            &lt;/button&gt;
            &lt;button mat-icon-button color="primary" aria-label="login" </em>ngIf="!isLoggedIn"&gt;
                &lt;mat-icon aria-label="login" matTooltip="login" routerLink="/login"&gt;login&lt;/mat-icon&gt;
            &lt;/button&gt;
            &lt;button mat-icon-button color="primary" aria-label="logout" *ngIf="isLoggedIn" (click)="logout()"&gt;
                &lt;mat-icon aria-label="logout" matTooltip="logout"&gt;logout&lt;/mat-icon&gt;
            &lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>

<h3>Guards</h3>
<h4>Empty Cart Guard</h4>
<p>This guard prevents users from accessing routes relating to checkout and billing if their cart is empty. This is because to proceed with checkout, there needs to be a valid order. An order corresponds to a cart with items in it. If there are items in the cart, the user can proceed to a guarded page. However, if the cart is empty, the user is redirected to an empty-cart page.</p>
<div>
<pre><code>@Injectable({
  providedIn: 'root'
})
export class EmptyCartGuard implements CanActivate {
  constructor(private cart: CartService, private router: Router) { }

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable&lt;boolean | UrlTree&gt; | Promise&lt;boolean | UrlTree&gt; | boolean | UrlTree {
    if (this.cart.orderId) {
      if (this.cart.itemCount &gt; 0) {
        return true;
      }
    }

    return this.router.parseUrl('/empty');
  }
}</code></pre>
</div>

<h3>Interceptors</h3>
<h4>Options Interceptor</h4>
<p>This interceptor intercepts all outgoing HTTP requests and adds two options to the request. These are a <code>Content-Type</code> header and a <code>withCredentials</code> property. <code>withCredentials</code> specifies whether a request should be sent with outgoing credentials like the http-only cookies that we use. We use <code>Content-Type</code> to indicate that we are sending json resources to the server.</p>
<div>
<pre><code>@Injectable()
export class OptionsInterceptor implements HttpInterceptor {

  constructor() { }

  intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {
    request = request.clone({
      headers: request.headers.set('Content-Type', 'application/json'),
      withCredentials: true
    });

    return next.handle(request);
  }
}</code></pre>
</div>

Feature Modules
<p>This section contains the main features of the app. As mentioned earlier, the features are grouped in four modules: auth, product, cart, and checkout modules. </p>
<h3>Products Module</h3>
<p>The products module contains pages that display products on sale. These include the product page and the product list page. It’s structured as shown below. </p>
<pre><code>src/app/features/products
├── pages
│   ├── product
│   │   ├── product.component.css
│   │   ├── product.component.html
│   │   └── product.component.ts
│   └── product-list
│       ├── product-list.component.css
│       ├── product-list.component.html
│       └── product-list.component.ts
└── products.module.ts</code></pre>

<p>To generate it and its components:</p>
<pre><code>ng g m features/products
ng g c features/products/pages/product
ng g c features/products/pages/product-list</code></pre>

<p>This is the module file:</p>
<pre><code>@NgModule({
  declarations: [ProductListComponent, ProductComponent],
  imports: [
    RouterModule.forChild([
      { path: 'product/:id', component: ProductComponent },
      { path: '', component: ProductListComponent }
    ]),
    LayoutModule,
    MatCardModule,
    MatGridListModule,
    MatPaginatorModule,
    SharedModule
  ]
})
export class ProductsModule { }</code></pre>

<h4>Product List Component</h4>
<p>This component displays a paginated list of available products for sale. It is the first page that is loaded when the app starts. </p>
<p>The products are displayed in a grid. Material grid list is the best component for this. To make the grid responsive, the number of grid columns will change depending on the screen size. The <code>BreakpointObserver</code> service allows us to determine the size of the screen and assign the columns during initialization.</p>
<p>To get the products, we call the <code>getProducts</code> method of the <code>SkuService</code>. It returns the products if successful and assigns them to the grid. If not, we route the user to the error page. </p>
<p>Since the products displayed are paginated, we will have a <code>getNextPage</code> method to get the additional products.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-product-list',
  templateUrl: './product-list.component.html',
  styleUrls: ['./product-list.component.css']
})
export class ProductListComponent implements OnInit {
  cols = 4;
  length = 0;
  pageIndex = 0;
  pageSize = 20;
  pageSizeOptions: number[] = [5, 10, 20];

  pageEvent!: PageEvent | void;

  products: Sku[] = [];

  constructor(
    private breakpointObserver: BreakpointObserver,
    private skus: SkuService,
    private router: Router,
    private header: HeaderService) { }

  ngOnInit() {
    this.getProducts(1, 20);
    this.header.setHeaderButtonsVisibility(true);

    this.breakpointObserver.observe([
      Breakpoints.Handset,
      Breakpoints.Tablet,
      Breakpoints.Web
    ]).subscribe(result =&gt; {
      if (result.matches) {
        if (result.breakpoints['(max-width: 599.98px) and (orientation: portrait)'] || result.breakpoints['(max-width: 599.98px) and (orientation: landscape)']) {
          this.cols = 1;
        }
        else if (result.breakpoints['(min-width: 1280px) and (orientation: portrait)'] || result.breakpoints['(min-width: 1280px) and (orientation: landscape)']) {
          this.cols = 4;
        } else {
          this.cols = 3;
        }
      }
    });
  }

  private getProducts(page: number, pageSize: number) {
    this.skus.getSkus(page, pageSize)
      .subscribe(
        skus =&gt; {
          this.products = skus;
          this.length = skus[0].__collectionMeta.recordCount;
        },
        err =&gt; this.router.navigateByUrl('/error')
      );
  }

  getNextPage(event: PageEvent) {
    this.getProducts(event.pageIndex + 1, event.pageSize);
  }

  trackSkus(index: number, item: Sku) {
    return <code>${item.id}-${index}</code>;
  }
}</code></pre>
</div>

<p>The template is shown below and its styling can be found <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/products/pages/product-list/product-list.component.css">here</a>.</p>
<div>
<pre><code>&lt;mat-grid-list cols="{{cols}}" rowHeight="400px" gutterSize="20px" class="grid-layout"&gt;
    &lt;mat-grid-tile *ngFor="let product of products; trackBy: trackSkus"&gt;
        &lt;mat-card&gt;
            &lt;img id="card-image" mat-card-image src="{{product.imageUrl}}" alt="product photo"&gt;
            &lt;mat-card-content&gt;
                &lt;mat-card-title matTooltip="{{product.name}}"&gt;{{product.name |wordWrap:35}}&lt;/mat-card-title&gt;
                &lt;mat-card-subtitle&gt;{{product.prices[0].compareAtAmountFloat | currency:'EUR'}}&lt;/mat-card-subtitle&gt;
            &lt;/mat-card-content&gt;
            &lt;mat-card-actions&gt;
                &lt;button mat-flat-button color="primary" [routerLink]="['/product', product.id]"&gt;
                    View
                &lt;/button&gt;
            &lt;/mat-card-actions&gt;
        &lt;/mat-card&gt;
    &lt;/mat-grid-tile&gt;
&lt;/mat-grid-list&gt;
&lt;mat-paginator [length]="length" [pageIndex]="pageIndex" [pageSize]="pageSize" [pageSizeOptions]="pageSizeOptions" (page)="pageEvent = getNextPage($event)"&gt;
&lt;/mat-paginator&gt;</code></pre>
</div>

<p>The page will look like this.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/144e5ec3-9474-4395-a968-c0e70c8503a2/16-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h4>Product Component</h4>
<p>Once a product is selected from the product list page, this component displays its details. These include the product’s full name, price, and description. There’s also a button to add the item to the product cart. </p>
<p>On initialization, we get the id of the product from the route parameters. Using the id, we fetch the product from the <code>SkuService</code>.</p>
<p>When the user adds an item to the cart, the <code>addItemToCart</code> method is called. In it, we check if an order has already been created for the cart. If not, a new one is made using the <code>OrderService</code>. Afterwhich, a line item is created in the order that corresponds to the product. If an order already exists for the cart, just the line item is created. Depending on the status of the requests, a snackbar message is displayed to the user. </p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-product',
  templateUrl: './product.component.html',
  styleUrls: ['./product.component.css']
})
export class ProductComponent implements OnInit {
  id: string = '';
  product!: Sku;
  quantity: number = 0;

  constructor(
    private route: ActivatedRoute,
    private skus: SkuService,
    private location: Location,
    private router: Router,
    private header: HeaderService,
    private orders: OrderService,
    private lineItems: LineItemService,
    private cart: CartService,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit() {
    this.route.paramMap
      .pipe(
        mergeMap(params =&gt; {
          const id = params.get('id')
          this.id = id ? id : '';

          return this.skus.getSku(this.id);
        }),
        tap((sku) =&gt; {
          this.product = sku;
        })
      ).subscribe({
        error: (err) =&gt; this.router.navigateByUrl('/error')
      });

    this.header.setHeaderButtonsVisibility(true);
  }

  addItemToCart() {
    if (this.quantity &gt; 0) {
      if (this.cart.orderId == '') {
        this.orders.createOrder()
          .pipe(
            mergeMap((order: Order) =&gt; {
              this.cart.orderId = order.id || '';

              return this.lineItems.createLineItem({
                orderId: order.id,
                name: this.product.name,
                imageUrl: this.product.imageUrl,
                quantity: this.quantity,
                skuCode: this.product.code
              });
            })
          )
          .subscribe(
            () =&gt; {
              this.cart.incrementItemCount(this.quantity);
              this.showSuccessSnackBar();
            },
            err =&gt; this.showErrorSnackBar()
          );
      } else {
        this.lineItems.createLineItem({
          orderId: this.cart.orderId,
          name: this.product.name,
          imageUrl: this.product.imageUrl,
          quantity: this.quantity,
          skuCode: this.product.code
        }).subscribe(
          () =&gt; {
            this.cart.incrementItemCount(this.quantity);
            this.showSuccessSnackBar();
          },
          err =&gt; this.showErrorSnackBar()
        );
      }
    } else {
      this.snackBar.open('Select a quantity greater than 0.', 'Close', { duration: 8000 });
    }
  }

  setQuantity(no: number) {
    this.quantity = no;
  }

  goBack() {
    this.location.back();
  }

  private showSuccessSnackBar() {
    this.snackBar.open('Item successfully added to cart.', 'Close', { duration: 8000 });
  }

  private showErrorSnackBar() {
    this.snackBar.open('Failed to add your item to the cart.', 'Close', { duration: 8000 });
  }
}</code></pre>
</div>

<p>The <code>ProductComponent</code> template is as follows and its styling is linked <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/products/pages/product/product.component.css">here</a>.</p>
<div>
<pre><code>&lt;div id="container"&gt;
    &lt;mat-card *ngIf="product" class="product-card"&gt;
        &lt;img mat-card-image src="{{product.imageUrl}}" alt="Photo of a product"&gt;
        &lt;mat-card-content&gt;
            &lt;mat-card-title&gt;{{product.name}}&lt;/mat-card-title&gt;
            &lt;mat-card-subtitle&gt;{{product.prices[0].compareAtAmountFloat | currency:'EUR'}}&lt;/mat-card-subtitle&gt;
            &lt;p&gt;
                {{product.description}}
            &lt;/p&gt;
        &lt;/mat-card-content&gt;
        &lt;mat-card-actions&gt;
            &lt;app-item-quantity [quantity]="quantity" [maxValue]="10" (setQuantityEvent)="setQuantity($event)"&gt;&lt;/app-item-quantity&gt;
            &lt;button mat-raised-button color="accent" (click)="addItemToCart()"&gt;
                &lt;mat-icon&gt;add_shopping_cart&lt;/mat-icon&gt;
                Add to cart
            &lt;/button&gt;
            &lt;button mat-raised-button color="primary" (click)="goBack()"&gt;
                &lt;mat-icon&gt;storefront&lt;/mat-icon&gt;
                Continue shopping
            &lt;/button&gt;
        &lt;/mat-card-actions&gt;
    &lt;/mat-card&gt;
&lt;/div&gt;</code></pre>
</div>

<p>The page will look like this. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cbf71049-a4d6-4bf6-9d25-09c3e640dde5/9-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h3>Auth Module</h3>
<p>The Auth module contains pages responsible for authentication. These include the login and signup pages. It‘s structured as follows. </p>
<pre><code>src/app/features/auth/
├── auth.module.ts
└── pages
    ├── login
    │   ├── login.component.css
    │   ├── login.component.html
    │   └── login.component.ts
    └── signup
        ├── signup.component.css
        ├── signup.component.html
        └── signup.component.ts</code></pre>

<p>To generate it and its components:</p>
<pre><code>ng g m features/auth
ng g c features/auth/pages/signup
ng g c features/auth/pages/login</code></pre>

<p>This is its module file.</p>
<pre><code>@NgModule({
  declarations: [LoginComponent, SignupComponent],
  imports: [
    RouterModule.forChild([
      { path: 'login', component: LoginComponent },
      { path: 'signup', component: SignupComponent }
    ]),
    MatFormFieldModule,
    MatInputModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class AuthModule { }</code></pre>

<h4>Signup Component</h4>
<p>A user signs up for an account using this component. A first name, last name, email, and password are required for the process. The user also needs to confirm their password. The input fields will be created with the <code>FormBuilder</code> service. Validation is added to require that all the inputs have values. Additional validation is added to the password field to ensure a minimum length of eight characters. A custom <code>matchPasswords</code> validator ensures that the confirmed password matches the initial password. </p>
<p>When the component is initialized, the cart, login, and logout buttons in the header are hidden.This is communicated to the header using the <code>HeaderService</code>. </p>
<p>After all the fields are marked as valid, the user can then sign up. In the <code>signup</code> method, the <code>createCustomer</code> method of the <code>CustomerService</code> receives this input. If the signup is successful, the user is informed that their account was successfully created using a snackbar. They are then rerouted to the home page.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css']
})
export class SignupComponent implements OnInit {
  signupForm = this.fb.group({
    firstName: ['', Validators.required],
    lastName: ['', Validators.required],
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required, Validators.minLength(8)]],
    confirmedPassword: ['', [Validators.required]]
  }, { validators: this.matchPasswords });

  @ViewChild(FormGroupDirective) sufDirective: FormGroupDirective | undefined;

  constructor(
    private customer: CustomerService,
    private fb: FormBuilder,
    private snackBar: MatSnackBar,
    private router: Router,
    private header: HeaderService
  ) { }

  ngOnInit() {
    this.header.setHeaderButtonsVisibility(false);
  }

  matchPasswords(signupGroup: AbstractControl): ValidationErrors | null {
    const password = signupGroup.get('password')?.value;
    const confirmedPassword = signupGroup.get('confirmedPassword')?.value;

    return password == confirmedPassword ? null : { differentPasswords: true };
  }

  get password() { return this.signupForm.get('password'); }

  get confirmedPassword() { return this.signupForm.get('confirmedPassword'); }

  signup() {
    const customer = this.signupForm.value;

    this.customer.createCustomer(
      customer.email,
      customer.password,
      customer.firstName,
      customer.lastName
    ).subscribe(
      () =&gt; {
        this.signupForm.reset();
        this.sufDirective?.resetForm();

        this.snackBar.open('Account successfully created. You will be redirected in 5 seconds.', 'Close', { duration: 5000 });

        setTimeout(() =&gt; this.router.navigateByUrl('/'), 6000);
      },
      err =&gt; this.snackBar.open('There was a problem creating your account.', 'Close', { duration: 5000 })
    );
  }
}</code></pre>
</div>

<p>Below is the template for the <code>SignupComponent</code>.</p>
<div>
<pre><code>&lt;form id="container" [formGroup]="signupForm" (ngSubmit)="signup()"&gt;
    &lt;h1 class="mat-display-3"&gt;Create Account&lt;/h1&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;First Name&lt;/mat-label&gt;
        &lt;input matInput formControlName="firstName"&gt;
        &lt;mat-icon matPrefix&gt;portrait&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Last Name&lt;/mat-label&gt;
        &lt;input matInput formControlName="lastName"&gt;
        &lt;mat-icon matPrefix&gt;portrait&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Email&lt;/mat-label&gt;
        &lt;input matInput formControlName="email" type="email"&gt;
        &lt;mat-icon matPrefix&gt;alternate_email&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Password&lt;/mat-label&gt;
        &lt;input matInput formControlName="password" type="password"&gt;
        &lt;mat-icon matPrefix&gt;vpn_key&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Confirm Password&lt;/mat-label&gt;
        &lt;input matInput formControlName="confirmedPassword" type="password"&gt;
        &lt;mat-icon matPrefix&gt;vpn_key&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;div <em>ngIf="confirmedPassword?.invalid &amp;&amp; (confirmedPassword?.dirty || confirmedPassword?.touched)"&gt;
        &lt;mat-error </em>ngIf="signupForm.hasError('differentPasswords')"&gt;
            Your passwords do not match.
        &lt;/mat-error&gt;
    &lt;/div&gt;
    &lt;div <em>ngIf="password?.invalid &amp;&amp; (password?.dirty || password?.touched)"&gt;
        &lt;mat-error </em>ngIf="password?.hasError('minlength')"&gt;
            Your password should be at least 8 characters.
        &lt;/mat-error&gt;
    &lt;/div&gt;
    &lt;button mat-flat-button color="primary" [disabled]="!signupForm.valid"&gt;Sign Up&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>

<p>The component will turn out as follows.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b5eee5d-98ef-4e0e-a57a-a2c1b61b3b78/13-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h4>Login Component</h4>
<p>A registered user logs into their account with this component. An email and password need to be entered. Their corresponding input fields would have validation that makes them required. </p>
<p>Similar to the <code>SignupComponent</code>, the cart, login, and logout buttons in the header are hidden. Their visibility is set using the <code>HeaderService</code> during component initialization.</p>
<p>To login, the credentials are passed to the <code>AuthenticationService</code>. If successful, the login status of the user is set using the <code>SessionService</code>. The user is then routed back to the page they were on. If unsuccessful, a snackbar is displayed with an error and the password field is reset.  </p>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  loginForm = this.fb.group({
    email: ['', Validators.required],
    password: ['', Validators.required]
  });

  constructor(
    private authService: AuthenticationService,
    private session: SessionService,
    private snackBar: MatSnackBar,
    private fb: FormBuilder,
    private header: HeaderService,
    private location: Location
  ) { }

  ngOnInit() {
    this.header.setHeaderButtonsVisibility(false);
  }

  login() {
    const credentials = this.loginForm.value;

    this.authService.login(
      credentials.email,
      credentials.password
    ).subscribe(
      () =&gt; {
        this.session.setLoggedInStatus(true);
        this.location.back();
      },
      err =&gt; {
        this.snackBar.open(
          'Login failed. Check your login credentials.',
          'Close',
          { duration: 6000 });

        this.loginForm.patchValue({ password: '' });
      }
    );
  }
}</code></pre>

<p>Below is the <code>LoginComponent</code> template.</p>
<div>
<pre><code>&lt;form id="container" [formGroup]="loginForm" (ngSubmit)="login()"&gt;
    &lt;h1 class="mat-display-3"&gt;Login&lt;/h1&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Email&lt;/mat-label&gt;
        &lt;input matInput type="email" formControlName="email" required&gt;
        &lt;mat-icon matPrefix&gt;alternate_email&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Password&lt;/mat-label&gt;
        &lt;input matInput type="password" formControlName="password" required&gt;
        &lt;mat-icon matPrefix&gt;vpn_key&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;button mat-flat-button color="primary" [disabled]="!loginForm.valid"&gt;Login&lt;/button&gt;
    &lt;p id="newAccount" class="mat-h3"&gt;Not registered yet? &lt;a id="newAccountLink" routerLink="/signup"&gt;Create an account.&lt;/a&gt;&lt;/p&gt;
&lt;/form&gt;</code></pre>
</div>

<p>Here is a screenshot of the page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/60f04e9d-0f99-4adc-8ceb-7f817566b5fd/5-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h3>Cart Module</h3>
<p>The cart module contains all pages related to the cart. These include the order summary page, a coupon and gift card code page, and an empty cart page. It's structured as follows.</p>
<pre><code>src/app/features/cart/
├── cart.module.ts
└── pages
    ├── codes
    │   ├── codes.component.css
    │   ├── codes.component.html
    │   └── codes.component.ts
    ├── empty
    │   ├── empty.component.css
    │   ├── empty.component.html
    │   └── empty.component.ts
    └── summary
        ├── summary.component.css
        ├── summary.component.html
        └── summary.component.ts</code></pre>

<p>To generate it, run:</p>
<pre><code>ng g m features/cart
ng g c features/cart/codes
ng g c features/cart/empty
ng g c features/cart/summary</code></pre>

<p>This is the module file.</p>
<div>
<pre><code>@NgModule({
  declarations: [SummaryComponent, CodesComponent, EmptyComponent],
  imports: [
    RouterModule.forChild([
      {
        path: '', canActivate: [EmptyCartGuard], children: [
          { path: 'cart', component: SummaryComponent },
          { path: 'codes', component: CodesComponent }
        ]
      },
      { path: 'empty', component: EmptyComponent }
    ]),
    MatDividerModule,
    MatFormFieldModule,
    MatInputModule,
    MatMenuModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class CartModule { }</code></pre>
</div>

<h4>Codes Component</h4>
<p>As mentioned earlier, this component is used to add any coupon or gift card codes to an order. This allows the user to apply discounts to the total of their order before proceeding to checkout. </p>
<p>There will be two input fields. One for coupons and another for gift card codes. </p>
<p>The codes are added by updating the order.  The <code>updateOrder</code> method of the <code>OrderService</code> updates the order with the codes. Afterwhich, both fields are reset and the user is informed of the success of the operation with a snackbar. A snackbar is also shown when an error occurs. Both the <code>addCoupon</code> and <code>addGiftCard</code> methods call the <code>updateOrder</code> method. </p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-codes',
  templateUrl: './codes.component.html',
  styleUrls: ['./codes.component.css']
})
export class CodesComponent {
  couponCode = new FormControl('');
  giftCardCode = new FormControl('');

  @ViewChild(FormControlDirective) codesDirective: FormControlDirective | undefined;

  constructor(
    private cart: CartService,
    private order: OrderService,
    private snackBar: MatSnackBar
  ) { }

  private updateOrder(order: Order, params: UpdateOrderParams[], codeType: string) {
    this.order.updateOrder(order, params)
      .subscribe(
        () =&gt; {
          this.snackBar.open(<code>Successfully added ${codeType} code.</code>, 'Close', { duration: 8000 });
          this.couponCode.reset();
          this.giftCardCode.reset();
          this.codesDirective?.reset();
        },
        err =&gt; this.snackBar.open(<code>There was a problem adding your ${codeType} code.</code>, 'Close', { duration: 8000 })
      );
  }

  addCoupon() {
    this.updateOrder({ id: this.cart.orderId, couponCode: this.couponCode.value }, [UpdateOrderParams.couponCode], 'coupon');
  }

  addGiftCard() {
    this.updateOrder({ id: this.cart.orderId, giftCardCode: this.giftCardCode.value }, [UpdateOrderParams.giftCardCode], 'gift card');
  }

}</code></pre>
</div>

<p>The template is shown below and its styling can be found at <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/cart/pages/codes/codes.component.css">this link</a>.</p>
<div>
<pre><code>&lt;div id="container"&gt;
    &lt;app-title title="Redeem a code" subtitle="Enter a coupon code or gift card" [centerText]="true"&gt;&lt;/app-title&gt;
    &lt;div class="input-row"&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;Coupon Code&lt;/mat-label&gt;
            &lt;input matInput [formControl]="couponCode" required&gt;
            &lt;mat-icon matPrefix&gt;card_giftcard&lt;/mat-icon&gt;
        &lt;/mat-form-field&gt;
        &lt;button class="redeem" mat-flat-button color="accent" [disabled]="couponCode.invalid" (click)="addCoupon()"&gt;Redeem&lt;/button&gt;
    &lt;/div&gt;
    &lt;div class="input-row"&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;Gift Card Code&lt;/mat-label&gt;
            &lt;input matInput [formControl]="giftCardCode" required&gt;
            &lt;mat-icon matPrefix&gt;redeem&lt;/mat-icon&gt;
        &lt;/mat-form-field&gt;
        &lt;button class="redeem" mat-flat-button color="accent" [disabled]="giftCardCode.invalid" (click)="addGiftCard()"&gt;Redeem&lt;/button&gt;
    &lt;/div&gt;
    &lt;button color="primary" mat-flat-button routerLink="/cart"&gt;
        &lt;mat-icon&gt;shopping_cart&lt;/mat-icon&gt;
        CONTINUE TO CART
    &lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>

<p>Here is a screenshot of the page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/261453ef-4ebb-456f-a348-d6d26782302b/17-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h4>Empty Component</h4>
<p>It should not be possible to check out with an empty cart. There needs to be a guard that prevents users from accessing checkout module pages with empty carts. This has already been covered as part of the <code>CoreModule</code>. The guard redirects requests to checkout pages with an empty cart to the <code>EmptyCartComponent</code>. </p>
<p>It's a very simple component that has some text indicating to the user that their cart is empty. It also has a button that the user can click to go to the homepage to add things to their cart. So we’ll use the <code>SimplePageComponent</code> to display it. Here is the template.</p>
<div>
<pre><code>&lt;app-simple-page title="Your cart is empty" subtitle="There is currently nothing in your cart. Head to the home page to add items." buttonText="GO TO HOME PAGE" icon="shopping_basket" [centerText]="true" route="/"&gt;
&lt;/app-simple-page&gt;</code></pre>
</div>

<p>Here is a screenshot of the page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/70ea3c01-0485-4496-b5a1-aafe12e843d7/20-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h4>Summary Component</h4>
<p>This component summarizes the cart/order. It lists all the items in the cart, their names, quantities, and pictures. It additionally breaks down the cost of the order including taxes, shipping, and discounts. The user should be able to view this and decide whether they are satisfied with the items and cost before proceeding to checkout. </p>
<p>On initialization, the order and its line items are fetched using the <code>OrderService</code>. A user should be able to modify the line items or even remove them from the order. Items are removed when the <code>deleteLineItem</code> method is called. In it the <code>deleteLineItem</code> method of the <code>LineItemService</code> receives the id of the line item to be deleted. If a deletion is successful, we update the item count in the cart using the <code>CartService</code>. </p>
<p>The user is then routed to the customer page where they begin the process of checking out. The <code>checkout</code> method does the routing. </p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-summary',
  templateUrl: './summary.component.html',
  styleUrls: ['./summary.component.css']
})
export class SummaryComponent implements OnInit {
  order: Order = {};

  summary: { name: string, amount: string | undefined, id: string }[] = [];

  constructor(
    private orders: OrderService,
    private lineItems: LineItemService,
    private cart: CartService,
    private snackBar: MatSnackBar,
    private router: Router
  ) { }

  ngOnInit() {
    this.orders.getOrder(this.cart.orderId, GetOrderParams.cart)
      .subscribe(
        order =&gt; this.processOrder(order),
        err =&gt; this.showOrderError('retrieving your cart')
      );
  }

  private processOrder(order: Order) {
    this.order = order;

    this.summary = [
      { name: 'Subtotal', amount: order.formattedSubtotalAmount, id: 'subtotal' },
      { name: 'Discount', amount: order.formattedDiscountAmount, id: 'discount' },
      { name: 'Taxes (included)', amount: order.formattedTotalTaxAmount, id: 'taxes' },
      { name: 'Shipping', amount: order.formattedShippingAmount, id: 'shipping' },
      { name: 'Gift Card', amount: order.formattedGiftCardAmount, id: 'gift-card' }
    ];
  }

  private showOrderError(msg: string) {
    this.snackBar.open(<code>There was a problem ${msg}.</code>, 'Close', { duration: 8000 });
  }

  checkout() {
    this.router.navigateByUrl('/customer');
  }

  deleteLineItem(id: string) {
    this.lineItems.deleteLineItem(id)
      .pipe(
        mergeMap(() =&gt; this.orders.getOrder(this.cart.orderId, GetOrderParams.cart))
      ).subscribe(
        order =&gt; {
          this.processOrder(order);
          this.cart.itemCount = order.skusCount || this.cart.itemCount;
          this.snackBar.open(<code>Item successfully removed from cart.</code>, 'Close', { duration: 8000 })
        },
        err =&gt; this.showOrderError('deleting your order')
      );
  }
}</code></pre>
</div>

<p>Below is the template and its styling is <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/cart/pages/summary/summary.component.css">linked here</a>. </p>
<div>
<pre><code>&lt;div class="container" <em>ngIf="order"&gt;
    &lt;h3 id="order-id"&gt;Order #{{order.number}} ({{order.skusCount}} items)&lt;/h3&gt;
    &lt;div class="line-item" </em>ngFor="let item of order.lineItems"&gt;
        &lt;div id="product-details"&gt;
            &lt;img <em>ngIf="item.imageUrl" class="image-xs" src="{{item.imageUrl}}" alt="product photo"&gt;
            &lt;div </em>ngIf="!item.imageUrl" class="image-xs no-image"&gt;&lt;/div&gt;
            &lt;div id="line-details"&gt;
                &lt;div&gt;{{item.name}}&lt;/div&gt;
                &lt;div&gt; {{item.formattedUnitAmount }} &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id="product-config"&gt;
            &lt;app-item-quantity [quantity]="item.quantity || 0" [disabled]="true"&gt;&lt;/app-item-quantity&gt;
            &lt;div class="itemTotal"&gt; {{item.formattedTotalAmount }} &lt;/div&gt;
            &lt;button mat-icon-button color="warn" (click)="deleteLineItem(item.id || '')"&gt;
                &lt;mat-icon&gt;clear&lt;/mat-icon&gt;
        &lt;/button&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;mat-divider&gt;&lt;/mat-divider&gt;
    &lt;div class="costSummary"&gt;
        &lt;div class="costItem" *ngFor="let item of summary" [id]="item.id"&gt;
            &lt;h3 class="costLabel"&gt;{{item.name}}&lt;/h3&gt;
            &lt;p&gt; {{item.amount }} &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;mat-divider&gt;&lt;/mat-divider&gt;
    &lt;div class="costSummary"&gt;
        &lt;div class="costItem" id="total"&gt;
            &lt;h2 id="totalLabel"&gt;Total&lt;/h2&gt;
            &lt;h2&gt; {{order.formattedTotalAmountWithTaxes}} &lt;/h2&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="checkout-button"&gt;
        &lt;button color="accent" mat-flat-button routerLink="/codes"&gt;
        &lt;mat-icon&gt;redeem&lt;/mat-icon&gt;
        ADD GIFT CARD/COUPON
    &lt;/button&gt;
        &lt;button color="primary" mat-flat-button (click)="checkout()"&gt;
        &lt;mat-icon&gt;point_of_sale&lt;/mat-icon&gt;
        CHECKOUT
    &lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>

<p>Here is a screenshot of the page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18ac066f-8765-4bd1-9ebe-5a418177e41f/18-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<h3>Checkout Module</h3>
<p>This module is responsible for the checkout process. Checkout involves providing a billing and shipping address, a customer email, and selecting a shipping and payment method. The last step of this process is placement and confirmation of the order. The structure of the module is as follows.</p>
<pre><code>src/app/features/checkout/
├── components
│   ├── address
│   ├── address-list
│   └── country-select
└── pages
    ├── billing-address
    ├── cancel-payment
    ├── customer
    ├── payment
    ├── place-order
    ├── shipping-address
    └── shipping-methods</code></pre>

<p>This module is the biggest by far and contains 3 components and 7 pages. To generate it and its components run:</p>
<pre><code>ng g m features/checkout
for comp in \
address address-list country-select; do \
ng g c "features/checkout/components/${comp}" \
; done
for page in \
billing-address cancel-payment customer \
payment place-order shipping-address \
shipping-methods; do \
ng g c "features/checkout/pages/${page}"; done</code></pre>

<p>This is the module file.</p>
<div>
<pre><code>@NgModule({
  declarations: [
    CustomerComponent,
    AddressComponent,
    BillingAddressComponent,
    ShippingAddressComponent,
    ShippingMethodsComponent,
    PaymentComponent,
    PlaceOrderComponent,
    AddressListComponent,
    CountrySelectComponent,
    CancelPaymentComponent
  ],
  imports: [
    RouterModule.forChild([
      {
        path: '', canActivate: [EmptyCartGuard], children: [
          { path: 'billing-address', component: BillingAddressComponent },
          { path: 'cancel-payment', component: CancelPaymentComponent },
          { path: 'customer', component: CustomerComponent },
          { path: 'payment', component: PaymentComponent },
          { path: 'place-order', component: PlaceOrderComponent },
          { path: 'shipping-address', component: ShippingAddressComponent },
          { path: 'shipping-methods', component: ShippingMethodsComponent }
        ]
      }
    ]),
    MatCardModule,
    MatCheckboxModule,
    MatDividerModule,
    MatInputModule,
    MatMenuModule,
    MatRadioModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class CheckoutModule { }</code></pre>
</div>

<h4>Components</h4>
<p><strong>Country Select Component</strong></p>
<p>This component lets a user select a country as part of an address. The material select component has a pretty different appearance when compared to the input fields in the address form. So for the sake of uniformity, a material menu component is used instead. </p>
<p>When the component is initialized, the country code data is fetched using the <code>CountryService</code>. The <code>countries</code> property holds the values returned by the service. These values will be added to the menu in the template. </p>
<p>The component has one output property, <code>setCountryEvent</code>. When a country is selected, this event emits the alpha-2 code of the country.</p>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-country-select',
  templateUrl: './country-select.component.html',
  styleUrls: ['./country-select.component.css']
})
export class CountrySelectComponent implements OnInit {
  country: string = 'Country';
  countries: Country[] = [];
  @Output() setCountryEvent = new EventEmitter&lt;string&gt;();

  constructor(private countries: CountryService) { }

  ngOnInit() {
    this.countries.getCountries()
      .subscribe(
        countries =&gt; {
          this.countries = countries;
        }
      );
  }

  setCountry(value: Country) {
    this.country = value.name || '';
    this.setCountryEvent.emit(value.code);
  }}</code></pre>

<p>Below is its template and linked <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/components/country-select/country-select.component.css">here</a> is its styling.</p>
<div>
<pre><code>&lt;button id="country-select" mat-stroked-button [matMenuTriggerFor]="countryMenu"&gt;
    {{country}}
    &lt;mat-icon&gt;expand_more&lt;/mat-icon&gt;
&lt;/button&gt;
&lt;mat-menu #countryMenu="matMenu"&gt;
    &lt;button *ngFor="let cnt of countries" (click)="setCountry(cnt)" mat-menu-item&gt;{{cnt.name}}&lt;/button&gt;
&lt;/mat-menu&gt;</code></pre>
</div>

<p><strong>Address Component</strong></p>
<p>This is a form for capturing addresses. It is used by both the shipping and billing address pages. A valid Commerce Layer address should contain a first and last name, an address line, a city, zip code, state code, country code, and phone number.  </p>
<p>The <code>FormBuilder</code> service will create the form group. Since this component is used by multiple pages, it has a number of input and output properties. The input properties include the button text, title displayed, and text for a checkbox. The output properties will be event emitters for when the button is clicked to create the address and another for when the checkbox value changes. </p>
<p>When the button is clicked, the <code>addAddress</code> method is called and the <code>createAddress</code> event emits the complete address. Similarly, when the checkbox is checked, the <code>isCheckboxChecked</code> event emits the checkbox value.</p>
<div>
<pre><code>@Component({
  selector: 'app-address',
  templateUrl: './address.component.html',
  styleUrls: ['./address.component.css']
})
export class AddressComponent {
  @Input() buttonText: string = '';
  @Input() showTitle?: boolean = false;

  @Output() createAddress = new EventEmitter&lt;Address&gt;();

  @Input() checkboxText: string = '';
  @Output() isCheckboxChecked = new EventEmitter&lt;boolean&gt;();

  countryCode: string = '';

  addressForm = this.fb.group({
    firstName: [''],
    lastName: [''],
    line1: [''],
    city: [''],
    zipCode: [''],
    stateCode: [''],
    phone: ['']
  });

  @ViewChild(FormGroupDirective) afDirective: FormGroupDirective | undefined;

  constructor(private fb: FormBuilder) { }

  setCountryCode(code: string) {
    this.countryCode = code;
  }

  addAddress() {
    this.createAddress.emit({
      firstName: this.addressForm.get('firstName')?.value,
      lastName: this.addressForm.get('lastName')?.value,
      line1: this.addressForm.get('line1')?.value,
      city: this.addressForm.get('city')?.value,
      zipCode: this.addressForm.get('zipCode')?.value,
      stateCode: this.addressForm.get('stateCode')?.value || 'N/A',
      countryCode: this.countryCode,
      phone: this.addressForm.get('phone')?.value
    });
  }

  setCheckboxValue(change: MatCheckboxChange) {
    if (this.isCheckboxChecked) {
      this.isCheckboxChecked.emit(change.checked);
    }
  }
}</code></pre>
</div>

<p>This is its template and its styling is linked <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/components/address/address.component.css">here</a>.</p>
<div>
<pre><code>&lt;form id="container" [formGroup]="addressForm"&gt;
    &lt;p class="mat-headline" *ngIf="showTitle"&gt;Or add a new address&lt;/p&gt;
    &lt;div class="row"&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;First Name&lt;/mat-label&gt;
            &lt;input matInput formControlName="firstName"&gt;
        &lt;/mat-form-field&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;Last Name&lt;/mat-label&gt;
            &lt;input matInput formControlName="lastName"&gt;
        &lt;/mat-form-field&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;Address&lt;/mat-label&gt;
            &lt;input matInput formControlName="line1"&gt;
        &lt;/mat-form-field&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;City&lt;/mat-label&gt;
            &lt;input matInput formControlName="city"&gt;
        &lt;/mat-form-field&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;State Code&lt;/mat-label&gt;
            &lt;input matInput formControlName="stateCode"&gt;
        &lt;/mat-form-field&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;Zip Code&lt;/mat-label&gt;
            &lt;input matInput formControlName="zipCode"&gt;
        &lt;/mat-form-field&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;mat-form-field appearance="outline"&gt;
            &lt;mat-label&gt;Phone&lt;/mat-label&gt;
            &lt;input matInput formControlName="phone"&gt;
        &lt;/mat-form-field&gt;
        &lt;app-country-select (setCountryEvent)="setCountryCode($event)"&gt;&lt;/app-country-select&gt;
    &lt;/div&gt;
    &lt;mat-checkbox color="accent" (change)="setCheckboxValue($event)"&gt;
        {{checkboxText}}
    &lt;/mat-checkbox&gt;
    &lt;button id="submit-button" mat-flat-button color="primary" (click)="addAddress()"&gt;
        {{buttonText}}
    &lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>

<p><strong>Address List Component</strong></p>
<p>When a customer logs in, they can access their existing addresses. Instead of having them re-enter an address, they can pick from an address list. This is the purpose of this component. On initialization, all the customer's addresses are fetched using the <code>CustomerAddressService</code> if they are logged in. We will check their login status using the <code>SessionService</code>. </p>
<p>This component has a <code>setAddressEvent</code> output property. When an address is selected, <code>setAddressEvent</code> emits its id to the parent component.</p>
<div>
<pre><code>@Component({
  selector: 'app-address-list',
  templateUrl: './address-list.component.html',
  styleUrls: ['./address-list.component.css']
})
export class AddressListComponent implements OnInit {
  addresses: CustomerAddress[] = [];

  @Output() setAddressEvent = new EventEmitter&lt;string&gt;();

  constructor(
    private session: SessionService,
    private customerAddresses: CustomerAddressService,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit() {
    this.session.loggedInStatus
      .pipe(
        mergeMap(
          status =&gt; iif(() =&gt; status, this.customerAddresses.getCustomerAddresses())
        ))
      .subscribe(
        addresses =&gt; {
          if (addresses.length) {
            this.addresses = addresses
          }
        },
        err =&gt; this.snackBar.open('There was a problem getting your existing addresses.', 'Close', { duration: 8000 })
      );
  }

  setAddress(change: MatRadioChange) {
    this.setAddressEvent.emit(change.value);
  }
}</code></pre>
</div>

<p>Here is its template. You can find its styling <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/components/address-list/address-list.component.css">here</a>.</p>
<div>
<pre><code>&lt;div id="container"&gt;
    &lt;p class="mat-headline"&gt;Pick an existing address&lt;/p&gt;
    &lt;mat-error <em>ngIf="!addresses.length"&gt;You have no existing addresses&lt;/mat-error&gt;
    &lt;mat-radio-group </em>ngIf="addresses.length" class="addresses" (change)="setAddress($event)"&gt;
        &lt;mat-card class="address" *ngFor="let address of addresses"&gt;
            &lt;mat-radio-button [value]="address.address?.id" color="primary"&gt;
                &lt;p&gt;{{address.address?.firstName}} {{address.address?.lastName}},&lt;/p&gt;
                &lt;p&gt;{{address.address?.line1}},&lt;/p&gt;
                &lt;p&gt;{{address.address?.city}},&lt;/p&gt;
                &lt;p&gt;{{address.address?.zipCode}},&lt;/p&gt;
                &lt;p&gt;{{address.address?.stateCode}}, {{address.address?.countryCode}}&lt;/p&gt;
                &lt;p&gt;{{address.address?.phone}}&lt;/p&gt;
            &lt;/mat-radio-button&gt;
        &lt;/mat-card&gt;
    &lt;/mat-radio-group&gt;
&lt;/div&gt;</code></pre>
</div>

<h4>Pages</h4>
<p><strong>Customer Component</strong></p>
<p>An order needs to be associated with an email address. This component is a form that captures the customer email address. When the component is initialized, the current customer's email address is fetched if they are logged in. We get the customer from the <code>CustomerService</code>. If they do not wish to change their email address, this email will be the default value. </p>
<p>If the email is changed or a customer is not logged in, the order is updated with the inputted email. We use the <code>OrderService</code> to update the order with the new email address. If successful, we route the customer to the billing address page.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-customer',
  templateUrl: './customer.component.html',
  styleUrls: ['./customer.component.css']
})
export class CustomerComponent implements OnInit {
  email = new FormControl('', [Validators.required, Validators.email]);

  constructor(
    private orders: OrderService,
    private customers: CustomerService,
    private cart: CartService,
    private router: Router,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit() {
    this.customers.getCurrentCustomer()
      .subscribe(
        customer =&gt; this.email.setValue(customer.email)
      );
  }

  addCustomerEmail() {
    this.orders.updateOrder(
      { id: this.cart.orderId, customerEmail: this.email.value },
      [UpdateOrderParams.customerEmail])
      .subscribe(
        () =&gt; this.router.navigateByUrl('/billing-address'),
        err =&gt; this.snackBar.open('There was a problem adding your email to the order.', 'Close', { duration: 8000 })
      );
  }
}</code></pre>
</div>

<p>Here is the component template and linked <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/pages/customer/customer.component.css">here</a> is its styling. </p>
<div>
<pre><code>&lt;div id="container"&gt;
    &lt;app-title no="1" title="Customer" subtitle="Billing information and shipping address"&gt;&lt;/app-title&gt;
    &lt;mat-form-field appearance="outline"&gt;
        &lt;mat-label&gt;Email&lt;/mat-label&gt;
        &lt;input matInput [formControl]="email" required&gt;
        &lt;mat-icon matPrefix&gt;alternate_email&lt;/mat-icon&gt;
    &lt;/mat-form-field&gt;
    &lt;button mat-flat-button color="primary" [disabled]="email.invalid" (click)="addCustomerEmail()"&gt;
        PROCEED TO BILLING ADDRESS
    &lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>

<p>Here is a screenshot of the customer page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6f77bbb2-9fde-4c31-b50b-333c5101604a/10-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><strong>Billing Address Component</strong></p>
<p>The billing address component lets a customer either add a new billing address or pick from their existing addresses. Users who are not logged in have to input a new address. Those who have logged in get an option to pick between new or existing addresses. </p>
<p>The <code>showAddress</code> property indicates whether existing addresses should be shown on the component. <code>sameShippingAddressAsBilling</code> indicates whether the shipping address should be the same as what the billing address is set. When a customer selects an existing address, then its id is assigned to <code>selectedCustomerAddressId</code>. </p>
<p>When the component is initialized, we use the <code>SessionService</code> to check if the current user is logged in. If they are logged in, we will display their existing addresses if they have any. </p>
<p>As mentioned earlier, if a user is logged in, they can pick an existing address as their billing address. In the <code>updateBillingAddress</code> method, if they are logged in, the address they select is cloned and set as the order's billing address. We do this by updating the order using the <code>updateOrder</code> method of the <code>OrderService</code> and supplying the address Id. </p>
<p>If they are not logged in, the user has to provide an address. Once provided, the address is created using the <code>createAddress</code> method. In it, the <code>AddressService</code> takes the input and makes the new address. After which, the order is updated using the id of the newly created address. If there is an error or either operation is successful, we show a snackbar.</p>
<p>If the same address is selected as a shipping address, the user is routed to the shipping methods page. If they'd like to provide an alternate shipping address, they are directed to the shipping address page.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-billing-address',
  templateUrl: './billing-address.component.html',
  styleUrls: ['./billing-address.component.css']
})
export class BillingAddressComponent implements OnInit {
  showAddresses: boolean = false;
  sameShippingAddressAsBilling: boolean = false;
  selectedCustomerAddressId: string = '';

  constructor(
    private addresses: AddressService,
    private snackBar: MatSnackBar,
    private session: SessionService,
    private orders: OrderService,
    private cart: CartService,
    private router: Router,
    private customerAddresses: CustomerAddressService) { }

  ngOnInit() {
    this.session.loggedInStatus
      .subscribe(
        status =&gt; this.showAddresses = status
      );
  }

  updateBillingAddress(address: Address) {
    if (this.showAddresses &amp;&amp; this.selectedCustomerAddressId) {
      this.cloneAddress();
    } else if (address.firstName &amp;&amp; address.lastName &amp;&amp; address.line1 &amp;&amp; address.city &amp;&amp; address.zipCode &amp;&amp; address.stateCode &amp;&amp; address.countryCode &amp;&amp; address.phone) {
      this.createAddress(address);
    }
    else {
      this.snackBar.open('Check your address. Some fields are missing.', 'Close');
    }
  }

  setCustomerAddress(customerAddressId: string) {
    this.selectedCustomerAddressId = customerAddressId;
  }

  setSameShippingAddressAsBilling(change: boolean) {
    this.sameShippingAddressAsBilling = change;
  }

  private createAddress(address: Address) {
    this.addresses.createAddress(address)
      .pipe(
        concatMap(
          address =&gt; {
            const update = this.updateOrderObservable({
              id: this.cart.orderId,
              billingAddressId: address.id
            }, [UpdateOrderParams.billingAddress]);

            if (this.showAddresses) {
              return combineLatest([update, this.customerAddresses.createCustomerAddress(address.id || '', '')]);
            } else {
              return update;
            }
          }))
      .subscribe(
        () =&gt; this.showSuccessSnackBar(),
        err =&gt; this.showErrorSnackBar()
      );
  }

  private cloneAddress() {
    this.updateOrderObservable({
      id: this.cart.orderId,
      billingAddressCloneId: this.selectedCustomerAddressId
    }, [UpdateOrderParams.billingAddressClone])
      .subscribe(
        () =&gt; this.showSuccessSnackBar(),
        err =&gt; this.showErrorSnackBar()
      );
  }

  private updateOrderObservable(order: Order, updateParams: UpdateOrderParams[]): Observable&lt;any&gt; {
    return iif(() =&gt; this.sameShippingAddressAsBilling,
      concat([
        this.orders.updateOrder(order, updateParams),
        this.orders.updateOrder(order, [UpdateOrderParams.shippingAddressSameAsBilling])
      ]),
      this.orders.updateOrder(order, updateParams)
    );
  }

  private showErrorSnackBar() {
    this.snackBar.open('There was a problem creating your address.', 'Close', { duration: 8000 });
  }

  private navigateTo(path: string) {
    setTimeout(() =&gt; this.router.navigateByUrl(path), 4000);
  }

  private showSuccessSnackBar() {
    this.snackBar.open('Billing address successfully added. Redirecting...', 'Close', { duration: 3000 });
    if (this.sameShippingAddressAsBilling) {
      this.navigateTo('/shipping-methods');
    } else {
      this.navigateTo('/shipping-address');
    }
  }
}</code></pre>
</div>

<p>Here is the template. <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/pages/billing-address/billing-address.component.css">This link</a> points to its styling.</p>
<div>
<pre><code>&lt;app-title no="2" title="Billing Address" subtitle="Address to bill charges to"&gt;&lt;/app-title&gt;
&lt;app-address-list <em>ngIf="showAddresses" (setAddressEvent)="setCustomerAddress($event)"&gt;&lt;/app-address-list&gt;
&lt;mat-divider </em>ngIf="showAddresses"&gt;&lt;/mat-divider&gt;
&lt;app-address [showTitle]="showAddresses" buttonText="PROCEED TO NEXT STEP" checkboxText="Ship to the same address" (isCheckboxChecked)="setSameShippingAddressAsBilling($event)" (createAddress)="updateBillingAddress($event)"&gt;&lt;/app-address&gt;</code></pre>
</div>

<p>This is what the billing address page will look like.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9bc621e9-a6a3-4796-a1bd-cfaaf8f6615e/1-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><strong>Shipping Address Component</strong></p>
<p>The shipping address component behaves a lot like the billing address component. However, there are a couple of differences. For one, the text displayed on the template is different. The other key differences are in how the order is updated using the <code>OrderService</code> once an address is created or selected. The fields that the order updates are <code>shippingAddressCloneId</code> for selected addresses and <code>shippingAddress</code> for new addresses. If a user chooses to change the billing address, to be the same as the shipping address, the <code>billingAddressSameAsShipping</code> field is updated. </p>
<p>After a shipping address is selected and the order is updated, the user is routed to the shipping methods page.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-shipping-address',
  templateUrl: './shipping-address.component.html',
  styleUrls: ['./shipping-address.component.css']
})
export class ShippingAddressComponent implements OnInit {
  showAddresses: boolean = false;
  sameBillingAddressAsShipping: boolean = false;
  selectedCustomerAddressId: string = '';

  constructor(
    private addresses: AddressService,
    private snackBar: MatSnackBar,
    private session: SessionService,
    private orders: OrderService,
    private cart: CartService,
    private router: Router,
    private customerAddresses: CustomerAddressService) { }

  ngOnInit() {
    this.session.loggedInStatus
      .subscribe(
        status =&gt; this.showAddresses = status
      );
  }

  updateShippingAddress(address: Address) {
    if (this.showAddresses &amp;&amp; this.selectedCustomerAddressId) {
      this.cloneAddress();
    } else if (address.firstName &amp;&amp; address.lastName &amp;&amp; address.line1 &amp;&amp; address.city &amp;&amp; address.zipCode &amp;&amp; address.stateCode &amp;&amp; address.countryCode &amp;&amp; address.phone) {
      this.createAddress(address);
    }
    else {
      this.snackBar.open('Check your address. Some fields are missing.', 'Close');
    }
  }

  setCustomerAddress(customerAddressId: string) {
    this.selectedCustomerAddressId = customerAddressId;
  }

  setSameBillingAddressAsShipping(change: boolean) {
    this.sameBillingAddressAsShipping = change;
  }

  private createAddress(address: Address) {
    this.addresses.createAddress(address)
      .pipe(
        concatMap(
          address =&gt; {
            const update = this.updateOrderObservable({
              id: this.cart.orderId,
              shippingAddressId: address.id
            }, [UpdateOrderParams.shippingAddress]);

            if (this.showAddresses) {
              return combineLatest([update, this.customerAddresses.createCustomerAddress(address.id || '', '')]);
            } else {
              return update;
            }
          }))
      .subscribe(
        () =&gt; this.showSuccessSnackBar(),
        err =&gt; this.showErrorSnackBar()
      );
  }

  private cloneAddress() {
    this.updateOrderObservable({
      id: this.cart.orderId,
      shippingAddressCloneId: this.selectedCustomerAddressId
    }, [UpdateOrderParams.shippingAddressClone])
      .subscribe(
        () =&gt; this.showSuccessSnackBar(),
        err =&gt; this.showErrorSnackBar()
      );
  }

  private updateOrderObservable(order: Order, updateParams: UpdateOrderParams[]): Observable&lt;any&gt; {
    return iif(() =&gt; this.sameBillingAddressAsShipping,
      concat([
        this.orders.updateOrder(order, updateParams),
        this.orders.updateOrder(order, [UpdateOrderParams.billingAddressSameAsShipping])
      ]),
      this.orders.updateOrder(order, updateParams)
    );
  }

  private showErrorSnackBar() {
    this.snackBar.open('There was a problem creating your address.', 'Close', { duration: 8000 });
  }

  private showSuccessSnackBar() {
    this.snackBar.open('Shipping address successfully added. Redirecting...', 'Close', { duration: 3000 });

    setTimeout(() =&gt; this.router.navigateByUrl('/shipping-methods'), 4000);
  }
}</code></pre>
</div>

<p>Here is the template and its styling can be found <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/pages/shipping-address/shipping-address.component.css">here</a>.</p>
<div>
<pre><code>&lt;app-title no="3" title="Shipping Address" subtitle="Address to ship package to"&gt;&lt;/app-title&gt;
&lt;app-address-list <em>ngIf="showAddresses" (setAddressEvent)="setCustomerAddress($event)"&gt;&lt;/app-address-list&gt;
&lt;mat-divider </em>ngIf="showAddresses"&gt;&lt;/mat-divider&gt;
&lt;app-address [showTitle]="showAddresses" buttonText="PROCEED TO SHIPPING METHODS" checkboxText="Bill to the same address" (isCheckboxChecked)="setSameBillingAddressAsShipping($event)" (createAddress)="updateShippingAddress($event)"&gt;&lt;/app-address&gt;</code></pre>
</div>

<p>The shipping address page will look like this. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/80952fbf-9294-4da7-8ec1-1e5968718eac/21-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><strong>Shipping Methods Component</strong></p>
<p>This component displays the number of shipments required for an order to be fulfilled, the available shipping methods, and their associated costs. The customer can then select a shipping method they prefer for each shipment. </p>
<p>The <code>shipments</code> property contains all the shipments of the order. The <code>shipmentsForm</code> is the form within which the shipping method selections will be made. </p>
<p>When the component is initialized, the order is fetched and will contain both its line items and shipments. At the same time, we get the delivery lead times for the various shipping methods. We use the <code>OrderService</code> to get the order and the <code>DeliveryLeadTimeService</code> for the lead times. Once both sets of information are returned, they are combined into an array of shipments and assigned to the <code>shipments</code> property. Each shipment will contain its items, the shipping methods available, and the corresponding cost. </p>
<p>After the user has selected a shipping method for each shipment, the selected shipping method is updated for each in <code>setShipmentMethods</code>. If successful, the user is routed to the payments page.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-shipping-methods',
  templateUrl: './shipping-methods.component.html',
  styleUrls: ['./shipping-methods.component.css']
})
export class ShippingMethodsComponent implements OnInit {
  shipments: Shipment[] | undefined = [];
  shipmentsForm: FormGroup = this.fb.group({});

  constructor(
    private orders: OrderService,
    private dlts: DeliveryLeadTimeService,
    private cart: CartService,
    private router: Router,
    private fb: FormBuilder,
    private shipments: ShipmentService,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit() {
    combineLatest([
      this.orders.getOrder(this.cart.orderId, GetOrderParams.shipments),
      this.dlts.getDeliveryLeadTimes()
    ]).subscribe(
      ([lineItems, deliveryLeadTimes]) =&gt; {
        let li: LineItem;
        let lt: DeliveryLeadTime[];

        this.shipments = lineItems.shipments?.map((shipment) =&gt; {
          if (shipment.id) {
            this.shipmentsForm.addControl(shipment.id, new FormControl('', Validators.required));
          }

          if (shipment.lineItems) {
            shipment.lineItems = shipment.lineItems.map(item =&gt; {
              li = this.findItem(lineItems, item.skuCode || '');
              item.imageUrl = li.imageUrl;
              item.name = li.name;
              return item;
            });
          }

          if (shipment.availableShippingMethods) {
            lt = this.findLocationLeadTime(deliveryLeadTimes, shipment);
            shipment.availableShippingMethods = shipment.availableShippingMethods?.map(
              method =&gt; {
                method.deliveryLeadTime = this.findMethodLeadTime(lt, method);
                return method;
              });
          }

          return shipment;
        });
      },
      err =&gt; this.router.navigateByUrl('/error')
    );
  }

  setShipmentMethods() {
    const shipmentsFormValue = this.shipmentsForm.value;

    combineLatest(Object.keys(shipmentsFormValue).map(
      key =&gt; this.shipments.updateShipment(key, shipmentsFormValue[key])
    )).subscribe(
      () =&gt; {
        this.snackBar.open('Your shipments have been updated with a shipping method.', 'Close', { duration: 3000 });
        setTimeout(() =&gt; this.router.navigateByUrl('/payment'), 4000);
      },
      err =&gt; this.snackBar.open('There was a problem adding shipping methods to your shipments.', 'Close', { duration: 5000 })
    );
  }


  private findItem(lineItems: LineItem[], skuCode: string): LineItem {
    return lineItems.filter((item) =&gt; item.skuCode == skuCode)[0];
  }

  private findLocationLeadTime(times: DeliveryLeadTime[], shipment: Shipment): DeliveryLeadTime[] {
    return times.filter((dlTime) =&gt; dlTime?.stockLocation?.id == shipment?.stockLocation?.id);
  }

  private findMethodLeadTime(times: DeliveryLeadTime[], method: ShippingMethod): DeliveryLeadTime {
    return times.filter((dlTime) =&gt; dlTime?.shippingMethod?.id == method?.id)[0];
  }
}</code></pre>
</div>

<p>Here is the template and you can find the styling at <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/pages/shipping-methods/shipping-methods.component.css">this link</a>.</p>
<div>
<pre><code>&lt;form id="container" [formGroup]="shipmentsForm"&gt;
    &lt;app-title no="4" title="Shipping Methods" subtitle="How to ship your packages"&gt;&lt;/app-title&gt;
    &lt;div class="shipment-container" <em>ngFor="let shipment of shipments; let j = index; let isLast = last"&gt;
        &lt;h1&gt;Shipment {{j+1}} of {{shipments?.length}}&lt;/h1&gt;
        &lt;div class="row" </em>ngFor="let item of shipment.lineItems"&gt;
            &lt;img class="image-xs" [src]="item.imageUrl" alt="product photo"&gt;
            &lt;div id="shipment-details"&gt;
                &lt;h4 id="item-name"&gt;{{item.name}}&lt;/h4&gt;
                &lt;p&gt;{{item.skuCode}}&lt;/p&gt;
            &lt;/div&gt;
            &lt;div id="quantity-section"&gt;
                &lt;p id="quantity-label"&gt;Quantity: &lt;/p&gt;{{item.quantity}}
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;mat-radio-group [formControlName]="shipment?.id || j"&gt;
            &lt;mat-radio-button <em>ngFor="let method of shipment.availableShippingMethods" [value]="method.id"&gt;
                &lt;div class="radio-button"&gt;
                    &lt;p&gt;{{method.name}}&lt;/p&gt;
                    &lt;div&gt;
                        &lt;p class="radio-label"&gt;Cost:&lt;/p&gt;
                        &lt;p&gt; {{method.formattedPriceAmount}}&lt;/p&gt;
                    &lt;/div&gt;
                    &lt;div&gt;
                        &lt;p class="radio-label"&gt;Timeline:&lt;/p&gt;
                        &lt;p&gt; Available in {{method.deliveryLeadTime?.minDays}}-{{method.deliveryLeadTime?.maxDays}} days&lt;/p&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/mat-radio-button&gt;
        &lt;/mat-radio-group&gt;
        &lt;mat-divider </em>ngIf="!isLast"&gt;&lt;/mat-divider&gt;
    &lt;/div&gt;
    &lt;button mat-flat-button color="primary" [disabled]="shipmentsForm.invalid" (click)="setShipmentMethods()"&gt;PROCEED TO PAYMENT&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>

<p>This is a screenshot of the shipping methods page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88e82833-062d-4f85-9fcd-8173f28458bd/4-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><strong>Payments Component</strong></p>
<p>In this component, the user clicks the payment button if they wish to proceed to pay for their order with Paypal. The <code>approvalUrl</code> is the Paypal link that the user is directed to when they click the button. </p>
<p>During initialization, we get the order with the payment source included using the <code>OrderService</code>. If a payment source is set, we get its id and retrieve the corresponding Paypal payment from the <code>PaypalPaymentService</code>. The Paypal payment will contain the approval url. If no payment source has been set, we update the order with Paypal as the preferred payment method. We then proceed to create a new Paypal payment for the order using the <code>PaypalPaymentService</code>. From here, we can get the approval url from the newly created order. </p>
<p>Lastly, when the user clicks the button, they are redirected to Paypal where they can approve the purchase. </p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-payment',
  templateUrl: './payment.component.html',
  styleUrls: ['./payment.component.css']
})
export class PaymentComponent implements OnInit {
  approvalUrl: string = '';

  constructor(
    private orders: OrderService,
    private cart: CartService,
    private router: Router,
    private payments: PaypalPaymentService
  ) { }

  ngOnInit() {
    const orderId = this.cart.orderId;

    this.orders.getOrder(orderId, GetOrderParams.paymentSource)
      .pipe(
        concatMap((order: Order) =&gt; {
          const paymentSourceId = order.paymentSource?.id;

          const paymentMethod = order.availablePaymentMethods?.filter(
            (method) =&gt; method.paymentSourceType == 'paypal_payments'
          )[0];

          return iif(
            () =&gt; paymentSourceId ? true : false,
            this.payments.getPaypalPayment(paymentSourceId || ''),
            this.orders.updateOrder({
              id: orderId,
              paymentMethodId: paymentMethod?.id
            }, [UpdateOrderParams.paymentMethod])
              .pipe(concatMap(
                order =&gt; this.payments.createPaypalPayment({
                  orderId: orderId,
                  cancelUrl: <code>${environment.clientUrl}/cancel-payment</code>,
                  returnUrl: <code>${environment.clientUrl}/place-order</code>
                })
              ))
          );
        }))
      .subscribe(
        paypalPayment =&gt; this.approvalUrl = paypalPayment?.approvalUrl || '',
        err =&gt; this.router.navigateByUrl('/error')
      );
  }

  navigateToPaypal() {
    window.location.href = this.approvalUrl;
  }
}</code></pre>
</div>

<p>Here is its template.</p>
<div>
<pre><code>&lt;app-simple-page number="5" title="Payment" subtitle="Pay for your order" buttonText="PROCEED TO PAY WITH PAYPAL" icon="point_of_sale" (buttonEvent)="navigateToPaypal()" [buttonDisabled]="approvalUrl.length ? false : true"&gt;&lt;/app-simple-page&gt;</code></pre>
</div>

<p>Here’s what the payments page will look like.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e95b6832-2acf-422c-88a9-35d1f22bbd4d/19-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><strong>Cancel Payment Component</strong></p>
<p>Paypal requires a cancel payment page. This component serves this purpose. This is its template.</p>
<div>
<pre><code>&lt;app-simple-page title="Payment cancelled" subtitle="Your Paypal payment has been cancelled" icon="money_off" buttonText="GO TO HOME" [centerText]="true" route="/"&gt;&lt;/app-simple-page&gt;</code></pre>
</div>

<p>Here’s a screenshot of the page.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8549e6ca-a031-4094-8c56-162f6d5efc8f/15-jamstack-e-commerce-site-angular-11-scull.png" /></p>
<p><strong>Place Order Component</strong></p>
<p>This is the last step in the checkout process. Here the user confirms that they indeed want to place the order and begin its processing. When the user approves the Paypal payment, this is the page they are redirected to. Paypal adds a payer id query parameter to the url. This is the user's Paypal Id. </p>
<p>When the component is initialized, we get the <code>payerId</code> query parameter from the url. The order is then retrieved using the <code>OrderService</code> with the payment source included. The id of the included payment source is used to update the Paypal payment with the payer id, using the <code>PaypalPayment</code> service. If any of these fail, the user is redirected to the error page. We use the <code>disableButton</code> property to prevent the user from placing the order until the payer Id is set. </p>
<p>When they click the place-order button, the order is updated with a <code>placed</code> status. Afterwhich the cart is cleared, a successful snack bar is displayed, and the user is redirected to the home page.</p>
<div>
<pre><code>@UntilDestroy({ checkProperties: true })
@Component({
  selector: 'app-place-order',
  templateUrl: './place-order.component.html',
  styleUrls: ['./place-order.component.css']
})
export class PlaceOrderComponent implements OnInit {
  disableButton = true;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private payments: PaypalPaymentService,
    private orders: OrderService,
    private cart: CartService,
    private snackBar: MatSnackBar
  ) { }

  ngOnInit() {
    this.route.queryParams
      .pipe(
        concatMap(params =&gt; {
          const payerId = params['PayerID'];
          const orderId = this.cart.orderId;

          return iif(
            () =&gt; payerId.length &gt; 0,
            this.orders.getOrder(orderId, GetOrderParams.paymentSource)
              .pipe(
                concatMap(order =&gt; {
                  const paymentSourceId = order.paymentSource?.id || '';

                  return iif(
                    () =&gt; paymentSourceId ? paymentSourceId.length &gt; 0 : false,
                    this.payments.updatePaypalPayment(paymentSourceId, payerId)
                  );
                })
              )
          );
        }))
      .subscribe(
        () =&gt; this.disableButton = false,
        () =&gt; this.router.navigateByUrl('/error')
      );
  }

  placeOrder() {
    this.disableButton = true;

    this.orders.updateOrder({
      id: this.cart.orderId,
      place: true
    }, [UpdateOrderParams.place])
      .subscribe(
        () =&gt; {
          this.snackBar.open('Your order has been successfully placed.', 'Close', { duration: 3000 });
          this.cart.clearCart();
          setTimeout(() =&gt; this.router.navigateByUrl('/'), 4000);
        },
        () =&gt; {
          this.snackBar.open('There was a problem placing your order.', 'Close', { duration: 8000 });
          this.disableButton = false;
        }
      );
  }
}</code></pre>
</div>

<p>Here is the template and its <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/features/checkout/pages/place-order/place-order.component.css">associated styling</a>. </p>
<div>
<pre><code>&lt;app-simple-page title="Finalize Order" subtitle="Complete your order" [number]="'6'" icon="shopping_bag" buttonText="PLACE YOUR ORDER" (buttonEvent)="placeOrder()" [buttonDisabled]="disableButton"&gt;&lt;/app-simple-page&gt;</code></pre>
</div>

<p>Here is a screenshot of the page. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cb0f69f6-d5d6-4683-a59e-5f5cb1edf965/3-jamstack-e-commerce-site-angular-11-scull.png" /></p>
App Module
<p>All requests made to Commerce Layer, other than for authentication, need to contain a token. So the moment the app is initialized, a token is fetched from the <code>/oauth/token</code> route on the server and a session is initialized. We’ll use the <code>APP_INITIALIZER</code> token to provide an initialization function in which the token is retrieved. Additionally, we’ll use the <code>HTTP_INTERCEPTORS</code> token to provide the <code>OptionsInterceptor</code> we created earlier. Once all the modules are added the app module file should look something like this.</p>
<div>
<pre><code>@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    BrowserAnimationsModule,
    AuthModule,
    ProductsModule,
    CartModule,
    CheckoutModule,
    CoreModule
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: OptionsInterceptor,
      multi: true
    },
    {
      provide: APP_INITIALIZER,
      useFactory: (http: HttpClient) =&gt; () =&gt; http.post&lt;object&gt;(
        <code>${environment.apiUrl}/oauth/token</code>,
        { 'grantType': 'client_credentials' },
        { withCredentials: true }),
      multi: true,
      deps: [HttpClient]
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }</code></pre>
</div>

<h3>App Component</h3>
<p>We’ll modify the app component template and its styling which you can find <a href="https://github.com/zaracooper/lime-app/blob/main/src/app/app.component.css">here</a>.</p>
<pre><code>&lt;div id="page"&gt;
    &lt;app-header&gt;&lt;/app-header&gt;
    &lt;div id="content"&gt;
        &lt;router-outlet&gt;&lt;/router-outlet&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>

Conclusion
<p>In this article, we’ve covered how you could create an e-commerce Angular 11 app with Commerce Layer and Paypal. We’ve also touched on how to structure the app and how you could interface with an e-commerce API. </p>
<p>Although this app allows a customer to make a complete order, it is not by any means finished. There is so much you could add to improve it. For one, you may choose to enable item quantity changes in the cart, link cart items to their product pages, optimize the address components, add additional guards for checkout pages like the place-order page, and so on. This is just the starting point. </p>
<p>If you’d like to understand more about the process of making an order from start to finish, you could check out the Commerce Layer <a href="https://docs.commercelayer.io/guides">guides</a> and <a href="https://docs.commercelayer.io/api/">API</a>. You can view the code for this project at this <a href="https://github.com/zaracooper/lime-app">repository</a>.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Zara Cooper)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/959013b7-26f7-4620-af11-f26f306c1512/ecommerce-angular11-headless-paypal.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[There Is No Such Thing As A CSS Absolute Unit]]></title>
            <link>https://smashingmagazine.com/2021/07/css-absolute-units/</link>
            <guid>https://smashingmagazine.com/2021/07/css-absolute-units/</guid>
            <pubDate>Thu, 29 Jul 2021 10:30:00 GMT</pubDate>
            <description><![CDATA[What are absolute units? What are the differences between relative and absolute units, and how do we create accurate sizes on the web? In this article, Elad Shechter explains why CSS absolute units aren’t so absolute.]]></description>
            <content:encoded><![CDATA[<p>When we start learning CSS, we find that CSS units of measurement are categorized as relative or absolute. Absolute units are rooted in physical units, such as pixels, centimeters, and inches. But over the years, all absolute units in CSS have lost their connection to the physical world and have become different kinds of relative units, at least from the perspective of the web.</p>
<p>It’s important to note that there are still significant <strong>differences between relative and absolute units</strong>. CSS relative units are sized according to other style definitions defined by parent elements or are affected by the size of a parent container. As for absolute units, we will dive in and see how they are affected by other things, such as the screen and the device’s operating system.</p>
<p>Relative units include units such as <code>%</code>, <code>em</code>, <code>rem</code>, viewport units (<code>vw</code> and <code>vh</code>), and more. The most common absolute unit is the pixel (<code>px</code>). Besides that, we have the centimeter unit (<code>cm</code>) and the inches unit (<code>in</code>).</p>
<p>Now, let’s explore why CSS absolute units aren’t so absolute.</p>
CSS Pixels
<p>Pixels have been the most common unit of CSS, dating to the beginning of the web. In the old world of desktop screens, before we had any smartphones, the screen’s pixels were always equivalent to CSS pixels.</p>
<p>In 2007, for example, the most common desktop resolution was <code>1024</code>×<code>768</code> pixels. Back then, we would normally give our web pages a fixed width of <code>1000</code> pixels to fit the entire page, and the leftover pixels would be saved for the browser’s scrollbar.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/77e9ff8f-fe01-4bea-9ee1-f5007d7e69a1/8-css-absolute-units.jpg" /></p>
<h3>Smartphone Screens</h3>
<p>Smartphones brought another quiet evolution, starting the era of high-density screens. If we consider an iPhone 12 Pro, whose screen is <code>1170</code> pixels wide, we would count every <code>3</code> pixels on the device as <code>1</code> pixel in the CSS.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f130759d-ceb4-4a8e-806c-74c02feafbdc/10-css-units.png" /></p>
<p>When we size in mobile, we measure according to CSS pixels, not according to device pixels. To sum up:</p>
<ul>
<li>CSS pixel are <strong>logical pixels</strong>.</li>
<li>Device pixels are real <strong>physical pixels</strong>.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/da555c07-8491-4e32-9636-0a88fddc37c7/13-css-absolute-units.png" /></p>
<p>Okay, but what about desktop devices? Do they still work with the same old pixel calculation? Let’s talk about that.</p>
<h3>Desktop Screens In 2021</h3>
<p>High-density screens came to laptops several years later. The 2014 MacBooks got the first “retina” screens (retina being synonymous with high density).</p>
<p>These days, most laptops have a high-density screen.</p>
<p>Let’s consider <strong>MacBooks</strong>:</p>
<ul>
<li>The <strong>13.3-inch MacBook Pro</strong> has a screen that is <code>2560</code> pixels wide but that behaves like <code>1440</code> pixels. This means that every <code>1.778</code> physical pixels act like <code>1</code> logical pixel.</li>
<li>The <strong>16-inch MacBook Pro</strong> has a screen that is <code>3072</code> pixels wide but that behaves like <code>1792</code> pixels. This means that every <code>1.714</code> physical pixels act like <code>1</code> logical pixel.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/92725e4c-1d61-4206-b5d5-dcb8d0657237/5-css-absolute-units.png" /></p>
<p>Among <strong>PC laptops</strong>, I tested two 15.6-inch screens, one with full HD resolution and the other with 4K resolution. The results were interesting:</p>
<ul>
<li>The <strong>15.6-inch full-HD screen</strong> is <code>1920</code> pixels wide but behaves like <code>1536</code> pixels. This means that every <code>1.25</code> physical pixels act like <code>1</code> logical pixel.</li>
<li>The <strong>15.6-inch 4K screen</strong> is <code>3840</code> pixels wide but behaves, again, like <code>1536</code> pixels. This means that every <code>2.5</code> physical pixels act like <code>1</code> logical pixel.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9059155-7acf-437d-a846-83ead674e487/15-css-absolute-units.png" /></p>
<p>As you can see, the connection between the real physical (i.e. device) pixels and the CSS (i.e. logical) pixels has almost vanished.</p>
<h3>Screens Have Become Denser Over The Years</h3>
<p>In the past, if you looked closely at a screen, you could actually see its pixels. When the technology of screens improved, manufacturers started to create higher-density screens.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a04de8c-0c0b-42d0-a631-7aa477cd7581/example-device-pixels.png" /></p>
<p><strong>Recommended reading</strong>: <a href="https://www.smashingmagazine.com/2020/02/foldable-web-meaning/"><em>What Does A Foldable Web Actually Mean?</em></a></p>
<h3>Why Do We Calculate Logical Pixels Differently?</h3>
<p>Over the years, as screens became denser, we couldn’t fit more content in the same screen size merely because the screen has more pixels.</p>
<p>Think about it for a moment. Consider the <strong>Samsung Galaxy S21 Ultra</strong>. Its narrower dimension is <code>1440</code> physical pixels. We could easily fit it in a regular desktop screen. But if we did, the text would be small to the point of being unreadable. Because of this, we separate physical pixels from logical pixels.</p>
<p>Sizes in CSS (i.e. width and height), then, are calculated according to CSS logical pixels. Of course, we can <strong>use physical pixels to load high-density content</strong>, such as images and videos, like so:</p>
<pre><code>&lt;img src="image-size-1200px.jpg" width="300" &gt;
</code></pre>

<p>OK, CSS pixels aren’t equal to a device’s physical pixels. But we have centimeters and inches. Those are physical units connected to the physical world, right? Let’s check them out.</p>
CSS Inches And CSS Centimeters
<p>Wherever we use physical units like inches and centimeters, we know these are absolute units.</p>
<p>I had a thought that if CSS pixels aren’t equal to device pixels, then maybe it would be a good idea to use physical units such as inches and centimeters on the web. They are absolute units, right?</p>
<p>To be sure, I tested it. I created a box with a width and height of 1 centimeter and gave it a background color of red. I grabbed a real tape measure and got a surprise:</p>
<blockquote>A CSS centimeter isn’t equal to a physical centimeter.</blockquote>

<p>Here I am testing a CSS centimeter unit with a tape measure on a mid-2019 13-inch MacBook:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d78d3e39-e832-4ce5-8ce7-b440f646e478/6-css-absolute-units.jpg" /></p>
<p>The result is the same for CSS inches:</p>
<blockquote>A CSS inch isn’t equal to a physical inch.</blockquote>

<p>The same holds true for pica (<code>pc</code>) and millimeter (<code>mm</code>) units. These correspond to a part of either a CSS inch or a CSS centimeter, neither of which is connected to a real inch or a real centimeter.</p>
<h3>Why CSS Inches And Centimeters Aren’t Real Inches And Centimeters</h3>
<p>Since the 1980s, the PC market has determined a CSS inch to be equivalent to <code>96</code> pixels. This calculation of pixels was directly tied to the DPI/PPI (pixels per inch) standard of Microsoft’s Windows operating system for monitors at the time, the most common of which had a standard of <code>96</code> DPI.</p>
<p>This meant that <code>1</code> CSS inch would always be equivalent to <code>96</code> CSS pixels.</p>
<p>As for CSS centimeters, every centimeter is directly calculated from inches, which means that <code>1</code> inch is equivalent to <code>2.54</code> centimeters. This means that every <code>1</code> CSS centimeter will always be equal to <code>37.7952756</code> CSS pixels.</p>
<p>In other words: <code>1cm = 37.7952756px (96px / 2.54)</code>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/46791e27-5a92-4081-b9ee-512aa3a23d70/2-css-absolute-units.png" /></p>
<p>Because a CSS inch and a CSS centimeter are directly converted from CSS pixels, and because screens have gotten more DPIs over the years, we’ve gotten to the point where <strong>these units don’t represent what they’re supposed to represent on screens</strong>.</p>
CSS Point Unit
<p>The point (<code>pt</code>) unit is one of the less-recognized units of CSS. As <a href="https://en.wikipedia.org/wiki/Point_%28typography%29">Wikipedia states</a>:</p>
<blockquote>“In typography, the point is the smallest unit of measure. It is used for measuring font size, leading, and other items on a printed page.”</blockquote>

<p>The Wikipedia page shows a ruler with the point scale on the bottom and the inch scale on the top:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ffc7b6ca-e822-418d-90f8-b5d131f132b6/11-css-absolute-units.jpg" /></p>
<p>Before we get into why this unit isn’t really an absolute unit for the web, let’s go over the basic units of screens and printers.</p>
<h3>PPI And DPI</h3>
<p>We’ve already mentioned DPI, and you might have heard those terms in the past, but if you’ve never understood what exactly they’re all about, here is quick primer:</p>
<ul>
<li><strong>PPI</strong><br />Screens are built from a lot of small light dots, called pixels. To measure the density of pixels, we count the number of pixels that fit 1 inch, called pixels per inch (PPI).</li>
<li><strong>DPI</strong><br />Printers print color dots. To represent the density of printer dots, we count the number of dots that fit 1 inch of paper, called dots per inch (DPI).</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ac03533-30f7-4e8a-8fa1-8ad843a29bcd/7-css-absolute-units.png" /></p>
<p>In short, these are two ways to measure the density of visual information that we can fit in 1 inch.</p>
<ul>
<li><strong>PPI</strong>: pixels per inch (for screens)</li>
<li><strong>DPI</strong>: dots per inch (for printers)</li>
</ul>
<p>It is important to mention that the count of CSS pixels and dots in <code>1</code> inch are for both the width and the height. This means that on a screen of <code>96</code> PPI, a box with a height and width of <code>1</code> inch will have a total size of <code>9216</code> pixels (<code>96</code>×<code>96</code> px = <code>9216</code> px).</p>
<p>Here is a visual demonstration of <code>1</code> inch with a screen of <code>10</code> PPI:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bc351c3-f61d-4f40-999f-894cd485f0ea/3-css-absolute-units.png" /></p>
<p>Here are some examples of real calculations of CSS PPI:</p>
<table>
  <thead>
    <tr>
      <th>CSS Resolution<br />(Pixels)</th>
      <th>CSS PPI</th>
      <th>CSS Inches<br />(width and height)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>96x96</td>
      <td>96</td>
      <td>1×1</td>
    </tr>
    <tr>
      <td>141×141</td>
      <td>141</td>
      <td>1×1</td>
    </tr>
  </tbody>
</table>

<h3>“DPI” For Screens</h3>
<p>Manufacturers of mobile and desktop devices prefer to express their screen measurements in DPI, not PPI. But don’t let that confuse you: <strong>It is always PPI for screens and DPI for printers</strong>.</p>
<h3>DPI/PPI Standards</h3>
<p>To represent all those dots and pixels, we have the point (<code>pt</code>) unit.</p>
<p>But the point unit of CSS derives from the default printer DPI, which, again, was decided in the 1980s and is equal to <code>72</code> DPI. This means that <code>1</code> inch of CSS always equals <code>72</code> points.</p>
<ul>
<li><code>1</code> inch = <code>72</code> points</li>
<li><code>1</code> point = <code>1/72</code>nd of <code>1</code> inch</li>
</ul>
<h3>Pixels For Web, Dots For Printers</h3>
<p>For the web, the DPI unit has no meaning. The web DPI is defined according to a different standard (<code>96</code> DPI), which we already talked about when we calculated a CSS inch and CSS centimeter. Because of this, there is no reason to use the point unit on the web.</p>
<p><strong>Note</strong>: <em><code>1</code> point isn’t equal to (CSS) pixels.</em></p>
<ul>
<li><code>1</code> point = <code>1.333</code> pixels</li>
<li><code>72</code> points = <code>1</code> inch</li>
<li><code>72</code> points = <code>96</code> pixels</li>
</ul>
Printers
<p>In this article, I mainly wanted to demonstrate why there aren’t any absolute units for the web. But what about using them for printers? Is there a reason to use CSS inches or centimeters or point units for printers?</p>
<h3>My Printing Test</h3>
<p>I ran a small test to check whether the 1980s standard of DPI works correctly on printers. I created two boxes: one with a width and height of <code>72</code> points, and the second one with a width and height of <code>1</code> inch.</p>
<p>I printed these two boxes on a laser printer that I have in my office. Here is my Codepen for testing points and inches for printers:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/259bc61e-861f-4cea-8646-9517a29a3cab/4-css-absolute-units.jpg" /></p>
<p>Printers are able to print more DPIs, but if we are working at <code>100%</code> zoom on the printer, then <code>72</code> points (or <code>1</code> inch) of CSS will equal a real physical inch.</p>
<p><strong>Reminder</strong>: <em>This article is more about the connection of absolute units to the web rather than to printers. Of course, the results might change on different types of printers.</em></p>
<p><strong>Recommended reading</strong>: <a href="https://www.smashingmagazine.com/2021/07/hsl-colors-css/"><em>Using HSL Colors In CSS</em></a></p>
Trying To Create Accurate Sizes On The Web
<p>If we look at the 16-inch MacBook Pro, which has a ratio of <code>1.714</code> physical pixels to every <code>1</code> CSS pixel, we can’t accurately predict sizes on the web.</p>
<p>If we try to guess the real device pixel ratio on the 16-inch MacBook Pro using JavaScript’s <code>window.devicePixelRatio</code>, it will return an incorrect ratio of <code>2</code>, instead of <code>1.714</code>. (And this is without taking into account the zoom state of the web browser and operating system.)</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6d2187ff-05d2-4721-941a-8aee1f433333/9-css-absolute-units.jpg" /></p>
Why We Need Real Absolute CSS Units
<p>When we want to define a fixed size for a sidebar element, we would use CSS pixels. But if you think about it, CSS pixels have no meaning these days. As we saw above, on most smartphones and desktops, CSS pixels don’t describe device pixels anymore.</p>
<p>Based on this, I believe <strong>we need actual physical units for CSS</strong> (like a real centimeter or inch unit) because CSS pixels no longer have any true meaning on the web.</p>
<p>It’s worth mentioning that Firefox had implemented an actual physical millimeter unit (<code>mozmm</code>), but removed it in version 59. I don’t know why they removed it. Perhaps it’s because so many things already depend on CSS pixels, such as responsive images and the <code>em</code> and <code>rem</code> units. If we tried to add a new physical measurement, maybe it would cause more problems than it solves.</p>
<p>It seems that web folk have gotten so used to thinking in pixels that, even though the CSS pixel unit has lost its connection to device pixels, we’ll keep using the unit.</p>
<p>And in case you still think that CSS pixels are an excellent unit of measurement, try to explain to a new web developer what this unit is actually measuring.</p>
<p>For now, we don’t have any real way to describe physical sizes in CSS.</p>
<p>So, the <strong>CSS pixel is the worst kind of absolute unit — except for all the others.</strong></p>
To Summarize
<p>At the beginning of this article, I said that the absolute CSS units have become like new kinds of relative units. We started with CSS pixels, and we saw the difference between CSS pixels and device pixels.</p>
<p>Then, we found that CSS inches and CSS centimeters are directly converted from CSS pixels and aren’t connected to real inches and centimeters. In the end, we talked about the point unit and, again, about how this unit has no absolute meaning for the web.</p>
<h3>Final Words</h3>
<p>That’s all. I hope you’ve enjoyed this article and learned from my experience. If you like this post, I would appreciate hearing about it and sharing it.</p>
<h3>References</h3>
<ul>
<li>“<a href="https://hacks.mozilla.org/2013/09/css-length-explained/">CSS Length Explained</a>”, Tim Chien, Robert Nyman, Mozilla Hacks</li>
<li>“<a href="https://en.wikipedia.org/wiki/Dots_per_inch">Dots Per Inch</a>”, Wikipedia</li>
<li>“<a href="https://en.wikipedia.org/wiki/Point_%28typography%29">Point (Typography)</a>”, Wikipedia</li>
<li>“<a href="https://www.w3.org/TR/css-values-3/">CSS Values and Units</a>”, W3C</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Elad Shechter)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6ee35630-bbe1-486c-8877-dacdd4b12869/css-absolute-units.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Creating An Accessible Dialog From Scratch]]></title>
            <link>https://smashingmagazine.com/2021/07/accessible-dialog-from-scratch/</link>
            <guid>https://smashingmagazine.com/2021/07/accessible-dialog-from-scratch/</guid>
            <pubDate>Wed, 28 Jul 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[Dialogs are everywhere in modern interface design (for good or for bad), and yet many of them are not accessible to assistive technologies. In this article, we will dig into how to create a short script to create accessible dialogs.]]></description>
            <content:encoded><![CDATA[<p>First of all, don’t do this at home. Do not write your own dialogs or a library to do so. There are plenty of them out there already that have been tested, audited, used and reused and you should prefer these ones over your own. <a href="https://a11y-dialog.netlify.app/">a11y-dialog</a> is one of them, but there are more (listed at the end of this article).</p>
<p>Let me take this post as an opportunity to remind you all to <strong>be cautious when using dialogs</strong>. It is tentalizing to address all design problems with them, especially on mobile, but there often are other ways to overcome design issues. We tend to quickly fall into using dialogs not because they are necessarily the right choice but because they are easy. They set aside screen estate problems by trading them for context switching, which is not always the right trade-off. The point is: consider whether a dialog is the right design pattern before using it.</p>
<p>In this post, we’re going to write <strong>a small JavaScript library for authoring accessible dialogs</strong> from the very beginning (essentially recreating a11y-dialog). The goal is to understand what goes into it. We’re not going to deal with styling too much, just the JavaScript part. We will use modern JavaScript for sake of simplicity (such as classes and arrow functions), but keep in mind that this code might not work in legacy browsers.</p>
<ol>
<li><a href="#defining-the-api">Defining the API</a></li>
<li><a href="#instantiating-the-dialog">Instantiating the dialog</a></li>
<li><a href="#showing-and-hiding">Showing and hiding</a></li>
<li><a href="#closing-with-overlay">Closing with overlay</a></li>
<li><a href="#closing-with-escape">Closing with escape</a></li>
<li><a href="#trapping-focus">Trapping focus</a></li>
<li><a href="#maintaining-focus">Maintaining focus</a></li>
<li><a href="#restoring-focus">Restoring focus</a></li>
<li><a href="#giving-an-accessible-name">Giving an accessible name</a></li>
<li><a href="#handling-custom-events">Handling custom events</a></li>
<li><a href="#cleaning-up">Cleaning up</a></li>
<li><a href="#bringing-it-all-together">Bring it all together</a></li>
<li><a href="#wrapping-up">Wrapping up</a></li>
</ol>
Defining The API
<p>First, we want to define how we’re going to use our dialog script. We are going to keep it as simple as possible to begin with. We give it the root HTML element for our dialog, and the instance we get has a <code>.show(..)</code> and a <code>.hide(..)</code> method.</p>
<pre><code>class Dialog {
  constructor(element) {}
  show() {}
  hide() {}
}
</code></pre>

Instantiating The Dialog
<p>Let’s say we have the following HTML:</p>
<pre><code>&lt;div id="my-dialog"&gt;This will be a dialog.&lt;/div&gt;
</code></pre>

<p>And we instantiate our dialog like this:</p>
<pre><code>const element = document.querySelector('#my-dialog')
const dialog = new Dialog(element)
</code></pre>

<p>There are a few things we need to do under the hood when instantiating it:</p>
<ul>
<li>Hide it so it’s hidden by default (<code>hidden</code>).</li>
<li>Mark it as a dialog for assistive technologies (<code>role="dialog"</code>).</li>
<li>Make the rest of the page inert when open (<code>aria-modal="true"</code>).</li>
</ul>
<pre><code>constructor (element) {
  // Store a reference to the HTML element on the instance so it can be used
  // across methods.
  this.element = element
  this.element.setAttribute('hidden', true)
  this.element.setAttribute('role', 'dialog')
  this.element.setAttribute('aria-modal', true)
}
</code></pre>

<p>Note that we could have added these 3 attributes in our initial HTML not to have to add them with JavaScript, but this way it’s out of sight, out of mind. Our script can make sure things will work as they should, regardless of whether we’ve thought about adding all our attributes or not.</p>
Showing And Hiding
<p>We have two methods: one to show the dialog and one to hide it. These methods won’t do much (for now) besides toggling the <code>hidden</code> attribute on the root element. We’re also going to maintain a boolean on the instance to quickly be able to assess if the dialog is shown or not. This will come in handy later.</p>
<pre><code>show() {
  this.isShown = true
  this.element.removeAttribute('hidden')
}

hide() {
  this.isShown = false
  this.element.setAttribute('hidden', true)
}
</code></pre>

<p>To avoid the dialog being visible before JavaScript kicks in and hides it by adding the attribute, it might be interesting to add <code>hidden</code> to the dialog directly in the HTML from the get go.</p>
<pre><code>&lt;div id="my-dialog" hidden&gt;This will be a dialog.&lt;/div&gt;
</code></pre>

Closing With Overlay
<p>Clicking outside of the dialog should close it. There are several ways to do so. One way could be to listen to all click events on the page and filter out those happening within the dialog, but that’s relatively complex to do.</p>
<p>Another approach would be to listen to click events on the overlay (sometimes called “backdrop”). The overlay itself can be as simple as a <code>&lt;div&gt;</code> with some styles.</p>
<p>So when opening the dialog, we need to bind click events on the overlay. We could give it an ID or a certain class to be able to query it, or we could give it a data attribute. I tend to favor these for behavior hooks. Let’s modify our HTML accordingly:</p>
<pre><code>&lt;div id="my-dialog" hidden&gt;
  &lt;div data-dialog-hide&gt;&lt;/div&gt;
  &lt;div&gt;This will be a dialog.&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Now, we can query the elements with the <code>data-dialog-hide</code> attribute within the dialog and give them a click listener that hides the dialog.</p>
<pre><code>constructor (element) {
  // … rest of the code
  // Bind our methods so they can be used in event listeners without losing the
  // reference to the dialog instance
  this._show = this.show.bind(this)
  this._hide = this.hide.bind(this)

  const closers = [...this.element.querySelectorAll('[data-dialog-hide]')]
  closers.forEach(closer =&gt; closer.addEventListener('click', this._hide))
}
</code></pre>

<p>The nice thing about having something quite generic like this is that we can use the same thing for the close button of the dialog as well.</p>
<pre><code>&lt;div id="my-dialog" hidden&gt;
  &lt;div data-dialog-hide&gt;&lt;/div&gt;
  &lt;div&gt;
    This will be a dialog.
    &lt;button type="button" data-dialog-hide&gt;Close&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>



Closing With Escape
<p>Not only should the dialog be hidden when clicking outside of it, but it also should be hidden when pressing Esc. When opening the dialog, we can bind a keyboard listener to the document, and remove it when closing it. This way, it only listens to key presses while the dialog is open instead of all the time.</p>
<pre><code>show() {
  // … rest of the code
  // Note: `_handleKeyDown` is the bound method, like we did for `_show`/`_hide`
  document.addEventListener('keydown', this._handleKeyDown)
}

hide() {
  // … rest of the code
  // Note: `_handleKeyDown` is the bound method, like we did for `_show`/`_hide`
  document.removeEventListener('keydown', this._handleKeyDown)
}

handleKeyDown(event) {
  if (event.key === 'Escape') this.hide()
}
</code></pre>



Trapping Focus
<p>Now that’s the good stuff. Trapping the focus within the dialog is kind of at the essence of the whole thing, and has to be the most complicated part (although probably not as complicated as you might think).</p>
<p>The idea is pretty simple: when the dialog is open, we listen for Tab presses. If pressing Tab on the last focusable element of the dialog, we programmatically move the focus to the first. If pressing Shift + Tab on the first focusable element of the dialog, we move it to the last one.</p>
<p>The function might look like this:</p>
<pre><code>function trapTabKey(node, event) {
  const focusableChildren = getFocusableChildren(node)
  const focusedItemIndex = focusableChildren.indexOf(document.activeElement)
  const lastIndex = focusableChildren.length - 1
  const withShift = event.shiftKey

  if (withShift &amp;&amp; focusedItemIndex === 0) {
    focusableChildren[lastIndex].focus()
    event.preventDefault()
  } else if (!withShift &amp;&amp; focusedItemIndex === lastIndex) {
    focusableChildren[0].focus()
    event.preventDefault()
  }
}
</code></pre>

<p>The next thing we need to figure out is how to get all the focusable elements of the dialog (<code>getFocusableChildren</code>). We need to query all the elements that can theoretically be focusable, and then we need to make sure they effectively are.</p>
<p>The first part can be done with <a href="https://github.com/KittyGiraudel/focusable-selectors">focusable-selectors</a>. It’s a teeny tiny package I wrote which provides this array of selectors:</p>
<pre><code>module.exports = [
  'a[href]:not([tabindex^="-"])',
  'area[href]:not([tabindex^="-"])',
  'input:not([type="hidden"]):not([type="radio"]):not([disabled]):not([tabindex^="-"])',
  'input[type="radio"]:not([disabled]):not([tabindex^="-"]):checked',
  'select:not([disabled]):not([tabindex^="-"])',
  'textarea:not([disabled]):not([tabindex^="-"])',
  'button:not([disabled]):not([tabindex^="-"])',
  'iframe:not([tabindex^="-"])',
  'audio[controls]:not([tabindex^="-"])',
  'video[controls]:not([tabindex^="-"])',
  '[contenteditable]:not([tabindex^="-"])',
  '[tabindex]:not([tabindex^="-"])',
]
</code></pre>

<p>And this is enough to get you 99% there. We can use these selectors to find all focusable elements, and then we can check every one of them to make sure it is actually visible on screen (and not hidden or something).</p>
<pre><code>import focusableSelectors from 'focusable-selectors'

function isVisible(element) {
  return element =&gt;
    element.offsetWidth ||
    element.offsetHeight ||
    element.getClientRects().length
}

function getFocusableChildren(root) {
  const elements = [...root.querySelectorAll(focusableSelectors.join(','))]

  return elements.filter(isVisible)
}
</code></pre>

<p>We can now update our <code>handleKeyDown</code> method:</p>
<pre><code>handleKeyDown(event) {
  if (event.key === 'Escape') this.hide()
  else if (event.key === 'Tab') trapTabKey(this.element, event)
}
</code></pre>

Maintaining Focus
<p>One thing that’s often overlooked when creating accessible dialogs is making sure the focus remains within the dialog even <em>after</em> the page has lost focus. Think of it this way: <strong>what happens if once the dialog is open?</strong> We focus the URL bar of the browser, and then start tabbing again. Our focus trap is not going to work, since it only preserves the focus within the dialog when it’s inside the dialog to begin with.</p>
<p>To fix that problem, we can bind a focus listener to the <code>&lt;body&gt;</code> element when the dialog is shown, and move the focus to the first focusable element within the dialog.</p>
<pre><code>show () {
  // … rest of the code
  // Note: `_maintainFocus` is the bound method, like we did for `_show`/`_hide`
  document.body.addEventListener('focus', this._maintainFocus, true)
}

hide () {
  // … rest of the code
  // Note: `_maintainFocus` is the bound method, like we did for `_show`/`_hide`
  document.body.removeEventListener('focus', this._maintainFocus, true)
}

maintainFocus(event) {
  const isInDialog = event.target.closest('[aria-modal="true"]')
  if (!isInDialog) this.moveFocusIn()
}

moveFocusIn () {
  const target =
    this.element.querySelector('[autofocus]') ||
    getFocusableChildren(this.element)[0]

  if (target) target.focus()
}
</code></pre>

<p>Which element to focus when opening the dialog is not enforced, and it could depend on which type of content the dialog displays. Generally speaking, there are a couple of options:</p>
<ul>
<li><strong>Focus the first element.</strong><br />This is what we do here, since it is made easier by the fact that we already have a <code>getFocusableChildren</code> function.</li>
<li><strong>Focus the close button.</strong><br />This is also a good solution, especially if the button is absolutely positioned relatively to the dialog. We can conveniently make this happen by placing our close button as the first element of our dialog. If the close button lives in the flow of the dialog content, at the very end, it could be a problem if the dialog has a lot of content (and therefore is scrollable), as it would scroll the content to the end on open.</li>
<li><a href="https://github.com/KittyGiraudel/a11y-dialog/issues/169"><strong>Focus the dialog itself</strong></a>.<br />This is not very common among dialog libraries, but it should also work (although it would require adding <code>tabindex="-1"</code> to it so that’s possible since a <code>&lt;div&gt;</code> element is not focusable by default).</li>
</ul>
<p>Note that we check whether there is an element with the <code>autofocus</code> HTML attribute within the dialog, in which case we would move the focus to it instead of the first item. </p>
Restoring Focus
<p>We’ve managed to successfully trap the focus within the dialog, but we forgot to move the focus inside the dialog once it opens. Similarly, we need to restore the focus back to the element that had it before the dialog was open.</p>
<p>When showing the dialog, we can start by keeping a reference to the element that has the focus (<code>document.activeElement</code>). Most of the time, this will be the button that was interacted with to open the dialog, but in rare cases where a dialog is opened programmatically, it could be something else.</p>
<pre><code>show() {
  this.previouslyFocused = document.activeElement
  // … rest of the code
  this.moveFocusIn()
}
</code></pre>

<p>When hiding the dialog, we can move the focus back to that element. We guard it with a condition to avoid a JavaScript error if the element somehow no longer exists (or <a href="https://github.com/KittyGiraudel/a11y-dialog/issues/108">if it was a SVG</a>):</p>
<pre><code>hide() {
  // … rest of the code
  if (this.previouslyFocused &amp;&amp; this.previouslyFocused.focus) {
    this.previouslyFocused.focus()
  }
}
</code></pre>

Giving An Accessible Name
<p>It is important our dialog has an accessible name, which is how it will be listed in the accessibility tree. There are a couple of ways to address it, one of which is to define a name in the <code>aria-label</code> attribute, but <a href="https://heydonworks.com/article/aria-label-is-a-xenophobe/"><code>aria-label</code> has issues</a>.</p>
<p>Another way is to have a title within our dialog (whether hidden or not), and to associate our dialog to it with the <code>aria-labelledby</code> attribute. It might look like this:</p>
<pre><code>&lt;div id="my-dialog" hidden aria-labelledby="my-dialog-title"&gt;
  &lt;div data-dialog-hide&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;h1 id="my-dialog-title"&gt;My dialog title&lt;/h1&gt;
    This will be a dialog.
    &lt;button type="button" data-dialog-hide&gt;Close&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>I guess we could make our script apply this attribute dynamically based on the presence of the title and whatnot, but I’d say this is just as easily solved by authoring proper HTML, to begin with. No need to add JavaScript for that.</p>
Handling Custom Events
<p>What if we want to react to the dialog being open? Or closed? There is currently no way to do it, but adding a small event system should not be too difficult. We need a function to register events (let’s call it <code>.on(..)</code>), and a function to unregister them (<code>.off(..)</code>).</p>
<pre><code>class Dialog {
  constructor(element) {
    this.events = { show: [], hide: [] }
  }
  on(type, fn) {
    this.events[type].push(fn)
  }
  off(type, fn) {
    const index = this.events[type].indexOf(fn)
    if (index &gt; -1) this.events[type].splice(index, 1)
  }
}
</code></pre>

<p>Then when showing and hiding the method, we’ll call all functions that have been registered for that particular event.</p>
<pre><code>class Dialog {
  show() {
    // … rest of the code
    this.events.show.forEach(event =&gt; event())
  }

  hide() {
    // … rest of the code
    this.events.hide.forEach(event =&gt; event())
  }
}
</code></pre>

Cleaning Up
<p>We might want to provide a method to clean up a dialog in case we’re done using it. It would be responsible for unregistering event listeners so they don’t last more than they should.</p>
<pre><code>class Dialog {
  destroy() {
    const closers = [...this.element.querySelectorAll('[data-dialog-hide]')]
    closers.forEach(closer =&gt; closer.removeEventListener('click', this._hide))

    this.events.show.forEach(event =&gt; this.off('show', event))
    this.events.hide.forEach(event =&gt; this.off('hide', event))
  }
}
</code></pre>

Bringing It All Together
<pre><code>import focusableSelectors from 'focusable-selectors'

class Dialog {
  constructor(element) {
    this.element = element
    this.events = { show: [], hide: [] }

    this._show = this.show.bind(this)
    this._hide = this.hide.bind(this)
    this._maintainFocus = this.maintainFocus.bind(this)
    this._handleKeyDown = this.handleKeyDown.bind(this)

    element.setAttribute('hidden', true)
    element.setAttribute('role', 'dialog')
    element.setAttribute('aria-modal', true)

    const closers = [...element.querySelectorAll('[data-dialog-hide]')]
    closers.forEach(closer =&gt; closer.addEventListener('click', this._hide))
  }

  show() {
    this.isShown = true
    this.previouslyFocused = document.activeElement
    this.element.removeAttribute('hidden')

    this.moveFocusIn()

    document.addEventListener('keydown', this._handleKeyDown)
    document.body.addEventListener('focus', this._maintainFocus, true)

    this.events.show.forEach(event =&gt; event())
  }

  hide() {
    if (this.previouslyFocused &amp;&amp; this.previouslyFocused.focus) {
      this.previouslyFocused.focus()
    }

    this.isShown = false
    this.element.setAttribute('hidden', true)

    document.removeEventListener('keydown', this._handleKeyDown)
    document.body.removeEventListener('focus', this._maintainFocus, true)

    this.events.hide.forEach(event =&gt; event())
  }

  destroy() {
    const closers = [...this.element.querySelectorAll('[data-dialog-hide]')]
    closers.forEach(closer =&gt; closer.removeEventListener('click', this._hide))

    this.events.show.forEach(event =&gt; this.off('show', event))
    this.events.hide.forEach(event =&gt; this.off('hide', event))
  }

  on(type, fn) {
    this.events[type].push(fn)
  }

  off(type, fn) {
    const index = this.events[type].indexOf(fn)
    if (index &gt; -1) this.events[type].splice(index, 1)
  }

  handleKeyDown(event) {
    if (event.key === 'Escape') this.hide()
    else if (event.key === 'Tab') trapTabKey(this.element, event)
  }

  moveFocusIn() {
    const target =
      this.element.querySelector('[autofocus]') ||
      getFocusableChildren(this.element)[0]

    if (target) target.focus()
  }

  maintainFocus(event) {
    const isInDialog = event.target.closest('[aria-modal="true"]')
    if (!isInDialog) this.moveFocusIn()
  }
}

function trapTabKey(node, event) {
  const focusableChildren = getFocusableChildren(node)
  const focusedItemIndex = focusableChildren.indexOf(document.activeElement)
  const lastIndex = focusableChildren.length - 1
  const withShift = event.shiftKey

  if (withShift &amp;&amp; focusedItemIndex === 0) {
    focusableChildren[lastIndex].focus()
    event.preventDefault()
  } else if (!withShift &amp;&amp; focusedItemIndex === lastIndex) {
    focusableChildren[0].focus()
    event.preventDefault()
  }
}

function isVisible(element) {
  return element =&gt;
    element.offsetWidth ||
    element.offsetHeight ||
    element.getClientRects().length
}

function getFocusableChildren(root) {
  const elements = [...root.querySelectorAll(focusableSelectors.join(','))]

  return elements.filter(isVisible)
}
</code></pre>

Wrapping Up
<p>That was quite something, but we eventually got there! Once again, I would advise against rolling out your own dialog library since it’s not the most straightforward and errors could be highly problematic for assistive technology users. But at least now you know how it works under the hood!</p>
<p>If you need to use dialogs in your project, consider using one of the following solutions (kind reminder that we have our <a href="https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/#accessible-modals">comprehensive list of accessible components</a> as well):</p>
<ul>
<li>Vanilla JavaScript implementations: <a href="https://a11y-dialog.netlify.app">a11y-dialog</a> by yours truly or <a href="https://github.com/scottaohara/accessible_modal_window">aria-modal-dialog</a> by Scott O’Hara.</li>
<li>React implementations: <a href="https://github.com/KittyGiraudel/react-a11y-dialog">react-a11y-dialog</a> by yours truly again, <a href="https://reach.tech/dialog/">reach/dialog</a> from the Reach framework, or <a href="https://react-spectrum.adobe.com/react-aria/useDialog.html">@react-aria/dialog</a> from Adobe. You might be interested in <a href="https://github.com/KittyGiraudel/react-a11y-dialog/issues/58">this comparison of the 3 libraries</a>.</li>
<li>Vue implementations: <a href="https://github.com/morkro/vue-a11y-dialog">vue-a11y-dialog</a> by Moritz Kröger, <a href="https://github.com/renatodeleao/a11y-vue-dialog">a11y-vue-dialog</a> by Renato de Leão.</li>
</ul>
<p>Here are more things that could be added but were not for sake of simplicity:</p>
<ul>
<li>Support for alert-dialogs via the <code>alertdialog</code> role. Refer to the a11y-dialog <a href="https://a11y-dialog.netlify.app/advanced/alert-dialog">documentation on alert dialogs</a>.</li>
<li>Locking the ability to scroll while the dialog is open. Refer to the a11y-dialog <a href="https://a11y-dialog.netlify.app/advanced/scroll-lock">documentation on scroll lock</a>.</li>
<li>Support for the native HTML <code>&lt;dialog&gt;</code> element because it’s sub-par and inconsistent. Refer to the a11y-dialog <a href="https://a11y-dialog.netlify.app/advanced/dialog-element">documentation on the dialog element</a> and <a href="https://www.scottohara.me/blog/2019/03/05/open-dialog.html">this piece by Scott O’hara</a> for more information about why it’s not worth the trouble.</li>
<li>Support for nested dialogs because it’s questionable. Refer to the a11y-dialog <a href="https://a11y-dialog.netlify.app/advanced/nested-dialogs">documentation on nested dialogs</a>.</li>
<li>Consideration for closing the dialog on browser navigation. In some cases, it might make sense to close the dialog when pressing the back button of the browser.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Kitty Giraudel)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4ef51448-125a-4906-98f1-11af0e3fad58/accessible-dialog-from-scratch.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Global vs. Local Styling In Next.js]]></title>
            <link>https://smashingmagazine.com/2021/07/global-local-styling-nextjs/</link>
            <guid>https://smashingmagazine.com/2021/07/global-local-styling-nextjs/</guid>
            <pubDate>Tue, 27 Jul 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[Next.js has strong opinions about how to organize JavaScript but not CSS. How can we develop patterns that encourage best CSS practices while also following the framework’s logic? The answer is surprisingly simple &mdash; to write well-structured CSS that balances global and local styling concerns.]]></description>
            <content:encoded><![CDATA[<p>I have had a great experience using <a href="https://nextjs.org/">Next.js</a> to manage complex front-end projects. Next.js is opinionated about how to organize JavaScript code, but it doesn’t have built-in opinions about how to organize CSS.</p>
<p>After working within the framework, I have found a series of organizational patterns that I believe both conform to the guiding philosophies of Next.js and exercise best CSS practices. In this article, we’ll build a website (a tea shop!) together to demonstrate these patterns.</p>
<p><strong>Note</strong>: <em>You probably will not need prior Next.js experience, although it would be good to have a basic understanding of React and to be open to learning some new CSS techniques.</em></p>
Writing “Old-Fashioned” CSS
<p>When first looking into Next.js, we may be tempted to consider using some kind of CSS-in-JS library. Though there may be benefits depending on the project, CSS-in-JS introduces many technical considerations. It requires using a new external library, which adds to the bundle size. CSS-in-JS can also have a performance impact by causing additional renders and dependencies on the global state.</p>
<p><strong>Recommended reading</strong>: “<em><a href="https://calendar.perfplanet.com/2019/the-unseen-performance-costs-of-css-in-js-in-react-apps/">The Unseen Performance Costs Of Modern CSS-in-JS Libraries In React Apps</a>)” by Aggelos Arvanitakis</em></p>
<p>Furthermore, the whole point of using a library like Next.js is to statically render assets whenever possible, so it doesn’t make so much sense to write JS that needs to be run in the browser to generate CSS.</p>
<p>There are a couple of questions we have to consider when organizing style within Next.js:</p>
<blockquote>How can we fit within the conventions/best practices of the framework?<br /><br />How can we balance “global” styling concerns (fonts, colors, main layouts, and so on) with “local” ones (styles regarding individual components)?</blockquote>

<p>The answer I have come up with for the first question is to <strong>simply write good ol’ fashioned CSS</strong>. Not only does Next.js support doing so with no additional setup; it also yields results that are performant and static.</p>
<p>To solve the second problem, I take an approach that can be summarized in four pieces:</p>
<ol>
<li>Design tokens</li>
<li>Global styles</li>
<li>Utility classes</li>
<li>Component styles</li>
</ol>
<p>I’m indebted to Andy Bell’s idea of <strong>CUBE CSS</strong> (“Composition, Utility, Block, Exception”) here. If you haven’t heard of this organizational principle before, I recommended checking out its <a href="https://cube.fyi/">official site</a> or <a href="https://podcast.smashingmagazine.com/episodes/what-is-cube-css-with-andy-bell">feature on the Smashing Podcast</a>. One of the principles we will take from CUBE CSS is the idea that we should <em>embrace</em> rather than fear the CSS cascade. Let’s learn these techniques by applying them to a website project.</p>
Getting Started
<p>We’ll be building a tea store because, well, tea is tasty. We’ll start by running <code>yarn create next-app</code> to make a new Next.js project. Then, we’ll remove everything in the <code>styles/ directory</code> (it’s all sample code).</p>
<p><strong>Note</strong>: <em>If you want to follow along with the finished project, you can check it out <a href="https://github.com/ajdubovoy/smashing-nextjs-local-vs-global-style">here</a>.</em></p>
Design Tokens
<p>In pretty much any CSS setup, there’s a clear benefit to <strong>storing all globally shared values in variables</strong>. If a client asks for a color to change, implementing the change is a one-liner rather than a massive find-and-replace mess. Consequently, a key part of our Next.js CSS setup will be storing all site-wide values as <em>design tokens</em>.</p>
<p>We’ll use inbuilt CSS Custom Properties to store these tokens. (If you’re not familiar with this syntax, you can check out “<a href="https://www.smashingmagazine.com/2018/05/css-custom-properties-strategy-guide/">A Strategy Guide To CSS Custom Properties</a>”.) I should mention that (in some projects) I’ve opted to use SASS/SCSS variables for this purpose. I haven’t found any real advantage, so I usually only include SASS in a project if I find I need <em>other</em> SASS features (mix-ins, iteration, importing files, and so on). CSS custom properties, by contrast, also work with the cascade and can be changed over time rather than statically compiling. So, for today, <strong>let’s stick with plain CSS</strong>.</p>
<p>In our <code>styles/</code> directory, let’s make a new <em>design_tokens.css</em> file:</p>
<pre><code>:root {
  --green: #3FE79E;
  --dark: #0F0235;
  --off-white: #F5F5F3;

  --space-sm: 0.5rem;
  --space-md: 1rem;
  --space-lg: 1.5rem;

  --font-size-sm: 0.5rem;
  --font-size-md: 1rem;
  --font-size-lg: 2rem;
}</code></pre>

<p>Of course, this list can and will grow over time. Once we add this file, we need to hop over to our <em>pages/_app.jsx</em> file, which is the main layout for all our pages, and add:</p>
<pre><code>import '../styles/design_tokens.css'</code></pre>

<p>I like to think of design tokens as the glue that maintains consistency across the project. We will reference these variables on a global scale, as well as within individual components, ensuring a unified design language.</p>
Global Styles
<p>Next up, let’s add a page to our website! Let’s hop into the <em>pages/index.jsx</em> file (this is our homepage). We’ll delete all the boilerplate and add something like:</p>
<pre><code>export default function Home() {
  return &lt;main&gt;
    &lt;h1&gt;Soothing Teas&lt;/h1&gt;

    &lt;p&gt;Welcome to our wonderful tea shop.&lt;/p&gt;

    &lt;p&gt;We have been open since 1987 and serve customers with hand-picked oolong teas.&lt;/p&gt;
  &lt;/main&gt;
}</code></pre>

<p>Unfortunately, it will look quite plain, so let’s set some <strong>global styles for basic elements</strong>, e.g. <code>&lt;h1&gt;</code> tags. (I like to think of these styles as “reasonable global defaults”.) We may override them in specific cases, but they’re a good guess as to what we will want if we don’t.</p>
<p>I’ll put this in the <em>styles/globals.css</em> file (which comes by default from Next.js):</p>
<pre><code>*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  color: var(--off-white);
  background-color: var(--dark);
}

h1 {
  color: var(--green);
  font-size: var(--font-size-lg);
}

p {
  font-size: var(--font-size-md);
}

p, article, section {
  line-height: 1.5;
}

:focus {
  outline: 0.15rem dashed var(--off-white);
  outline-offset: 0.25rem;
}
main:focus {
  outline: none;
}

img {
  max-width: 100%;
}</code></pre>

<p>Of course, this version is fairly basic, but my <em>globals.css</em> file doesn’t usually end up actually needing to get too large. Here, I style basic HTML elements (headings, body, links, and so on). There is no need to wrap these elements in React components or to constantly add classes just to provide basic style.</p>
<p>I also include any <strong>resets of default browser styles</strong>. Occasionally, I will have some site-wide layout style to provide a “sticky footer”, for example, but they only belong here if all pages share the same layout. Otherwise, it will need to be scoped inside individual components.</p>
<p>I always include some kind of <code>:focus</code> styling to <em>clearly</em> indicate interactive elements for keyboard users when focused. It’s best to make it an integral part of the site’s design DNA!</p>
<p>Now, our website is starting to shape up:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2e4f9a89-4301-4ac2-9782-ee34e5c943e6/1-global-vs-local-styling-nextjs.png" /></p>
Utility Classes
<p>One area where our homepage could certainly improve is that the text currently always extends to the sides of the screen, so let’s limit its width. We need this layout on this page, but I imagine that we might need it on other pages, too. This is a great use case for a utility class!</p>
<p>I try to <strong>use utility classes sparingly</strong> rather than as a replacement for just writing CSS. My personal criteria for when it makes sense to add one to a project are:</p>
<ol>
<li>I need it repeatedly;</li>
<li>It does one thing well;</li>
<li>It applies across a range of different components or pages.</li>
</ol>
<p>I think this case meets all three criteria, so let’s make a new CSS file <em>styles/utilities.css</em> and add:</p>
<pre><code>.lockup {
  max-width: 90ch;
  margin: 0 auto;
}</code></pre>

<p>Then let’s add import <code>'../styles/utilities.css'</code> to our <em>pages/_app.jsx</em>. Finally, let’s change the <code>&lt;main&gt;</code> tag in our pages/index.jsx to <code>&lt;main className="lockup"&gt;</code>.</p>
<p>Now, our page is coming together even more. Because we used the <code>max-width</code> property, we don’t need any media queries to make our layout mobile responsive. And, because we used the <code>ch</code> measurement unit — which equates to about the width of one character — our sizing is dynamic to the user’s browser font size.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6de3bb38-4872-4bf0-b49a-1851a89ee157/2-global-vs-local-styling-nextjs.png" /></p>
<p>As our website grows, we can continue adding more utility classes. I take a fairly utilitarian approach here: If I’m working and find I need another class for a color or something, I add it. I don’t add every possible class under the sun — it would bloat the CSS file size and make my code confusing. Sometimes, in larger projects, I like to break things up into a <code>styles/utilities/</code> directory with a few different files; it’s up to the needs of the project.</p>
<p>We can think of utility classes as our <strong>toolkit of common, repeated styling commands</strong> that are shared globally. They help prevent us from constantly rewriting the same CSS between different components.</p>
Component Styles
<p>We’ve finished our homepage for the moment, but we still need to build a piece of our website: the online store. Our goal here will be to display <strong>a card grid of all the teas we want to sell</strong>, so we’ll need to add some components to our site.</p>
<p>Let’s start off by adding a new page at <em>pages/shop.jsx</em>:</p>
<pre><code>export default function Shop() {
  return &lt;main&gt;
    &lt;div className="lockup"&gt;
      &lt;h1&gt;Shop Our Teas&lt;/h1&gt;
    &lt;/div&gt;

  &lt;/main&gt;
}</code></pre>

<p>Then, we’ll need some teas to display. We’ll include a name, description, and image (in the public/ directory) for each tea:</p>
<pre><code>const teas = [
  { name: "Oolong", description: "A partially fermented tea.", image: "/oolong.jpg" },
  // ...
]</code></pre>

<p><strong>Note</strong>: <em>This isn’t an article about <a href="https://nextjs.org/docs/basic-features/data-fetching">data fetching</a>, so we took the easy route and defined an array at the beginning of the file.</em></p>
<p>Next, we’ll need to define a component to display our teas. Let’s start by making a <code>components/</code> directory (Next.js doesn’t make this by default). Then, let’s add a <code>components/TeaList</code> directory. For any component that ends up needing more than one file, I usually put all the related files inside a folder. Doing so prevents our <code>components/</code> folder from getting unnavigable.</p>
<p>Now, let’s add our <em>components/TeaList/TeaList.jsx</em> file:</p>
<pre><code>import TeaListItem from './TeaListItem'

const TeaList = (props) =&gt; {
  const { teas } = props

  return &lt;ul role="list"&gt;
    {teas.map(tea =&gt;
      &lt;TeaListItem tea={tea} key={tea.name} /&gt;)}
  &lt;/ul&gt;
}

export default TeaList</code></pre>

<p>The purpose of this component is to iterate over our teas and to show a list item for each one, so now let’s define our <em>components/TeaList/TeaListItem.jsx</em> component:</p>
<pre><code>import Image from 'next/image'

const TeaListItem = (props) =&gt; {
  const { tea } = props

  return &lt;li&gt;
    &lt;div&gt;
      &lt;Image src={tea.image} alt="" objectFit="cover" objectPosition="center" layout="fill" /&gt;
    &lt;/div&gt;

  &lt;div&gt;
      &lt;h2&gt;{tea.name}&lt;/h2&gt;
      &lt;p&gt;{tea.description}&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
}

export default TeaListItem</code></pre>

<p>Note that we’re using Next.js’s built-in <a href="https://nextjs.org/docs/api-reference/next/image">image component</a>. I set the <code>alt</code> attribute to an empty string because the images are purely decorative in this case; we want to avoid bogging screen reader users down with long image descriptions here.</p>
<p>Finally, let’s make a <em>components/TeaList/index.js</em> file, so that our components are easy to import externally:</p>
<pre><code>import TeaList from './TeaList'
import TeaListItem from './TeaListItem'

export { TeaListItem }

export default TeaList</code></pre>

<p>And then, let’s plug it all together by adding import TeaList from <code>../components/TeaList</code> and a <code>&lt;TeaList teas={teas} /&gt;</code> element to our Shop page. Now, our teas will show up in a list, but it won’t be so pretty.</p>
<h3>Colocating Style With Components Through CSS Modules</h3>
<p>Let’s start off by styling our cards (the <code>TeaListLitem</code> component). Now, for the first time in our project, we’re going to want to add style that is specific to just one component. Let’s create a new file <em>components/TeaList/TeaListItem.module.css</em>.</p>
<p>You may be wondering about the module in the file extension. This is a <strong>CSS Module</strong>. Next.js supports CSS modules and includes some <a href="https://nextjs.org/docs/basic-features/built-in-css-support#adding-component-level-css">good documentation</a> on them. When we write a class name from a CSS module such as <code>.TeaListItem</code>, it will automatically get transformed into something more like <code>. TeaListItem_TeaListItem__TFOk_</code> with a bunch of extra characters tacked on. Consequently, <strong>we can use any class name we want</strong> without being concerned that it will conflict with other class names elsewhere in our site.</p>
<p>Another advantage to CSS modules is performance. Next.js includes a <a href="https://nextjs.org/docs/advanced-features/dynamic-import">dynamic import feature</a>. next/dynamic lets us lazy load components so that their code only gets loaded when needed, rather than adding to the whole bundle size. If we import the necessary local styles into individual components, then users can also <strong>lazy load the CSS for dynamically imported components</strong>. For large projects, we may choose to lazy load significant chunks of our code and only to load the most necessary JS/CSS upfront. As a result, I usually end up making a new CSS Module file for every new component that needs local styling.</p>
<p>Let’s start by adding some initial styles to our file:</p>
<pre><code>.TeaListItem {
  display: flex;
  flex-direction: column;
  gap: var(--space-sm);
  background-color: var(--color, var(--off-white));
  color: var(--dark);
  border-radius: 3px;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);
}
</code></pre>

<p>Then, we can import style from <code>./TeaListItem.module.css</code> in our <code>TeaListitem</code> component. The style variable comes in like a JavaScript object, so we can access this class-like <code>style.TeaListItem.</code></p>
<p><strong>Note</strong>: <em>Our class name doesn’t need to be capitalized. I’ve found that a convention of capitalized class names inside of modules (and lowercase ones outside) differentiates local vs. global class names visually.</em></p>
<p>So, let’s take our new local class and assign it to the <code>&lt;li&gt;</code> in our <code>TeaListItem</code> component:</p>
<pre><code>&lt;li className={style.TeaListComponent}&gt;
</code></pre>

<p>You may be wondering about the background color line (i.e. <code>var(--color, var(--off-white));</code>). What this snippet means is that <em>by default</em> the background will be our <code>--off-white</code> value. But, if we set a <code>--color</code> custom property on a card, it will override and choose that value instead.</p>
<p>At first, we’ll want all our cards to be <code>--off-white</code>, but we may want to change the value for individual cards later. This works very similarly to props in React. We can set a default value but create a slot where we can choose other values in specific circumstances. So, I encourage us to <strong>think of CSS custom properties like CSS’s version of props</strong>.</p>
<p>The style still won’t look great because we want to make sure that the images stay within their containers. Next.js’s Image component with the <code>layout="fill"</code> prop gets <code>position: absolute;</code> from the framework, so we can limit the size by putting in a container with position: relative;.</p>
<p>Let’s add a new class to our <em>TeaListItem.module.css</em>:</p>
<pre><code>.ImageContainer {
  position: relative;
  width: 100%;
  height: 10em;
  overflow: hidden;
}</code></pre>

<p>And then let’s add <code>className={styles.ImageContainer}</code> on the <code>&lt;div&gt;</code> that contains our <code>&lt;Image&gt;</code>. I use relatively “simple” names such as <code>ImageContainer</code> because we’re inside a CSS module, so we don’t have to worry about conflicting with the outside style.</p>
<p>Finally, we want to <strong>add a bit of padding</strong> on the sides of the text, so let’s add one last class and rely on the spacing variables we set up as design tokens:</p>
<pre><code>.Title {
  padding-left: var(--space-sm);
  padding-right: var(--space-sm);
}</code></pre>

<p>We can add this class to the <code>&lt;div&gt;</code> that contains our name and description. Now, our cards don’t look so bad:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/febdc946-791e-4e0f-881b-4b5240f03e46/3-global-vs-local-styling-nextjs.png" /></p>
<h3>Combining Global And Local Style</h3>
<p>Next, we want to have our cards show in a grid layout. In this case, we’re just at the border between local and global styles. We could certainly code our layout directly on the <code>TeaList</code> component. But, I could also imagine that having <strong>a utility class that turns a list into a grid layout</strong> could be useful in several other places.</p>
<p>Let’s take the global approach here and add a new utility class in our <em>styles/utilities.css</em>:</p>
<pre><code>.grid {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(var(--min-item-width, 30ch), 1fr));
  gap: var(--space-md);
}</code></pre>

<p>Now, we can add the <code>.grid</code> class on any list, and we’ll get an automatically responsive grid layout. We can also change the <code>--min-item-width</code> custom property (by default <code>30ch</code>) to change the minimum width of each element.</p>
<p><strong>Note</strong>: <em>Remember to think of custom properties like props! If this syntax looks unfamiliar, you can check out “<a href="https://css-tricks.com/intrinsically-responsive-css-grid-with-minmax-and-min/">Intrinsically Responsive CSS Grid With <code>minmax()</code> And <code>min()</code></a>” by Chris Coyier.</em></p>
<p>As we’ve written this style globally, it doesn’t require any fanciness to add <code>className="grid"</code> onto our <code>TeaList</code> component. But, let’s say we want to couple this global style with some additional local store. For example, we want to bring a bit more of the “tea aesthetic” in and to make every other card have a green background. All we’d need to do is make a new <em>components/TeaList/TeaList.module.css</em> file:</p>
<pre><code>.TeaList &gt; :nth-child(even) {
  --color: var(--green);
}</code></pre>

<p>Remember how we made a <code>--color custom</code> property on our <code>TeaListItem</code> component? Well, now we can set it under specific circumstances. Note that we can still use child selectors within CSS modules, and it doesn’t matter that we’re selecting an element that is styled inside a different module. So, we can also use our local component styles to affect child components. This is a feature rather than a bug, as it allows us to <strong>take advantage of the CSS cascade</strong>! If we tried to replicate this effect some other way, we’d likely end up with some kind of JavaScript soup rather than three lines of CSS.</p>
<p>Then, how can we keep the global <code>.grid</code> class on our <code>TeaList</code> component while also adding the local <code>.TeaList</code> class? This is where the syntax can get a bit funky because we have to access our <code>.TeaList</code> class out of the CSS module by doing something like <code>style.TeaList</code>.</p>
<p>One option would be to use string interpolation to get something like:</p>
<pre><code>&lt;ul role="list" className={`${style.TeaList} grid`}&gt;</code></pre>

<p>In this small case, this might be good enough. If we’re mixing-and-matching more classes, I find that this syntax makes my brain explode a bit, so I will sometimes opt to use the classnames library. In this case, we end up with a more sensible-looking list:</p>
<pre><code>&lt;ul role="list" className={classnames(style.TeaList, "grid")}&gt;</code></pre>

<p>Now, we’ve finished up our Shop page, and we’ve made our <code>TeaList</code> component take advantage of <em>both</em> global and local styles.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/326feeee-76aa-4389-8be3-56e23587e5ba/4-global-vs-local-styling-nextjs.png" /></p>
A Balancing Act
<p>We’ve now built our tea shop using only plain CSS to handle the styling. You may have noticed that we did not have to spend ages dealing with custom Webpack setups, installing external libraries, and so on. That’s because of the patterns that we’ve used work with Next.js out of the box. Furthermore, they <strong>encourage best CSS practices</strong> and fit naturally into the Next.js framework architecture.</p>
<p>Our CSS organization consisted of four key pieces:</p>
<ol>
<li>Design tokens,</li>
<li>Global styles,</li>
<li>Utility classes,</li>
<li>Component styles.</li>
</ol>
<p>As we continue building our site, our list of design tokens and utility classes will grow. Any styling that doesn’t make sense to add as a utility class, we can add into component styles using CSS modules. As a result, we can find a continuous balance between local and global styling concerns. We can also <strong>generate performant, intuitive CSS code</strong> that grows naturally alongside our Next.js site.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Alexander Dubovoy)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1756133-541e-429d-82dd-fb6f3988ef56/global-local-styling-nextjs.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Gatsby Serverless Functions And The International Space Station]]></title>
            <link>https://smashingmagazine.com/2021/07/gatsby-serverless-functions-international-space-station/</link>
            <guid>https://smashingmagazine.com/2021/07/gatsby-serverless-functions-international-space-station/</guid>
            <pubDate>Mon, 26 Jul 2021 10:30:00 GMT</pubDate>
            <description><![CDATA[Gatsby recently announced the launch of “functions”. In this article, Paul Scanlon explains how to get the current location of the International Space Station (ISS) as it orbits the Earth in real-time using [Gatsby Functions](https://www.gatsbyjs.com/docs/reference/functions/) and then display it on a 3D interactive globe using [React Three Fibre](https://github.com/pmndrs/react-three-fiber).]]></description>
            <content:encoded><![CDATA[<p><a href="https://www.gatsbyjs.com/">Gatsby</a> recently announced the launch of Functions which opens up a new dimension of possibilities — and I for one couldn’t be more excited! With Gatsby now providing Serverless Functions on <a href="https://www.gatsbyjs.com/products/cloud/">Gatsby Cloud</a> (and Netlify also providing support via <a href="https://www.npmjs.com/package/@netlify/plugin-gatsby">@netlify/plugin-gatsby</a>), the framework that was once misunderstood to be “just for blogs” is now more than ever, (in my opinion) the most exciting technology provider in the <a href="https://jamstack.org/">Jamstack</a> space.</p>
<p>The demo in this article is the result of a recent project I worked on where I needed to plot geographical locations around a 3D globe and I thought it might be fun to see if it were possible to use the same technique using off-planet locations. Spoiler alert: It’s possible! Here’s a <a href="https://smashingmagazinewhereisiss.gatsbyjs.io">sneak peek of what I’ll be talking about in this post</a>, or if you prefer to jump ahead, the finished code can be found <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss">here</a>.</p>
Getting Started
<p>With Gatsby Functions, you can create more dynamic applications using techniques typically associated with client-side applications by adding an <code>api</code> directory to your project and exporting a function, e.g.</p>
<pre><code>|-- src
  |-- api
     -- some-function.js
  |-- pages
</code></pre>

<pre><code>// src/api/some-function.js
export default function handler(req, res) {
  res.status(200).json({ hello: `world` })
}
</code></pre>

<p>If you already have a Gatsby project setup, great! but do make sure you’ve upgraded Gatsby to at least version <code>v3.7</code></p>
<pre><code>npm install gatsby@latest --save
</code></pre>

<p>If not, then feel free to clone my absolute bare-bones Gatsby starter repo: <a href="https://github.com/PaulieScanlon/mr-minimum">mr-minimum</a>.</p>
<p>Before I can start using Gatsby Functions to track the International Space Station, I first need to create a globe for it to orbit. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a040d24b-f65e-4eef-9e7e-7c914e22bb1d/featured-image.jpg" /></p>
<h3>Step 1: Building The 3D Interactive Globe</h3>
<p>I start by setting up a 3D interactive globe which can be used later to plot the current ISS location. </p>
<h4>Install Dependencies</h4>
<pre><code>npm install @react-three/fiber @react-three/drei three three-geojson-geometry axios --save
</code></pre>

<h4>Create The Scene</h4>
<p>Create a new file in <code>src/components</code> called <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/components/three-scene.js">three-scene.js</a></p>
<pre><code>// src/components/three-scene.js
import React from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';

const ThreeScene = () =&gt; {
  return (
    &lt;Canvas
      gl={{ antialias: false, alpha: false }}
      camera={{
        fov: 45,
        position: [0, 0, 300]
      }}
      onCreated={({ gl }) =&gt; {
        gl.setClearColor('#ffffff');
      }}
      style={{
        width: '100vw',
        height: '100vh',
        cursor: 'move'
      }}
    &gt;
      &lt;OrbitControls enableRotate={true} enableZoom={false} enablePan={false} /&gt;
    &lt;/Canvas&gt;
  );
};

export default ThreeScene;
</code></pre>

<p>The above sets up a new <code>&lt;Canvas /&gt;</code> element and can be configured using props exposed by React Three Fibre.</p>
<p>Elements that are returned as children of the canvas component will be displayed as part of the 3D scene. You’ll see above that I’ve included <code>&lt;OrbitControls /&gt;</code> which adds touch/mouse interactivity allowing users to rotate the scene in 3D space</p>
<p>Ensure <code>ThreeScene</code> is imported and rendered on a page somewhere in your site. In my example repo I’ve added <code>ThreeScene</code> to <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/pages/index.js">index.js</a>:</p>
<pre><code>// src/pages/index.js
import React from 'react';

import ThreeScene from '../components/three-scene';

const IndexPage = () =&gt; {
  return (
    &lt;main&gt;
      &lt;ThreeScene /&gt;
    &lt;/main&gt;
  );
};

export default IndexPage;
</code></pre>



<p>This won’t do much at the moment because there’s nothing to display in the scene. Let’s correct that!</p>
<h4>Create The Sphere</h4>
<p>Create a file in <code>src/components</code> called <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/components/three-sphere.js">three-sphere.js</a>:</p>
<pre><code>// src/components/three-sphere.js
import React from 'react';

const ThreeSphere = () =&gt; {
  return (
    &lt;mesh&gt;
      &lt;sphereGeometry args={[100, 32, 32]} /&gt;
      &lt;meshBasicMaterial color="#f7f7f7" transparent={true} opacity={0.6} /&gt;
    &lt;/mesh&gt;
  );
};

export default ThreeSphere;
</code></pre>

<p>If the syntax above looks a little different to that of the <a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene">Three.js docs</a> it’s because React Three Fibre uses a declarative approach to using Three.js in React. </p>
<p>A good explanation of how constructor arguments work in React Three Fibre can be seen in the docs here: <a href="https://docs.pmnd.rs/react-three-fiber/getting-started/your-first-scene#constructor-arguments">Constructor arguments</a></p>
<p>Now add <code>ThreeSphere</code> to <code>ThreeScene</code>:</p>
<pre><code>// src/components/three-scene.js
import React from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';

+ import ThreeSphere from './three-sphere';

const ThreeScene = () =&gt; {
  return (
    &lt;Canvas
      gl={{ antialias: false, alpha: false }}
      camera={{
        fov: 45,
        position: [0, 0, 300]
      }}
      onCreated={({ gl }) =&gt; {
        gl.setClearColor('#ffffff');
      }}
      style={{
        width: '100vw',
        height: '100vh',
        cursor: 'move'
      }}
    &gt;
      &lt;OrbitControls enableRotate={true} enableZoom={false} enablePan={false} /&gt;
+      &lt;ThreeSphere /&gt;
    &lt;/Canvas&gt;
  );
};

export default ThreeScene;
</code></pre>

<p>You should now be looking at something similar to the image below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09955dc1-9129-4269-ad1e-0de354c7ee24/three-sphere.jpg" /></p>
<p>Not very exciting, ay? Let’s do something about that!</p>
<h4>Create The Geometry (To Visualize The Countries Of Planet Earth)</h4>
<p>This next step requires the use of <a href="https://github.com/vasturiano/three-geojson-geometry">three-geojson-geometry</a> and a CDN resource that contains Natural Earth Data. You can take your pick from <a href="http://geojson.xyz">a full list of suitable geometries here</a>.</p>
<p>I’ll be using <a href="http://geojson.io/#map=1/-7/0">admin 0 countries</a>. I chose this option because it provides enough geometry detail to see each country, but not so much that it will add unnecessary strain on your computer’s GPU.</p>
<p>Now, create a file in <code>src/components</code> called <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/components/three-geo.js">three-geo.js</a>: </p>
<pre><code>// src/components/three-geo.js
import React, { Fragment, useState, useEffect } from 'react';
import { GeoJsonGeometry } from 'three-geojson-geometry';
import axios from 'axios';

const ThreeGeo = () =&gt; {
const [isLoading, setIsLoading] = useState(true);
  const [geoJson, setGeoJson] = useState(null);

  useEffect(() =&gt; {
    axios
      .get(
   'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_110m_admin_0_countries.geojson'
      )
      .then((response) =&gt; {
        setIsLoading(false);
        setGeoJson(response.data);
      })
      .catch((error) =&gt; {
        console.log(error);
        throw new Error();
      });
  }, []);

  return (
    &lt;Fragment&gt;
      {!isLoading ? (
        &lt;Fragment&gt;
          {geoJson.features.map(({ geometry }, index) =&gt; {
            return (
              &lt;lineSegments
                key={index}
                geometry={new GeoJsonGeometry(geometry, 100)}
              &gt;
                &lt;lineBasicMaterial color="#e753e7" /&gt;
              &lt;/lineSegments&gt;
            );
          })}
        &lt;/Fragment&gt;
      ) : null}
    &lt;/Fragment&gt;
  );
};

export default ThreeGeo;
</code></pre>

<p>There’s quite a lot going on in this file so I’ll walk you through it.</p>
<ol>
<li>Create an <code>isLoading</code> state instance using React hooks and set it to <code>true</code>. This prevents React from attempting to return data I don’t yet have. </li>
<li>Using a <code>useEffect</code> I request the geojson from the CloudFront CDN.</li>
<li>Upon successful retrieval I set the response in React state using <code>setGeoJson(...)</code> and set <code>isLoading</code> to <code>false</code></li>
<li>Using an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map</a> I iterate over the “features” contained within the geojson response and return <code>lineSegments</code> with <code>lineBasicMaterial</code> for each <code>geometry</code></li>
<li>I set the <code>lineSegments</code> <code>geometry</code> to the return value provided by <code>GeoJsonGeomtry</code> which is passed the “features” <code>geometry</code> along with a radius of <code>100</code>.</li>
</ol>
<p>(You may have noticed I’ve used the same radius of <code>100</code> here as I’ve used in the <code>sphereGeometry</code> <code>args</code> in <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/components/three-sphere.js">three-sphere.js</a>. You don’t have to set the radius to the same value but it makes sense to use the same radii for <code>ThreeSphere</code> and <code>ThreeGeo</code>.</p>
<p>If you’re interested to know more about how GeoJsonGeometry works, here’s the open-source repository for reference: <a href="https://github.com/vasturiano/three-geojson-geometry">https://github.com/vasturiano/three-geojson-geometry</a>. The repository has an <a href="https://github.com/vasturiano/three-geojson-geometry/tree/master/example">example</a> directory however, the syntax is slightly different from what you see here because the examples are written in vanilla JavaScript not React.</p>
<h4>Combine The Sphere And Geometry</h4>
<p>Now it’s time to overlay the geometry on top of the blank sphere: Add <code>ThreeGeo</code> to <code>ThreeScene</code></p>
<pre><code>// src/components/three-scene.js
import React from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';

import ThreeSphere from './three-sphere';
+ import ThreeGeo from './three-geo';


const ThreeScene = () =&gt; {
  return (
    &lt;Canvas
      gl={{ antialias: false, alpha: false }}
      camera={{
        fov: 45,
        position: [0, 0, 300]
      }}
      onCreated={({ gl }) =&gt; {
        gl.setClearColor('#ffffff');
      }}
      style={{
        width: '100vw',
        height: '100vh',
        cursor: 'move'
      }}
    &gt;
      &lt;OrbitControls enableRotate={true} enableZoom={false} enablePan={false} /&gt;
      &lt;ThreeSphere /&gt;
+      &lt;ThreeGeo /&gt;
    &lt;/Canvas&gt;
  );
};
</code></pre>

<p>You should now be looking at something similar to the image below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a47128cb-92f7-4563-bfe8-0a73d06f4d43/three-geo.jpg" /></p>
<p>Now that’s slightly more exciting! </p>
<h3>Step 2: Building A Serverless Function</h3>
<h4>Create A Function</h4>
<p>This next step is where I use a Gatsby Function to request data from <a href="https://wheretheiss.at/">Where is ISS at</a>, which returns the current location of the International Space Station.</p>
<p>Create a file in <code>src/api</code> called <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/api/get-iss-location.js">get-iss-location.js</a>:</p>
<pre><code>// src/api/get-iss-location.js
const axios = require('axios');

export default async function handler(req, res) {
  try {
    const { data } = await axios.get(
      'https://api.wheretheiss.at/v1/satellites/25544'
    );

    res.status(200).json({ iss_now: data });
  } catch (error) {
    res.status(500).json({ error });
  }
}
</code></pre>

<p>This function is responsible for fetching data from <code>api.whereistheiss.at</code> and upon success will return the <code>data</code> and a <code>200</code> status code back to the browser.</p>
<p>The Gatsby engineers have done <strong>such</strong> an amazing job at simplifying serverless functions that the above is all you really need to get going, but here’s a little more detail about what’s going on. </p>
<ul>
<li>The function is a <strong>default</strong> export from a file named <code>get-iss-location.js</code>;</li>
<li>With Gatsby Functions the filename becomes the file path used in a client-side <code>get</code> request prefixed with <em>api</em>, e.g. <code>/api/get-iss-location</code>;</li>
<li>If the request to “Where is ISS at” is successful I return an <code>iss_now</code> object containing <code>data</code> from the Where is ISS at API and a status code of <code>200</code> back to the client;</li>
<li>If the request errors I send the <code>error</code> back to the client.</li>
</ul>
<h3>Step 3: Build The International Space Station</h3>
<h4>Creating The ISS Sphere</h4>
<p>In this next step, I use Gatsby Functions to position a sphere that represents the International Space Station as it orbits the globe. I do this by repeatedly calling an <code>axios.get</code> request from a <code>poll</code> function and setting the response in React state.</p>
<p>Create a file in <code>src/components</code> called <a href="https://github.com/PaulieScanlon/smashing-magazine-where-is-iss/blob/main/src/components/three-iss.js">three-iss.js</a></p>
<pre><code>// src/components/three-iss.js
import React, { Fragment, useEffect, useState } from 'react';
import * as THREE from 'three';
import axios from 'axios';

export const getVertex = (latitude, longitude, radius) =&gt; {
  const vector = new THREE.Vector3().setFromSpherical(
    new THREE.Spherical(
      radius,
      THREE.MathUtils.degToRad(90 - latitude),
      THREE.MathUtils.degToRad(longitude)
    )
  );
  return vector;
};

const ThreeIss = () =&gt; {
  const [issNow, setIssNow] = useState(null);

  const poll = () =&gt; {
    axios
      .get('/api/get-iss-location')
      .then((response) =&gt; {
        setIssNow(response.data.iss_now);
      })
      .catch((error) =&gt; {
        console.log(error);
        throw new Error();
      });
  };

  useEffect(() =&gt; {
    const pollInterval = setInterval(() =&gt; {
      poll();
    }, 5000);

    poll();
    return () =&gt; clearInterval(pollInterval);
  }, []);

  return (
    &lt;Fragment&gt;
      {issNow ? (
        &lt;mesh
          position={getVertex(
            issNow.latitude,
            issNow.longitude,
            120
          )}
        &gt;
          &lt;sphereGeometry args={[2]} /&gt;
          &lt;meshBasicMaterial color="#000000" /&gt;
        &lt;/mesh&gt;
      ) : null}
    &lt;/Fragment&gt;
  );
};

export default ThreeIss;
</code></pre>

<p>There’s quite a lot going on in this file so I’ll walk you through it.</p>
<ol>
<li>Create an <code>issNow</code> state instance using React hooks and set it to null. This prevents React from attempting to return data I don’t yet have;</li>
<li>Using a <code>useEffect</code> I create a JavaScript interval that calls the <code>poll</code> function every 5 seconds;</li>
<li>The <code>poll</code> function is where I request the ISS location from the Gatsby Function endpoint (<code>/api/get-iss-location</code>);</li>
<li>Upon successful retrieval, I set the response in React state using <code>setIssNow(...)</code>;</li>
<li>I pass the <code>latitude</code> and <code>longitude</code> onto a custom function called <code>getVertex</code>, along with a <code>radius</code>.</li>
</ol>
<p>You may have noticed that here I’m using a radius of <code>120</code>. This does differ from the <code>100</code> radius value used in <code>ThreeSphere</code> and <code>ThreeGeo</code>. The effect of the larger radius is to position the ISS higher up in the 3D scene, rather than at ground level — because that’s logically where the ISS would be, right?<br /><code>100</code> has the effect of the sphere and geometry overlapping to represent Earth, and <code>120</code> for the ISS has the effect of the space station “orbiting” the globe I’ve created. </p>
<p>One thing that took a bit of figuring out, at least for me, was how to use spherical two dimensional coordinates (latitude and longitude) in three dimensions, e.g. x,y,z. The concept has been explained rather well in <a href="https://observablehq.com/@mbostock/geojson-in-three-js">this post by Mike Bostock</a>. </p>
<p>The key to plotting lat / lng in 3D space lies within this formula… which makes absolutely no sense to me!</p>
<pre><code>x=rcos(ϕ)cos(λ)
y=rsin(ϕ)
z=−rcos(ϕ)sin(λ)
</code></pre>

<p>Luckily, <a href="https://threejs.org/">Three.js</a> has a set of <a href="https://threejs.org/docs/?q=Math#api/en/math/MathUtils">MathUtils</a> which I’ve used like this:</p>
<ul>
<li>Pass the <code>latitude</code>, <code>longitude</code> and <code>radius</code> into the <code>getVertex(...)</code> function</li>
<li>Create a new <code>THREE.Spherical</code> object from the above named parameters </li>
<li>Set the <code>THREE.Vector3</code> object using the Spherical values returned by the <code>setFromSpherical</code> helper function.</li>
</ul>
<p>These numbers can now be used to position elements in 3D space on their respective x, y, z axis — phew! Thanks, Three.js!</p>
<p>Now add <code>ThreeIss</code> to <code>ThreeScene</code>:</p>
<pre><code>import React from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';

import ThreeSphere from './three-sphere';
import ThreeGeo from './three-geo';
+ import ThreeIss from './three-iss';

const ThreeScene = () =&gt; {
  return (
    &lt;Canvas
      gl={{ antialias: false, alpha: false }}
      camera={{
        fov: 45,
        position: [0, 0, 300]
      }}
      onCreated={({ gl }) =&gt; {
        gl.setClearColor('#ffffff');
      }}
      style={{
        width: '100vw',
        height: '100vh',
        cursor: 'move'
      }}
    &gt;
      &lt;OrbitControls enableRotate={true} enableZoom={false} enablePan={false} /&gt;
      &lt;ThreeSphere /&gt;
      &lt;ThreeGeo /&gt;
+     &lt;ThreeIss /&gt;
    &lt;/Canvas&gt;
  );
};

export default ThreeScene;
</code></pre>

<p><em>Et voilà!</em> You should now be looking at something similar to the image below.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a1b5e051-b2cc-4037-817b-d87d8da08314/three-iss.jpg" /></p>
<p>The <code>poll</code> function will repeatedly call the Gatsby Function, which in turn requests the current location of the ISS and re-renders the React component each time a response is successful. You’ll have to watch carefully but the ISS will change position ever so slightly every 5 seconds.</p>
<p>The ISS is traveling at roughly 28,000 km/h and polling the Gatsby Function less often would reveal larger jumps in position. I’ve used 5 seconds here because that’s the most frequent request time as allowed by the Where is ISS at API</p>
<p>You might have also noticed that there’s no authentication required to request data from the Where is ISS at API. Meaning that yes, technically, I could have called the API straight from the browser, however, I’ve decided to make this API call server side using Gatsby Functions for two reasons:</p>
<ol>
<li>It wouldn’t have made a very good blog post about Gatsby Functions if i didn’t use them.</li>
<li>Who knows what the future holds for Where is ISS at, it might at some point require authentication and adding API keys to server side API requests is pretty straightforward, moreover this change wouldn’t require any updates to the client side code.</li>
</ol>
<h3>Step 4: Make It Fancier! (Optional)</h3>
<p>I’ve used the above approach to create this slightly more snazzy implementation: <a href="https://whereisiss.gatsbyjs.io">https://whereisiss.gatsbyjs.io</a>,  </p>
<p>In this site I’ve visualized the time delay from the <code>poll</code> function by implementing an Svg <code>&lt;circle /&gt;</code> countdown animation and added an extra <code>&lt;circle /&gt;</code> with a <code>stroke-dashoffset</code> to create the dashed lines surrounding it. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aab8652-11a0-4c0b-9d44-bd9239674696/where-is-iss.jpg" /></p>
<h3>Step 5: Apply Your New Geo Rendering Skills In Other Fun Ways!</h3>
<p>I recently used this approach for plotting geographical locations for the competition winners of 500 Bottles: <a href="https://500bottles.gatsbyjs.io">https://500bottles.gatsbyjs.io</a>.  A limited edition <strong>FREE</strong> swag giveaway I worked on with Gatsby’s marketing team. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f42ad133-2741-4263-b292-8bd555336044/500-bottles.jpg" /></p>
<p>You can read all about how this site was made on the Gatsby blog: <a href="https://www.gatsbyjs.com/blog/how-we-made-the-gatsby-500-bottles-giveaway/?utm_campaign=500-bottles">How We Made the Gatsby 500 Bottles Giveaway</a></p>
<p>In the 500 Bottles site I plot the geographical locations of each of the competition winners using the same method as described in <code>ThreeIss,</code> which allows anyone visiting the site to see where in the world the winners are.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b51e5320-34b0-492b-b762-b7cd532e9f8b/where-are-the-winners.jpg" /></p>
Closing Thoughts
<p>Gatsby Functions really open up a lot of possibilities for <a href="https://jamstack.org/">Jamstack</a> developers and never having to worry about spinning up or scaling a server removes so many problems leaving us free to think about new ways they can be used.</p>
<p>I have a number of ideas I’d like to explore using the <a href="https://github.com/r-spacex/SpaceX-API">V4 Space X API’s</a> so give me a follow if that’s your cup of tea: <a href="https://twitter.com/PaulieScanlon">@PaulieScanlon</a></p>
<h3>Further Reading</h3>
<ul>
<li>If you’re interested in learning more about Gatsby Functions, I highly recommend <a href="https://queen.raae.codes/">Summer Functions</a>, a five week course run by my good chum <a href="https://twitter.com/raae">Benedicte Raae</a>. </li>
<li>In a recent <strong>FREE</strong> Friday night Summer Functions webinar we created an emoji slot machine which was super fun:</li>
<li><a href="https://youtu.be/Md07LbVlxGI">Build an emoji slot machine with a #GatsbyJS Serverless Function · #GatsbySummerFunctions</a></li>
<li>You might also be interested in the following episode from our pokey internet show <a href="https://www.youtube.com/playlist?list=PL9W-8hhRoLoN7axEFJQ17rJvk2KTiM2GP">Gatsby Deep Dives</a> where <a href="https://twitter.com/kylemathews">Kyle Mathews</a> (creator of Gatsby) talks us through how Gatsby Functions work:  </li>
<li><a href="https://youtu.be/gG9E7ZYbhGo">Gatsby Serverless Functions 💝 — Are we live? with Kyle Mathews</a></li>
<li>If you’re interested in learning more about Gatsby I have a number of articles and tutorials on my blog: <a href="https://paulie.dev/">https://paulie.dev</a>, and please do come find me on Twitter if you fancy a chat: <a href="https://twitter.com/PaulieScanlon">@PaulieScanlon</a></li>
</ul>
<p>I hope you enjoyed this post. Ttfn 🕺!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Paul Scanlon)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c07c5052-399e-4aee-aa83-706eb1f0c1b6/gatsby-serverless-functions-international-space-station.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[A Guide To Attracting Clients To Your Agency]]></title>
            <link>https://smashingmagazine.com/2021/07/guide-attracting-clients-agency/</link>
            <guid>https://smashingmagazine.com/2021/07/guide-attracting-clients-agency/</guid>
            <pubDate>Fri, 23 Jul 2021 11:00:00 GMT</pubDate>
            <description><![CDATA[Many web design agencies consider it a badge of honor that they win work exclusively through word-of-mouth recommendations. In this article, Paul Boag explains why that is entirely the wrong attitude and what to do about it.]]></description>
            <content:encoded><![CDATA[<p>Without a doubt, word-of-mouth recommendation is an incredibly desirable way to win work. It requires zero marketing efforts and typically converts at a higher rate as your agency has been recommended. You should always be seeking to nurture word-of-mouth recommendations, and projects which come this way should make up a significant percentage of your income. However, you should never rely on word of mouth alone.</p>
<p>Word of mouth recommendation suffers from two distinct problems. First, it is a <strong>passive approach to marketing the services</strong> of your agency. It requires your clients to recommend you, and you can only do so much to encourage that. That means that when work dries up, you can take few active steps to bring in new work.</p>
<p>I encounter far too many agencies that find themselves panicking when the phone stops ringing because they have no mechanism in place to attract new clients.</p>
<p>The second problem with word-of-mouth recommendation is that <strong>it tends to attract similar clients</strong>. More often than not, those who recommend you do so to people working in similar companies and at a similar level. That is not a hard and fast rule, but this is what I usually see.</p>
<p>That is not a problem as long as you are happy with your clients. However, if you have any ambitions to win bigger or better clients, word of mouth will be a limiting factor.</p>
<p>You will need a way of reaching the specific kind of client you would like to work with, and that needs a strategy that word of mouth cannot supply. Unfortunately, it is just as easy to get that strategy wrong, and doing so can prove a waste of time and money.</p>
The Problem With Traditional Approaches
<p>It is not that most web design agencies are ignorant of other marketing approaches or that any of them are inherently bad. On the contrary, <a href="https://www.smashingmagazine.com/2021/04/web-design-clients-fast-part2/">in the second part</a> of <a href="https://www.smashingmagazine.com/2021/03/web-design-clients-fast-part1/">his two-part series on getting web design clients</a>, Stephen Roe breaks down the opportunities of these approaches.</p>
<p>The problem is that generally speaking, <strong>many struggle to get the returns</strong> that justify the investment in time and money. Let’s briefly look at the shortcomings of the many tactics available, starting with cold contacting potential clients.</p>
<h3>Cold Contacting</h3>
<p>Cold contacting a potential client is almost certainly the most demoralizing kind of marketing you can do. People hate to be contacted out of the blue, so the chances of winning work are poor.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f8bb697c-49a4-47d6-9cf1-e24d9bae8f64/1-guide-attracting-clients-agency.jpg" /></p>
<p>You also need to factor in that your timing has to be perfect. For example, you have to contact somebody when they are considering running a project you can help with; otherwise, they will quickly forget you.</p>
<p>Finally, you have no status in the eyes of the potential client. You are just a random supplier and so are unlikely to grab their attention.</p>
<p>You face a similar problem with advertising.</p>
<h3>Advertising</h3>
<p>When somebody stumbles across your ad, they don’t know who you are. You haven’t been recommended, and they probably haven’t heard of you through other sources. There is nothing much to make you stand out from the crowd.</p>
<p>In addition, advertising tends to attract smaller clients. That may be appropriate in your situation, but if you seek larger clients, you will find they tend to rely on <strong>recommendations and reputation</strong> rather than advertising.</p>
<p>Even if larger clients contact you via advertising, they may be including you to make up the numbers. Often, larger companies have procurement rules saying that employees need to go out to multiple suppliers even when they have a preferred one. That means that you could well waste your time tendering for a project with a low chance of success as they already have a preferred supplier.</p>
<p>That is also something that you can find when using a procurement website.</p>
<h3>Procurement Sites</h3>
<p>Larger organizations often post their invitations to tender on procurement websites. Although responding to these can lead to work, it suffers from the potential issue of you just "making up the numbers."</p>
<p>Smaller procurement sites like <a href="https://www.upwork.com">Upwork</a> or <a href="https://www.fiverr.com">Fiverr</a> can also work, but they are highly competitive and price-sensitive in these cases.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4120c46a-844e-4d7f-9faa-95b26585cbe0/2-guide-attracting-clients-agency.png" /></p>
<h3>Networking</h3>
<p>One way to stand out from the crowd and ensure you are in a stronger position when bidding for work is to establish a relationship with the client ahead of time.</p>
<p>Networking is an excellent way of doing this and is a reliable way of <strong>finding new work opportunities</strong>. The downside of networking is that it is time-consuming and doesn’t scale. That is why many turn to content marketing.</p>
<h3>Content Marketing</h3>
<p>Content marketing is the primary marketing activity that many digital agencies use, from blogging to social media posts.</p>
<p>On paper, this is a good move. After all, content marketing:</p>
<ul>
<li>Should lead to good search engine rankings if well written and targeted;</li>
<li>Educates clients about best practices;</li>
<li>Demonstrates to readers your expertise;</li>
<li>Builds a relationship with your followers at scale;</li>
<li>Offers the ability to reach a large number of potential clients.</li>
</ul>
<p>However, in practice, <strong>the results can be underwhelming</strong>. That is in part due to the success of content marketing. Because it has been so successful, it has become trendy and, as a result, highly competitive.</p>
<p>There is now so much content out there that to get somebody’s attention, let alone rank well on Google, is incredibly hard. Nevertheless, content marketing can still be one of the most effective techniques if it is appropriately focused.</p>
How To Focus Your Marketing
<p>Most agencies that utilize content marketing lack focus in their efforts. They post sporadically on a range of subjects with no consideration of the audience or their needs.</p>
<p>However, if you can rectify that, you will find that content marketing offers the key to a regular stream of potential leads. What is more, you can even decide exactly the kind of clients you want to attract by targeting your marketing efforts.</p>
<p>This targeting involves two steps, the first of which is defining your audience.</p>
<h3>Defining Your Audience</h3>
<p>Who is it you are trying to reach? Unfortunately, it is a fundamental question that seems to be regularly overlooked by freelancers and agencies as they blog or share content via social media. Too often, they seem to be writing to impress their peers rather than prospective clients.</p>
<p>Instead, <strong>picture your ideal client</strong>. Are they a small business owner or an employee of a multinational? Are they senior management or a lower-level employee who can influence that manager?</p>
<p>You might want to create an <a href="https://boagworld.com/usability/adapting-empathy-maps-for-ux-design/">empathy map</a> if that helps or even imagine that your marketing is being created for one of your existing clients you particularly enjoyed working with.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/34e14e89-4481-438f-ade5-76d8e3e9aac9/3-guide-attracting-clients-agency.jpg" /></p>
<p>However, don’t stop at the type of person, also <strong>think about the sector you want to target</strong>.</p>
<p>It is at this point you may start to feel uncomfortable. You might not want to focus on a single sector, and I can understand that.</p>
<p>If you don’t focus your marketing efforts, it will get lost in the ocean of noise online. Focusing it on a particular sector increases the chance of your chosen audience seeing it and of it being relevant to their needs.</p>
<p>Somebody will need to hear about you multiple times before they pay attention, so you need to focus your limited resources on a smaller group of people to ensure that happens.</p>
<p>But let me be clear, I am not suggesting you only do work in your chosen sector. I am only saying you need to <strong>focus your initial marketing efforts</strong> on a particular sector. You can always focus on another sector further down the line when you get bored, or the work dries up. Most importantly, you will certainly not turn away other work that walks through the door!</p>
<p>I recommend starting with a sector that you have experience in. Also, you are ideally looking for a sector that has some community around it. That is because it will make your audience easier to reach, and with any luck, they will start recommending your content to one another.</p>
<p> Look for a sector that has chat groups, blogs, events, and conferences. That is a good indication there is a strong community.</p>
<p>Once you have defined your audience, the next step is to understand their challenges.</p>
<h3>Identifying Your Audience’s Challenges</h3>
<p>The harsh truth is that nobody cares about you or your services. What they do care about is overcoming the challenges they face. Therefore, you need to know what those challenges are to position your services as helping address those.</p>
<p><strong>Find out what your audience’s goals are.</strong> What are they trying to achieve? Also, find out what pain points they experience? What are they struggling with daily? Talk to existing clients in your chosen sector or consider running a survey.</p>
<p>Once you are confident you understand the goals and pain points, you can understand how your services can help address them. For example, if a marketing manager of a service company is interested in generating more leads, you could position your UX services as encouraging more <strong>word-of-mouth recommendations</strong>. By contrast, if you are trying to reach a fundraising manager for a charity, you would position those same services as providing a way to encourage regular (rather than one-off) donations.</p>
<p>With a clear picture of your audience and their needs in your mind, now you can turn your attention to building a basic sales funnel.</p>
Building A Simple Sales Funnel
<p>Before we dive into the details of your sales funnel, let’s briefly recap what we need based on the shortcomings of other techniques. We need an approach that will:</p>
<ul>
<li>Demonstrate our expertise;</li>
<li>Help us to stand out from other suppliers;</li>
<li>Enable us to stay in contact with prospective clients until they are ready to buy;</li>
<li>Minimize the amount of effort we have to put in over the long term.</li>
</ul>
<p>To achieve this, we cannot just throw the occasional blog post online or turn up to a networking event once in a while. Instead, we need a structure, and a sales funnel provides that.</p>
<p>We are going to build <strong>a straightforward four-step funnel</strong>. We are going to:</p>
<ol>
<li>Attract the attention of potential clients;</li>
<li>Get their permission to stay in contact giving us time to build credibility;</li>
<li>Nurture that relationship until they are in a position to hire us;</li>
<li>Encourage your audience to contact you.</li>
</ol>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b9b333e6-a5e4-4ac8-8b94-648d8c7f4b7f/4-guide-attracting-clients-agency.png" /></p>
<p>Our sales funnel will be built around an email course that will show your prospective audience <strong>how to overcome their pain points</strong> and achieve their goals using the kinds of services we offer. For example, suppose you are trying to reach charity fundraisers, and you offer UX services. In that case, you might want to create a course on how to improve charity fundraising by creating an exceptional user experience.</p>
<p>We are going to make this an email course rather than a series of blog posts because we want people to subscribe to our newsletter. The email course gives us permission to email them periodically to make sure they don’t forget us.</p>
<p>Writing the email course is the hardest part, but not as hard as you might think. I recommend making it about six to eight emails long, and each email only needs to be approximately 800 words. So effectively, you are writing six to eight short blog posts.</p>
<p>If you hate writing, no problem. Make it a video course instead. Just make sure you email each lesson to people, so they have to sign up.</p>
<p>Although creating the email course feels like a lot of work, we can get a lot of value from it at all stages of our sales funnel once it is done.</p>
<p>So with that in mind, let’s look at each step in more depth.</p>
<h3>Attract Attention</h3>
<p>Step one is to attract the attention of potential clients. To achieve this, we will use all of the traditional marketing techniques we have already discussed:</p>
<ul>
<li>Writing posts for your blog, but using keywords that will perform well on our audience’s searches;</li>
<li>Writing guest posts for blogs that our target audience reads;</li>
<li>Speaking at the events our target audience attends;</li>
<li>Creating social media content tagged with appropriate hashtags for our audience;</li>
<li>Participating in communities our audience is involved in;</li>
<li>Even paid advertising if you wish.</li>
</ul>
<p>However, with our approach, there are two significant differences. First, we are only producing content that is <strong>focused on our audience</strong> and that we are confident should reach them. Second, every piece of content will also promote our email course and drive people to a landing page.</p>
<p>Now I know what you are thinking; this is a lot of work, especially in addition to creating the email course. However, it is not as bad as it appears because all of the above content can essentially be variations on the content we create for the email course.</p>
<p>For example, let’s say one of your email lessons was on using user experience design to improve conversion. You could rehash that into a guest post, social media posts, or even a talk at an industry event. Not only does this save yourself work, but it also ensures that the email course is relevant to the content you are releasing.</p>
<p>With any luck, your audience will see your content and then respond to the call to action. The next step is then to get their permission to maintain contact.</p>
<h3>Get Permission To Maintain Contact</h3>
<p>Your call to action will be to visit a landing page that explains to your audience what your email course is all about. It will promise your six-to-eight-part course (which I recommend you release weekly) plus a monthly newsletter where you share advice related to your services.</p>
<p>The inclusion of the monthly newsletter is essential; otherwise, subscribers may forget you after completing the course. On the other hand, writing a few hundred words once a month <strong>addressing some aspect of your audience’s needs</strong> shouldn’t be too demanding. Often it is just diving into one of the subjects in the email course in a bit more depth.</p>
<p>I won’t get into the nuances of <a href="https://www.smashingmagazine.com/2020/04/landing-page-design/">landing page design</a> here, but ensure that you focus both on what the email course covers and the benefits it will provide to anybody subscribing. Also, place particular importance on the fact that this email course has been designed for the specific audience you are trying to reach.</p>
<p>Finally, you may wish to <strong>encourage subscriptions</strong> by offering an additional incentive to people who subscribe on their first visit. For example, you may provide them with a "how to persuade the boss that user experience matters" downloadable guide.</p>
<p>When somebody subscribes, they should immediately receive the first part of the course and then receive subsequent parts every week. Most email marketing platforms will support this kind of functionality, but personally, I use <a href="https://convertkit.com">Convertkit</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/01ee6687-dead-4acc-9012-a6dc233ba999/5-guide-attracting-clients-agency.png" /></p>
<p>Once a subscriber has completed their email course, they should be migrated to your monthly newsletter.</p>
<h3>Nurture The Relationship</h3>
<p>As I have said numerous times in this post, it is essential to maintain contact with prospective clients to ensure they remember you when they need your services. Unfortunately, that may not happen within the six to eight weeks of your email course. Therefore, they need to continue to receive <strong>occasional emails</strong> from you, so you stay in the front of their mind.</p>
<p>These emails ensure prospective clients remember you and continually reinforce your expertise and credibility by providing valuable advice.</p>
<p>It is important to stress that these emails should <em>not</em> be promotional if you wish people to remain subscribed. Instead, these emails should provide advice that will help your subscribers achieve their goals and overcome their pain points. It is perfectly acceptable to reference previous projects you have worked on in this context but always remain focused on the needs of your audience.</p>
<p> Nobody is interested in your company or your latest case studies. They are interested in how you can help them.</p>
<h3>Encourage Contact</h3>
<p>Finally, where ever possible, encourage your subscribers to reach out to you. Ask them questions and encourage their feedback. It may even be appropriate to run the occasional "ask me anything" webinar exclusive to those on your mailing list.</p>
<p>Doing so enables you to start building a personal connection with some of your subscribers, further improving the chances of them hiring you in the future.</p>
Rinse And Repeat
<p>I am aware that all of this can feel like an intimidating amount of work. However, it becomes considerably easier over time. Once you have finished with one sector, you can repurpose your work for a second sector.</p>
<p>Even your email course can probably be used again for a different sector with some minor tweaks. Also, your ongoing newsletter will be the same no matter how many sectors you target.</p>
<p>Most importantly, the advantages of having an email list of prospective clients cannot be overstated. I have grown my mailing list to over 7,500 subscribers using this kind of approach, and I have reached the point where if I write about a specific topic, it almost always leads to work in that area.</p>
<p>That ability to generate new projects when required provides incredible peace of mind and <strong>ensures the long-term stability of your business</strong>. To my mind, this makes it worth taking more seriously and putting the work in. If you agree, you might want to check out Mike Monteiro’s excellent book "<a href="https://abookapart.com/products/design-is-a-job">Design Is A Job</a>" which explores selling your services alongside the other challenges of running your business.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Paul Boag)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d72d311-2839-48d2-8d23-dbe8951c4ab5/guide-attracting-clients-agency.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Adding Time To Your Schedule As A Professional]]></title>
            <link>https://smashingmagazine.com/2021/07/time-schedule-professional-trafft/</link>
            <guid>https://smashingmagazine.com/2021/07/time-schedule-professional-trafft/</guid>
            <pubDate>Thu, 22 Jul 2021 12:30:00 GMT</pubDate>
            <description><![CDATA[Are you running a business and have too many things going on at once? Meetings, bugs, customer feedback, new clients in addition to your already tight deadlines? Let’s face it, time management is hard, and it becomes even more difficult in the trying times we are in.]]></description>
            <content:encoded><![CDATA[<p>Many of us — myself included — may not realize how their time is spent each day. Some of the apps now available on iPhone or Android may help with some of the realization by telling us how much time we spend gaming, emailing or watching YouTube on our phone. This, however, may only capture a fraction of your day.</p>
<p>One of my favorite videos that I personally have watched three or four times, is a video by <a href="https://www.youtube.com/watch?v=lIW5jBrrsS0">Max Joseph</a> on how to read more. The techniques described in this video can be applied to all aspects of life despite its focus on reading more books.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c79d12f7-df6d-4308-b6f2-b3c2504cf7cf/1-time-scheduling.jpeg" /></p>
<p>In the image above, I have outlined three sample days which may or may not be from my own days. Each number above is the hour of the day from midnight to 23:59 while the square represents thirty-minute blocks. In my records for the entire day, I put one color code for my work hours and will have a separate diagram specifically to break up my work hours.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/246d9bba-6601-4ee2-9529-25dfba02e25b/2-time-scheduling.png" /></p>
<p>You can see that in the workday I’ve marked the dark blue as ‘getting tasks done’, which represented product design for my case. Next is meetings, and lastly is working on presentations. The purple, green, and yellow represent the same key as the entire day to reduce confusion.</p>
<p>Both of these time schedules similar to mine may be similar to what you’re experiencing today. Schedules are scattered and unorganized; this format is pretty much setting you up for failure.</p>
<p>Let’s now take a look at a breakdown on how our day is being spent at work:</p>
<table>
    <thead>
        <tr>
            <th>Category</th>
            <th>Time used</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Meetings</td>
            <td>44.44%</td>
        </tr>
        <tr>
            <td>Completing actual work</td>
            <td>22.22%</td>
        </tr>
        <tr>
            <td>Creating presentations</td>
            <td>16.66% </td>
        </tr>
        <tr>
            <td>Exercise/outdoors</td>
            <td>5.55%</td>
        </tr>
        <tr>
            <td>Cooking/Eating</td>
            <td>5.55%</td>
        </tr>
        <tr>
            <td>Games/Leisure</td>
            <td>5.55%</td>
        </tr>
    </tbody>
</table>

<h4>Meetings</h4>
<p>I think it’s safe to say we all despise meetings, yet they seem neverending. It’s times like these where I really appreciate the companies I’ve worked for that have the “It could have been an email or slack message” culture. In a way it gets people to start thinking about whether setting a meeting and taking people’s time is necessary — and if a meeting is a setup, a clear agenda needs to be presented before those invited to accept. <strong>Meetings are difficult when managing a schedule</strong> unless you are in a position or company that keeps meetings at a minimum.</p>
<p>We will revisit techniques later in this article on how to manage meetings, it may take some finesse on your part when first starting out but will have great results in the long run.</p>
<p><strong>Fun Fact</strong>: <em>I spent the time from mid-March to mid-April 2020 to see how many meetings were added to my schedule due to COVID-19 and remote working. Although it has leveled out over time, the beginning was horrendous. Nearly an entire week’s worth of time during that month was given to meetings, many of which could have been an email.</em></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c47f3fac-55bd-42b9-9187-2eab951095da/3-time-scheduling.jpeg" /></p>
<h3>Creating Goals</h3>
<p>Take a step back, take a deep breath and take a look at all the tasks you need to complete on a macro level. Let’s categorically divide our tasks, this may be by various roles or names of projects. As for how you continue, you may put categories in two columns: <strong>one for personal and one for work</strong>. (I personally find separating the two bits helps maintain the division between personal and work life.)</p>
<p>For my work goals, I have the following objectives:</p>
<ul>
<li>Outreach</li>
<li>Marketing</li>
<li>Networking</li>
<li>Market research</li>
<li>Design and development</li>
<li>Learning</li>
<li>Open time</li>
</ul>
<p>For my list, I have only categorized my work tasks and will leave you to it on completing the same for personal tasks separately.</p>
<p><strong>Learning</strong> is where I may do small online sessions, or attend conferences, read blog posts — anything to up my skills set. It is important to have this category to give yourself time to build skills. The worst thing you can do to yourself is become stagnate over time.</p>
<p><strong>Open time</strong> will allow you to substitute for any of the other categories, or take on some other side tasks. Depending on your schedule you may have it scattered throughout the week or all at once on a specific day — personally I try to have this every Tuesday and Thursday. </p>
<p>This list will differ based on your role or business model. If you have a team there may be a category for team management or team bonding. Week by week the priorities of these may change, and so each week the allocated time needs to be evaluated and scheduled accordingly.</p>
<h3>Organizing The Tasks</h3>
<p>Now that we have defined our categories — we need to put all of our tasks and backlog items into each category. For this part, I would continue using whatever tool you are most comfortable with. I personally prefer using <em>Microsoft To-Do</em> as it easily syncs to my calendar. But you may prepare with whatever method best works for you. Once the tasks are organized, be sure to prioritize them as you see fit.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a2171cc5-4b10-4932-a4c7-d1406a040b94/4-time-scheduling.png" /></p>
<h3>Planning The Week</h3>
<p>At the beginning of each week or the night before, it’s a good idea to plan what your goals are and what categories will help you reach those goals this week. For example, you may want to focus entirely on marketing, learning and outreach, so you may simply add these blocks to your calendar.</p>
<p><strong>Depending on your working style</strong>, you may decide to do each day by day, or split your day into halves or quarters. I personally prefer focusing half a day on specific objectives as two hours is often not enough time to get something substantial done.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75bfca56-7f2b-488f-b9eb-7fa00d930444/5-time-scheduling.png" /></p>
<p>From this, you may see now that our day when viewed in the previous square-block format looks much more organized and planned day to day.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/36e1eb5a-db5a-400b-90ba-a2be1e4c5179/6-time-scheduling.png" /></p>
<p>Meetings should hopefully be scheduled in the same blocks as they are related to — and try to enforce your schedule as much as possible. The open times are scheduled to show as Free, allowing for ad-hoc tasks and incoming client meetings during those blocks that may come in. It is important to have these blocks to allow for some flexibility as we don’t want to be too rigid.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/42259235-5254-41dc-b959-0777e567e479/7-8-time-scheduling.png" /></p>
<p>I add the tasks inside each block as details. This allows me to manage multi-day long tasks and it’s much easier to manage that way. You can see that I have my tasks categorized in the same way on the right — this way I can <strong>focus on what needs to get done</strong>. You can see I have subbed the sub-tasks bulleted out in the block that are listed in my tasks list.</p>
<p>If you have a meeting to review with your team — you can simply cascade the meetings with blocks. The calendar may start to look chaotic during busy times, but it’s an organized chaos.</p>
<h3>Backup Tasks</h3>
<p>Sometimes projects fall through, tasks finish earlier than expected, or a blocker. Utilizing this block plan allows us to grab tasks and stay focused on the same category rather than jumping to another category and having to change mindsets. Simply take on the next task available from that category to keep your momentum going.</p>
<p><strong>Tip</strong>: <em>I wouldn’t suggest over-booking a specific block with tasks, as it may make you lose focus or feel nothing is being accomplished. Instead, add two or three manageable tasks and when necessary add more to a block. If you are familiar with agile planning for teams — think of this as your personal sprint and agile planning, naturally with time, your skill in estimating the tasks you can complete in a time frame will improve. Maybe even have a reflection period much like a retro with your team or yourself if you are a one-man show like me.</em></p>
Clients And Services
<p>As much as we would love to have 100% control of our calendar, it’s just not possible. Many factors including clients and team members create conflicts in schedules. We have just discovered in the previous section how to manage schedules internally.</p>
<p>In many cases, we want to create a client-first experience, but we also don’t want to be spending too much time creating and managing schedules. With tools like <a href="https://trafft.com/?utm_source=smashingmagazine.com&amp;utm_medium=article&amp;utm_campaign=july21">Trafft</a> that have meeting scheduling software capabilities, we can easily set up our calendars to <strong>allow clients to book time with you directly</strong>. Of course, the last thing we want is another tool in the shed to manage, and Trafft has done a very clever job in automating much of the process including taking payments, managing services, and invoicing clients.</p>
<h3>Calendar Setup With Trafft</h3>
<p>The block calendar format I have mentioned previously goes hand in hand with <a href="https://trafft.com/?utm_source=smashingmagazine.com&amp;utm_medium=article&amp;utm_campaign=july21">Trafft</a>. You may have different types of services, or prioritize customers depending on different criteria. With Trafft we can <strong>easily create services and allocate specific times</strong> those services may be booked — and if your calendar is connected the booking times will block out times unavailable on your calendar too.</p>
<p>For my use case — I have my services divided into how long the client estimates the project to run for. Depending on my workload, what type of projects I have now, I may be required to reject some projects. Trafft also gives quick email templates that I may customize and add some variables to keep it dynamic.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b338acc0-28f7-4834-84d3-d55494741417/9-time-scheduling.png" /></p>
<p>It’s a great way to still capture leads but still let the clients know the situation. One feature I really enjoy is being able to delay the email — this way it doesn’t seem so automated. I may have the automated reply send out a couple of hours after the client filled out the form.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9f865a20-63db-43ef-b74a-14ded05a6ae8/10-time-scheduling.jpeg" /></p>
<p>You may notice above that there are options for additional categories — this allows you to divide up various services, for example, Project consultation or new project inquiries against paid services where the client may know exactly what they want (or have discussed with you already)</p>
<p>Although I personally don’t charge for consultation, the option is available utilizing Stripe and PayPal payment methods.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8de981c1-a2b5-49ff-a8fa-1f0aab69f223/11-time-scheduling.jpeg" /></p>
<h3>With Teams</h3>
<p>If your business has multiple employees to take on a specific service, you can easily modify the appointment form to cater to your needs, or <em>A/B test</em> which way works best for you.</p>
<p>One of my favorite features that is often missing in many appointment form software is the option to customize the order of the form. The default is selecting the preferred employee then selecting the available services from that employee.</p>
<p>In my services, it makes more sense to let the new client select their preferred date and time:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14ef44df-7b0f-4d9b-9afe-a4b1abd26ab2/12-time-scheduling.png" /></p>
<p>If you are lucky enough to have an office manager to manage phone call appointments (or you do this yourself), creating an appointment can easily be done through the employee portal and assign employees based on the time and date specified.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c22d50e4-be93-4728-b1e7-f1b10317ac9e/13-time-scheduling.jpeg" /></p>
<h3>Invoicing</h3>
<p>With appointment bookings, you may even set different prices depending on the employee and seniority. For small projects, the price of a service may differ but also require someone of less seniority — therefore the invoice and service booked may have a different price for the client as shown.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ca9d6c1-fc4f-4a30-a304-10439fe28135/14-time-scheduling.png" /></p>
<p>As you would expect, with <a href="https://trafft.com/?utm_source=smashingmagazine.com&amp;utm_medium=article&amp;utm_campaign=july21">Trafft</a>, the invoice can easily be customized with your branding logo and colors. You can drag and drop your logo and choose between eight styling colors.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c07ab2e1-f3f4-4582-9703-886c8484f578/15-time-scheduling.jpeg" /></p>
<h3>Goals And KPI’s</h3>
<p>The last and major feature that really allows <a href="https://trafft.com/?utm_source=smashingmagazine.com&amp;utm_medium=article&amp;utm_campaign=july21">Trafft</a> to stand apart from the rest is the upcoming feature to track KPI’s and goals. Understanding how much time and revenue an employee has incurred due to specific services is a great way to <strong>promote growth within your business</strong> — either focusing on services that are less utilized by the employee or improving and expanding the already great services they provide to your company.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fdd6a6dc-f7fa-4651-93ef-8e31191abe3b/16-time-scheduling.png" /></p>
Conclusion
<p>Since we are all hustling, especially in these times — I really wanted to find and introduce a method and some complementary product that <strong>enhances our workflow</strong> without adding to it. Being a firm believer that products should work for you and not vice versa has narrowed down the prospects to <a href="https://trafft.com/?utm_source=smashingmagazine.com&amp;utm_medium=article&amp;utm_campaign=july21">Trafft</a> for me personally. If you have feedback or other software and time management techniques, I would love to hear about it!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Matthew Talebi)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/75bfca56-7f2b-488f-b9eb-7fa00d930444/5-time-scheduling.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Color Tools And Resources]]></title>
            <link>https://smashingmagazine.com/2021/07/color-tools-resources/</link>
            <guid>https://smashingmagazine.com/2021/07/color-tools-resources/</guid>
            <pubDate>Wed, 21 Jul 2021 13:00:00 GMT</pubDate>
            <description><![CDATA[Do you need a little inspiration boost? We’ve collected some useful color tools and resources that we’ve discovered lately &mdash; to help you get the most out of your creativity. We’ve also just recently covered [CSS auditing tools](https://www.smashingmagazine.com/2021/03/css-auditing-tools/), [CSS generators](https://www.smashingmagazine.com/2021/03/css-generators/), [accessible front-end components](https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/), [front-end boilerplates](https://www.smashingmagazine.com/2021/06/useful-frontend-boilerplates-starter-kits/) and [VS code extensions](https://www.smashingmagazine.com/2021/05/useful-vs-code-extensions-web-developers/) &mdash; you might find them useful, too.  ]]></description>
            <content:encoded><![CDATA[<p>Today, we’re shining the spotlight on <strong>color tools and resources</strong> for all kinds of projects, from all types of color palettes and generators to getting contrast and gradients just right for your projects. This collection is by no means complete, but rather a selection of things that the team at Smashing found useful and hope will make your day-to-day work more productive and efficient.</p>
<p>If you’re interested in more tools like these ones, please do <a href="https://www.smashingmagazine.com/the-smashing-newsletter">take a look at our lovely email newsletter</a>, so you can get tips like these drop right into your inbox!</p>
CSS Variables And HSLA

<p>How do you usually define colors in CSS? With HEX? RGBA? Or do you use HSLA? Maxime Heckel used a mix of HEX and RGBA, until he came across a <a href="https://blog.maximeheckel.com/posts/the-power-of-composition-with-css-variables/">clever pattern</a> that helped him clean up the mess and lighten his codebase. The foundation: HSLA and CSS variables.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f4781835-feab-4642-821a-9958cd36326f/001-color-tools-resources.png" /></p>
<p>HSLA stands for Hue Saturation Lightness Alpha, the four main components necessary to define a color. When you use similar colors — different shades of blue, for example, — you will notice that they share the same hue and saturation. With Maxime’s approach, you can define a part of the hue and saturation through a CSS variable and reuse it to define your other color values — to build a color scale from scratch, for example. A fantastic example of how powerful CSS can be.</p>
A Super-Fast Color Schemes Generator

<p>Do you need to create a color palette? A handy tool to help you do this — and more — is <a href="https://coolors.co/">Coolors</a>. At the heart of Coolors is a sleek color palette generator: To start off, it suggests you a random palette that you can adjust by playing with shades or, if you prefer, change it completely by introducing new colors.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/adaf9002-54cb-4304-bc38-faa4b7096769/003-color-tools-resources.png" /></p>
<p>Coolors also lets you pick a palette from a photo and create collages, gradients, and gradient palettes. A contrast checker calculates the contrast ratio of text and background colors for you to ensure your color combinations are accessible. And if you just need a bit of inspiration, there are thousands of color themes waiting to be explored, too — just click the colors you like, and the hex values will be copied to your clipboard. Enjoy!</p>
Overly Descriptive Color Palettes

<p>Have you ever considered combining snail-paced soft pink with unsealed mahogany and lousy watermelon as a color scheme for your next project? Well, what might sound a bit weird at first, is the concept behind <a href="https://colors.lol/">colors.lol</a>, a color inspiration site with “overly descriptive color palettes”, as its creator Adam Fuhrer describes it.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/389b349d-90c6-434e-a7d5-f0a7d28b76a6/005-color-tools-resources.png" /></p>
<p>Created as a fun way to discover interesting color combinations, the palettes are hand-selected from the Twitter bot <a href="https://twitter.com/colorschemez">@colorschemez</a>. The feed randomly generates color combinations and matches each color with an adjective from a list of over 20,000 words. Hiding behind the unusual names are of course real hex color values that you can use right away — <code>#FDB0C0</code>, <code>#4A0100</code>, and <code>#FD4659</code> in the case of snail-paced soft pink and its fellas, for example. A fun take on color.</p>
Monochromatic Color Palettes Made Easy

<p>If you’ve ever tried to generate a consistent monochromatic color palette, you know that this can be a boring task. After he once again messed around with infinite copy-paste commands to create a nice palette, Dimitris Raptis decided to change that. His solution: <a href="https://copypalette.netlify.com/">CopyPalette</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2d5142b-19a8-4b35-a307-23c9bdf73fe6/007-color-tools-resources.png" /></p>
<p>CopyPalette lets you create color palettes with ease. All you need to do is select a base color, the contrast ratio of the shades, and the number of color variations you’d like to have, and the tool generates a perfectly-balanced color palette that you can copy and paste into your favorite design tool. A true timesaver.</p>
Color Scales For Data Visualizations

<p>Different kinds of data visualizations have different needs when it comes to color. When you’re designing pie charts, grouped bar charts, or maps, for example, it might be a good idea to choose a series of colors that are visually equidistant. This ensures that they can be easily distinguished and compared to the key. The <a href="https://learnui.design/tools/data-color-picker.html">Data Color Picker</a> powered by Learn UI Design helps you create such visually equidistant palettes based on two endpoint colors that you specify.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f6a42bd-f4a4-4329-9ab2-02f795c850cc/009-color-tools-resources.png" /></p>
<p>For those instances when you want to show the value of a single variable in your visualization and, thus, only need a color scale based on one color (with a darker variation representing a higher value and a neutral color a value closer to zero), there’s the <a href="https://learnui.design/tools/data-color-picker.html#single">Single Hue Scale generator</a>.</p>
<p>Last but not least, divergent colors are most useful for visualizations where you’re showing a transition from one extreme through a neutral middle to an opposite extreme (a common example is a “how Democrat/Republican is each state in the US” map). The <a href="https://learnui.design/tools/data-color-picker.html#divergent">Divergent Color Scale generator</a> helps you find the best scale for occasions like these. A powerful trio to take your data visualizations to the next level.</p>
Real-World Color Palette Inspiration

<p>There are a lot of fantastic sites out there that help you find inspiring color palettes. However, once you have decided on a palette you like, the biggest question is still left unanswered: How should you apply the colors to your design? <a href="https://www.happyhues.co/">Happy Hues</a> is here to help.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e204004b-09db-4e12-878d-033119e0f30f/011-color-tools-resources.png" /></p>
<p>Happy Hues gives you color palette inspiration while acting as a real-world example for how the colors could be used in your design. Just change the palette, and the Happy Hues site changes its colors to show you what your favorite palette looks like in an actual design. Clever!</p>
Color Shades Generator

<p>Another useful tool for dealing with color is the <a href="https://omatsuri.app/color-shades-generator">color shades generator</a> that Vitaly Rtishchev and Vlad Shilov built. You can enter a hex value and the tool will show you a series of lighter and darker shades.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/28377914-4fe7-41db-b19d-c7dfafc93fac/013-color-tools-resources.png" /></p>
<p>To customize the shade series, simply adjust the percentage by which you want to lighten/darken the original color and change the saturation shift. Once you’re happy with the result, you can copy the hex values of a color or the entire palette with one click.</p>
Color Made Simple

<p>Speaking about color can be tricky. What one person refers to as purple, might be mulberry for the next. But what color do they actually mean? To prevent misunderstandings, the design team at Lyft came up with their very own color system which is easy to learn for designers and developers while taking accessibility into account at the same time. They’ve open sourced it, so your team can make use of it, too: Say hello to <a href="https://www.colorbox.io/">ColorBox</a>! </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6d0c78a-f5f2-4b8b-90d3-1e9ad51b6bd1/015-color-tools-resources.png" /></p>
Google, But For Colors

<p>You enter a search term and are presented a list of links. That’s how search engines usually work, right? <a href="https://picular.co/">Picular</a> is different. Instead of searching for relevant sites, Picular presents you colors that match your search. “Summer”, for example, will return different shades of blue, along with some sandy yellows and browns, and a tad of pink. Each color is labeled with its hex value, so if you want to use it in a project, just click on it, and it’s copied to your clipboard.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/068cab62-4cda-425c-86fc-0645bc65bbc6/017-color-tools-resources.png" /></p>
Color Inspiration From Forgotten Times

<p>How about some color inspiration that is, well, a bit different? Brought to life by Brandon Shepherd, <a href="https://colorleap.app/">Color Leap</a> takes you on a journey through 4,000 years of color history.</p>
<p>From 2,000 BC to the 1960s, the project showcases 180 color palettes from 12 distinct eras, each one of them representing the color language of its time. Fascinating! </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6aa3ed25-321e-4b2a-8fe3-6d9dc867143d/020-color-tools-resources.jpg" /></p>
Creating Accessible Color Palettes

<p>Finding the perfect tint or shade of a color is not only a matter of taste but also accessibility. After all, if color contrast is lacking, a product could, in the worst case, even become unusable for people with vision impairments. A very detailed contrast checker to help you detect potential pitfalls ahead of time comes from Gianluca Gini: <a href="https://geenes.app/user-interface">Geenes</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1000a33b-754d-424d-a274-c6af81a66f99/021-color-tools-resources.png" /></p>
<p>The tool lets you tinker with hue ranges and saturation and apply the color palettes to one of three selectable UI mockups. Once applied, you can trigger different kinds of vision impairments to see how affected people see the colors and, finally, make an informed decision on the best tones for your palette. To use the colors right away, just copy and paste their code or export them to Sketch.</p>
Designing Accessible Color Systems

<p>Getting color contrast right is an essential part of making sure that not only people with visual impairments can easily use your product but also everyone else when they are in low-light environments or using older screens. However, if you’ve ever tried to create an accessible color system yourself, you probably know that this can be quite a challenge.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/93dbcab6-9ac4-4c3c-be5c-84b01251f361/023-color-tools-resources.png" /></p>
<p>The team at Stripe decided to tackle the challenge and redesigned their existing color system. The benefits it should provide out of the box: pass accessibility guidelines, use clear and vibrant hues that users can easily distinguish from one another, and have a consistent visual weight without a color appearing to take priority over another. If you’re curious to find out more about their approach, their <a href="https://stripe.com/en-de/blog/accessible-color-systems">blog post</a> will give you valuable insights.</p>
Getting Color Management Right

<p>Color management is essential, but are the settings you have in place really the best ones for your assets and the platforms you’re designing for? After all, you need to be able to rely on what you see on your screen. Not only is it crucial when it comes to choosing colors, but also for assessing contrast and legibility.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/292aca05-ce5d-4566-8595-e009155c3df6/026-color-tools-resources.jpg" /></p>
<p>To help you improve your color management, the team at <em>bjango</em> summarized <a href="https://bjango.com/articles/colourmanagementsettings/">everything you need to know about it</a>. You’ll learn to choose the best color space for your needs and when you should assign a color profile vs. when it’s better to convert to one. As a bonus, the article also takes a look at popular design programs and how to get the most out of their color management options.</p>
CSS Gradient Generator And Resources
<p>CSS gradients are a quick way to give your design a fresh and friendly touch. A fantastic little tool to help you generate and implement both linear and radial gradients is <a href="https://cssgradient.io/">CSS Gradient</a>. Once you’ve entered the colors you’d like to include in your gradient, you can adjust the position of the transitions on a slider. The CSS code mirrors the changes in real time and can be copied to the clipboard with just a click.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3eb086d7-2bf9-4894-be17-5a88e87c21b0/027-color-tools-resources.png" /></p>
<p>But there’s more than just the gradient generator, the site also features helpful content all around gradients: technical articles, gradient examples from real-life projects, tutorials, and references like collections of shades, gradient swatches, and more inspiration. A comprehensive look at gradients and how to use them.</p>
Create CSS Color Gradients With Ease
<p>Hand-picking colors to make a color gradient requires design experience and a good understanding of color harmony. If you need a gradient for a background or for UI elements but don’t feel confident enough to tackle the task yourself (or if you’re in a hurry), the <a href="https://mybrandnewlogo.com/color-gradient-generator">color gradient generator</a> which the folks at My Brand New Logo have created has got your back.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/812c1e81-a3ee-47ca-bd91-e1d9f7282a40/029-color-tools-resources.png" /></p>
<p>Powered by color gradient algorithms, the generator creates well-balanced gradients based on a color you select. There are four different styles of gradients that go from subtle to a mother-of-pearl effect and an intense, deep color gradient. You can adjust the gradient with sliders and, once you’re happy with the result, copy-paste the generated CSS code to use it in your project. Nice!</p>
Easy-To-Use CSS Gradients
<p>Another handy tool that takes away the trouble and makes using gradients a simple act of copying and pasting is <a href="https://www.gradientmagic.com/">Gradient Magic</a>, a gallery of unique CSS gradients with everything ranging from standard gradients to angular, striped, checkered, and burst gradients. To find your favorite, you can browse the gallery by style and color. A great addition to any toolkit!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d714433a-6e44-4958-9a33-d0838bfa410d/031-color-tools-resources.png" /></p>
A Way Forward To Prettier Gradients
<p>Gradients often don’t turn out looking as smooth as you’d hope them to be. The problem is hard edges, especially where the gradient starts and ends. To help you cater for prettier results, Andreas Larsen built a little Sketch plugin: <a href="https://github.com/larsenwork/sketch-easing-gradient">Easing Gradient</a>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14715e00-97c9-476e-8b5a-97519a117872/034-color-tools-resources.jpg" /></p>
<p>The plugin makes your gradients as invisible as possible so that they don’t interfere with text or UI that you place on top of them. You can install the plugin with Sketch Runner or download the package via GitHub. By the way, there’s also a <a href="https://github.com/larsenwork/postcss-easing-gradients">PostCSS plugin</a> available that does the same, as well as a <a href="https://larsenwork.com/easing-gradients/">hand-coded solution</a>.</p>
Explore The Power Behind CSS Gradients
<p>Shapy. Hidden behind the cute name, is a powerful tool: a <a href="https://shapy.app/">gradient shape editor</a> created by Victoria Bergquist. Shapy lets you discover and explore the power of CSS gradients, creating shapes and images by layering and moving around gradients on a single <code>div</code> tag. Just use the sliders to customize the canvas size, gradient type, color stops, and box details, and, once you’re satisfied with what you see in the preview, you can copy the CSS with a click. Handy!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d2d2492d-f7f3-42ee-ab0c-796e6d21cdd2/036-color-tools-resources.jpg" /></p>
Rainbow Gradients With React
<p><a href="https://joshwcomeau.com/">Josh Comeau</a> loves creative experiments. On his lovely personal blog, he features accordions with sound effects, flashy confetti mode, unexpectedly friendly pop-ups, and many other things. Plus, a series of wonderful tutorials for doing all kinds of unusual effects with React.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/556d86d4-beb8-47c1-9a6a-b876bce38fca/037-color-tools-resources.png" /></p>
<p>For example, Josh has shared how he created <a href="https://joshwcomeau.com/react/rainbow-button/">Magical Rainbow Gradients</a> with CSS Houdini and React Hooks (see <a href="https://github.com/joshwcomeau/blog/tree/master/src/components/MagicRainbowButton">GitHub repo</a>). A wonderful little tutorial to make your website or app shine. Literally.</p>
Generate Colorful Backgrounds With A Few Clicks
<p>A cool background graphic can draw attention to a blog post, enhance your social media profile, or simply freshen up your phone’s home screen. To make creating abstract and colorful backgrounds a breeze, Moe Amaya’s project <a href="https://coolbackgrounds.io/">Cool Backgrounds</a> now unites the best JavaScript background generators in one place. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17380a77-f247-450e-be45-2b2e139f7a33/cool-backgrounds.png" /></p>
Quick Tips For High Contrast Mode
<p>Designing for different display modes can bring along some unforeseen surprises. Windows High Contrast Mode in particular behaves differently than other operating system display modes and completely overrides authored colors with user-set colors. Luckily, there are often simple solutions to most high contrast mode issues.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c2d5da8b-1c6c-49ff-8326-d9ad6073131e/041-color-tools-resources.png" /></p>
<p>In her article “<a href="https://sarahmhigley.com/writing/whcm-quick-tips/">Quick Tips for High Contrast Mode</a>”, Sarah Higley shares five tips to solve high contrast mode bugs. They include custom focus styles, dealing with SVGs, using the <code>-ms-high-contrast</code> media query to respect a user’s color choices, as well as what you should keep in mind when testing. A handy little guide. If you want to dive deeper into the topic, Sarah also collected some further reading resources.</p>
Button Contrast Checker
<p>Do your buttons have enough contrast? The <a href="https://www.aditus.io/button-contrast-checker/">Button Contrast Checker</a> built by the folks at Aditus helps you find out. Enter your domain and the tool tests if the buttons on the site are compliant with WCAG 2.1.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/80538bf0-d8ea-476f-a2b0-f8f45ed242d6/043-color-tools-resources.png" /></p>
<p>To cater for realistic results, the checker does not only test the default state of the buttons but also takes hover and focus states as well as the adjacent background into account. A nice detail: Each time you scan a page, the results are stored in a unique URL which you can share with your team. A precious little helper.</p>
Dark Mode Switch Tutorial
<p>A dark/light mode switch is a nice feature. But how do you actually implement it? Sebastiano Guerriero <a href="https://codyhouse.co/blog/post/dark-light-switch-css-javascript">takes you through the necessary steps</a>. His approach shows how to create a dark theme for your project and then use CSS Custom Properties to switch to it from a default light theme when a specific data attribute or class is added to the body element.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4b2cea64-26e6-491d-b839-8ad11614a8d7/046-color-tools-resources.jpg" /></p>
Wrapping Up
<p>There are literally hundreds of resources related to color out there, and we hope that some of the ones listed here will prove to be useful in your day-to-day work — and most importantly help you avoid some time-consuming, routine tasks.</p>
<p>Happy bookmarking, everyone!</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Cosima Mielke)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17380a77-f247-450e-be45-2b2e139f7a33/cool-backgrounds.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[How To Migrate From WordPress To A Headless CMS]]></title>
            <link>https://smashingmagazine.com/2021/07/wordpress-headless-cms-storyblok/</link>
            <guid>https://smashingmagazine.com/2021/07/wordpress-headless-cms-storyblok/</guid>
            <pubDate>Tue, 20 Jul 2021 10:30:00 GMT</pubDate>
            <description><![CDATA[In this article, we will look at when it makes sense to migrate from a monolithic project to a headless setup and the benefits that come with it. In addition to a step-by-step guide on how to migrate WordPress to Storyblok Headless CMS, the problems that will arise during the process and how to deal with them.]]></description>
            <content:encoded><![CDATA[<p>WordPress is the most used website builder in the world; almost half of the web has used WordPress to create their website. It makes sense, because it allows you to quickly create websites and has a rich plugin’s ecosystem to help you scale your site.</p>
<p>But technology is evolving, and there are more and more options that make it easier to create websites. Moreover, they give us the possibility to improve the website’s performance and to have more control and security over the application.</p>
<p>The initial <strong>WordPress architecture is monolithic</strong>, so the user interface and data access are combined on the same platform.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/28bf63fc-d808-4108-a836-f1d015885086/1-wp-storyblok-case-study.png" /></p>
<p>Since the introduction of the <a href="https://developer.wordpress.org/rest-api/">REST API</a> on WordPress, it can be used in a headless way, allowing developers to use it as a backend and having the front-end in a different project.</p>
<p>In this decoupled way, <strong>models and controllers are bundled on the WordPress side</strong>, handling data manipulation and database interaction. Meanwhile, the front-end only interacts with the <a href="https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/">REST API</a> via an HTTP client.</p>
<p>But this also has some disadvantages, you still need to configure and update WordPress, make it secure and are dependent on their technology for the development of new functionalities.</p>
<h3>Related Reading on SmashingMag</h3>

<p>For those of you who are just starting in the headless world, these articles will help you understand the ins and outs behind it and why everyone is starting to migrate.</p>
<ul>
<li>“<a href="https://www.storyblok.com/tp/headless-cms-explained">Headless CMS Explained In 5 Effective Minutes</a>”</li>
<li>“<a href="https://www.cmswire.com/digital-experience/rethink-your-content-strategy-for-a-headless-cms/">Rethink Your Content Strategy For A Headless CMS</a>”</li>
<li>“<a href="https://www.storyblok.com/tp/component-thinking-improves-productivity">How Thinking In Components Can Increase Your Productivity</a>”</li>
<li><a href="https://www.smashingmagazine.com/category/headless/">A curated list of articles related to “Headless” →</a></li>
</ul>
But Why Migrate To A Headless CMS?
<p>Taking into account that this article will showcase how to migrate from <a href="https://wordpress.com/">WordPress</a> to a Headless CMS, WordPress is probably your current setup.</p>
<p>A Headless CMS will give us the freedom to <strong>focus only on the front-end project</strong>, being able to choose the technology we are familiar with, and on the structure of our data. In the end, it takes care of the content management and the content delivery, so that we can take care of the rendering part.</p>
<blockquote>“A Headless CMS is a system that provides the same features as a Content Management System (CMS) and more, all exposed through an API.”</blockquote>

<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6f556aa-62e1-4bc2-b8ae-939b2bd88473/2-wp-storyblok-case-study.png" /></p>
<p>This type of setup is especially useful for <strong>companies that have multiple sites</strong> and want to reduce costs or simplify processes. A headless architecture allows these companies to <strong>centralize content management in a single administration interface</strong>, providing the APIs that will be consumed by the company’s different web pages.</p>
<p>Another common use of a headless architecture is to create a front-end project that represents the company brand. In this way, all the products that the company launches will have the same look and feel, but each one will have its own content, managed in the same administration panel.</p>
<p><strong>Note</strong>: <em>This example can be easily seen on conference websites such as <a href="https://frontenddeveloperlove.com/">JSWorld Conference</a> and <a href="https://vuejs.amsterdam/">VueJS Amsterdam</a> which, being from the same creators, the front-end project is the same, only the content changes.</em></p>
<p>Different to a CMS like WordPress, in a Headless CMS you have an <strong>administration panel already configured and maintained</strong>, and sometimes also hosted, for you. To start creating content, you just need to create an account, log in, and you will be able to create, edit, duplicate and delete your content, manage users, translate content and work with publication workflows, among other things.</p>
<p>A headless CMS will make it easier for the people in your team to understand the workflow, whether they are content creators or marketers, something to keep in mind if you aren’t the only one who will edit the content.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9a477735-3eca-4f3b-85d9-43c16f555620/3-wp-storyblok-case-study.png" /></p>
<p>It is worth noting that some Headless CMS, not only focuses on offering you the services already offered by a CMS like WordPress. It also provides services such as <strong>image CDNs to resize or reformat your images</strong> on the fly, or additional security through S3 backups.</p>
<p>Having this setup will not only give you freedom, security and comfort, but will also improve the performance of your application without third-party services. Just by connecting your front-end project via an HTTP client and getting the components and data, you will be up and running.</p>
The Benefits Of Going Headless And When It Makes Sense
<p>WordPress’ architecture often does not offer the possibilities we sometimes need when working on a website, especially when it comes to <strong>optimizing performance</strong>, one of the most important points when ranking our site in a search engine like Google and especially now that <a href="https://web.dev/vitals/">Web Vitals</a> is up and running.</p>
<p>But it is clear that if we have a personal site that only we ourselves work on, then it’s not necessary to migrate it to a headless setup. However, if more people are involved in that project (not just developers but content creators or marketing teams), then we should consider adopting Headless CMS.</p>
<h3>How Can A Headless CMS Help Us Improve The Performance Of Our Website And The Quality Of Our Front-End Project?</h3>
<ul>
<li><p>By allowing you to develop the <strong>front-end</strong> in a way that is completely <strong>independent</strong> of the platform where you edit your content.</p>
<p>  The <strong>technology</strong> you choose is your <strong>own choice</strong>, if you wanted to upgrade your project to the latest front-end framework, you would not be dependent on a back-end and could do so without having to rethink migrations.</p>
</li>
<li><p>Allowing you to create <strong>multiplatform</strong> projects without having to depend on different administration panels.</p>
<p>  In the end, if for an app you need a shorter description than the main website, you can always make use of a new "short_description" field and just represent it on the front-end of that specific app.</p>
</li>
<li><p>It is intended to make <strong>development easier</strong> and simplify the process of creating a site, as well as scaling it.</p>
<p>  By having the front-end completely isolated we can <strong>change the visual appearance</strong> of our entire application without modifying the structure of our content.</p>
</li>
<li>Always offering services that will allow us to <strong>optimize our assets</strong> and the <strong>speed of response</strong> with which they are served to us.
Ultimately all our data will be delivered through CDN networks.</li>
</ul>
<p> A content delivery network (CDN), is a geographically distributed network of proxy servers and their data centers. The goal is to provide <strong>high availability and performance</strong> by distributing the service spatially relative to end-users.</p>
<h3>What If We Are Concerned About How It Will Work With Our Brand’s Or Company’s Structure?</h3>
<ul>
<li><p>As well as supporting cross-platform applications, it also allows us to maintain <strong>brand consistency</strong>.</p>
<p>  Having the front-end as a base project and having multiples spaces in a Headless CMS, allows you to have consistency between your products and makes the scalability easier because we have less code to maintain.</p>
</li>
<li>Although not all headless CMS have this benefit, the headless CMS we are migrating to, <a href="https://www.storyblok.com/">Storyblok</a>, has a Visual Editor, which allows creating <strong>independence among teams</strong>.
The editors or content creators can access the panel to edit existing content or create new content, being able to see a preview of how it will look before publishing. So they won’t have to involve the development team in this process and can do their work more efficiently.</li>
<li>It also streamlines content management by allowing you to set up your own <strong>content workflow</strong>.
You can define the stages that a piece of content must go through before being published and, only when it passes the process successfully, it will be published.</li>
</ul>
<h3>How Can A Headless CMS Save Time Compared To A Traditional CMS?</h3>
<ul>
<li>Taking care of maintaining the security of the platform and updating it on your behalf.
Whenever there is a bug or users require a new feature, the team behind your Headless CMS will develop it for you, you just have to start using it!</li>
<li>Constantly improving the user experience (UX) and design (UI) for you, so that content creators and developers feel comfortable creating new fields, components or pages.
But not only on the visual aspect, but they will also be looking to improve the performance of the database, so you get your content instantly and forget about all the work that is involved.</li>
</ul>
<h4>Monolithic vs Headless</h4>
<table>
  <thead>
    <tr>
      <th>Feature</th>
      <th>Monolithic</th>
      <th>Headless</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Architecture</td>
      <td>Coupled: linked back-end front-end</td>
      <td>Decoupled: independent front-end project</td>
    </tr>
    <tr>
      <td>Technology</td>
      <td>You will have to use the one in which the project is developed</td>
      <td>Freedom to choose your front-end technology</td>
    </tr>
    <tr>
      <td>Cross-platform</td>
      <td>Limited to one front-end at a time</td>
      <td>Connects to any front-end projects</td>
    </tr>
    <tr>
      <td>Content workflow</td>
      <td>Restrictive</td>
      <td>Custom</td>
    </tr>
    <tr>
      <td>Security and updates</td>
      <td>You take care</td>
      <td>It takes care for you</td>
    </tr>
  </tbody>
</table>

<p>Having seen the advantages that a headless setup can bring to our project and the people who work on it, I think it is time to look at the steps we need to migrate our project.</p>
What You Need To Keep In Mind When Going Headless
<p>As we have already mentioned, Headless CMS allow for a clean separation of concerns between content creators and developers. In this way (in a Headless CMS), the developer focuses on creating the content structure, which will be represented in the front-end project, and the editor will be in charge of using the components and filling them with content in the admin panel.</p>
<h3>Type Of Content We Can Create In A Headless CMS</h3>
<h4>1. Types of entry or template</h4>
<p>Similar to <a href="https://www.wpbeginner.com/wp-tutorials/how-to-create-custom-post-types-in-wordpress/">Custom Post Types</a> in WordPress but with more freedom and extensibility when it comes to data types and editors.</p>
<p>When you go to create a new content entry in your dashboard, you expect to be able to choose what type it depends on the situation. For example, if you have a website with a blog you will want to have several types of templates, one for pages with listings or dynamic content called "<em>page</em>" and one for each blog entry "<em>post</em>".</p>
<p>Depending on the headless CMS you have chosen, the name will vary but the concept is the same. In Storyblok these types of entities are called <em>Content Type</em>. “Content Types” define the type of content entry and can hold the basic fields for your content entries. By default, we have a “Page” content type.</p>
<h4>2. Reusable components</h4>
<p>In a Headless CMS, you can create, in addition to Content Types, nested components and reuse them between content types and other components. In Storyblok, this type of component — as you may have noticed from its name — is called <strong>Blok</strong>.</p>
<p>To use them in a <em>Content Type</em> such as a page, you will need to create a field in the schema of type blocks. This field allows you to add nested components to your page while adding content.</p>
<p>But, in principle, we will not need such components during the migration. It simply gives you the flexibility to <strong>create robust and dynamic applications</strong> without having to involve the developer.</p>
<p>For example, when a member of the marketing team wants to add a new Hero to the About us page, if the Hero component was created as nested and the page had a Blocks field, the marketing person could add the Hero without having to involve the developer.</p>
<h3>Rendering The Data Coming From The Headless CMS</h3>
<p>As we are defining the structure of our content in the Headless CMS panel, we have to <strong>consider which framework we want</strong> to create our front-end project with and which HTTP client we will use.</p>
<p>When choosing a framework we have to take several factors into account:</p>
<blockquote>Are my team and I am familiar with this technology?<br /><br />Does it allow me to render my content in the type of rendering my project needs?<br /><br />Does it have plugins or modules that facilitate integration with the Headless CMS I’m using?</blockquote>

<p>In most cases, a static site will be sufficient and will always be the most economical and high-performance answer. So, you just have to <a href="https://jamstack.org/generators/">look for a static site generator</a> for the technology you are familiar with, for example, <em>Nuxt</em> for Vue or <em>Next</em> for the React library.</p>
<p>Connecting these two things, a <strong>Headless CMS and a static site builder</strong> are considered as a set of web development best practices focused on providing the highest performance, security and lowest cost. This architecture is also known as <a href="https://jamstack.org/">Jamstack</a>. It’s an architecture designed to make the web faster, more secure and easier to scale. It builds on many of the tools and workflows which developers love, and which bring maximum productivity.</p>
<p>By making use of the trendy frameworks, you will be assured of an integration guide with the Headless CMS you are going to work with, and most of them have already a module or package that allows you to obtain information from the API and in many cases extend it.</p>
<p>The only thing left for you to do is to <strong>define the structure of your components</strong> concerning how you have structured the data in your Headless CMS and automate the content publishing process. For example, using the <a href="https://www.storyblok.com/docs/guide/in-depth/webhooks">Webhooks</a> that the Headless CMS provides you with, you will be able to start a build process in your favourite <a href="https://docs.netlify.com/configure-builds/build-hooks/">hosting by its build hooks</a> once the content has been published.</p>
Amount Of Time You’ll Need
<p>As with any migration, the time required will always <strong>depend proportionally on the complexity</strong> of your project. If we are talking about a common WordPress site you will only need to migrate the Post types that you have defined or that comes by default in it, such as Pages, Posts and Categories, and their content.</p>
<p>If, on the other hand, you have customized your project with multiple plugins, you will have to develop them through the front-end project or using the ones provided by your Headless CMS. For example, if we are SEO conscious and therefore make use of <a href="https://wordpress.org/plugins/wordpress-seo/">Yoast SEO</a> on WordPress, we will have the <a href="https://www.storyblok.com/apps/seo">Field-Type SEO</a> plugin in Storyblok to help us in the transition, but we will still have to develop our sitemap in the front-end with a <a href="https://www.storyblok.com/tp/how-to-generate-sitemap-headless-cms">guide to help us</a>.</p>
<p>In the end, all the burden of development will fall on the front-end project, as setting up the Headless CMS will not take that much time.</p>
<p>But let’s stop talking and let’s take a look at it!</p>
Steps To Migrate Our Content From WordPress To Storyblok
<p>The migration will consist of four steps, from the creation of a space in our new Headless CMS Storyblok to the representation of the migrated content in our front-end project, which we will see in detail below and in which I will leave you resources to make the migration easier for you.</p>
<p>Let’s get started!</p>
<h3>1. Creating A Space In Storyblok</h3>
<p>In order to create a space in Storyblok, you first need to have an account. To do this, you will need to select the plan that suits you best.</p>
<p>Go to the <a href="https://www.storyblok.com/pricing">Pricing page</a> and start with the plan that best suits your needs or try the free plan for testing.</p>
<p>Create your account, and you will be able to access the panel.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e4bb20a0-3453-40c4-8296-c776f3390dc3/4-wp-storyblok-case-study.jpg" /></p>
<p>Choose ‘Create a new space’ and let’s get started!</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/73bcd921-f3fc-4eaa-941a-8d54bf017d06/5-wp-storyblok-case-study.jpg" /></p>
<p>Space is a content repository. Think of it as a place to keep all the content related to one project. Each space has its own components, data sources, assets, environments, domains, collaborators and permissions.</p>
<p>Take some time to explore the sections on the left sidebar. Start by browsing the following:</p>
<ul>
<li><strong>Content</strong>, this will be the folder where the content will be stored, where the marketing team will spend most of their time.</li>
<li><strong>Assets</strong>, where all the images will be stored, which you can then get through the CDN service, optimized and of any size.</li>
<li><strong>Components</strong>, where you will create the <em>Content types</em> and <em>Nested components</em>.</li>
<li><strong>Settings</strong>, the section where you will be able to configure the data of your space as well as the languages of your application, the workflows you want your content to follow before being published, user permissions, etc. Let’s say that this area will be the one related to the IT team of the project.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a48ec4e-5a60-4f20-bcfc-fcfe0ef07875/6-wp-storyblok-case-study.jpg" /></p>
<p>If you still want to explore every option on the dashboard before diving into the migration, I recommend taking a look at <a href="https://www.storyblok.com/docs/guide/essentials/ui">Understanding the UI</a> by Storyblok.</p>
<p>Now that you know a bit about the Storyblok ecosystem, it’s time to define what the content of our application will look like.</p>
<h3>2. Defining Models</h3>
<p>To migrate WordPress content to Storyblok, the next step is to create the schemas that define the WP data structure by creating Post Types in the Storyblok space.</p>
<p>Let’s start with <em>pages</em> and <em>posts</em> (the main Post Types in any WP site), which we’ll call <code>page</code> and <code>post</code> in Storyblok.</p>
<p>The schema of <em>pages</em> in WP contains the fields: <em>title</em>, <em>slug</em>, <em>featured</em> <em>image</em>, <em>date,</em> and <em>content</em>.</p>
<p><strong>Note</strong>: <em>To see all the fields contained in a Post Type go to the schema at <a href="https://developer.wordpress.org/rest-api/reference/pages/#schema">WP REST API schema references</a>.</em></p>
<p>What you need to know is that, by default, any <a href="https://www.storyblok.com/docs/guide/essentials/content-structures#component">Content Type in Storyblok</a> will have some fields already defined for you, such as <em>Name</em>, <em>Slug</em>, <em>Tags</em>, First published <em>date</em>, and so on.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4d7d0ac-1c41-4085-8aa4-70b68e15db50/7-wp-storyblok-case-study.jpg" /></p>
<p>Those fields could be used to migrate the content from WP. You will only need to extend it by adding <em>featured_image</em> and <em>content</em> in the Page Content Type.</p>
<p>Go to the <strong>Components</strong> section in your space, click on the <code>page</code> created by default, remove the <em>body</em> field and add <em>featured_image</em> as type <code>Assets &gt; Images</code> and <em>content</em> as <code>Rich-text</code>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de911094-f2d9-4046-beb6-b8b4a8a40043/8-wp-storyblok-case-study.png" /></p>
<p>Once the <code>page</code> schema is ready, let’s move on to the <code>post</code>. For the Post Content Type, it is necessary to include more information, such as <em>featured_image</em>, <em>excerpt</em>, <em>content,</em> and <strong>relationships to other types</strong> such as <em>Authors</em> or <em>Categories</em>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f77a2dc7-3127-4977-a2a2-260db10748e2/9-wp-storyblok-case-study.png" /></p>
<p>Since <em>Authors</em> and <em>Categories</em> will also have their own content, go to the <strong>Content</strong> section in the sidebar and create a couple of folders called <em>authors</em> and <em>categories</em>.</p>
<p>Each of the folders must have a default Content Type associated. To do this, in the <strong>Components</strong> section, create <em>Author</em> and <em>Category</em> as new Content Types, and then associate the Content Type relative to each folder by clicking on the three dots on the right of the folder and selecting Settings.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6e3c6929-88a6-45d2-8068-1d4f71c85f2d/10-wp-storyblok-case-study.jpg" /></p>
<p>In this way, in the Post Content Type you can add a <em>Single-Option</em> or <em>Multi-Options</em> field with source <strong>Stories</strong> and point to the folder created for each field:</p>
<ul>
<li><strong>Authors</strong><br />This specifies the folder where they are located <code>authors/</code>.</li>
<li><strong>Categories</strong><br />This specifies the folder where they are located <code>categories/</code>.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/52f7bb65-e917-410e-8c50-c460bd0f75bd/11-wp-storyblok-case-study.png" /></p>
<p><strong>Note</strong>: <em>If you want to know more about this relationship, have a look at the article <a href="https://www.storyblok.com/tp/setting-up-blog-content-structure#authors-and-articles-relationship">Authors and Articles Relationship</a>.</em></p>
<p>Now that you have seen how to create a couple of Content Types and how to create relationships between them, you will have to define the rest of the models following the same steps.</p>
<h4>Adding A Content Type: Global</h4>
<p>And you ask yourself, what about the content that all my pages will share? Like the navigation menu, footer, and other common elements?</p>
<p>Don’t worry, Storyblok has already thought about that and offers us a <a href="https://www.storyblok.com/tp/cms-website-header-menu-navigation">simple guide to define our global elements</a> dynamically. It shows us how to create a <em>global</em> Content Type and how to use it in the <strong>Content</strong> section.</p>
<h3>3. Migrating The Content</h3>
<p>Now it’s time to start migrating the content you have stored. To access WP content you need to access the REST JSON API. Access the path <code>/wp-json</code>, if the project is deployed, or <code>?rest_route=/</code> if local.</p>
<p>In case neither of the two routes works, inspect the HTML of your page for a link in the head with <code>rel="https://api.w.org/"</code>, as indicated in the <a href="https://developer.wordpress.org/rest-api/using-the-rest-api/discovery/">WP discovery guide</a>, and get the correct one.</p>
<div>
 <pre><code>&lt;link rel="<a href="https://api.w.org/&quot;">https://api.w.org/"</a> href="<a href="https://localhost/your-site/index.php?rest_route=/&quot;">https://localhost/your-site/index.php?rest_route=/"</a>&gt;
</code></pre>
</div>

<p>To help us during the migration, the Storyblok developers have provided us with a plugin that will save us a lot of work. This plugin is called <a href="https://github.com/storyblok/wordpress-importer">wordpress-importer</a>, on it, it is possible to define the equivalent Content Type in Storyblok for the WP Post type to be migrated, and it will push it to our space and migrate the images to our <strong>Assets</strong> section for us.</p>
<p><strong>Note</strong>: <em>Using this script requires node ≥14.0.0 because it’s using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining#browser_compatibility">optional chaining</a>.</em></p>
<h4>Creating The Migration Script</h4>
<p>The first thing to do is to clone the repository. Then, install the NPM packages, using <code>npm install</code> or <code>yarn</code>, and create a file in the root of the project as <em>migrateWPtoStoryblok.js</em>. In order to run the script you need a script in package.json to run it, add:</p>
<pre><code>"migrate": "node ./migrateWPtoStoryblok.js"
</code></pre>

<p>Once everything is ready, it’s time to start defining the script following the README specifications. And, as you can see, the next thing that will be needed is to find the <code>Space_id</code> and the <code>OAuth</code> token to connect to the Storyblok space.</p>
<ul>
<li>The <code>Space_id</code> is in the <em>Settings</em> section of the sidebar, as soon as you click on it, you will see it on the right side.</li>
<li>To generate the <code>OAuth</code> token, you need to go to the top of the sidebar, click on the little arrow right next to the Storyblok logo, and go to <em>My Account</em>. If we scroll down we will see the <em>Personal access tokens</em> section, generate one, and copy it.</li>
</ul>
<p>When you have obtained both secrets, you can add them to the beginning of the script along with the URL of the JSON API of your project:</p>
<div>
 <pre><code>import { Wp2Storyblok } from './index.js'

const wp2storyblok = new Wp2Storyblok('<a href="https://your-domain.com/wp-json'">https://your-domain.com/wp-json'</a>, {
  token: 'storyblok-oauth-token', // My Account &gt; Personal access tokens
  space_id: 'space-id', // Settings
})
</code></pre>
</div>

<p>As described in previous sections, the Page Content Type in Storyblok is the equivalent of the Post Type in WP <em>pages</em>. In the code block below, you’ll see where you’ll need to specify each.</p>
<p>And, once the Post Type and Content Type are defined, it is time to specify the name of the fields used in this entity type in WP and the equivalent name in Storyblok, in the <code>schema_mapping</code> option.</p>
<div>
 <pre><code>import { Wp2Storyblok } from './index.js'

const wp2storyblok = new Wp2Storyblok('<a href="https://your-domain.com/wp-json'">https://your-domain.com/wp-json'</a>, {
  // ... Secrets
  content_types: [
    {
      name: 'pages', // Post type in WP
      new_content_type: 'page', // Equivalent Content type in Storyblok
      folder: '', // OPTIONAL: To save all the content of the same type in a specific folder
      schema_mapping: {
        "title": "name", // "Field in WP": "Field in Storyblok"
      }
    }
  ]
})
</code></pre>
</div>

<p><strong>Note</strong>: <em>For the migration to work correctly, make sure that the permalinks are selected by the name of the entry and not as simple. Otherwise, the script will not create the parent-child relationship between pages.</em></p>
<p>Within the <code>schema_mapping</code> you can define several types of fields, these can be:</p>
<ul>
<li>A <strong>simple</strong> field, such as <code>title</code>.</li>
<li>A <strong>sub-property</strong> of a field, like in this case the URL of the feature image.<br /><strong>Note</strong>: <em>The plugin itself takes care of migrating the images to the Storyblok space via the associated URL in <code>links.wp:featuredmedia.0</code>.</em></li>
<li><p>A field migrated to a <strong>nested block</strong> in Storyblok.</p>
<p>  Imagine you want to create a component in Storyblok to define your site’s rich text so that all post types using it have the same style and options.</p>
<p>  For that, you can use the <strong>object format</strong> and specify the name of the field in the Storyblok model under the <em>field</em> property, the name of the <em>component</em> you want to store inside that field, and the name of the <em>field inside the component</em> where the content will be migrated.</p>
</li>
</ul>
<div>
 <pre><code>import { Wp2Storyblok } from './index.js'

const wp2storyblok = new Wp2Storyblok('<a href="https://your-domain.com/wp-json'">https://your-domain.com/wp-json'</a>, {
  // ... Secrets
  content_types: [
    {
      // ... Post type WP:Storyblok
      schema_mapping: {
        "title": "name", // "Field in WP": "Field in Storyblok"
        "_links.wp:featuredmedia.0": "content.preview_image", // Using the dot notation you can define subproperties.
        // Using nested blocks in Storyblok
        "content": {
          field: 'content.body_items', // Field name in Storyblok
          component: "rich-text", // Component name inside the above field
          component_field: "content" // Field name inside the component where you want to migrate the content
        }
      }
    }
  ]
})

wp2storyblok.migrate()
</code></pre>
</div>

<h4>Entry Type Page</h4>
<p>Now that you know how to define the field types, for the page schema, it would look like in the code block below.</p>
<p>The plugin will take care of the <strong>parent-child relationship</strong> between pages by creating a folder in Storyblok under the parent’s slug and associating the parent as the home of that folder.</p>
<p>Furthermore, if the <strong>content field contains</strong> <strong>images</strong>, the plugin will also migrate it for you!</p>
<pre><code>{
  name: 'pages', // Name of the post type in WP
  new_content_type: 'page', // Name of the Content Type in Storyblok
  schema_mapping: {
    "date": "first_published_at",
    "title": "name",
    "slug": "slug",
    "_links.wp:featuredmedia.0": "content.featured_image",
    "content": "content.content",
  }
}
</code></pre>

<h3>Entry Type Post</h3>
<p>Posts have a schema similar to pages but, in this case, to store them in a folder you must define the name of the folder below the entry type:</p>
<pre><code>{
  name: 'posts', // Post type name in WP
  new_content_type: 'post', // Content Type name in Storyblok
  folder: 'articles', // Destination folder name in Storyblok
  schema_mapping: {
    "date": "first_published_at",
    "title": "name",
    "slug": "slug",
    "_links.wp:featuredmedia.0": "content.featured_image",
    "excerpt": "content.excerpt",
    "content": "content.content",
  }
}
</code></pre>

<h4>Entry Type Category</h4>
<p>And once the schema for posts has been defined, it makes sense to define the schema for the categories so that they can be associated as described in the previous section.</p>
<p>In order to define the <strong>folder</strong> that contains them as <strong>categories</strong> and not as category, their default name, you must go to the <strong>Permalinks</strong> option in the WordPress admin and change the <strong>Categories base</strong> option to <code>categories</code>. Then the multi-option field of the Post entries will be the one that has the relationship with the corresponding categories.</p>
<p><strong>Note</strong>: <em>These steps are the same as those to be followed for migrating authors and linking them to articles.</em></p>
<div>
 <pre><code>{
  name: 'categories', // Name of the post type in WP
  new_content_type: 'category', // Name of the Content Type in Storyblok
  // By default will be contained by a folder called Category (change it in the Permalinks option in WP)
  schema_mapping: {
    "name": "name",
    "slug": "slug",
    "description": "content.description",
    "parent": "content.parent",
  }
}
</code></pre>
</div>

<h4>Full Final Script</h4>
<p>The code below will be the resulting migration script from a WP project with the basic types to the Storyblok space we had created.</p>
<div>
 <pre><code>import { Wp2Storyblok } from './index.js'

const wp2storyblok = new Wp2Storyblok('<a href="https://your-domain.com/wp-json'">https://your-domain.com/wp-json'</a>, {
  token: '',
  space_id: 34234,
  content_types: [
    {
      name: 'pages', // Name of the post type in WP
      new_content_type: 'page', // Name of the Content Type in Storyblok
      schema_mapping: {
        "date": "first_published_at",
        "title": "name",
        "slug": "slug",
        "_links.wp:featuredmedia.0": "content.featured_image",
        "content": "content.content",
      }
    },
    {
      name: 'categories', // Name of the post type in WP
      new_content_type: 'category', // Name of the Content Type in Storyblok
      // By default will be contained by a folder called Category (change it in the Permalinks option in WP)
      schema_mapping: {
        "name": "name",
        "slug": "slug",
        "description": "content.description",
        "parent": "content.parent",
      }
    },
    // Add authors as categories.
    {
      name: 'posts', // Name of the post type in WP
      new_content_type: 'post', // Name of the Content Type in Storyblok
      folder: 'articles', // Name of the destination folder in Storyblok
      schema_mapping: {
        "date": "first_published_at",
        "title": "name",
        "slug": "slug",
        "_links.wp:featuredmedia.0": "content.featured_image",
        "excerpt": "content.excerpt",
        "content": "content.content",
      }
    }
    // More schemas...
  ]
})

wp2storyblok.migrate()
</code></pre>
</div>

<h3>4. Create A Front-End Project</h3>
<p>Now that the content is already stored in the Storyblok dashboard, it’s time to connect the Front-end project to Storyblok.</p>
<p>Whatever your framework or JS library, Storyblok provides the <a href="https://github.com/storyblok/storyblok-js-client">JavaScript client</a> that will help you with the integration. In addition, in case you are using a specific framework, you will find other packages that will ease the way, like in Nuxt the <code>storyblok-nuxt</code> module.</p>
<p>This JavaScript API will also include a <a href="https://www.storyblok.com/docs/Guides/storyblok-latest-js">bridge between Storyblok and your Front-end</a> application. The bridge is responsible for communicating via iframe with Storyblok to tell the editing interface which component to open when the user clicks on it.</p>
<p>Here is a list of tutorials you can find on Storyblok to connect your Front-end project.</p>
<p><strong>Note</strong>: <em>If you don’t find your technology among them, don’t worry there are many other tutorials on the <a href="https://www.storyblok.com/">Storyblok website</a>, search for yours in the search engine, and if you don’t find one I encourage you to contact them, and you will help many more people!</em></p>
<ul>
<li><a href="https://www.storyblok.com/tp/add-a-headless-cms-to-next-js-in-5-minutes">Next</a></li>
<li><a href="https://www.storyblok.com/tp/gatsby-multilanguage-website-tutorial">Gatsby</a></li>
<li><a href="https://www.storyblok.com/tp/add-a-headless-CMS-to-vuejs-in-5-minutes">Vue</a></li>
<li><a href="https://www.storyblok.com/tp/nuxt-js-multilanguage-website-tutorial">Nuxt</a></li>
<li><a href="https://www.storyblok.com/tp/add-a-headless-cms-to-angular-in-5-minutes">Angular</a></li>
<li><a href="https://www.storyblok.com/tp/add-a-headless-cms-to-svelte-in-5-minutes">Svelte</a></li>
<li><a href="https://www.storyblok.com/tp/headless-cms-ember">Ember</a></li>
<li><a href="https://www.storyblok.com/tp/tailwindcss-express-js-amp-sites">AMP</a></li>
</ul>
<h3>5. Host Your Front-End Project And Automate Deploy</h3>
<p>Once your project is ready to go into production, you choose a hosting provider and link your repository for easy deployment, then you ask yourself:</p>
<blockquote>How do I redeploy my static site if I publish an entry on Storyblok?</blockquote>

<p>The answer is very simple: by using the <a href="https://www.storyblok.com/docs/Guides/using-storyblok-webhooks">webhooks offered by Storyblok</a> and the build hooks of your hosting.</p>
<p>To give you a real example, <a href="https://docs.netlify.com/configure-builds/build-hooks/">you can create build hooks URLs in Netlify</a> within the deployment section; the URL created for Storyblok in the build hooks will go in the <em>Settings</em> → <em>Webhooks</em> → <em>Story published &amp; unpublished</em> field in the Storyblok space.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/11845da5-550a-4af2-b129-afa8ced50349/12-wp-storyblok-case-study.png" /></p>
Guides And Tools We Have Used During Migration
<p>Let’s recap the links that have helped in the migration of the content and those that helped to understand the functioning of the REST API and the headless CMS to which you are migrating.</p>
<h3>WP REST API Documentation Needed</h3>
<h4>REST API</h4>
<ul>
<li><a href="https://developer.wordpress.org/rest-api/reference/">REST API Developer Endpoint Reference</a></li>
<li><a href="https://developer.wordpress.org/rest-api/using-the-rest-api/">Using the REST API</a></li>
<li><a href="https://developer.wordpress.org/rest-api/using-the-rest-api/discovery/">Discovering the API and its route</a></li>
</ul>
<h4>Schemas</h4>
<ul>
<li><a href="https://developer.wordpress.org/rest-api/reference/pages/#schema">Page schema reference</a></li>
<li><a href="https://developer.wordpress.org/rest-api/reference/posts/">Post schema reference</a></li>
<li><a href="https://developer.wordpress.org/rest-api/reference/categories/">Categories schema reference</a></li>
</ul>
<h3>Migrating To Storyblok</h3>
<h4>General Info</h4>
<ul>
<li><a href="https://www.storyblok.com/">The Storyblok official website</a></li>
<li><a href="https://www.storyblok.com/pricing">Storyblok Pricing &amp; Plans</a></li>
</ul>
<h4>Documentation</h4>
<ul>
<li><a href="https://www.storyblok.com/docs/guide/essentials/ui">Understanding the UI</a></li>
<li><a href="https://www.storyblok.com/docs/guide/essentials/content-structures">Structures of Content</a></li>
<li><a href="https://www.storyblok.com/tp/setting-up-blog-content-structure">Setting Up the Blog Content Structure in Storyblok</a></li>
</ul>
<h4>Global Components</h4>
<ul>
<li><a href="https://www.storyblok.com/tp/cms-website-header-menu-navigation">How to build a website header menu navigation with Storyblok</a></li>
<li><a href="https://www.storyblok.com/docs/Guides/storyblok-latest-js">The Storyblok Bridge V2</a></li>
</ul>
<h4>SEO Related</h4>
<ul>
<li><a href="https://www.storyblok.com/tp/how-to-generate-sitemap-headless-cms">How to generate a445r Sitemap with a headless CMS?</a></li>
<li><a href="https://www.storyblok.com/apps/seo">https://www.storyblok.com/apps/seo</a></li>
</ul>
<h4>Webhooks And Build Hooks</h4>
<ul>
<li><a href="https://www.storyblok.com/docs/guide/in-depth/webhooks">Everything about Webhooks</a></li>
<li><a href="https://www.storyblok.com/docs/Guides/using-storyblok-webhooks">How to use Storyblok webhooks</a></li>
<li><a href="https://docs.netlify.com/configure-builds/build-hooks/">Hosting build hooks - Netlify example</a></li>
</ul>
<h4>Scripts And Packages</h4>
<ul>
<li>Universal JavaScript SDK for Storyblok’s API: <a href="https://github.com/storyblok/storyblok-js-client">https://github.com/storyblok/storyblok-js-client</a></li>
<li>Migration WP to Storyblok helper: <a href="https://github.com/storyblok/wordpress-importer">https://github.com/storyblok/wordpress-importer</a></li>
</ul>
<h3>Jamstack</h3>
<ul>
<li><a href="https://jamstack.org/">The Jamstack website</a></li>
<li><a href="https://jamstack.org/generators/">A List of Static Site Generators for Jamstack Sites</a></li>
</ul>
Conclusion
<p>After reading this article you will have what you need to understand why a headless setup will improve your project, how to migrate from your WordPress project to a headless CMS like Storyblok and how to keep improving and extending your project.</p>
<p>As you have seen, <strong>the possibilities of a headless setup are endless</strong>. After the migration, you will have enormous flexibility to scale your project, improve its performance and SEO, increase the productivity of the development team and stay on top of the latest trends.</p>
<p>Everyone is starting to migrate and there is more and more content and scripts that make it easier. What are you waiting for to migrate your WordPress?</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Alba Silvente)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7bddb338-e4de-4f6b-a6ee-1a00c82f42ee/wordpress-headless-cms-storyblok.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Maintaining End-To-End Quality With Visual Testing]]></title>
            <link>https://smashingmagazine.com/2021/07/maintaining-end-to-end-quality-visual-testing/</link>
            <guid>https://smashingmagazine.com/2021/07/maintaining-end-to-end-quality-visual-testing/</guid>
            <pubDate>Mon, 19 Jul 2021 10:30:00 GMT</pubDate>
            <description><![CDATA[By adding visual elements to your tests, you can gain more options to add meaningful ways in maintaining a high level of quality for your app. Colby Fayock explains how.]]></description>
            <content:encoded><![CDATA[<p>Testing is a critical part of any developer’s workflow. It helps us to ensure that our project is going to maintain a high level of quality, as well as prevent any pesky bugs from getting out into the wild.</p>
<p>But often automated tests can be a pain to manage. Between an endless amount of code to make sure you’re providing full coverage and dealing with the fragile nature of front-end tests — where a simple selector change can completely break an end-to-end workflow — it can sometimes feel like an uphill battle.</p>
<p>By adding <strong>automated visual testing</strong>, we can eliminate those <a href="https://www.smashingmagazine.com/2021/04/flaky-tests-living-nightmare/">flaky tests</a>, leveling up our testing pipelines providing that coverage (and more) by taking advantage of smart image comparisons using screenshots of our website or app.</p>
<p>Before we dive into visual testing, let’s take a minute to refresh ourselves on the different types of automated testing and how they fit together. We’ll then talk about what exactly visual testing is and how it can provide you another level of testing coverage for your project.</p>
A Quick Look At Some Of The Types Of Automated Testing
<p>Automated testing is an interesting part of the development cycle. Some clients or stakeholders are able to clearly see the value they provide, but others would prefer any development time spent on pure feature development.</p>
<p>This can sometimes be counterintuitive, where the goal of automated testing is to protect the business or prevent the team from having to spend time fixing bugs in the first place. Writing <strong>solid automated tests</strong> can prevent major financial losses! It’s ultimately a risk that some are more willing to take than others.</p>
<p>Luckily, that value isn’t always hard to sell, and when we are afforded the time to focus on quality automated tests, we have a variety of options for how to tackle those tests like unit testing, integration testing, end-to-end testing, and visual testing (which can also provide extended coverage for the first three).</p>
<p>When applied with the strengths of each type of test, we’re able to spend more time writing tests that can actually help protect our work and save our customers’ frustration.</p>
<p>Let’s take a look at what some of these testing strategies look like in practice.</p>
<h3>Unit Testing</h3>
<p>Unit testing focuses on <strong>testing smaller, focused areas of an application</strong>. Want to test that a function that calculates an order total after promotions is working properly? You’d want to write a unit test.</p>
<pre><code>function myBusinessLogic(pricePerItem, quantity, discount) {
  const subtotal = pricePerItem * quantity;
  return subtotal - ( discount * subtotal );
}

expect(myBusinessLogic(2, 4, .1)).toEqual(7.2);
</code></pre>

<p>The great part about unit tests is they’re cheap to write and don’t take a lot of time to run. That’s why you’ll often see companies spend a lot of time building a suite of unit tests to capture those granular pieces of an application.</p>
<p>But because of that focused testing, unit testing might not cover how those different pieces work together, which is where we start moving into integration testing.</p>
<h3>Integration Testing</h3>
<p>The goal of integration testing is to take the smaller pieces and components of an application and <strong>test how they work together</strong>. A common example could be how a particular part of a UI responds to interactions followed by requests to a server or database.</p>
<pre><code>cy.get('.add-to-cart').click();
cy.url().should('contain', 'cart');
cy.get('.cart li').contains('My Item');
</code></pre>

<p>It could be entirely possible that your small UI component works as expected by itself. Your synthetic events might trigger properly on an onClick instance. That code wrapping your API requests might perform perfectly with some mocked data. But there might be holes between those two pieces working together that your unit tests might not catch.</p>
<p>Integration tests are a compelling way to test your application, but you can take that a step further as you look to test “all the things”.</p>
<h3>End-To-End Testing</h3>
<p>End-to-end testing <strong>captures an entire user’s journey end-to-end</strong> for a focused workflow. For instance, if I’m building an e-commerce store, the “happy path” (or the expected path with the least resistance) would be finding a product, adding it to a cart, and paying for those items. If I’m writing an end-to-end test, I would capture that entire process, i.e. from finding a product on a product listing page to paying for that item.</p>
<pre><code>cy.visit('/products');
cy.get('.product a[href="/product/1234"]').click()
cy.url().should('contain', 'product/1234');
...
cy.get('.order-button').click();
cy.url().should('contain', 'receipt');
cy.get('.receipt li').contains('My Item');
</code></pre>

<p>The great part about end-to-end testing is it’s essentially a big integration test. You’re capturing a lot of different components of the application including how the UI works, that the APIs are responding correctly, and that those pieces are working together.</p>
<p>The issue is that end-to-end testing, and even integration testing, takes more time to write and they also take a lot longer to run. So <strong>how can we take advantage of all of our testing options</strong> and put together a suite of tests that will provide an efficient way to cover our application?</p>
<h3>Leveraging The Different Types Of Testing</h3>
<p>There are a variety of mindsets that generally describe how many tests of each type you should be spending time writing.</p>
<p>Mike Cohn came up with the concept of the “test pyramid” in his book <em>Succeeding with Agile</em>.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6bf86ccc-6ad7-422f-ad92-983bd9889a6a/test-pyramid.png" /></p>
<p>He argues that you should be writing more unit tests where they’re less expensive to write and faster to run. While his original diagram labels the various tests a bit differently, as you lean more into integration-type testing, they become slower to run and more expensive to write. While those tests are valuable, you don’t want to have as many integrations or end-to-end tests as you would unit tests.</p>
<p>Having this balance can help you <strong>focus on capturing the critical parts</strong> of the application, such as business logic with unit tests and how they work together with integration tests, but <a href="https://kentcdodds.com/blog/write-tests">Kent C. Dodds argues</a> testing technology has caught up to a point where there are no longer large cost trade-offs for writing integration tests, which is where his concept of the “test trophy” comes in.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/14ed7e57-5327-4fef-93ea-7e73cdeaed2f/test-trophy.png" /></p>
<p>In modern development environments, we have a lot of amazing tools at our disposal like<a href="https://www.cypress.io/"> Cypress</a>, <a href="https://www.selenium.dev/">Selenium</a>, and<a href="https://playwright.dev/"> Playwright</a> which each give developers and QA engineers the ability to write tests that easily interact with browsers like Chrome and Firefox.</p>
<p>With Cypress, writing a test that clicks a button could look as simple as:</p>
<pre><code>cy.get('#my-button').click()
</code></pre>

<p>That’s arguably just as simple as testing that the button is working with synthetic events, if not simpler. The best part is you’re testing how that button <em>actually</em> works in a browser.</p>
<p>Regardless of which diagram you subscribe to, ultimately the goal is to <strong>weigh the different options between cost and speed</strong> to determine the right fit for your particular application. It’s important to not just hit that 100% on your coverage report, but to actually make sure the experience you’re giving to visitors is working as it should.</p>
<p>But no matter the mix of tests you run, these programmatic tests that only interact with and test the DOM (Document Object Model) are missing one big piece of the puzzle: how your visitors visually see that application.</p>
<h3>What Traditional Types Of Testing Doesn’t Capture</h3>
<p>As you’re running your unit, integration, and end-to-end testing on your application, they all have one thing in common. They’re all testing the code.</p>
<p>What I mean by that is they’re not testing what the visitor of your application actually sees.</p>
<p>If you’re running a suite of integration tests and like our example earlier, testing that someone can add a product to a cart and purchase it, each step of the way, you’re finding an element in the DOM through code and confirming that it worked in the same way.</p>
<p>This doesn’t test things like whether or not the text on your page is legible. Did someone add a CSS change that<a href="https://www.linkedin.com/feed/update/urn:li:activity:6516788025379426305/"> accidentally floated all things to the left</a> and flipped them upside down?</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3d22826b-eca4-4107-a73f-6dd1de379e99/instagram-visual-bug.jpg" /></p>
<p>These types of bugs are referred to as "visual bugs", where they might pass all of your tests with flying colors, but when someone actually looks at it, it’s not quite right or worse, completely unusable.</p>
<p>Realistically, we can’t expect to provide 100% full coverage of every detail of a user interface with traditional testing. Between the endless amount of application states and the fact that we’re always adding new features, it simply doesn’t scale.</p>
<p>This is what leads us to the headline of this story: <strong>Visual Testing</strong>.</p>
What Is Visual Testing?
<p>Visual Testing captures the visible output (like a screenshot) of an application and compares it to the same application at another point in time.</p>
<p>This commonly happens by first capturing a baseline screenshot, or a previously captured instance of the application with expected results, and comparing each new test to that baseline.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/352be3ea-30d7-4151-8850-6030a69ee475/applitools-bug-diff.png" /></p>
<p>But as your project is developed, things change. As time goes on, that baseline will update right along with your application as you approve new visual differences as accepted changes.</p>
<h3>Types Of Visual Testing</h3>
<p>An interesting thing about Visual Testing is there are different ways to handle this.</p>
<p>One approach to visually test is by using <strong>pixel-by-pixel comparisons</strong> in which the testing framework will flag literally any difference it sees between two images. While such comparisons provide an entry-level into visual testing, it tends to be flaky and can lead to a lot of false positives.</p>
<p>As you could imagine, when working with the web, things tend to render ever-so-slightly different between page loads and browser updates. If the browser renders the page off by 1 pixel due to a rendering change, your text cursor showing, or “just because”, your deployments may be blocked due to these failed tests.</p>
<p>Your tests are also prone to failures when dealing with dynamic content. For instance, if you ran daily pixel-by-pixel visual tests on the homepage of this site, <em>Smashing Magazine</em>, you’re going to get a lot of failed tests as they produce more and more content.</p>
<p>A better way to handle visual testing is by <strong>leveraging technology like AI</strong> where each time a test is run, the testing framework intelligently looks at the screenshot captured compared to the baseline.</p>
<p>It can detect that the two captures are different or even detect if it’s a content change as opposed to a layout change. It won’t flag that test as failed if something didn’t actually change and you can even add rules to ignore dynamic regions of an application that might change due to that content.</p>
<h3>Where Visual Testing Helps</h3>
<p>Visual testing thrives in being able to capture the current state of an application just the way your customer saw it. This makes it compelling for really any application that will have real humans interacting with it.</p>
<p>As it’s capturing that snapshot, it’s providing coverage of many pieces of that application, not just a single granular component that you wrote a test for. It ends up capturing the context around that component, leading to wider coverage.</p>
<p>This becomes a great way to <strong>provide broad coverage with low overhead</strong>. Back to the test pyramid or test trophy, we’re able to actually provide comprehensive coverage on top of all of our other tests.</p>
How Does Visual Testing Work?
<p>The gist is simple — comparing two images against each other and looking for the difference — but it’s a little more involved than that.</p>
<h3>Image Comparisons</h3>
<p>When implementing visual testing, the goal will be to provide coverage for critical workflows that can capture how a real person is using the application. That often includes the very first screen someone may see, but that’s typically not the only screen they see.</p>
<p>Just like creating a strategy for how to run traditional tests, you want to make sure you look for <strong>real interactions that end up with real results</strong> in the UI, such as adding an item to a shopping cart or adding a favorite item to your wishlist.</p>
<p>With that in mind, you’ll want to capture a screenshot each step of the way. For example, if you were testing an online store, you may want to add steps for the following:</p>
<ul>
<li>List of products loaded on a page;</li>
<li>Product page after selecting a single product;</li>
<li>On-page cart UI after adding a product to that cart;</li>
<li>Cart page after navigating to the cart;</li>
<li>Payment and shipping UI once entering the checkout flow;</li>
<li>Receipt page upon successful purchase.</li>
</ul>
<p>This will capture the results of all of the interactions as someone is making their way through your online store, where you’re able to verify that not only does it functionally work from a code perspective, but that the person can actually use your application without visual bugs interfering.</p>
<h3>Technical Bits</h3>
<p>As you’re making your way through planning screenshots, you’ll need a mechanism to automate those tasks. Something that can interact with a browser-based on a set of tasks.</p>
<p>This is where <strong>popular browser automation frameworks</strong> like Selenium, Cypress and Playwright come in, where those testing frameworks take advantage of browser APIs to run through your commands, finding and clicking things just like a human would, where you would then tell the visual testing framework when to capture the UI state visually.</p>
<p>In the case of Cypress and Applitools, Cypress would navigate through each page, where then the Applitools SDK would extract a snapshot of the DOM, and send that snapshot up to the Applitools cloud, where it would finally generate screenshots for comparison.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3261b5b-fbcc-4449-92b3-d920f0963ca5/cypress-applitools-diagram.png" /></p>
<p>At that point, depending on the visual testing platform, you’ll get a set of results in the form of highlighted differences or a nice green checkmark if things look good.</p>
<h3>Integration With Existing Testing Frameworks</h3>
<p>Like the Cypress and Applitools integration above, integration typically has low friction. A lot of the available visual testing platforms can integrate directly into existing testing frameworks, it mostly just depends on which SDKs they have available.</p>
<pre><code>cy.visit('/product/1234');
cy.eyesOpen({ appName: 'Online Store', testName: 'Product Page' });
cy.eyesCheckWindow();
cy.eyesClose();
</code></pre>

<p>This means you typically don’t need to completely rewrite your test suite to strengthen your tests and get visual coverage; you can add those checkpoints to the tests you already have.</p>
<h3>Automating Tests</h3>
<p>Fortunately, automation of development and test-related tasks has been maturing quickly, providing a lot of great options for how we can automate our tests.</p>
<p>Traditional CI/CD solutions like Jenkins or Travis CI allow you to <strong>run your tests on their environments</strong> right alongside the rest of the integration and deployment pipeline. Relatively new to the automation space are tools like<a href="https://github.com/features/actions"> GitHub Actions</a>, where they provide a similar mechanism to the traditional CI/CD environments, but right inside of your existing GitHub repo. This makes it an easy win when trying to run your tests and other code tasks automatically, where you don’t need an entirely new system but instead use your existing tools.</p>
<pre><code>name: Node.js CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: 12.x
    - run: npm ci
    - run: npm test
</code></pre>

<p>But regardless of the environment you use, ultimately you’re subject to the requirements of the testing framework.<a href="https://github.com/applitools/tutorial-cypress/blob/master/.github/workflows/test.yml"> Cypress works pretty seamlessly</a> wherever you can install Node.js, which is pretty common these days, as long as you have access to a headless browser like Electron or Chrome. Others might require a little extra environment, but at that point, you can typically scaffold that environment as you’d like, creating the conditions you need to run your tests.</p>
What Are The Benefits Of Visual Testing?
<p>Visual testing is going to provide a wide variety of benefits like some of the ones we already discussed, but it really helps all stakeholders including executives, product managers, developers, designers, and really anyone else on the team.</p>
<p>For instance, for a CEO or Product Manager, you’re gaining confidence that <strong>your test coverage is actually capturing real-world usage</strong>. For the development team, you’re gaining the same confidence that whenever you make changes, you’re going to get immediate feedback, eliminating the fear factor involved when trying to move quickly. But there are also a lot of practical benefits.</p>
<h3>Less Code To Maintain</h3>
<p>When integrating with a visual testing platform, the majority of your code is going to revolve around two things: interactions and screenshots.</p>
<p>The interactions are essentially navigating through an application, finding what page or user flow you want to capture. Regardless of how you’re testing, you’ll likely need to maintain this in one form or another.</p>
<p>The screenshots, on the other hand, are going to cover all of the assertions you would normally write in a test. By comparing each screenshot against a baseline, you automatically are making sure that each component of your project is working exactly as intended.</p>
<h3>Tests Are Less Fragile</h3>
<p>And by using those screenshots as your assertion mechanism, your tests are going to be less flaky and fragile.</p>
<p>If you’re writing an assertion against a particular part of the DOM, such as using an ID or an automatically generated selector, you’re risking a breaking test with any change to that component.</p>
<p>With an ID, someone might simply accidentally remove or change it. Maybe you thought it was for functional purposes only and updated it when reworking things, which ended up breaking the test (happened to me!).</p>
<p>Or if you’re using general selectors, whether automatically generated or not, they tend to be very specific as you’re <strong>testing very specific parts of the application</strong>. If you end up nesting some HTML or moving things around in the code a little bit, even if you didn’t change how it visually looks, it could end up breaking that test.</p>
<h3>Testing What People Are Actually Using</h3>
<p>Speaking of testing how it visually looks, when visual testing, you’re testing what your visitors or customers actually see.</p>
<p>Using proper, semantic HTML doesn’t automatically make your project usable. A small CSS change (like z-index) can completely change the usability and how something looks.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6af4046-ba64-4e7f-9e2c-702efed4defb/gmail-visual-bug.png" /></p>
<p>By capturing a screenshot and comparing the actual state of the application through interactions of a user’s flow, you’re able to make sure that your application is both functionally working as well as making sure it’s usable by more than just automation robots.</p>
<p><strong>Recommended reading</strong>: <em><a href="https://www.smashingmagazine.com/2021/02/css-z-index-large-projects/">Managing CSS Z-Index In Large Projects</a></em></p>
<h3>Testing Things You Didn’t Think To Test</h3>
<p>You’re also getting coverage of different parts of your application that you didn’t even think to test.</p>
<p>Consider the list of tests that you have in your suite, those are the ones you thought to write or wrote because you previously hit a bug. What about the rest of the application?</p>
<p>That screenshot is going to capture more detail and context that your other tests might not have included.</p>
What Doesn’t Visual Testing Cover?
<p>But visual testing isn’t intended to be an end-all solution to replace your entire suite of tests. Like the other types of tests, it should co-exist, filling in the gaps of the others and ultimately providing more meaningful coverage.</p>
<h3>Testing Data-Driven Business Logic</h3>
<p>As you’re running through visual tests, you might be able to capture some aspects of your business logic, such as making sure when someone adds an item to the cart, that the math checks out, but your online store likely has a wider variety than just that one product.</p>
<p>It’s still important to capture that complex business logic with unit testing, making sure you’re capturing different use cases like how various discounts impact that total.</p>
<h3>Comprehensive API Testing</h3>
<p>When dealing with APIs, you can think of a visual test like an integration test. We’re able to test that when interacting with the browser, our request logic is working as expected. But it doesn’t provide a comprehensive look at how that API is functioning.</p>
<p>Similar to business logic, <strong>your API should still be backed by a suite of tests</strong> that will ensure it’s working as expected such as unit tests or health checks.</p>
Getting Started With Visual Testing
<p>As another tool in our belt, visual testing can really help provide another level of coverage that helps us maintain a high level of quality for our applications, but where do we start?</p>
<h3>Fitting Into The Development Lifecycle</h3>
<p>Because visual testing helps work towards the goals of all of the stakeholders, this can really fit in at any part of the development lifecycle.</p>
<p>For instance, traditionally tests are only used to validate that the code is working as intended, but we can also <strong>use visual testing for design handoff and UX collaboration</strong>. The designers on the team can plug in their mockups as a baseline and easily use them to compare the actual experience.</p>
<p>But from a code perspective, visual testing can thrive in automated environments like running checks on pull requests, on staging environments before deployment, and making sure production is looking good post-deploy.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/882b5d84-0ef2-49b4-810a-be4014631954/github-action-visual-diff.png" /> </p>
<p>You can even run your visual testing on a cron, replacing your health check synthetic events, which typically are flaky and don’t really ever truly tell you what state your application is in.</p>
<p>Luckily there are a lot of options for both what service you use, but also the integration points for using those services.</p>
<h3>Available Solutions For Visual Testing</h3>
<p>Determining what solution to move forward with relies on picking the library or service you’ll be using to run the tests. Like we covered earlier, the biggest differentiator will be the type of visual testing these services provide.</p>
<p>A lot of platforms are using pixel-by-pixel visual testing to perform checks. This includes tools like<a href="https://percy.io/"> Percy</a> and<a href="https://www.chromatic.com/"> Chromatic</a> which will flag changes between two screenshots.</p>
<p>Then you have AI-powered visual testing, where<a href="https://applitools.com/"> Applitools</a> is really the only service that’s currently providing that capability. Instead of simply checking images pixel-by-pixel, Applitools intelligently compares the images <strong>avoiding any flaky tests or false positives</strong>, giving meaningful change detection.</p>
<p>Regardless of the solution, you’ll ultimately need to integrate it into your development environment, whether you’re starting from scratch or adding it to an existing testing framework.</p>
<h3>Integrating Visual Testing</h3>
<p>When integrating your visual testing platform of choice, you have the option of starting from scratch or the easier route of integrating into your existing testing framework. Tools like Applitools make this easy, where the large variety of SDKs that are supported helps make it easy to drop into existing workflows.</p>
<p>A good example of this is if you’re already set up and running with Cypress:</p>
<pre><code>it('should log into the application', () =&gt; {
  cy.get('#username').type('colbyfayock');
  cy.get('#password').type('Password1234');
  cy.get('#log-in').click();
  cy.get('h1').contains('Dashboard');
});

</code></pre>

<p>If you’re already performing programmatic tests, you can simply layer in visual testing to provide another layer of coverage.</p>
<pre><code>it('should log into the application', () =&gt; {
  cy.eyesOpen({ appName: 'My App', testName: 'Login' });
  cy.get('#username').type('colbyfayock');
  cy.get('#password').type('Password1234');
  cy.get('#log-in').click();
  cy.eyesCheckWindow();
  cy.eyesClose();
});

</code></pre>

<p>And some SDKs make it even easier, where if you’re already running a Storybook library, all you need to do is install the package with npm and run a simple command, then you have complete coverage of all of your components.</p>
<pre><code>npm install @applitools/eyes-storybook --save-dev
npx eyes-storybook
</code></pre>

<p>Ultimately, the biggest question is what testing framework you’ll want to use and if the service you want to use supports that framework.</p>
Creative Uses Of Visual Testing
<p>Outside of gaining another level of testing coverage for your application, there are a variety of other ways you can take advantage of visual testing.</p>
<ul>
<li><strong>Uptime Monitoring</strong><br />Regularly run a meaningful visual test instead of typical uptime monitoring with fragile synthetic events.</li>
<li><strong>Design/UX Collaboration</strong><br />From handoff to usability issues, use visual testing to give the entire team a medium to collaborate.</li>
<li><strong>Accessibility Testing</strong><br /><a href="https://applitools.com/blog/accessibility-testing-strategy/">Capture key issues</a> that can limit the accessibility of your application.</li>
<li><strong>Historical Snapshots</strong><br />Periodically running a visual test can help you capture snapshots, easily giving you a way to reference an older state of the project.</li>
<li><strong>Localization Testing</strong><br />With AI-based visual testing being able to detect content changes, you have the ability to make sure everything is looking and working as expected no matter the language. Bonus: you can reduce overhead when trying to compare different versions of a given language.</li>
</ul>
<p>By adding the visual element to your tests, you’re gaining more options to add meaningful ways to maintain a high level of quality for your app.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Colby Fayock)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/565523e3-0845-4042-9cd1-b3e48c75519d/maintaining-end-to-end-quality-visual-testing.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[Three Insights I Gained While Researching Vue.js Accessibility]]></title>
            <link>https://smashingmagazine.com/2021/07/three-insights-vuejs-accessibility/</link>
            <guid>https://smashingmagazine.com/2021/07/three-insights-vuejs-accessibility/</guid>
            <pubDate>Fri, 16 Jul 2021 13:00:00 GMT</pubDate>
            <description><![CDATA[Web app accessibility appears difficult because it seems that there is little information on the subject available online. Let’s take a closer look at the accessible use of framework features, concrete Vue.js traits, as well as community initiatives and vetted patterns.]]></description>
            <content:encoded><![CDATA[<p>JavaScript frameworks like React, Angular and Vue have a very bad reputation when it comes to web accessibility. But is this due to inherent technical limitations or insurmountable problems of those tools? I think not. During the research phase of my book, “<a href="https://accessible-vue.com/">Accessible Vue</a>,” I gained three insights regarding web app accessibility in general and the framework in particular. Considering these, perhaps it’s worth taking another perspective around accessible Vue apps.</p>
Insight 1: JavaScript Framework Features For Accessibility Are Underused
<p>Component-based design, enabled and enforced by modern JavaScript frameworks, does not only provide great developer experiences and project ergonomics when used in a smart way, but it can also offer advantages for accessibility. The first is <strong>the factor of reusability</strong>, i.e. when your component gets used in several places within your app (perhaps in different forms or shapes) and it only has to be made accessible only once. In this case, an increased developer experience actually helps the user and “baking accessibility into components” (<a href="https://hiddedevries.nl/en/blog/2019-05-24-baking-accessibility-into-components-how-frameworks-help">as Hidde de Vries puts it)</a> creates a win-win scenario for everyone.</p>
<p>The second aspect that comes with component based-designs are <code>props</code> — namely in the form that one component can inherit or get context from its parent environment. This forwarding of “environment data” can serve accessibility as well.</p>
<p>Take headlines, for example. A solid and comprehensible headline structure is not only good for SEO but especially for people using screen readers. When they encounter a sound document outline, constructed with headlines that structure a web page or app, screen reader users gain a quick overview of the web page they are on. Just like visually-abled users don’t read every word on a page but scan for interesting things, <strong>blind screen reader users don’t make their software read each and every word</strong>. Instead, they are checking a document for content and functionality they are interested in. Headlines, for that matter, are keeping pieces of content together and are at the same time providing a structural frame of a document (<a href="https://en.wikipedia.org/wiki/Timber_framing">think timber frame houses</a>).</p>
<p>What makes headlines providing a structure is not only their mere existence. It is also their nesting that creates an image inside a user’s mind. For that, a web developer’s headline toolbox contains six levels (<code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>). By applying these levels, both editors and developers can create an outline of content and a reliable functionality that users can expect in the document.</p>
<p>For example, let’s take the (abridged) headline tree from the <a href="https://www.gov.uk/">GOV.UK website</a>:</p>
<pre><code>1 — Welcome to GOV.UK
  2 — Popular on GOV.UK
  2 — Services and information
    3 — Benefits
    3 — Births, deaths, marriages and care
    3 — Business and self-employment
    // …etc
  2 — Departments and policy
    3 — Coronavirus (COVID 19)
    3 — Travel abroad: step by step
…etc
</code></pre>

<p>Even without visiting the actual page and without actually perceiving it visually, this headline tree created a table of contents helping you understand what sections can be expected on the front page. The creators used headline elements <a href="https://hiddedevries.nl/en/blog/2020-09-05-when-there-is-no-content-between-headings">to herald data following it</a> and didn’t skip headline levels.</p>
<p>So far, so familiar (at least in correlation with search engines, I guess). However, because a component can be used in different places of your app, hardwired headline levels inside them can sometimes create a suboptimal headline tree overall. <strong>Relations between headlines</strong> possibly aren’t conveyed as clear as in the example above (“Business and self-employment” does not stand on its own but is related to “Services and information”). </p>
<p>For example, imagine a listing of a shop’s newest products that can be placed both in the main content and a sidebar — it’s quite possible that both sections live in different contexts. A headline such as <code>&lt;h1&gt;Our latest arrivals&lt;/h1&gt;</code> would make sense above the product list in the main content — given it is the central content of the whole document or view. </p>
<p>The same component sporting the same <code>&lt;h1&gt;</code>  but placed in a sidebar of another document, however, would suggest the most important content lives in the sidebar and competes with the <code>&lt;h1&gt;</code> in the main content. While what I described above is a peculiarity of component-based design in general this gives us a perfect opportunity to put both aspects together — the need for a sound headline tree and our knowledge about props:</p>
<h3>Context Via <code>props</code></h3>
<p>Let’s progress from theoretical considerations into hands-on code. In the following code block, you see a component listing the newest problems in an online shop. It is extremely simplyified but the emphasis is on line 3, the hardcoded <code>&lt;h1&gt;</code>:</p>
<pre><code>&lt;template&gt;
    &lt;div&gt;
        &lt;h1&gt;Our latest arrivals&lt;/h1&gt;
        &lt;ol&gt;
            &lt;li&gt;Product A&lt;/li&gt;
            &lt;li&gt;Product B&lt;/li&gt;
            &lt;!-- etc --&gt;
        &lt;/ol&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p>To use this component in different places of the app without compromising the document’s headline tree, we want to make the headline level dynamic. To achieve this, we replace the <code>&lt;h1&gt;</code> with Vue’s <a href="https://vuejs.org/v2/guide/components.html#Dynamic-Components">dynamic component name</a> helper called, well, <code>component</code>:</p>
<pre><code>&lt;component :is="headlineElement"&gt;Our latest arrivals&lt;/component&gt;
</code></pre>

<p>In the script part of our component, we now have to add two things:</p>
<ul>
<li>A component prop that receives the exact headline level as a string, <code>headlineLevel</code>;</li>
<li>A computed property (<code>headlineElement</code> from the code example above) that builds a proper HTML element out of the string <code>h</code> and the value of <code>headlineLevel</code>.</li>
</ul>
<p>So our simplified script block looks like this:</p>
<pre><code>&lt;script&gt;
export default {
    props: {
      headlineLevel: {
        type: String
    },
    computed: {
        headlineElement() {
          return "h" + this.headlineLevel;
        }
    }
}
&lt;/script&gt;
</code></pre>

<p>And that’s all!</p>
<p>Of course, adding checks and sensible defaults on the prop level is necessary — for example, we have to make sure that <code>headlineLevel</code> can only be a number between 1 and 6. Both Vue’s native <a href="https://vuejs.org/v2/guide/components-props.html#Prop-Validation">Prop Validation</a>, as well as TypeScript, are tools at your disposal to do just that, but I wanted to keep it out of this example.</p>
<p>If you happen to be interested in learning how to accomplish the exact same concept using React, <a href="https://medium.com/@Heydon/managing-heading-levels-in-design-systems-18be9a746fa3">friend of the show magazine Heydon Pickering wrote about the topic back in 2018</a> and supplied React/JSX sample code. Tenon UI’s Heading Components, also written for React, take this concept even further and aim to automate headline level creation by using so-called “LevelBoundaries” and a generic <code>&lt;Heading&gt;</code> element. <a href="https://www.tenon-ui.info/headings/">Check it out</a>!</p>
Insight 2: There Are Established Strategies To Tackle Web App Accessibility Problems
<p>While web app accessibility may look daunting the first time you encounter the topic, there’s no need to despair: vested accessibility patterns to tackle typical web app characteristics do exist. In the following Insight, I will introduce you to strategies for supplying <strong>accessible notifications</strong>, including an easy implementation in Vue.js (<a href="#strategy-1-announcing-dynamic-updates-with-live-regions">Strategy 1</a>), then point you towards recommended patterns and their Vue counterparts (<a href="#strategy-2-using-undisputed-wai-aria-authoring-practices">Strategy 2</a>). Lastly, I recommend taking a look at both Vue’s emerging (<a href="#strategy-3-view-and-help-vue-s-accessibility-initiatives-grow">Strategy 3</a>) and React’s established accessibility community (<a href="#strategy-4-learn-from-react-accessibility-leads">Strategy 4</a>).</p>
<h3>Strategy 1: Announcing Dynamic Updates With Live Regions</h3>
<p>While accessibility is more than making things screen reader compatible, improving the screen reader experience plays a big part of web app accessibility. This is rooted in the general working principle of this form of assistive technology: screen reader software transforms content on the screen into <strong>either audio or braille output</strong>, thus enabling blind people to interact with the web and technology in general.</p>
<p>Like keyboard focus, a screen reader’s output point, the so-called <strong>virtual cursor</strong>, can only be at one place at once. At the same time, one core aspect of web apps is a dynamic change in parts of the document without page reload. But what happens, for example, when the update in the DOM is actually <em>above</em> the virtual cursor’s position in the document? Users likely would not notice the change because do not tend to traverse the document in reverse — unless they are somehow informed of the dynamic update.</p>
<p>In the following short video, I demonstrate what happens (or rather, what <em>not</em> happens) if an interaction causes a <strong>dynamic DOM change</strong> nowhere near the virtual cursor — the screen reader just stays silent:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e15cfbad-5787-4c55-82a8-7bd8aa687007/off-canvas-navigation.png" /></p>
<p>In this case, you need to establish at least two refs: One for the trigger button that opens the navigation (let’s call it <code>navTrigger</code>), and one for the element that gains focus as soon as the navigation is visible (<code>navContainer</code> in this example, an element which needs <code>tabindex="-1"</code> to be programmatically focusable). So that, when the trigger button is clicked, the focus will be sent into the navigation itself. And vice versa: As soon as the navigation closes, the focus must return to the trigger.</p>
<p>After having read the paragraphs above, I hope one thing becomes clear for you, dear reader: Once you understand the importance of focus management, you realize that all the necessary tools are at your fingertips — namely Vue’s <code>this.$refs</code> and JavaScript’s native <code>.focus()</code></p>
Conclusion
<p>By highlighting some of my core findings regarding web app accessibility, I hope that I have been able to help reduce any diffuse fear of this topic that may have existed, and you now feel more confident to build accessible apps with the help of Vue.js (if you want to dive deeper into the topic, check out if my little ebook <a href="https://accessible-vue.com/">“Accessible Vue”</a> can help you along the journey).</p>
<p>More and more websites are becoming more and more app-like, and it would be sad if these amazing digital products were to remain so barrier-laden only because web developers don’t know exactly where to start with the topic. It’s a <strong>genuinely enabling moment</strong> once you realize that a vast majority of web app accessibility is actually “good old” web accessibility, and for the rest of it, cowpaths are already paved. </p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Marcus Herrmann)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c3908803-4ddc-4820-8f4e-85e11b4ebbb7/three-insights-vuejs-accessibility.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[ISR vs DPR: Big Words, Quick Explanation]]></title>
            <link>https://smashingmagazine.com/2021/07/isr-dpr-explained/</link>
            <guid>https://smashingmagazine.com/2021/07/isr-dpr-explained/</guid>
            <pubDate>Thu, 15 Jul 2021 14:00:00 GMT</pubDate>
            <description><![CDATA[There are two strategies for incrementally building websites that are growing in popularity: Incremental Static Regeneration and Distributed Persistent Rendering. What’s the difference? Let’s figure it out.]]></description>
            <content:encoded><![CDATA[<p>If you’ve been dabbling in the Jamstack/page rendering/Next.js world, chances are you’ve heard of the terms “Incremental Static Regeneration” (ISR) and “distributed persistent rendering” (DPR) floating around. And if you haven’t, you might be like, “Wow, these are long words that I’ll never understand.” That’s where you’re wrong! You’re about to understand them <em>now</em>.</p>
What Are These Things?
<p>These terms are strategies for <strong>incrementally building websites</strong>. Normally, when you deploy a website that isn’t server-side or client-side rendered, it has to be compiled and built for the browser to natively load it (so, for example, your JSX is transpiled to vanilla JavaScript, your SCSS compiled to vanilla CSS, your templates into HTML).</p>
<p>As your websites get large, you might start to run into having to have fairly long build times, because that’s a <em>lot</em> to compile. Generally, your websites might have pages in two categories:</p>
<ul>
<li><strong>Type A</strong><br />“Critical” pages (home page, about us, contact us)</li>
<li><strong>Type B</strong><br />“Deferred” pages that might not be hit as often as the Type A pages (product catalog, certain documentation pages)</li>
</ul>
<p>If you were to incrementally build this website, you could theoretically break up your build where your Type A pages are built upfront, and then Type B pages are built later!</p>
<p>Both ISR and DPR follow this approach but do it in slightly different ways.</p>
What’s The Difference Between ISR And DPR?
<p>For both approaches, Type A pages are built upfront right when you deploy. With Type B pages, they vary a little more. The key thing that is different between these two approaches is <em>immutability</em>. When I say immutability, I mean that once a page is added to a build, it doesn’t change, and every user hitting a URL during that deployment will always see the exact same data.</p>
<p>With ISR, your Type B pages are <strong>built at runtime</strong> when a user goes to the page. Each of these pages has an “expiration time” (or “revalidation time”) where it will re-build based on new content that comes in at that time (fetched in the background). It is based on a caching strategy called “stale while revalidate”, meaning a page can be “stale” with old information until it’s re-generated and the cache is updated. This approach does not guarantee immutability across builds. When I say that, I mean that you can’t necessarily go back to a previous deployment with full confidence that all the content is going to be as it was at that time you originally ran that page (this is explained in <a href="https://www.smashingmagazine.com/2021/04/incremental-static-regeneration-nextjs/#isr-not-just-caching">another blog post</a> from <a href="https://www.smashingmagazine.com/author/lee-robinson/">Lee Robinson</a> on the Next.js team).</p>
<p>There are <strong>pros and cons</strong> to this; the major pro meaning that you can have your data that populates the page regularly update without rebuilding the site, and the major con being that debugging will be very difficult without that immutable piece (because some users might see a stale page and others might see the correctly updated one).</p>
<p>With DPR, your Type B pages are also built at runtime when a user goes to the page. When the non-built pages are requested for the first time, they are built and cached at the edge so they don’t need to be built again. Once it’s a part of the build, it will not change until a redeploy. There are also pros and cons to this approach. The major pro is that <strong>this guarantees immutability</strong>. When you go to a URL, every user will always see the same exact information. The con is that if you want to have one of those pages updated, you’ll need to trigger a rebuild of the site.</p>
How Can I Use These Approaches And Compare For Myself?
<p>In an ideal world, these approaches are built into the frameworks you use and you won’t have to do much to use them. Right now though, you can <strong>test it out with Next.js</strong>! ISR is built-in by default to Next.js when you deploy it to a Node.js-driven platform like Vercel, and DPR is built in when you deploy to Netlify.</p>
<p>You can use DPR in other frameworks as well (Zach Leatherman has <a href="https://www.youtube.com/watch?v=bENDCw9aLV0">some demos of it with Eleventy</a> where he defers building hundreds of pages), and the Next.js team said that <strong>ISR will be coming to other frameworks</strong> in the future (like Nuxt and SvelteKit). You can also leave a comment on how DPR is implemented (<em>for any Jamstack platform!</em>) <a href="https://github.com/jamstack/jamstack.org/discussions/549">in this RFC</a>.</p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Cassidy Williams)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e4090b9-8bd9-4d5a-aaed-5177c46a6803/isr-dpr-explained.jpg" length="0" type="image/jpg"/>
        </item>
        <item>
            <title><![CDATA[You Can Do That With A JavaScript Data Grid?]]></title>
            <link>https://smashingmagazine.com/2021/07/javascript-data-grid-kendo-ui/</link>
            <guid>https://smashingmagazine.com/2021/07/javascript-data-grid-kendo-ui/</guid>
            <pubDate>Thu, 15 Jul 2021 13:45:00 GMT</pubDate>
            <description><![CDATA[In this article, you’ll get to see some pretty groundbreaking things you can achieve with modern JavaScript grids and discover new ways to augment a data grid to make it engaging, responsive, and accessible. All this will be illustrated using Kendo UI Data Grids and their features. ]]></description>
            <content:encoded><![CDATA[<p>Data grids, also known as data tables, are essential in presenting massive amounts of data to users. Users should be able to view the data in a way that’s easy to understand, analyze, and manipulate. However, building data grid views with performance, speed, and user experience in mind can be a particularly daunting task. This is especially true when building them from scratch or using libraries with limited functionality and sub-par performance. </p>
<p>There is no shortage of libraries that bundle data grids. However, most only offer a limited set of grid features, common among them being pagination, filtering, sorting, and theming. Other data grid libraries are built as wrappers that rely on several dependencies. These kinds of libraries unfavorably impact the performance of your grid compared to their native counterparts. They are not built anew for every framework or language. As such these non-native libraries can be slow, may fail to take advantage of superior features of a framework/language, lack crucial functionality, and require additional setup to get working. </p>
<p>Another thing these libraries are characterized by is poor user experience. They often fail to implement responsive design for different screen sizes and orientations, are unable to lock or make parts of a grid sticky, and make accessibility an afterthought. Besides that, they only provide editing in forms separate from the grid, which often involves multiple actions to complete. This can be tiring and repetitive notably when editing numerous data items. Others don’t even offer editing. To add to this, they tend to lack data export functionality and leave users relying on web page printing for exports. </p>
<p>Due to their limited functionality and features, you have to supplement them with separate libraries to build an adequate grid. For example, to chart data, you’d have to use a different chart library since the grid library won’t offer it. Moreover, you’re unable to embed these unrelated components in the grid since support for them is not in-built.</p>
<p>To address these problems, you’d have to use a library that’s not only built to be native but also incorporates a range of complementary components and focuses on great user experience and performance. To demonstrate the features of an ideal data grid, we’ll use Kendo UI Data Grids as an example. These data grids are one of 100+ components available in a library bundle called <a href="https://www.telerik.com/kendo-ui?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-general-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Progress® Kendo UI®</a>. The bundle consists of four component libraries built natively for several frontend frameworks. These are <a href="https://www.telerik.com/kendo-angular-ui?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-angular-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Kendo UI for Angular</a>, <a href="https://www.telerik.com/kendo-react-ui?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-react-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">KendoReact</a>, <a href="https://www.telerik.com/kendo-vue-ui-b?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Kendo UI for Vue</a>, and <a href="https://www.telerik.com/kendo-jquery-ui-b?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Kendo UI for jQuery</a>. The examples given throughout this piece will feature grids from all four of these libraries.</p>
Responsive Design
<p>When it comes to data grids, your users must have a full view of the data they are working with. Data that is hidden or difficult to access is frustrating to read and turns users completely off your grid. A lot of grid libraries do not make their grids responsive and it’s up to you to implement it using styling and some logic. This can be especially complicated with data containing very many columns. If you are building multiple grids with different types of data with varying representation needs, this further compounds the complexity. You have to figure out scrolling, media queries, font sizes, scaling, whether to omit some parts of the data, and so on. </p>
<p>Modern data tables should be able to respond to changes in orientation and display all data well on all screen sizes. For example, the Kendo UI Data Grids adjust their size depending on the viewport size and the number of rows it accommodates. For example, in the Angular Grid, you can set its height and the grid will become scrollable if some of its contents do not fit. Setting the height only involves specifying a value for the grid’s height CSS property and ensuring that the parent element also has a height set. No other configuration is required. You can see how this is done in this sample stock table <a href="https://www.telerik.com/kendo-angular-ui/components/grid/advanced-features/responsive/#toc-height?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-angular-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">here</a>. </p>
<p>Besides that, you can choose to toggle the visibility of the columns in the grid while still displaying all required data. You achieve this by creating different columns for different screen size ranges and using the <code>media</code> property on a column to decide where to show them. For instance, in this <a href="https://www.telerik.com/kendo-angular-ui/components/grid/advanced-features/responsive/#toc-columns?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-angular-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Angular data table</a>, for larger screen sizes (<code>media="(min-width: 450px)"</code>), the columns are on full display and look like this. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e8e9585-676c-4b79-8a61-e81db519a6dc/1-javascript-data-grid.png" /></p>
<p>However, you can choose to hide the price, in-stock, and discontinued columns on medium displays (<code>media="(min-width: 680px)"</code>). This should look like this:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d3167eb7-3696-4af0-8821-8b38d3a95c7c/2-javascript-data-grid.png" /></p>
<p>On smaller displays ( <code>media="(max-width: 450px)"</code> ) , you can create a single custom column to show all the data similar to this: </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1bd2024-c4e2-4385-ada7-cc1c69f3a5b4/3-javascript-data-grid.png" /></p>
<p>Kendo UI Data Grids also support <a href="https://www.telerik.com/kendo-angular-ui/components/grid/advanced-features/responsive/#toc-bootstrap-4-compatibility?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-angular-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Bootstrap 4 device identifiers</a> like <code>xs, sm, md, lg</code>, and <code>xl</code>. Although this is easier to use, it’s not as versatile since it limits the number of queries you can include to one. For instance, with your own breakpoints you could have something like <code>media="(min-width: 500px) and (max-width: 1200px)"</code>. Combining multiple identifiers is not possible with Bootstrap 4 device identifiers.</p>
Accessibility Compliance
<p>Making sure that your grid meets modern accessibility standards should be a priority. Doing this ensures that people with disabilities can engage with your grid and guarantees that there is equity among your users. Still, some libraries do nothing to make sure their grids are accessible. Others do only the bare minimum resulting in sub-standard grids when evaluated for accessibility. Augmenting these grids to be accessible involves a fair amount of work. This is further complicated by more intricate grid designs. Although this work will pay off later for you and your users, these libraries should have made accessibility a core part of their products. </p>
<p>Kendo UI Data Grids prioritize it by supporting the main accessibility standards like <a href="https://www.w3.org/WAI/standards-guidelines/aria/">WAI-ARIA</a>, <a href="https://webaim.org/standards/508/checklist">Section 508</a>, and <a href="https://www.w3.org/TR/WCAG21/">WCAG 2.1</a>. For example, <a href="https://www.telerik.com/kendo-react-ui/grid?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-react-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">KendoReact</a> follows the Section 508 standard by ensuring that most of its components are completely accessible and support keyboard navigation. It follows <a href="https://www.w3.org/WAI/WCAG21/quickref/#keyboard-accessible">WCAG’s Keyboard Accessible guideline</a> by making the grid and all its embedded components keyboard operable. As a result, the React Grid achieves the highest WCAG conformance level of <a href="https://www.telerik.com/kendo-react-ui/components/accessibility/accessibility-compliance/">AAA</a>. Being a web component, <a href="https://www.telerik.com/kendo-react-ui/grid?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-react-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">KendoReact Data Grid</a> fulfills the WAI-RAI specification to ensure that users with disabilities can adequately interact with it on web pages. In this <a href="https://www.telerik.com/kendo-react-ui/components/grid/#toc-react-grid-demo-preview?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-react-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">React data grid</a>, for example, you can navigate to the different components and rows using a keyboard. </p>
Virtual Scrolling
<p>With virtual scrolling, only a segment of data is rendered within the grid. This is usually set as a number of records to fetch. When a user scrolls past this segment, another one of the same size is rendered. This helps with performance as rendering a large data set takes up a lot of memory and hobbles the performance and speed of your grid. Virtual scrolling gives the illusion of rendering all the data without any of the performance consequences.  </p>
<p>Virtual scrolling is not often supported by grid libraries. Instead, they encourage pagination which may not be the best experience for users when viewing massive amounts of data. When attempting to render enormous data quantities, the grid’s performance suffers further contributing to a terrible user experience. For libraries that support virtual scrolling, it only applies to records in the data and not specific parts of the records. This is particularly limiting when the data has several columns. </p>
<p>Kendo UI supports virtual scrolling for both local and remote data. For example, in the <a href="https://demos.telerik.com/kendo-ui/grid/index?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Kendo UI for jQuery Grid</a>, you enable it by setting the <code>scrollable.virtual</code> property of a grid to true. By setting this, the grid only loads the number of items specified by the <code>pageSize</code> property of the grid data source. You can see how this works in this<a href="https://demos.telerik.com/kendo-ui/grid/virtualization-local-data?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article"> jQuery data grid </a>which uses local data. </p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;...&lt;/head&gt;
  &lt;body&gt;
    ...
    &lt;div id="grid"&gt;&lt;/div&gt;
    &lt;script&gt;
      var dataSource = new kendo.data.DataSource({
                            pageSize: 20,
              ...
            });
      $("#grid").kendoGrid({
                        dataSource: dataSource,
                        scrollable: {
                            virtual: true
                        },
        ...
      });
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>This same setting will work for remote data as seen in this <a href="https://demos.telerik.com/kendo-ui/grid/virtualization-remote-data?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">jQuery data table</a>. Additionally, you can use a similar setting to virtualize the columns of a grid if records contain several properties that may be costly to render all at once. The <code>scrollable.virtual</code> property needs to be set to true. However, virtualizing columns does not depend on the <code>pageSize</code> property.  <a href="https://demos.telerik.com/kendo-ui/grid/column-virtualization?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">This example</a> demonstrates this feature. </p>
PDF And Excel Exports
<p>Having the ability to export data from the grid is pivotal. Users may need to distribute or further manipulate it using applications like spreadsheets. Your users should have the option to painlessly share data without being confined to the grid. Grid data may also need extra processing not offered by your grid, like in spreadsheets and presentation software. </p>
<p>Although this is an essential use case, it is not catered for in many libraries. Users have to resort to printing whole web pages to get access to the data in PDF formats. When transferring data to external applications, they have to copy and paste it numerous times. This is understandably pretty infuriating. </p>
<p>Kendo UI Data Grids provide data exports from the grid in two formats: PDF and Excel. For instance, in the <a href="https://www.telerik.com/kendo-vue-ui/components/grid?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Kendo UI for Vue Data Grid</a>, to process PDF exports, you would use the <code>GridPDFExport</code> component. With its <code>save</code> method, you would pass the data you’d like to include in the PDF export. The data could be paginated or the complete set. </p>
<pre><code>&lt;template&gt;
    &lt;button @click="exportPDF"&gt;Export PDF&lt;/button&gt;
    &lt;pdfexport ref="gridPdfExport"&gt;
        &lt;Grid :data-items="items"&gt;&lt;/Grid&gt;
    &lt;/pdfexport&gt;
&lt;/template&gt;
&lt;script&gt;
import { GridPdfExport } from '@progress/kendo-vue-pdf';
import { Grid } from '@progress/kendo-vue-grid';

export default {
    components: {
        'Grid': Grid,
        'pdfexport': GridPdfExport
    },
    data: function () {
        return {
            products: [],
            ...
        };
    },
    methods: {
        exportPDF: function() {
            (this.$refs.gridPdfExport).save(this.products);
        },
       ...
    },
    ...
};
&lt;/script&gt;
</code></pre>

<p>The <code>GridPDFExport</code> component allows you to specify page sizes for the export, page margins, how to scale the grid on the page, etc. This is useful for customizing larger grids to fit the PDF pages. You would pass these as properties to the component. Here’s an <a href="https://www.telerik.com/kendo-vue-ui/components/grid/pdf/fit-content?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">example</a>:</p>
<pre><code>&lt;pdfexport ref="exportPDF" :margin="'2cm'" :paper-size="'a4'" :scale="0.5"&gt;
        &lt;Grid :data-items="products"&gt;&lt;/Grid&gt;
&lt;/pdfexport&gt;
</code></pre>


<p>You may choose to further customize the export using a template. Within the template, you can add styling, specify headers and footers, change the layout of the page, and add new elements to it. You would use CSS for styling. Once you’re done configuring the template, you would <a href="https://www.telerik.com/kendo-vue-ui/components/grid/pdf/page-template?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">specify it using the page-template property of the GridPDFExport component</a>.</p>
<p>To export Excel files from a Kendo UI Vue Grid, you would use the <code>ExcelExport</code>component. With its <code>saveExcel</code> method, you pass the file name, the grid data, columns to display, etc. to it and call the method to generate the file. This <a href="https://www.telerik.com/kendo-vue-ui/components/grid/excel-export/#toc-getting-started?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Vue data grid</a> is a great example of how you can achieve Excel exports with Kendo UI Vue Grid. </p>
Sticky Columns
<p>When a user scrolls through a grid horizontally, they may need to have some columns frozen or constantly within view. These columns usually contain crucial information like IDs, names, etc. Frozen/sticky columns always remain visible but may move either to the left or right edges of the grid depending on your scroll direction, or not move at all. For example, in this <a href="https://www.telerik.com/kendo-vue-ui/components/grid/columns/locked?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Vue data grid demo</a>, the ID is frozen and the Discontinued column is sticky. </p>
<p>Sticky columns in grid libraries can be a rare occurrence. If not present, implementing it from scratch can be a difficult endeavor. It will require significant styling to accomplish and it may not scale well if you need numerous grids. </p>
<p>Setting up sticky columns in Kendo UI requires minimal setup. For instance, in a Kendo UI Vue Grid, you’ll need to set the <code>locked</code> property of a column to true to make it sticky. In this <a href="https://www.telerik.com/kendo-vue-ui/components/grid/columns/locked?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-vue-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Vue data table</a>, the ID and Discontinued columns are made sticky by setting the <code>locked</code> property. In the example below, the ID and Age are locked. </p>
<pre><code>&lt;template&gt;
    &lt;grid :data-items="people" :columns = "columns"&gt;
    &lt;/grid&gt;
&lt;/template&gt;
&lt;script&gt;
import { Grid } from '@progress/kendo-vue-grid';
import { people } from './people'

export default {
    components: {
        'grid': Grid
    },
     data: function () {
        return {
            people: this.getPeople(),
            columns: [
                { field: 'ID', title: 'ID', locked: true},
                { field: 'FirstName', title: 'FirstName' },
                { field: 'LastName', title: 'LastName' },
                { field: 'Age', title: 'Age', locked: true},
            ]
        };
    },
    methods: {
        getPeople() {
           return people;
        }
    }
};
&lt;/script&gt;
</code></pre>


Editing
<p>A grid’s main use case is to view large amounts of data. Some libraries just stick to this and don’t consider the possibility that editing is needed. This disadvantages users as editing is a pretty useful feature. When users request it, developers are then forced to create a  separate page for editing individual entries. To add to this, users are only able to edit one entry after another on one form. This is wearisome and makes for a bad user experience especially when handling large amounts of data.</p>
<p>One important use case for grid editing is facilitating batch editing. It’s useful for modifying large amounts of data all at once. This could involve deleting, creating, and updating the data. </p>
<p>Kendo UI Data Grids enables editing in two forms: inline and using pop-ups. With inline editing, all the data is edited within the grid. When a cell is clicked, it becomes editable. In a pop-up, a pop-up form is used to edit each entry individually. In this <a href="https://demos.telerik.com/kendo-ui/grid/editing-inline?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Kendo UI for jQuery table example</a>, making a grid editable involves three steps: setting the grid’s editable configuration, establishing a data source, and configuring CRUD operations on the data source. These few steps reduce the complexity involved in setting up batch editing. <a href="https://demos.telerik.com/kendo-ui/grid/editing-popup?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">Configuring pop-up editing</a> follows the same steps but with different options at the start. </p>
<p>In addition to supporting edits, the Kendo UI for jQuery Grid enables input validation. For example, you can make inputs required or enforce a minimum length. Besides that, you can create custom input controls. Input controls are not just limited to text fields. You can use drop-downs, checkboxes, date pickers, range sliders, etc. These can be both inline and in pop-ups. In this <a href="https://demos.telerik.com/kendo-ui/grid/editing-custom?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-jquery-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">jQuery data table</a>, the Category field is a drop-down. Validation is also demonstrated in the same example. The unit price field has validation imposed, ensuring its least value is 1.</p>
Supplementary Components
<p>Most grid libraries have a singular purpose: to provide a grid. They do not ship with anything else, only the grid. You are limited to the features it provides. If you need to supplement the grid, it can be tricky because other libraries may not be compatible with it. So you just have to stick within the boundaries of the library when building a grid. </p>
<p>Kendo UI solves this because the approach of its creator is to offer a comprehensive library of components that easily integrate with each other instead of single components. The grid is part of a library of numerous components that allow you to do everything from <a href="https://www.telerik.com/kendo-ui-b?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-angular-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">data management, navigation, charting, editing, media presentation, chat facilitation,</a>, and so on. You can choose to embed these components within the grid without having to perform some elaborate setup and possibly breaking it. Integrating them is seamless and requires minimal configuration. Take for example <a href="https://telerik.github.io/kendo-angular/grid-charts-integration?utm_medium=cpm&amp;utm_source=smashingmagazine&amp;utm_campaign=kendo-ui-angular-awareness-masters-of-the-grid&amp;utm_content=sponsored-article">this Angular data table</a>, its 1 Day column embeds a fully interactive chart for each row seamlessly. You can embed any number of components within a grid trusting that it will work and have all its features perform as expected. </p>
Conclusion
<p>Data grids need to be easy to understand, engaging, responsive, and accessible. They need to perform well and load data fast. However, building a data grid that meets these standards from scratch can take a long time and be a huge undertaking. You may opt to use data grid libraries but often these are not optimized for performance, are not accessible, and only ship with a single grid component.</p>
<p>Creating an appealing data grid that’s delightful to use requires a library that focuses on performance. It can do this by building natively and supporting virtual scrolling. The data grid it provides needs to be responsive and use sticky columns. This is so users can easily view the data no matter the screen size or orientation. Accessibility should be a core concern of grids. This  guarantees that all users can have an equal experience using them.</p>
<p>Data tables should expand what a user can do with the data. This can be achieved through editing and facilitating exports in multiple formats. Besides that, these libraries should ship with other components to supplement the grid. Having compatible components in one library removes the need to use several different conflicting libraries in one application. A data grid library that provides these features will help you craft a great product for your users without much complication. </p>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Zara Cooper)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a22acbe3-8a80-4f08-95eb-d440e60c5723/kendo-ui-homepage.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Frustrating Design Patterns: Broken Filters]]></title>
            <link>https://smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/</link>
            <guid>https://smashingmagazine.com/2021/07/frustrating-design-patterns-broken-frozen-filters/</guid>
            <pubDate>Wed, 14 Jul 2021 13:30:00 GMT</pubDate>
            <description><![CDATA[Too often dealing with filters can be frustrating. Let’s get them right. That means never freeze the UI on a single input, provide text input fallback and never auto-scroll users on a single input. Here’s why.]]></description>
            <content:encoded><![CDATA[<p>Filters are <em>everywhere</em>. While we often think of them appearing when booking flights or shopping online, filters are frequently used in pretty much every interface that features more than a handful of data points.</p>
<p>It’s not necessarily just the sheer amount of data that is difficult to make sense of though; it’s the <strong>complexity and lack of consistency</strong> that the data usually entails which requires some filtering — such a common scenario in data grids, enterprise dashboards, vaccine tracking and public records registries.</p>
<div>
<h4>Part Of: <a href="/category/design-patterns/">Design Patterns</a></h4>
<ul>
<li>Part 1: <a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Perfect Accordion</a></li>
<li>Part 2: <a href="https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/">Perfect Responsive Configurator</a></li>
<li>Part 3: <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-date-time-picker/">Perfect Date and Time Picker</a></li>
<li>Part 4: <a href="https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/">Perfect Feature Comparison</a></li>
<li>Part 5: <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">Perfect Slider</a></li>
<li>Part 6: <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/">Perfect Birthday Picker</a></li>
<li>Part 7: <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/">Perfect Mega-Dropdown Menus</a></li>
<li><strong>Part 8: Perfect Filters</strong></li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
</div>

Designing For The Comfortable Range
<p>As customers, we use filters to reduce a large set of options to a more manageable and highly relevant selection. Perhaps just a few dozens of payment slips instead of thousands, or just a handful of blouses rather than the entire collection.</p>
<p>We have specific attributes of interest, a specific <em>intent</em>, that we need to somehow communicate to the interface. We do so by breaking our intent down into a set of available features. That intent might be fairly specific or quite general, but in both cases, the design should <strong>minimize the time</strong> needed for customers to get from the default state (when no filters are selected) to the final state (when all filters are successfully applied).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c283becc-5402-4a3d-acb3-b3c4af0193bc/nsw-transport.jpg" /></p>
<p>That’s only one part of the story though. Applying relevant filters is the easy part, but showing <em>just enough</em> relevant results is slightly more difficult. In fact, for every interface, and for every intent, we have a particular <strong>comfortable range</strong> in mind, that is a preferred number of options that we think we can manage relatively effortlessly.</p>
<p>This range of options doesn’t have to fit on a single screen, or be displayed on a single page, or be limited to a small shortlist that we can easily remember. It can be anything from <strong>dozens to hundreds of items</strong> scattered over a number of pages.</p>
<p>The important part is that this range meets our expectations that: </p>
<ul>
<li>we are looking at highly relevant options,</li>
<li>we can easily understand what we are exploring,</li>
<li>we can spot the differences between all options, and</li>
<li>we can process everything within a reasonable, foreseeable timeframe.</li>
</ul>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/535f6b02-4359-450a-8b69-a9d8edf5d277/tv-filtering.jpg" /></p>
<p>Unlike sorting, which merely <em>rearranges</em> the results according to some preferred attributes (<em>soft boundaries</em>), filters always represent <strong>hard boundaries.</strong> They strictly limit the scope of results. Not enough proper filters and users shoot way over the comfortable range; too many filters and users end up with zero-results and abandon the site altogether.</p>
<p>The comfortable range <strong>varies significantly</strong> from a product to product. The cue to where it lies can be inferred from how different the options actually are. In usability tests, we see people having no issues exploring 20–30 kinds of vehicles, 40–50 kinds of sneakers, 70–80 bouquets of flowers, or even paginating through 100–200 payment slips. Yet they feel utterly overwhelmed when exploring 15 different types of sharpies or AAA-batteries. As a rule of thumb, it seems that the more <em>different</em> the options are, the more comfortable we feel with a slightly larger set of options.</p>
<p>The ultimate question, then, is how to find that delicate balance, when our interface helps users <em>quickly</em> arrive at <em>just enough</em> results. One answer to that question lies in something that sounds awfully obvious: <strong>eliminate any roadblocks</strong> on users' path towards that comfortable range. It’s easier written than done though — especially when you have dozens or even hundreds of filters that have to be accessible on mobile, on desktop, and everywhere in-between.</p>
The Complexity of Filtering
<p>At the first glance, filtering doesn’t seem like a particularly complex endeavour. Of course we can have lengthy debates about the right form elements for different kind of filters — autocomplete, radios, toggles, select-dropdowns, sliders and buttons just to name a few — but in their essence, all of the form elements are just basic input, right?</p>
<p>Well, as it turns out, there are quite a few facets of the experience that make designing filters <strong>quite difficult</strong>:</p>
<ul>
<li>filters can come in <strong>various flavours</strong> and shapes, for pricing, ratings, colors, dates, times, size, brand, capacity, features, level of experience, age range, symptoms, product status etc.</li>
<li>filters usually come in <strong>large numbers</strong>, and they need to be displayed across screens,</li>
<li>filters often have different <strong>states</strong> (selected, unselected, disabled)</li>
<li>filters often need <strong>sensible defaults</strong>, and they have to remember user’s input,</li>
<li>filters can be <strong>interdependent</strong>, and these dependencies need to be obvious,</li>
<li>filters can be <strong>difficult to validate</strong>, e.g. when users can type in complex data, such as time or dates,</li>
<li>filters need to support and show meaningful <strong>error messages,</strong></li>
<li>and so many others.</li>
</ul>
<p><strong>Filters never exist on their own</strong>; in one way or another, they are always connected to the results that they are acting upon. This connection often causes filters and matching results to be somewhat <em>synchronous</em>, as the latter depend on how fast the UI registers an input, and how much time it needs to successfully process it.</p>
<p>Now, addressing all the fine intricacies of each of these challenges is nothing short of monumental work, yet some issues are slightly more frustrating than others, making the overall experience painful and annoying, and hence causing high abandonment and high bounce rates. Let’s explore some of the critical ones.</p>
Avoid Tiny Scrollable Panes
<p>After just a few usability sessions with customers who try to use filters on their own device, one can spot some <strong>common frustrations</strong> making rounds over and over again. One of the most annoying patterns comes from lengthy filter sections that contain dozens of options. These options often get tucked away in a tiny scrollable pane, showing 3–4 options at a time and requiring vertical scrolling to browse the options. </p>
<p>These sections often cause customers to scroll vertically, slowly, accurately, with extreme focus and precision. As they do so on mobile, some filters get activated by mistake, prompting the customer to be even more focused. A classic example of this pattern is the “Brands” filter, which often contains hundreds of options, sorted by popularity or by alphabet.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8528f3af-6fa4-46e8-81ac-34b0644da627/1-frustrating-design-patterns.png" /></p>
<p>An alternative option would be to show as many as 7–10 options at a time with an accordion that would expand and show all options on tap/click. These options don’t have to be displayed in their full height, but can live in a <strong>larger scrollable pane</strong>. But then they shouldn’t be activated by scrolling through the pane.</p>
<p>It’s also a good idea to compliment the filter with a search autocomplete and an alphabetical view if some of the popular options are highlighted at the top. A good example of it is <a href="https://bt.rozetka.com.ua/blenders/c80155/producer=braun,domotec/">Rozetka.ua</a>, an eCommerce retailer from Ukraine (see above).</p>
Always Provide Text Input Fallback For Sliders
<p>Whenever users can define a large <em>range</em> of values, be it pricing range in retail store, max duration of a train trip or a min/max coverage for an insurance plan, we probably will use some sort of a <strong>slider</strong>. All sliders have one thing in common: they are wonderful when we want to encourage customers to explore many options quickly, but they are quite frustrating when the user has something specific in mind and hence needs to be a little bit more precise.</p>
<p>Just think about the frustration we usually have to go through when bumping up the price a little bit, from $200 to $215, or adding another hour for the duration of a flight. Doing so with a slider is difficult because it requires incredible precision, and that always produces mistakes and causes frustration.</p>
<p>We’ve covered <a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">how to design a perfect slider</a> in detail already, but probably the most important feature that every slider needs is to support different <em>speeds</em> of interaction. In fact, there are a few common types of interaction:</p>
<ul>
<li>when customers want to explore many options quickly, a good ol’ slider with a track and a thumb works perfectly fine;</li>
<li>when customers want to be more precise in their exploration, we can help by <strong>adding steppers</strong> <strong>(+/-)</strong> for granular jumps forward and backwards,</li>
<li>when customers have an exact value in mind, we can help by providing <strong>text input fields</strong> for min/max values, so users can type in values directly without having to use the slider,</li>
<li>in all of these cases, solutions have to be accessible and support keyboard-only interaction.</li>
</ul>
<p>Take a look at the <a href="https://www.lloydsbank.com/">Lloydsbank</a>’s example below. A <a href="https://www.lloydsbank.com/loans/loan-calculator.html">personal loan calculator</a> supports all types of interaction beautifully. Also, notice the focus styles when the thumb is activated, and ranges displayed below the interest rate slider at the top to indicate where the customer is currently navigating. The interest rate changes depending on how much money the customer would like to borrow.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c8c08283-92bd-4984-93f2-7af03888a725/2-frustrating-design-patterns.png" /></p>
<p>Another interesting example of a well-designed slider comes from Made.com’s <a href="https://www.made.com/sofasizer">Sofasizer</a>, which allows you to filter couches based on the dimensions that they need to have. Rather than using a set of input fields, Made.com chose to use a visual interface with a “Resize” icon. You can drag the handle to adjust the size, or you can type in exact values in the height and width input fields.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2b163ca0-8d60-45a7-9c6c-55b511734821/3-frustrating-design-patterns.png" /></p>
<p>Another option is to turn all filter sections into overlays and display them on tap/click above the results. In fact, you could even use <strong>floating filters</strong>, so as a customer scrolls down the page, the filters are still accessible all the time.</p>
<p>An example of this pattern is <a href="https://www.adidas.de/en/women-shoes">Adidas</a> (see the image below). The filters bar is persistent; even as users are scrolling down the page, the filter overlay <strong>won’t close automatically</strong> — it requires user’s input, again handing over the control to the user. However, it does close automatically once one of the filters is selected. If the user wants to select multiple filters, they have to re-open the same filter group over and over again. Keeping the filters persistent might be a better idea. Still, the result: no layout shifts, no frustrating scrolling in narrow corridors, and filters are always accessible.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1e9cddc6-e6f2-4fda-a56a-8b15ee42fb04/4-frustrating-design-patterns.png" /></p>
<p>Not to say that displaying filters above the results is <em>always</em> better by default. On <a href="https://www.asos.com/women/shoes/cat/?cid=4172&amp;nlid=ww|shoes|shop+by+product|view+all">Asos</a>, every filter input causes jumps to the top of the page, so customers have to manually scroll down to continue filtering. Instead of re-rendering the entire page, it would make more sense to re-render the filters area and the product list separately.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/98421fe7-f756-4337-a3e1-bc1df810a3e6/5-frustrating-design-patterns.png" /></p>
<p><a href="https://www.ikea.com/gb/en/cat/tv-media-storage-14885/?filters=f-online-sellable%3Atrue">Ikea</a> features filters at the top of the results. Sometimes filters appear in a drop-down overlay, and sometimes as a pill below the filters. But most of the time, unlike previous examples, when a filter is selected, it displays a <strong>sidebar mega-filter-overlay</strong> on the right with all available filtering options grouped there. As the customer is making their way through the filters, the product list is updated in the background asynchronously. More importantly, notice the “Apply” button which label changes depending on the input.</p>
<p>With every filter input, a new request is sent to the server, retrieving the number of results, and then showing that number in the UI. That’s a great way to give users a very clear sense of how far or how close they are towards their comfortable range.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/046d59bf-3be2-4d15-a6d6-5dd182eb3be7/6-frustrating-design-patterns.png" /></p>
<p>Another example is <a href="https://www.galaxus.ch/">Galaxus.ch</a> (see below), a Swiss eCommerce retailer that provides a first-class experience when it comes to filtering. The filters are displayed above product results; a filter overlay appears on tap/click. No slowdowns, fast response times and a lovely integration of active filters with the filters area. A <strong>great reference example</strong> that is worth considering when designing any kind of filter.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0c5f2df3-3d78-4563-a599-8c924604e84a/7-frustrating-design-patterns.png" /></p>
<p>In general, having an <strong>“Apply” button</strong> along with real-time updates of the content area seems to be working best. It really combines the best of both solutions: showing results immediately when they arrive, while keeping filters accessible at all times.</p>
Avoid Split-Screens On Mobile
<p>The issues that we’ve explored in the article apply equally to large and small screens. However, on small screens, and especially on slow connections, these issues become even more critical. Most of the time, <strong>interfaces tend to block the entire UI</strong> on a single filter input, causing massive delays for customers on the go (e.g. <a href="https://www.crutchfield.com/g_300/All-Car-Stereos.html?tp=5684">Crutchfield</a>, <a href="https://www.walgreens.com/q/multi+symptom+relief+?N=2000012489-2000011429-305525">Walgreens</a>). On the other hand, it’s common to split the screen to display a filters overlay, while still showing the product list updated in the background (e.g. <a href="https://www.nordstrom.com/browse/women/clothing/tops-tees?campaign=0419wmnclothinghdrp01a&amp;jid=j012040-15278&amp;cm_sp=merch-_-womens_15278_j012040-_-cathead_wmnclothing_p01_shop">Nordstrom</a>).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/204d3d52-1808-4be8-9a37-d7d0e35959df/8-frustrating-design-patterns.png" /></p>
<p>In general, though, it might be a better idea to experiment if a <strong>full-page overlay</strong> for filters would perform better. It gives more space to experiment with a multi-column view, or perhaps even display a swipeable area to choose filters without having to move between separate pages. In fact, using accordions that could collapse and expand instead of bringing the user to a separate page might be a good idea — similar to what we’ve discussed with <a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/">mega-dropdowns</a>. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5a49c836-e804-480e-b4e2-25c90cc600f7/9-frustrating-design-patterns.png" /></p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/37e12f40-5e36-412c-9863-89fc286069e5/10-frustrating-design-patterns.png" /></p>
<p>Unlike on desktop, having an “Apply” button in all these examples matters, and you can make it slightly more useful by adding the amount of products as a label on the button and keeping the button sticky at the bottom as the user is scrolling down.</p>
Filtering Design Checklist
<p>As usual, here are all the things to keep in mind when designing any kind of filter — a little helper to avoid missing important details before heading into conversations with your fellows designers and developers. You can find a <strong>full deck</strong> of <a href="https://www.smashingmagazine.com/printed-books/checklist-cards/">Smart Interface Design Patterns Checklists</a> at yours truly Smashing Magazine as well.</p>
<ol>
  <li>Can we avoid a filter icon and show filters as they are?</li>
  <li>If not, what icon do we choose to indicate filtering?</li>
  <li>Is the icon + padding large enough for comfortable tapping?</li>
  <li>Do we put the icon at the top, bottom or floating (mobile/desktop)?</li>
  <li> What exactly happens when the user clicks/taps on the icon?</li>
  <li>How will the icon change on tap/click?</li>
  <li>Will we have some sort of animation or transition on click?</li>
  <li>Will filters appear as full page/partial overlay or slide-in?</li>
  <li>Can we avoid sidebar filtering as it’s usually slow?</li>
  <li>Do we expose popular or relevant filters by default?</li>
  <li>Do we display the number of expected results for each filter?</li>
  <li>Can we use a horizontal swiper to move between filters?</li>
  <li>Can we avoid drop-downs and use only buttons/chips + toggles?</li>
  <li>For complex filters, do we provide search within filters?</li>
  <li>Do we use icons to explain differences between various filters?</li>
  <li>Do we use the right elements for filters, e.g. sliders, buttons, toggles?</li>
  <li>Do filters apply automatically (yes, for slide-ins)?</li>
  <li>Do filters apply manually on confirmation (“Apply”) (yes, for overlays)?</li>
  <li>How do we communicate already selected filters?</li>
  <li>Can selected filters appear as removable pills, chips or tags?</li>
  <li>Do we recommend relevant filters based on selection?</li>
  <li>Do we track incompatibility between selected filters?</li>
  <li>How do error messages or warning appear in the UI?</li>
  <li>Do we allow customers to reset all filters quickly, at once?</li>
  <li>Are filters (or filters button) floating on scroll on mobile/desktop?</li>
  <li>Can users tap on the same spot to open/close filters?</li>
</ol>

Wrapping Up
<p>Too often the filtering experience on the web is broken and frustrating, making it just <strong>unnecessarily difficult</strong> for customers to get to that shiny comfortable range of relevant results. When designing the next filter, take a look at some of the common issues that you might want to avoid, and hopefully avoid all the frustration that comes from broken and inaccessible implementations.</p>
<ul>
<li><strong>Design for the comfortable range</strong> of options, for the case when a customer wants to add multiple filters quickly — one right after another.</li>
<li>For lengthy filter groups, <strong>avoid tiny scrollable panes</strong> and show as many as 7–10 options at a time with an accordion that would expand and show all options on tap/click. Add a search autocomplete and an alphabetical view as well.</li>
<li>Always add steppers (+/-) and <strong>text input fields</strong> when using sliders,</li>
<li>Customer often want to set a number of filters of the same type. <strong>Never auto-scroll users on a single input</strong> and never collapse a group of filters automatically.</li>
<li><strong>Never freeze the UI on a single input</strong>, and never make your customer wait for an interface to respond back when setting filters.</li>
<li>Always update filters and show results <strong>asynchronously</strong>, so that on every filter input, matching results could be updated asynchronously, while the filters always remain accessible and at the same place.</li>
<li>Always <strong>avoid layout shifts</strong> on filter input and consider displaying filters above the results. </li>
<li>On mobile, <em>“Apply”-button</em> could be sticky at the bottom of the screen. Update the <em>count of products</em> and show them on the button.</li>
</ul>
<h3>Articles of The Series</h3>
<p>If you find this article useful, here’s an overview of similar articles we’ve published over the years — and a few more are coming your way.</p>
<ul>
<li><a href="https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/">Perfect Accordion</a></li>
<li><a href="https://www.smashingmagazine.com/2018/02/designing-a-perfect-responsive-configurator/">Perfect Responsive Configurator</a></li>
<li><a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-birthday-picker/">Perfect Birthday Picker</a></li>
<li><a href="https://www.smashingmagazine.com/2017/07/designing-perfect-date-time-picker/">Perfect Date and Time Picker</a></li>
<li><a href="https://www.smashingmagazine.com/2021/05/frustrating-design-patterns-mega-dropdown-hover-menus/">Perfect Mega-Dropdown</a></li>
<li><a href="https://www.smashingmagazine.com/2017/08/designing-perfect-feature-comparison-table/">Perfect Feature Comparison</a></li>
<li><a href="https://www.smashingmagazine.com/2017/07/designing-perfect-slider/">Perfect Slider</a></li>
<li><a href="https://www.smashingmagazine.com/printed-books/form-design-patterns/">Form Design Patterns Book</a> by Adam Silver, published on SmashingMag</li>
<li><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Subscribe to our email newsletter</a> to not miss the next ones.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Vitaly Friedman)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0c5f2df3-3d78-4563-a599-8c924604e84a/7-frustrating-design-patterns.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Building A Dynamic Header With Intersection Observer]]></title>
            <link>https://smashingmagazine.com/2021/07/dynamic-header-intersection-observer/</link>
            <guid>https://smashingmagazine.com/2021/07/dynamic-header-intersection-observer/</guid>
            <pubDate>Tue, 13 Jul 2021 12:00:00 GMT</pubDate>
            <description><![CDATA[In JavaScript, attaching an event listener to constantly fire a callback on scroll can be performance-intensive. But there is a better way with Intersection Observer.]]></description>
            <content:encoded><![CDATA[<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a> is a JavaScript API that enables us to observe an element and detect when it passes a specified point in a scrolling container — often (but not always) the viewport — triggering a callback function.</p>
<p>Intersection Observer can be considered more performant than listening for scroll events on the main thread, as it is asynchronous, and the callback will only fire when the element we’re observing meets the specified threshold, instead every time the scroll position is updated. In this article, we’ll walk through an example of how we can use Intersection Observer to build a fixed header component that changes when it intersects with different sections of the webpage.</p>
Basic Usage
<p>To use Intersection Observer, we need to first create a new observer, which takes two parameters: An object with the observer’s options, and the callback function that we want to execute whenever the element we’re observing (known as the observer target) intersects with the root (the scrolling container, which must be an ancestor of the target element).</p>
<pre><code>const options = {
  root: document.querySelector('[data-scroll-root]'),
  rootMargin: '0px',
  threshold: 1.0
}

const callback = (entries, observer) =&gt; {
  entries.forEach((entry) =&gt; console.log(entry))
}

const observer = new IntersectionObserver(callback, options)
</code></pre>

<p>When we’ve created our observer, we then need to instruct it to watch a target element:</p>
<pre><code>const targetEl = document.querySelector('[data-target]')

observer.observe(targetEl)
</code></pre>

<p>Any of the options values can be omitted, as they will fall back to their default values:</p>
<pre><code>const options = {
  rootMargin: '0px',
  threshold: 1.0
}
</code></pre>

<p>If no root is specified, then it will be classed as the browser viewport. The above code example shows the default values for both <code>rootMargin</code> and <code>threshold</code>. These can be hard to visualize, so are worth explaining:</p>
<h3><code>rootMargin</code></h3>
<p>The <code>rootMargin</code> value is a bit like adding CSS margins to the root element — and, just like margins, can take multiple values, including negative values. The target element will be considered to be intersecting relative to the margins. </p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/769b2733-5700-4d2d-a32f-6850a173abaa/1-dynamic-header-intersection-observer.png" /></p>
<p>That means that an element can technically be classed as “intersecting” even when it is out of view (if our scroll root is the viewport).</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a5908e69-f81a-4e1c-81e6-aae2f1b96a28/2-dynamic-header-intersection-observer.png" /></p>
<p><code>rootMargin</code> defaults to <code>0px</code>, but can take a string consisting of multiple values, just like using the <code>margin</code> property in CSS.</p>
<h3><code>threshold</code></h3>
<p>The <code>threshold</code> can consist of a single value or an array of values between 0 and 1. It represents the <strong>proportion of the element that must be within the root bounds for it to be considered intersecting</strong>. Using the default value of 1, the callback will fire when 100% of the target element is visible within the root.</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b95822cd-d3e8-4b71-9d38-862e6d39990a/3-dynamic-header-intersection-observer.png" /></p>
<p>It’s not always easy to visualize when an element will be classed as visible using these options. I’ve built <a href="https://codepen.io/michellebarker/full/xxwLpRG">a small tool</a> to help get to grips with Intersection Observer.</p>
Creating The Header
<p>Now that we’ve grasped the basic principles, let’s start building our dynamic header. We’ll start with a webpage divided up into sections. This image shows the complete layout of the page we’ll be building:</p>
<p><img src="https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/886e6b93-48a4-4282-8823-a7bd9e74058c/4-dynamic-header-intersection-observer.png" /></p>
<p>I’ve included a demo at the end of this article, so feel free to <a href="https://codepen.io/michellebarker/pen/aee240bb09868abfc5854854cf0843e3">jump straight to it</a> if you’re keen to unpick the code. (There’s also a <a href="https://github.com/mbarker84/smashing-io-header">Github repository</a>.)</p>
<p>Each section has a minimum height of <code>100vh</code> (although they could be longer, depending on content). Our header is fixed at the top of the page and stays in place as the user scrolls (using <code>position: fixed</code>). The sections have different colored backgrounds, and when they meet the header, the colors of the header change to complement those of the section. There is also a marker to show the current section the user is in, which slides along when the next section arrives.
To make it easier for us to get straight to the relevant code, I’ve set up a <a href="https://codepen.io/michellebarker/pen/488760bfec40302fcf0e8b7cd3e6093e">minimal demo</a> with our starting point (before we start using the Intersection Observer API), in case you’d like to follow along.</p>
<h3>Markup</h3>
<p>We’ll start with the HTML for our header. This is going to be a fairly simple header with a home link and navigation, nothing especially fancy, but we’re going to use a couple of data attributes: <code>data-header</code> for the header itself (so we can target the element with JS), and three anchor links with the attribute <code>data-link</code>, which will scroll the user to the relevant section when clicked:</p>
<pre><code>&lt;header data-header&gt;
  &lt;nav class="header__nav"&gt;
    &lt;div class="header__left-content"&gt;
      &lt;a href="#0"&gt;Home&lt;/a&gt;
    &lt;/div&gt;
    &lt;ul class="header__list"&gt;
      &lt;li&gt;
        &lt;a href="#about-us" data-link&gt;About us&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="#flavours" data-link&gt;The flavours&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="#get-in-touch" data-link&gt;Get in touch&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;
&lt;/header&gt;
</code></pre>

<p>Next, the HTML for the rest of our page, which is divided up into sections. For brevity, I’ve only included the parts relevant to the article, but the full markup is included in the demo. Each section includes a data attribute specifying the name of the background color, and an <code>id</code> that corresponds to one of the anchor links in the header:</p>
<pre><code>&lt;main&gt;
  &lt;section data-section="raspberry" id="home"&gt;
    &lt;!--Section content--&gt;
  &lt;/section&gt;
  &lt;section data-section="mint" id="about-us"&gt;
    &lt;!--Section content--&gt;
  &lt;/section&gt;
  &lt;section data-section="vanilla" id="the-flavours"&gt;
    &lt;!--Section content--&gt;
  &lt;/section&gt;
  &lt;section data-section="chocolate" id="get-in-touch"&gt;
    &lt;!--Section content--&gt;
  &lt;/section&gt;
&lt;/main&gt;
</code></pre>

<p>We’ll position our header with CSS so that it will stay fixed at the top of the page as the user scrolls:</p>
<pre><code>header {
  position: fixed;
  width: 100%;
}
</code></pre>

<p>We’ll also give our sections a minimum height, and center the content. (This code isn’t necessary for the Intersection Observer to work, it’s just for the design.)</p>
<pre><code>section {
  padding: 5rem 0;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
</code></pre>

<h3>iframe Warning</h3>
<p>While building this Codepen demo, I ran into a perplexing issue where my Intersection Observer code that <em>should</em> have worked perfectly was failing to fire the callback at the correct point of the intersection but instead firing when the target element intersected with the viewport edge. After a bit of head-scratching, I realized that this was because in Codepen the content is loaded within an iframe, which is treated differently. (See the section of the MDN docs on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Clipping and the intersection rectangle</a> for full details.)</p>
<p>As a workaround, in the demo we can wrap our markup in another element, which will act as the scrolling container — the root in our IO options — rather than the browser viewport, as we might expect:</p>
<pre><code>&lt;div class="scroller" data-scroller&gt;
  &lt;header data-header&gt;
    &lt;!--Header content--&gt;
  &lt;/header&gt;
  &lt;main&gt;
    &lt;!--Sections--&gt;
  &lt;/main&gt;
&lt;/div&gt;
</code></pre>

<p>If you want to see how to use the viewport as the root instead for the same demo, this is included in the <a href="https://github.com/mbarker84/smashing-io-header">Github repository</a>.</p>
CSS
<p>In our CSS we’ll define some custom properties for the colors we’re using. We’ll also define two additional custom properties for the header text and background colors, and set some initial values. (We’re going to update these two custom properties for the different sections later on.)</p>
<pre><code>:root {
  --mint: #5ae8d5;
  --chocolate: #573e31;
  --raspberry: #f2308e;
  --vanilla: #faf2c8;

  --headerText: var(--vanilla);
  --headerBg: var(--raspberry);
}
</code></pre>

<p>We’ll use these custom properties in our header:</p>
<pre><code>header {
  background-color: var(--headerBg);
  color: var(--headerText);
}
</code></pre>

<p>We’ll also set the colors for our different sections. I’m using the data attributes as the selectors, but you could just as easily use a class if you prefer.</p>
<pre><code>[data-section="raspberry"] {
  background-color: var(--raspberry);
  color: var(--vanilla);
}

[data-section="mint"]  {
  background-color: var(--mint);
  color: var(--chocolate);
}

[data-section="vanilla"] {
  background-color: var(--vanilla);
  color: var(--chocolate);
}

[data-section="chocolate"] {
  background-color: var(--chocolate);
  color: var(--vanilla);
}
</code></pre>

<p>We can also set some styles for our header when each section is in view:</p>
<pre><code>/* Header */
[data-theme="raspberry"]  {
  --headerText: var(--raspberry);
  --headerBg: var(--vanilla);
}

[data-theme="mint"] {
  --headerText: var(--mint);
  --headerBg: var(--chocolate);
}

[data-theme="chocolate"]  {
  --headerText: var(--chocolate);
  --headerBg: var(--vanilla);
}
</code></pre>

<p>There’s a stronger case for using data attributes here because we’re going to toggle the <code>data-theme</code> attribute of the header upon each intersection.</p>
Creating The Observer
<p>Now that we have the basic HTML and CSS for our page set up, we can create an observer to watch for each of our sections coming into view. We want to fire a callback whenever a section comes into contact with the bottom of the header as we’re scrolling down the page. This means we need to set a negative root margin that corresponds to the height of the header.</p>
<pre><code>const header = document.querySelector('[data-header]')
const sections = [...document.querySelectorAll('[data-section]')]
const scrollRoot = document.querySelector('[data-scroller]')

const options = {
  root: scrollRoot,
  rootMargin: `${header.offsetHeight * -1}px`,
  threshold: 0
}
</code></pre>

<p>We’re setting a threshold of <em>0</em>, as we want it to fire if <em>any</em> part of the section is intersecting with the root margin.</p>
<p>First of all, we’ll create a callback to change the <code>data-theme</code> value of the header. (This is more straightforward than adding and removing classes, especially when our header element may have other classes applied.)</p>
<pre><code>/* The callback that will fire on intersection */
const onIntersect = (entries) =&gt; {
  entries.forEach((entry) =&gt; {
    const theme = entry.target.dataset.section
    header.setAttribute('data-theme', theme)
  })
}
</code></pre>

<p>Then we’ll create the observer to watch for the sections intersecting:</p>
<pre><code>/* Create the observer */
const observer = new IntersectionObserver(onIntersect, options)

/* Set our observer to observe each section */
sections.forEach((section) =&gt; {
  observer.observe(section)
})
</code></pre>

<p>Now we should see our header colors update when each section meets the header.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/poPgpjZ">Happy Face Ice Cream Parlour – Step 2</a> by <a href="https://codepen.io/michellebarker">Michelle Barker</a>.</p>
<p>However, you might notice that the colors aren’t updating correctly as we scroll down. In fact, the header is updating with the previous section’s colors each time! Scrolling upwards, on the other hand, it works perfectly. We need to determine the scroll direction and change the behavior accordingly.</p>
<h3>Finding The Scroll Direction</h3>
<p>We’ll set a variable in our JS for the direction of scroll, with an initial value of <code>'up'</code>, and another for the last known scroll position (<code>prevYPosition</code>). Then, within the callback, if the scroll position is greater than the previous value, we can set the <code>direction</code> value as <code>'down'</code>, or <code>'up'</code> if vice versa.</p>
<pre><code>let direction = 'up'
let prevYPosition = 0

const setScrollDirection = () =&gt; {
  if (scrollRoot.scrollTop &gt; prevYPosition) {
    direction = 'down'
  } else {
    direction = 'up'
  }

  prevYPosition = scrollRoot.scrollTop
}

const onIntersect = (entries, observer) =&gt; {
  entries.forEach((entry) =&gt; {
    setScrollDirection()

    /* ... */
  })
}
</code></pre>

<p>We’ll also create a new function to update the header colors, passing in the target section as an argument:</p>
<pre><code>const updateColors = (target) =&gt; {
  const theme = target.dataset.section
  header.setAttribute('data-theme', theme)
}

const onIntersect = (entries) =&gt; {
  entries.forEach((entry) =&gt; {
    setScrollDirection()
    updateColors(entry.target)
  })
}
</code></pre>

<p>So far we should see no change to the behavior of our header. But now that we know the scroll direction, we can pass in a different target for our <code>updateColors()</code> function. If the scroll direction is up, we’ll use the entry target. If it’s down, we’ll use the next section (if there is one).</p>
<pre><code>const getTargetSection = (target) =&gt; {
  if (direction === 'up') return target

  if (target.nextElementSibling) {
    return target.nextElementSibling
  } else {
    return target
  }
}

const onIntersect = (entries) =&gt; {
  entries.forEach((entry) =&gt; {
    setScrollDirection()

    const target = getTargetSection(entry.target)
    updateColors(target)
  })
}
</code></pre>

<p>There’s one more issue, however: the header will update not only when the section hits the header, but when the next element comes into view at the bottom of the viewport. This is because our observer fires the callback twice: once as the element is entering, and again as it’s leaving.</p>
<p>To determine whether the header should update, we can use the <code>isIntersecting</code> key from the <code>entry</code> object. Let’s create another function to return a boolean value for whether the header colors should update:</p>
<pre><code>const shouldUpdate = (entry) =&gt; {
  if (direction === 'down' &amp;&amp; !entry.isIntersecting) {
    return true
  }

  if (direction === 'up' &amp;&amp; entry.isIntersecting) {
    return true
  }

  return false
}
</code></pre>

<p>We’ll update our <code>onIntersect()</code> function accordingly:</p>
<pre><code>const onIntersect = (entries) =&gt; {
  entries.forEach((entry) =&gt; {
    setScrollDirection()

    /* Do nothing if no need to update */
    if (!shouldUpdate(entry)) return

    const target = getTargetSection(entry.target)
    updateColors(target)
  })
}
</code></pre>

<p>Now our colors should update correctly. We can set a CSS transition, so that the effect is a little nicer:</p>
<pre><code>header {
  transition: background-color 200ms, color 200ms;
}
</code></pre>

<p>See the Pen <a href="https://codepen.io/smashingmag/pen/bGWEaEa">Happy Face Ice Cream Parlour – Step 3</a> by <a href="https://codepen.io/michellebarker">Michelle Barker</a>.</p>
Adding The Dynamic Marker
<p>Next we’ll add a marker to the header that updates its position as we scroll to the different sections. We can use a pseudo-element for this, so we don’t need to add anything to our HTML. We’ll give it some simple CSS styling to position it at the top left of the header, and give it a background color. We’re using <code>currentColor</code> for this, as it will take on the value of the header text color:</p>
<pre><code>header::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  height: 0.4rem;
  background-color: currentColor;
}
</code></pre>

<p>We can use a custom property for the width, with a default value of 0. We’ll also use a custom property for the translate x value. We’re going to set the values for these in our callback function as the user scrolls.</p>
<pre><code>header::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  height: 0.4rem;
  width: var(--markerWidth, 0);
  background-color: currentColor;
  transform: translate3d(var(--markerLeft, 0), 0, 0);
}
</code></pre>

<p>Now we can write a function that will update the width and position of the marker at the point of intersection:</p>
<pre><code>const updateMarker = (target) =&gt; {
  const id = target.id

  /* Do nothing if no target ID */
  if (!id) return

  /* Find the corresponding nav link, or use the first one */
  let link = headerLinks.find((el) =&gt; {
    return el.getAttribute('href') === `#${id}`
  })

  link = link || headerLinks[0]

  /* Get the values and set the custom properties */
  const distanceFromLeft = link.getBoundingClientRect().left

  header.style.setProperty('--markerWidth', `${link.clientWidth}px`)
  header.style.setProperty('--markerLeft', `${distanceFromLeft}px`)
}
</code></pre>

<p>We can call the function at the same time we update the colors:</p>
<pre><code>const onIntersect = (entries) =&gt; {
  entries.forEach((entry) =&gt; {
    setScrollDirection()

    if (!shouldUpdate(entry)) return

    const target = getTargetSection(entry.target)
    updateColors(target)
    updateMarker(target)
  })
}
</code></pre>

<p>We’ll also need to set an initial position for the marker, so it doesn’t just appear out of nowhere. When the document is loaded, we’ll call the <code>updateMarker()</code> function, using the first section as the target:</p>
<pre><code>document.addEventListener('readystatechange', e =&gt; {
  if (e.target.readyState === 'complete') {
    updateMarker(sections[0])
  }
})
</code></pre>

<p>Finally, let’s add a CSS transition so that the marker slides across the header from one link to the next. As we’re transitioning the <code>width</code> property, we can use <code>will-change</code> to enable the browser to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/will-change">perform optimizations</a>.</p>
<pre><code>header::after {
  transition: transform 250ms, width 200ms, background-color 200ms;
  will-change: width;
}
</code></pre>

Smooth Scrolling
<p>For a final touch, it would be nice if, when a user clicks a link, they’re scrolled smoothly down the page, instead of it jumping to the section. These days we can do it right in our CSS, no JS required! For a more accessible experience, it’s a good idea to respect the user's motion preferences by only implementing smooth scrolling if they haven’t specified a preference for reduced motion in their system settings:</p>
<pre><code>@media (prefers-reduced-motion: no-preference) {
  .scroller {
    scroll-behavior: smooth;
  }
}
</code></pre>

Final Demo
<p>Putting all the above steps together results in the complete demo.</p>
<p>See the Pen <a href="https://codepen.io/smashingmag/pen/XWRXVXQ">Happy Face Ice Cream Parlour – Intersection Observer example</a> by <a href="https://codepen.io/michellebarker">Michelle Barker</a>.</p>
Browser Support
<p>Intersection Observer is <a href="https://caniuse.com/?search=intersection%20observer">widely supported</a> in modern browsers. Where necessary it can be <a href="https://github.com/w3c/IntersectionObserver">polyfilled</a> for older browsers — but I prefer to take a progressive enhancement approach where possible. In the case of our header, it would not be vastly detrimental to the user experience to provide a simple, unchanging version for non-supporting browsers.</p>
<p>To detect if Intersection Observer is supported, we can use the following:</p>
<div>
 <pre><code>if ('IntersectionObserver' in window &amp;&amp; 'IntersectionObserverEntry' in window &amp;&amp; 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
  /<em> Code to execute if IO is supported </em>/
} else {
  /<em> Code to execute if not supported </em>/
}
</code></pre>
</div>

Resources
<p>Read more about Intersection Observer:</p>
<ul>
<li>Extensive documentation, with some practical examples from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">MDN</a></li>
<li>Intersection Observer <a href="https://codepen.io/michellebarker/full/xxwLpRG">visualiser tool</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API/Timing_element_visibility">Timing Element Visibility with the Intersection Observer API</a> – another tutorial from MDN, that looks at how IO can be used to track ad visibility</li>
<li><a href="https://www.smashingmagazine.com/2018/01/deferring-lazy-loading-intersection-observer-api/">This article</a> by Denys Mishunov covers some other uses for IO, including lazy-loading assets. Although that’s less necessary now (thanks to the <code>loading</code> attribute), there’s still plenty to learn here.</li>
</ul>
]]></content:encoded>
            <author>hello@smashingmagazine.com (Michelle Barker)</author>
            <enclosure url="http://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/67cc7303-3dc9-4d67-b0f4-b6f77783380f/dynamic-header-intersection-observer.jpg" length="0" type="image/jpg"/>
        </item>
    </channel>
</rss>