{
  "title":"Job Queues and Workers in Django",
  "date":"2022-11-17T04:11:14.000000Z",
  "author":"Muhammed Ali",
  "id":"https://www.honeybadger.io/blog/job-queues-workers-django/",
  "link":"https://www.honeybadger.io/blog/job-queues-workers-django/",
  "content":"<p>When building Django applications, there will come a time when you want to run some functionalities asynchronously or automatically. For example, you might want to run a script that sends users an email message every time they log in. It wouldn't be effective to do this manually. Additionally, maybe you want to perform a calculation on a daily basis. It wouldn't make sense to manually run the code every day; what would happen if you get sick or are too busy?</p>\n\n<p>Do you know how to solve problems like these when working on a Django application? If not, stick around and follow the tutorial provided in this article. The repository for this article can be found on <a href=\"https://github.com/khabdrick/django-job-queue-article\">GitHub</a>.</p>\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n<p>To follow this tutorial, the following is required:</p>\n\n<ul>\n<li>A basic understanding of Django</li>\n</ul>\n\n<h2 id=\"what-are-job-queues-and-workers\">What are Job Queues and Workers?</h2>\n\n<p>Before getting to what job queues are, let's first learn about what a job is. A job is a task/function/class set to be executed at a particular point in time. It is possible to have multiple jobs that run sequentially as required; these are called job queues.</p>\n\n<p>We can consider a worker to be a server or processor available to handle one job at a time. If we have 4 workers, it means 4 jobs/functions can be handled at a time. A worker process pulls a task off the job/task queue.</p>\n\n<h3 id=\"use-case-job-queues-and-workers-in-django-applications\">Use-Case Job Queues and Workers in Django Applications</h3>\n\n<p>Below are some use cases where it would make sense to use job queues and workers when building a Django application.</p>\n\n<ol>\n<li>Assume that you have designed a system to watch for incoming files, such as résumés from potential employees. After someone submits a résumé, the system alerts your organization’s human resources department. This is a very good use case for job queues and workers.</li>\n<li>Let's say that you are building an e-commerce site. You will need an automated system that sends an email to users when their products are shipped. You can set up a job that detects when the handler indicates that the product is being shipped and then sends an automated email message to the particular user. Without setting the job queues, the handler of the product will have to send the email directly, which is inefficient.</li>\n<li>Developers can use job queues and workers to set automated alerts and establish dynamic solutions for an imminent database breach.</li>\n<li>A price tracker will need a system that gets the data daily (or on any time schedule you prefer) and sends a message about the tracked goods to the user. We can automate this process and prevent the user from having to actively run the code when they want to track prices.</li>\n<li>Offload tasks that take a long time to run.</li>\n</ol>\n\n<h2 id=\"set-up-a-base-project\">Set Up a Base Project</h2>\n\n<p>In this section, we will set up a simple Django application with a <code>view</code> that delays other operations in the <code>view</code> from running. With this application, I will illustrate how job queues and workers can offload a <code>view</code> that takes too long to come up.</p>\n\n<p>By offloading the said <code>view</code>, other <code>views</code> can run properly without the extended wait time.</p>\n\n<p>Start by installing Django with the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>pip <span class=\"nb\">install </span>django\n</code></pre></div>\n<p>Next, run the command below to start a new Django project:</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>django-admin startproject project <span class=\"nb\">.</span>\n</code></pre></div>\n<p>Then, run the command below to create the app:</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>python3 manage.py startapp sleep_app\n</code></pre></div>\n<p>Next, add the app you just created to the <code>settings.py</code> file:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.contenttypes'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.sessions'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.messages'</span><span class=\"p\">,</span>\n    <span class=\"s\">'django.contrib.staticfiles'</span><span class=\"p\">,</span>\n    <span class=\"s\">'sleep_app'</span> <span class=\"c1\">#new\n</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Now, in the <code>views.py</code> of sleep_app, paste the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">slow_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;Muhammed Ali&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Paste the code below to update the <code>urls.py</code> file of the project to display the view in the browser.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sleep_app.views</span> <span class=\"kn\">import</span> <span class=\"n\">slow_view</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">&quot;sleep/&quot;</span><span class=\"p\">,</span> <span class=\"n\">slow_view</span><span class=\"p\">),</span>\n\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>Now, when you run you project with <code>python manage.py runserver</code> and open <a href=\"http://127.0.0.1:8000/sleep/\">http://127.0.0.1:8000/sleep/</a> on your browser, you’ll find that it takes 7 minutes before you can see the content of the site. This indicates a slow process that should be offloaded so that users can access the site content as fast as possible.</p>\n\n<h2 id=\"how-to-set-up-job-queues-and-workers-for-django-applications\">How to Set Up Job Queues and Workers for Django Applications</h2>\n\n<p>In this section, you will learn how to use Django Q and Celery to set up job queues and workers to offload the slow process we created above.</p>\n\n<h3 id=\"how-to-use-django-q\">How to Use Django Q</h3>\n\n<p><a href=\"https://django-q.readthedocs.io/en/latest/\">Django Q</a> is an application used to manage job/task queues and workers in a Django application. It does this by using Python multiprocessing.</p>\n\n<p>To set up job queues, you will need a message broker, which is a system that translates the formal messaging protocol of the sender(Django) to the formal messaging protocol of the receiver (Django Q). The message broker we will use in this article is <a href=\"https://en.wikipedia.org/wiki/Redis\">Redis</a>, but there are <a href=\"https://en.wikipedia.org/wiki/Message_broker#List_of_message_broker_software\">others</a> you can choose from. Redis will get the information about the functions to be executed and put it in a queue for Django Q to receive.</p>\n\n<p>We will use the Redis service provided by <a href=\"https://www.heroku.com/\">Heroku</a> as our message broker.</p>\n\n<h3 id=\"set-up-heroku-redis-on-a-django-project\">Set Up Heroku Redis on a Django Project</h3>\n\n<p>For this step, make sure that you already have <a href=\"https://devcenter.heroku.com/articles/heroku-cli\">Heroku CLI</a> installed in your local machine and have created an account on <a href=\"https://www.heroku.com/\">Heroku</a>. Then, go to your terminal, navigate to the root of your project, and run the following commands.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>git init\nheroku create <span class=\"nt\">--region</span> eu <span class=\"nt\">--addons</span><span class=\"o\">=</span>heroku-redis\n</code></pre></div>\n<p>The first command initializes a git repo for the project so that our project can connect to Heroku, and the second command creates a new app on Heroku with a Redis add-on. The <code>--region</code> flag specifies the <a href=\"https://devcenter.heroku.com/articles/regions\">region</a> in which you want your application to be created.</p>\n\n<p>Next, install Django Q and Redis with <code>pip install django-q redis==3.5.3</code>  and add <code>&quot;django_q&quot;</code> to <code>INSTALLED_APPS</code> in you Django settings file.</p>\n\n<p>Then, run <code>heroku config</code> and Heroku will prompt the Redis credentials. We will need the <code>REDIS_URL</code> later.</p>\n\n<p>In the <code>settings.py</code> file, paste the code below to initialize the settings for Django Q.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"n\">Q_CLUSTER</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'name'</span><span class=\"p\">:</span> <span class=\"s\">'myproject'</span><span class=\"p\">,</span>\n    <span class=\"s\">'workers'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"c1\"># number of workers. It Defaults to number of CPU of your local machine.\n</span>    <span class=\"s\">'recycle'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"s\">'timeout'</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span>\n    <span class=\"s\">'compress'</span><span class=\"p\">:</span> <span class=\"bp\">True</span><span class=\"p\">,</span>\n    <span class=\"s\">'save_limit'</span><span class=\"p\">:</span> <span class=\"mi\">250</span><span class=\"p\">,</span>\n    <span class=\"s\">'queue_limit'</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n    <span class=\"s\">'cpu_affinity'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s\">'label'</span><span class=\"p\">:</span> <span class=\"s\">'Django Q'</span><span class=\"p\">,</span>\n    <span class=\"s\">'redis'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">'host'</span><span class=\"p\">:</span> <span class=\"s\">'ec2-54-171-19-145.eu-west-1.compute.amazonaws.com'</span><span class=\"p\">,</span> <span class=\"c1\">#Gotten from REDIS_URL\n</span>        <span class=\"s\">'password'</span><span class=\"p\">:</span> <span class=\"s\">'p78f7b20091d2710e27400dda07d097aff472f7d6a5947bd3232683d268fa4c0f'</span><span class=\"p\">,</span>  <span class=\"c1\">#Gotten from REDIS_URL\n</span>        <span class=\"s\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">31449</span><span class=\"p\">,</span> <span class=\"c1\">#Gotten from REDIS_URL\n</span>        <span class=\"s\">'db'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><img src=\"/images/blog/posts/job-queues-workers-django/q-redis-url.png\" alt=\"Redis URL for Q\"></p>\n\n<p>Update the parts of the code above retrieved from the <code>REDIS_URL</code> with your <code>REDIS_URL</code> details.</p>\n\n<p><em>Note: For security purposes, in a real-life project, don't leave all the credentials in the project file.</em></p>\n\n<p>You can learn more about other configuration settings in the <a href=\"https://django-q.readthedocs.io/en/latest/configure.html\">documentation</a>.</p>\n\n<p>Next, run <code>python manage.py migrate</code> so that Django Q can apply its migrations.</p>\n\n<h3 id=\"offloading-the-sleep-function-to-django-q\">Offloading the Sleep Function to Django Q</h3>\n\n<p>To offload the <code>sleep(7)</code> function, we will need to import the <code>async_task</code> function. It takes 3 <code>argument</code>s;</p>\n\n<ol>\n<li>The function you want to offload, which, in this case, is <code>sleep()</code>.</li>\n<li>The <code>argument</code>s you want to pass into the offloaded function, which, in this case, is <code>10</code>.</li>\n<li>The function you want to run after the worker executes the job in the job queue is <code>hook()</code>; this function takes in <code>task</code> as an argument.</li>\n</ol>\n\n<p>Paste the code below into your <code>views.py</code> file.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_q.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">async_task</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">Slow_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;Muhammed Ali&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">async_task</span><span class=\"p\">(</span><span class=\"s\">&quot;sleep_app.q_services.py.sleepy_func&quot;</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">hook</span><span class=\"o\">=</span><span class=\"s\">&quot;sleep_app.q_services.py.hook_funcs&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Next, in the <code>sleep_app</code> folder, create a new file named <code>q_services.py</code> (file name is arbitrary), which will contain all the functions required by <code>async_task()</code>.</p>\n\n<p>In <code>q_services.py</code>, paste the following code.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">hook_funcs</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">&quot;The task result is: &quot;</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sleepy_func</span><span class=\"p\">(</span><span class=\"n\">sec</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This function will be taken to the job queue\n</span>    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">sec</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span> <span class=\"p\">(</span><span class=\"s\">&quot;sleepy function ran&quot;</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Next, make sure your project is running, and then run <code>python manage.py qcluster</code> in another terminal to spin-up the <a href=\"https://django-q.readthedocs.io/en/latest/architecture.html\">Django Q cluster</a> for your application.</p>\n\n<p>Open <code>[http://127.0.0.1:8000/sleep](http://127.0.0.1:8000/sleep)</code>, and you’ll see that the page comes up immediately, showing that <code>sleep(7)</code> is being handle by Django Q.</p>\n\n<p>On the Django server, you’ll see that a job has been enqueued and is being handled by the workers.</p>\n\n<p><img src=\"/images/blog/posts/job-queues-workers-django/enqueue.png\" alt=\"Django enqueue\"></p>\n\n<p>Then, after 7 seconds, on the Django Q cluster, you should see something like the following image, showing that the job is done.</p>\n\n<p><img src=\"/images/blog/posts/job-queues-workers-django/cluster.png\" alt=\"Django Q cluster\"></p>\n\n<h2 id=\"how-to-use-celery\">How to Use Celery</h2>\n\n<p><a href=\"https://docs.celeryproject.org/en/stable/getting-started/introduction.html\">Celery</a> is a distributed task queue that allows you to send jobs to the queue for execution. Celery provides dedicated workers on the lookout for new tasks to execute in the job queue.</p>\n\n<p>Like Django Q, we will also need a message broker for this to work. We will need to create another app on Heroku and generate new credentials.</p>\n\n<p>To illustrate this, I will create another <code>sleep_app</code> like we did previously.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nv\">$ </span>python3 manage.py startapp sleep_app2\n</code></pre></div>\n<p>Next, add <code>&quot;sleep_app2&quot;</code> to <code>INSTALLED_APPS</code>.</p>\n\n<p>Then, in the <code>views.py</code> of <code>sleep_app2</code>, paste the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">slow_view2</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;Muhammed Ali&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Paste the code below to update the <code>urls.py</code> file of the project to display the view in the browser.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"p\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sleep_app.views2</span> <span class=\"kn\">import</span> <span class=\"n\">slow_view2</span> <span class=\"c1\">#new\n</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"p\">...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">&quot;sleep2/&quot;</span><span class=\"p\">,</span> <span class=\"n\">slow_view2</span><span class=\"p\">),</span> <span class=\"c1\">#new\n</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>First, install Celery by running <code>pip install celery</code>.</p>\n\n<p>Next, in your project folder, create a file with name <code>celery.py</code> and paste the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">celery</span> <span class=\"kn\">import</span> <span class=\"n\">Celery</span>\n\n<span class=\"c1\"># Set the default Django settings module for the 'celery' program.\n</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s\">'DJANGO_SETTINGS_MODULE'</span><span class=\"p\">,</span> <span class=\"s\">'project.settings'</span><span class=\"p\">)</span> <span class=\"c1\">#path to your settings file\n</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Celery</span><span class=\"p\">(</span><span class=\"s\">'slow_view2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\n# - namespace='CELERY' means all celery-related configuration keys\n#   should have a `CELERY_` prefix.\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">config_from_object</span><span class=\"p\">(</span><span class=\"s\">'django.conf:settings'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s\">'CELERY'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load task modules from all registered Django apps.\n</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">autodiscover_tasks</span><span class=\"p\">()</span>\n\n<span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">debug_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Request: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"err\">!</span><span class=\"n\">r</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Then, in <code>project/__init__.py</code>, paste the following code to import the Celery app we just created into Django.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">.celery</span> <span class=\"kn\">import</span> <span class=\"n\">app</span> <span class=\"k\">as</span> <span class=\"n\">celery_app</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'celery_app'</span><span class=\"p\">,)</span>\n</code></pre></div>\n<p>Create another project in Heroku by running <code>heroku create --region eu --addons=heroku-redis &lt;name-of-project&gt;</code>, and then run <code>heroku config -a &lt;name-of-project&gt;</code> to get your <code>REDIS_URL</code>.</p>\n\n<p><img src=\"/images/blog/posts/job-queues-workers-django/redis-url.png\" alt=\"Image of Redis URL\"></p>\n\n<p>Next, go to your <code>settings.py</code> file and paste the following code at the button of the file.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"n\">CELERY_BROKER_URL</span> <span class=\"o\">=</span> <span class=\"s\">'redis://:p056c31e91f51f95aff5f976758425ff651afe815e3f8f14fd00dfca932b679bb@ec2-34-252-112-18.eu-west-1.compute.amazonaws.com:24059'</span> <span class=\"c1\">#the REDIS_URL you just got\n</span>\n<span class=\"n\">CELERY_ACCEPT_CONTENT</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'json'</span><span class=\"p\">]</span>\n<span class=\"n\">CELERY_TASK_SERRIALIZER</span> <span class=\"o\">=</span> <span class=\"s\">'json'</span>\n</code></pre></div>\n<p>In the <code>sleep_app2</code> folder, create a new file with the name <code>celery_services.py</code> (file name is arbitrary) and paste the following code.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">celery</span> <span class=\"kn\">import</span> <span class=\"n\">shared_task</span> <span class=\"c1\">#used to create task \n</span><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"o\">@</span><span class=\"n\">shared_task</span>\n<span class=\"k\">def</span> <span class=\"nf\">sleepy_func</span><span class=\"p\">(</span><span class=\"n\">sec</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This function will be taken to the job queue\n</span>    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">sec</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Next, update your <code>views.py</code> with the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.celery_services</span> <span class=\"kn\">import</span> <span class=\"n\">sleepy_func</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">slow_view2</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s\">&quot;Muhammed Ali&quot;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">sleepy_func</span><span class=\"p\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Then, run your Django server, and on another terminal window, run the Celery server with <code>celery -A project worker -l info</code>.</p>\n\n<p>Open the URL for <code>sleep_app2</code>, and you’ll see that the page comes up faster. Finally, go over to the Celery server 7 seconds later, and you will see that our job was executed successfully.</p>\n\n<p><img src=\"/images/blog/posts/job-queues-workers-django/celery-server.png\" alt=\"Celery Server\"></p>\n\n<h2 id=\"job-queues-in-production\">Job Queues in Production</h2>\n\n<p>Job queues work a little differently when working in production. This is because there are some extra settings and configurations that go into running the job queue servers on the cloud, depending on the platform you are using for deployment.</p>\n\n<p>If you are trying to deploy your Django project with Celery to Heroku, Heroku provides a <a href=\"https://devcenter.heroku.com/articles/celery-heroku\">solution</a> for that.</p>\n\n<p>Apart from the option above, some cloud service providers offer services for working with job queues. For example, AWS has <a href=\"https://docs.aws.amazon.com/batch/latest/userguide/create-job-queue.html\">AWS Batch</a>, and Heroku has <a href=\"https://elements.heroku.com/addons/scheduler\">Heroku Scheduler</a>. You can look into those when working on the cloud.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This article explained what job queues and workers are all about, as well as how they work and their functions. We also built a simple application that delays the display of the webpage to provide a practical example of how job queues work.</p>\n\n<p>We used Django Q and Celery to remove the slow process from the view, so it can work in the background and not slow down the view.</p>\n\n<p>Hopefully, with this information, you will start considering these technologies to make your projects operate as fast as possible.</p>\n"
}