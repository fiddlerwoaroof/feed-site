{
  "title":"Logging Errors in PHP",
  "date":"2022-11-17T04:11:14.000000Z",
  "author":"Mauro Chojrin",
  "id":"https://www.honeybadger.io/blog/php-error-logging/",
  "link":"https://www.honeybadger.io/blog/php-error-logging/",
  "content":"<p>Software development is a complex endeavor. There are many things that must work <em>just right</em> for the whole system to remain stable and useful. Most of the time, there is only so much a developer can anticipate regarding all the possible scenarios that may arise during the lifetime of an application. The bottom line is that good software is the result of a long line of iterations, each building upon the feedback obtained from the use of previous ones.</p>\n\n<p>This feedback comes in many forms, with the most obvious being user comments and complaints. However, a message such as &quot;This isn't working!&quot; doesn’t provide quite enough information for us to fix things. What we, as developers, need is detailed information on what was happening when things went south.</p>\n\n<p>This information can typically be found in log files; at least, that's what we'd expect when doing this kind of forensic analysis. However, for this information to exist, we have to be very proactive in having our programs leave clues behind as they progress towards their goals.</p>\n\n<p>There are two questions that need to be answered when thinking of logs:</p>\n\n<ol>\n<li>What should you log?</li>\n<li>Where should you store your logs?</li>\n</ol>\n\n<p>The first question is probably too specific to provide a general answer, but the best rule-of-thumb is &quot;log anything you think you might need to figure out what went wrong&quot;. It's ultimately a delicate equilibrium between having enough information and flooding the server disks. It’s not an easy choice.</p>\n\n<p>The second question is a little easier to tackle, as there are only so many places where information can be stored in a computing environment.</p>\n\n<p>In this article, I'll analyze three ways to approach this common task. The first two are built-in functions, and the last one is a popular third-party library:</p>\n\n<ul>\n<li><code>trigger_error</code></li>\n<li><code>error_log</code></li>\n<li>Monolog</li>\n</ul>\n\n<p>Let's dig in, shall we?</p>\n\n<h2 id=\"error-logging-via-trigger_error\">Error Logging via trigger_error</h2>\n\n<p>The first tool a PHP developer encounters when looking for logging mechanisms is the <a href=\"https://www.php.net/manual/es/function.trigger-error.php\">trigger_error function</a>.</p>\n\n<p>This function is very simple to use; it takes a message explaining what was wrong and an integer number signaling the error type. This number can be supplied using <a href=\"https://www.php.net/manual/en/errorfunc.constants.php\">pre-defined constants</a>.</p>\n\n<p>An example of its usage is as follows:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"nb\">trigger_error</span><span class=\"p\">(</span><span class=\"s1\">'Something went wrong'</span><span class=\"p\">,</span> <span class=\"kc\">E_USER_ERROR</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>This will produce an output similar to the following:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>PHP Fatal error:  Something went wrong in php shell code on line 1\n</code></pre></div>\n<p>That is true, of course, if you run the code from the command line. If you were to put it in a PHP file to be accessed via the browser, for example:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n<span class=\"nb\">trigger_error</span><span class=\"p\">(</span><span class=\"s1\">'Something went wrong'</span><span class=\"p\">,</span> <span class=\"kc\">E_USER_ERROR</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And then brought the built-in webserver up by issuing:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>php -S localhost:8000\n</code></pre></div>\n<p>And finally made a request to <code>http://localhost:8000</code>, you'd see, right there in the console, something similar to the following:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>[Wed Apr 20 15:15:21 2022] PHP 7.4.3 Development Server (http://localhost:8000) started\n[Wed Apr 20 15:15:25 2022] 127.0.0.1:34614 Accepted\n[Wed Apr 20 15:15:25 2022] 127.0.0.1:34616 Accepted\n[Wed Apr 20 15:15:25 2022] PHP Fatal error:  Something went wrong in /mnt/c/Users/mchoj/PhpstormProjects/Honeybadger/index.php on line 2\n[Wed Apr 20 15:15:25 2022] 127.0.0.1:34614 [500]: GET / - Something went wrong in /mnt/c/Users/mchoj/PhpstormProjects/Honeybadger/index.php on line 2\n[Wed Apr 20 15:15:25 2022] 127.0.0.1:34614 Closing\n[Wed Apr 20 15:15:26 2022] 127.0.0.1:34620 Accepted\n[Wed Apr 20 15:15:29 2022] 127.0.0.1:34620 Closed without sending a request; it was probably just an unused speculative preconnection\n</code></pre></div>\n<p>In the browser, you'd see the following:</p>\n\n<p><img src=\"/images/blog/posts/php-error-logging/Non_working_page.png\" title=\"Non-working page\" alt=\"Non-working page\"></p>\n\n<p>One particular feature of this function is that it's heavily influenced by the interpreter's configuration. This means that depending on the settings, such as <a href=\"https://www.php.net/manual/es/function.error-reporting.php\">error_reporting</a>, <a href=\"https://www.php.net/manual/es/errorfunc.configuration.php#ini.display-errors\">display_errors</a>, and a <a href=\"https://www.php.net/manual/es/errorfunc.configuration.php\">few others</a>, the actual behavior of the function can change significantly.</p>\n\n<p>For instance, if you were to re-start the server with the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>php -S localhost:8000 -d display_errors=1\n</code></pre></div>\n<p>You'd see the following:</p>\n\n<p><img src=\"/images/blog/posts/php-error-logging/Non_working_page_showing_error.png\" title=\"Non-working page\" alt=\"Non-working page\"></p>\n\n<p>What this means in practice is that it's difficult to ensure a consistent result among different running environments. It’s not really something you want for your projects.</p>\n\n<h2 id=\"error-logging-via-error_log\">Error Logging via error_log</h2>\n\n<p>Another built-in tool that PHP provides is <a href=\"https://www.php.net/manual/es/function.error-log\">the error_log function</a>.</p>\n\n<p>This function is more predictable than <code>trigger_error</code>, as it only depends on the <a href=\"https://www.php.net/manual/es/errorfunc.configuration.php#ini.error-log\">error_log</a> setting; however, its actual behavior can change dramatically depending on its parameters (particularly the <code>message_type</code>).</p>\n\n<p>For instance, if you change the code to:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n<span class=\"nb\">error_log</span><span class=\"p\">(</span><span class=\"s1\">'Something went wrong'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And refresh the page, you'll be staring at a blank screen; however, when looking at the console output, you'll find the following:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>[Wed Apr 20 15:39:41 2022] PHP 7.4.3 Development Server (http://localhost:8000) started\n[Wed Apr 20 15:39:47 2022] 127.0.0.1:34648 Accepted\n[Wed Apr 20 15:39:47 2022] 127.0.0.1:34646 Accepted\n[Wed Apr 20 15:39:47 2022] Something went wrong\n[Wed Apr 20 15:39:47 2022] 127.0.0.1:34646 [200]: GET /\n[Wed Apr 20 15:39:47 2022] 127.0.0.1:34646 Closing\n[Wed Apr 20 15:39:47 2022] 127.0.0.1:34650 Accepted\n[Wed Apr 20 15:39:57 2022] 127.0.0.1:34648 Closed without sending a request; it was probably just an unused speculative preconnection\n[Wed Apr 20 15:39:57 2022] 127.0.0.1:34648 Closing\n[Wed Apr 20 15:39:57 2022] 127.0.0.1:34650 Closed without sending a request; it was probably just an unused speculative preconnection\n[Wed Apr 20 15:39:57 2022] 127.0.0.1:34650 Closing\n</code></pre></div>\n<p>Even if you use the same <code>php -S localhost:8000 -d display_errors=1</code> to bring the server up.</p>\n\n<p>In fact, this function stores the error messages together with those from the webserver by default.</p>\n\n<p>You can change this behavior via the <code>message_type</code> parameter. If you fill it with a number <code>3</code> when calling the function, you'll be asking the interpreter to output your message to a specific file, which is determined by the value of the next parameter: <code>destination</code>. Like this:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n<span class=\"nb\">error_log</span><span class=\"p\">(</span><span class=\"s1\">'Something went wrong'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/log'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If you refresh the page. you'll end up with the same blank screen, but the server logs will be different:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>[Wed Apr 20 15:46:11 2022] PHP 7.4.3 Development Server (http://localhost:8000) started\n[Wed Apr 20 15:46:15 2022] 127.0.0.1:34652 Accepted\n[Wed Apr 20 15:46:15 2022] 127.0.0.1:34654 Accepted\n[Wed Apr 20 15:46:15 2022] 127.0.0.1:34652 [200]: GET /\n[Wed Apr 20 15:46:15 2022] 127.0.0.1:34652 Closing\n[Wed Apr 20 15:46:16 2022] 127.0.0.1:34658 Accepted\n[Wed Apr 20 15:46:18 2022] 127.0.0.1:34658 Closed without sending a request; it was probably just an unused speculative preconnection\n[Wed Apr 20 15:46:18 2022] 127.0.0.1:34658 Closing\n[Wed Apr 20 15:46:18 2022] 127.0.0.1:34654 Closed without sending a request; it was probably just an unused speculative preconnection\n[Wed Apr 20 15:46:18 2022] 127.0.0.1:34654 Closing\n</code></pre></div>\n<p>However, as expected, if you look at the files present in the project's directory, you'll find a newly created <code>log</code> one, and if you look at its contents, you'll find the following:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Something went wrong\n</code></pre></div>\n<p>One of the main differences between <code>error_log</code> and <code>trigger_error</code> is that a call to the latter will most likely result in an execution interruption, while the former will simply write the message to the appropriate stream and yield back control.</p>\n\n<p>At first glance, you could get the impression that this function adds little to no value over other functions aimed at writing strings to files.</p>\n\n<p>However, if you take a closer look, you'll notice a very particular, and certainly useful, feature of <code>error_log</code>; it handles locking internally, meaning you won't have to deal with nasty race conditions in high concurrency environments, such as a web server.</p>\n\n<p>Although either <code>trigger_error</code> or <code>error_log</code> will <em>technically</em> work, it's pretty clear that the developer experience they provide is sub-optimal at best.</p>\n\n<p>Think for a minute what it would take for you to store log information both locally and remotely just using these tools, not to mention choosing the log destination by severity.</p>\n\n<p>Of course, the PHP community has better options at your disposal. Read on to discover an professional tool.</p>\n\n<h2 id=\"error-logging-via-monolog\">Error Logging via Monolog</h2>\n\n<p>So far, I've been discussing what PHP itself has to offer, which, quite frankly, is not very appealing. Luckily, though, there are great developers involved in pushing beyond those boundaries, making the appearance of great tools a reality. That is the case for <a href=\"https://github.com/Seldaek/monolog\">Monolog</a>.</p>\n\n<p>Monolog is an object-oriented library that can be brought into any PHP project thanks to <a href=\"https://getcomposer.org/\">composer</a>, which provides a lot of really cool features, such as the ability to send the same message through different channels (a file, a database, and an email) and apply different filtering and formatting logic before storing, allowing you to build really complex logging mechanisms without too much hassle.</p>\n\n<p>Let's start with a simple example: you want to keep a log of every IP address that visits your website.</p>\n\n<p>Your code would look something like the following:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n\n<span class=\"nb\">error_log</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The next step is to bring Monolog in by using the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>composer require monolog/monolog\n</code></pre></div>\n<p>Which will produce an output similar to the following:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Loading composer repositories with package information\nUpdating dependencies\nLock file operations: 2 installs, 0 updates, 0 removals\n  - Locking monolog/monolog (2.5.0)\n  - Locking psr/log (3.0.0)\nWriting lock file\nInstalling dependencies from lock file (including require-dev)\nPackage operations: 2 installs, 0 updates, 0 removals\n  - Installing psr/log (3.0.0): Extracting archive\n  - Installing monolog/monolog (2.5.0): Extracting archive\n10 package suggestions were added by new dependencies, use `composer suggest` to see details.\nGenerating autoload files\n1 package you are using is looking for funding.\nUse the `composer fund` command to find out more!\nPSR-4 autoloading configured. Use &quot;namespace Mauro\\Log;&quot; in src/\nInclude the Composer autoloader with: require 'vendor/autoload.php';\n</code></pre></div>\n<p>After the installation is finished, you need to make use of the library in your code. As usual, it all starts with including the autoloading definition:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n\n<span class=\"nb\">error_log</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Now, before we move forward with this refactoring, there are a few concepts you need to know about. The thing is, while Monolog takes logging to a whole new level, that kind of power comes with a price tag... no, I'm not talking about money, but about a learning curve.</p>\n\n<p>The first one is the <code>Logger</code> itself. This class constitutes the backbone of the whole library. In fact, it’s the one you'll use most of the time.</p>\n\n<p>You can have as many loggers as you need, each one with its own configuration.</p>\n\n<p>Every Logger is identified by its <em>channel name</em>. This can be useful if, for instance, you're sending logs to the same file and need to differentiate them later.</p>\n\n<p>The idea is for the logs generated via Monolog to be easily parsed using simple tools like <code>grep</code>.</p>\n\n<p>The Logger relies on three other classes to fulfill its purpose:</p>\n\n<ul>\n<li>Handlers</li>\n<li>Processors</li>\n<li>Formatters</li>\n</ul>\n\n<h3 id=\"monolog-handlers\">Monolog Handlers</h3>\n\n<p>Handlers are the lowest level component. A handler's responsibility is to answer the question &quot;Where should this log be stored?&quot;. There are many handler classes defined within the Monolog library. Here are a few of them:</p>\n\n<ul>\n<li><a href=\"https://github.com/Seldaek/monolog/blob/main/src/Monolog/Handler/ErrorLogHandler.php\">ErrorLogHandler</a>: the simplest one, just a little wrapper around <a href=\"http://docs.php.net/manual/en/function.error-log.php\"><code>error_log</code></a></li>\n<li><a href=\"https://github.com/Seldaek/monolog/blob/main/src/Monolog/Handler/NativeMailerHandler.php\">NativeMailerHandler</a>: send logs to an email address using php's <a href=\"http://php.net/manual/en/function.mail.php\"><code>mail</code></a> function</li>\n<li><a href=\"https://github.com/Seldaek/monolog/blob/main/src/Monolog/Handler/SqsHandler.php\">SQSHandler</a>: send logs to an <a href=\"http://docs.aws.amazon.com/aws-sdk-php/v2/guide/service-sqs.html\">AWS SQS</a> queue.</li>\n</ul>\n\n<h3 id=\"monolog-processors\">Monolog Processors</h3>\n\n<p>Processors are used to transform <em>raw</em> log data before it is passed to the handlers for storage.</p>\n\n<p>Usually, this means adding standard context information, such as the date and time, user, and IP.</p>\n\n<p>The library comes bundled with quite a few very useful processors, such as:</p>\n\n<ul>\n<li><a href=\"https://github.com/Seldaek/monolog/blob/2.x/src/Monolog/Processor/WebProcessor.php\">WebProcessor</a> which adds information about the client making the request that spawned this message</li>\n<li><a href=\"https://github.com/Seldaek/monolog/blob/2.x/src/Monolog/Processor/MemoryProcessor.php\">MemoryProcessor</a> which adds information about the memory usage</li>\n<li><a href=\"https://github.com/Seldaek/monolog/blob/2.x/src/Monolog/Processor/GitProcessor.php\">GitProcessor</a> which adds information about the Git commits involved</li>\n</ul>\n\n<p>And, of course, you can build your own processors by creating new classes which implement the <a href=\"https://github.com/Seldaek/monolog/blob/2.x/src/Monolog/Processor/ProcessorInterface.php\">ProcessorInterface</a>.</p>\n\n<p>In summary, processors are meant to answer the question &quot;What <em>else</em> should be logged?&quot;</p>\n\n<h3 id=\"monolog-formatters\">Monolog Formatters</h3>\n\n<p>Finally, formatters are meant to answer the question &quot;How should messages be stored?&quot;</p>\n\n<p>Formatters work in conjunction with handlers to add formatting information around the messages, so they can be better rendered in a particular environment.</p>\n\n<p>For instance, if you're sending logs via email, a nicely crafted HTML will make the logs more easily readable within an email client.</p>\n\n<h3 id=\"monolog-in-action\">Monolog in Action</h3>\n\n<p>Ok, it's been a lot of theory right? Let's see some code to make sense of all we've been discussing.</p>\n\n<p>Going back to our little example, the first thing we'll need is a <code>Logger</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>But ... where are the logs going to be stored? We need a <code>Handler</code> for that!</p>\n\n<p>Let's add one:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Handler\\StreamHandler</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>Now we have a handler that will save every log record to the file <code>ip.log</code> in the same directory as our application.</p>\n\n<p>What we need to do now is attach this Handler to the Logger, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Handler\\StreamHandler</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$handler</span><span class=\"p\">);</span>\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>And now, let's write our first log message using Monolog:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Handler\\StreamHandler</span><span class=\"p\">;</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$handler</span><span class=\"p\">);</span>\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The <code>info</code> method is just one of many that can be called to signal the severity of the message.</p>\n\n<p>If you start a local webserver (<code>php -S localhost:8000</code>) and visit <code>http://localhost:8000</code>, you'll find something like this in your <code>ip.log</code> file:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>[2022-04-29T11:41:39.121355+02:00] my-app.INFO: Got a visitor from 127.0.0.1 [] []\n</code></pre></div>\n<p>Now let's say you want to not only save this information to a local file but also send it to an admin via email. You could do it using a <a href=\"https://github.com/Seldaek/monolog/blob/2.x/src/Monolog/Handler/NativeMailerHandler.php\"><code>NativeMailerHandler</code></a>, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nn\">Monolog\\Handler\\</span><span class=\"p\">{</span><span class=\"nc\">StreamHandler</span><span class=\"p\">,</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">};</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$emailHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">(</span><span class=\"s1\">'you@yourdomain.com'</span><span class=\"p\">,</span> <span class=\"s1\">'Message from Honeybadger\\'s App'</span><span class=\"p\">,</span> <span class=\"s1\">'app@localhost'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$handler</span><span class=\"p\">);</span>\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$emailHandler</span><span class=\"p\">);</span>\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If you refresh your page, you'll see a new entry in your file but no email in your inbox. Why did this happen?</p>\n\n<p><code>NativeMailerHandler</code> is designed to only react to error messages by default, so you have two options here; you can either change the severity of your message:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nn\">Monolog\\Handler\\</span><span class=\"p\">{</span><span class=\"nc\">StreamHandler</span><span class=\"p\">,</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">};</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$emailHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">(</span><span class=\"s1\">'you@yourdomain.com'</span><span class=\"p\">,</span> <span class=\"s1\">'Message from HoneBadger\\'s App'</span><span class=\"p\">,</span> <span class=\"s1\">'app@localhost'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$handler</span><span class=\"p\">);</span>\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$emailHandler</span><span class=\"p\">);</span>\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Or you can have your <code>$emailHandler</code> also take <code>info</code> messages into account:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nn\">Monolog\\Handler\\</span><span class=\"p\">{</span><span class=\"nc\">StreamHandler</span><span class=\"p\">,</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">};</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$emailHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">(</span><span class=\"s1\">'you@yourdomain.com'</span><span class=\"p\">,</span> <span class=\"s1\">'Message from Honeybadger\\'s App'</span><span class=\"p\">,</span> <span class=\"s1\">'app@localhost'</span><span class=\"p\">,</span> <span class=\"nc\">Logger</span><span class=\"o\">::</span><span class=\"no\">INFO</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$handler</span><span class=\"p\">);</span>\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$emailHandler</span><span class=\"p\">);</span>\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>In this case, your inbox should contain a message similar to the following:</p>\n\n<p><img src=\"/images/blog/posts/php-error-logging/Mailer_monolog.png\" alt=\"A green info message\"></p>\n\n<p>As you can see, an HTML formatter was used to produce this nice email without you doing anything. Are you sold on the idea of using Monolog yet? :)</p>\n\n<p>You could keep adding handlers, formatters and processors as you see fit; the possibilities are endless.</p>\n\n<h3 id=\"integration-with-honeybadger\">Integration with Honeybadger</h3>\n\n<p>Now, if you're familiar with <a href=\"https://www.Honeybadger.io/\">Honeybadger</a>, you already know all the benefits it can bring to your development team.</p>\n\n<p>Wouldn't it be great to integrate it into your Monolog-powered logs? Well, guess what? It is really simple.</p>\n\n<p>All it takes is an instance of <a href=\"https://github.com/Honeybadger-io/Honeybadger-php/blob/master/src/LogHandler.php\">Honeybadger\\LogHandler</a> as a Monolog Handler.</p>\n\n<p>Start by adding the required library:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>composer require Honeybadger-io/Honeybadger-php\n</code></pre></div>\n<p>Then update your code to look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight php\"><code><span class=\"cp\">&lt;?php</span>\n\n<span class=\"k\">require_once</span> <span class=\"s1\">'vendor/autoload.php'</span><span class=\"p\">;</span>\n\n<span class=\"kn\">use</span> <span class=\"nc\">Monolog\\Logger</span><span class=\"p\">;</span>\n<span class=\"kn\">use</span> <span class=\"nn\">Monolog\\Handler\\</span><span class=\"p\">{</span><span class=\"nc\">StreamHandler</span><span class=\"p\">,</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">};</span>\n<span class=\"kn\">use</span> <span class=\"nn\">Honeybadger\\</span><span class=\"p\">{</span><span class=\"nc\">Honeybager</span><span class=\"p\">,</span> <span class=\"nc\">LogHandler</span><span class=\"p\">};</span>\n\n<span class=\"nv\">$logger</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Logger</span><span class=\"p\">(</span><span class=\"s1\">'my-app'</span><span class=\"p\">);</span>\n<span class=\"nv\">$handler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StreamHandler</span><span class=\"p\">(</span><span class=\"k\">__DIR__</span><span class=\"mf\">.</span><span class=\"s1\">'/ip.log'</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$emailHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">NativeMailerHandler</span><span class=\"p\">(</span><span class=\"s1\">'you@yourdomain.com'</span><span class=\"p\">,</span> <span class=\"s1\">'Message from Honeybadger\\'s App'</span><span class=\"p\">,</span> <span class=\"s1\">'app@localhost'</span><span class=\"p\">,</span> <span class=\"nc\">Logger</span><span class=\"o\">::</span><span class=\"no\">INFO</span><span class=\"p\">);</span>\n<span class=\"nv\">$honeybadger</span> <span class=\"o\">=</span> <span class=\"nc\">Honeybadger\\Honeybadger</span><span class=\"o\">::</span><span class=\"k\">new</span><span class=\"p\">([</span>\n  <span class=\"s1\">'api_key'</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'YOUR_API_KEY'</span>\n<span class=\"p\">]);</span>\n\n<span class=\"nv\">$honeyBadgerHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">LogHandler</span><span class=\"p\">(</span><span class=\"nv\">$honeybadger</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$handler</span><span class=\"p\">);</span>\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$emailHandler</span><span class=\"p\">);</span>\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">pushHandler</span><span class=\"p\">(</span><span class=\"nv\">$honeyBadgerHandler</span><span class=\"p\">);</span>\n\n<span class=\"nv\">$currentIp</span> <span class=\"o\">=</span> <span class=\"nv\">$_SERVER</span><span class=\"p\">[</span><span class=\"s1\">'REMOTE_ADDR'</span><span class=\"p\">];</span>\n\n<span class=\"nv\">$logger</span><span class=\"o\">-&gt;</span><span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"s1\">'Got a visitor from '</span><span class=\"mf\">.</span><span class=\"nv\">$currentIp</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And, after refreshing the page again, you'll find a message like this on your Honeybadger dashboard:</p>\n\n<p><img src=\"/images/blog/posts/php-error-logging/HoneybadgerPanel.png\" alt=\"Log message from php at Honeybadger's Dashboard\">.</p>\n\n<p>Is your project based on Laravel? You're also covered. Read <a href=\"https://docs.Honeybadger.io/lib/php/integration/laravel/#using-Honeybadger-as-a-logger\">here</a> for a complete integration guide.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>As we're accustomed when it comes to PHP, there are quick-and-dirty solutions you can implement in a heartbeat, and there are professional ones that take a little more effort, but the difference in the long run makes them well worth the trouble.</p>\n\n<p>Which one will you choose for your projects?</p>\n"
}