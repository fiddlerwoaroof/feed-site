{
  "title":"Writing Cleaner JavaScript with Modules",
  "date":"2022-11-17T04:11:14.000000Z",
  "author":"Adebayo Adams",
  "id":"https://www.honeybadger.io/blog/javascript-modules-encapsulation/",
  "link":"https://www.honeybadger.io/blog/javascript-modules-encapsulation/",
  "content":"<p>Modules are one of the most commonly used JavaScript features because most JavaScript frameworks and libraries leverage the module feature for organization and componentization. Some developers think that the import and export keywords are ReactJS features.</p>\n\n<p>In this article, I will explain how to encapsulate code using modules to make your projects cleaner. Let's take a look at what encapsulation is in the next section.</p>\n\n<h2 id=\"encapsulation\">Encapsulation</h2>\n\n<p>In programming, encapsulation refers to bundling related code in a single source. The code can include associated functions and variables inside files or related files inside a folder.</p>\n\n<p>Encapsulation is used to restrict direct access to data and implementations of the bundled and related code from the code that uses them. Thus, the implementation of the functionalities is hidden, can't be manipulated by other parts of the code, and will only change when you want to change it. For example, in a blog application, when you bundle all the post properties and methods in a single unit, you only need to give the code that needs to interact with it: the name of the functions and the values they need to work.</p>\n\n<p>Encapsulation is necessary because it makes your code cleaner, maintainable, and easier to understand, reuse, and test.</p>\n\n<p>Next, I'll explain what modules are in JavaScript.</p>\n\n<h2 id=\"modules\">Modules</h2>\n\n<p>A module is an independent, self-contained, and detachable unit of a program. JavaScript allows you to structure large programs and codebases by creating modules of code that hold related functions and properties that can be exported in multiple other files that need these properties and functions.</p>\n\n<p>Code organization is the major reason a framework is a go-to option for most developers when building medium to large applications. I'll show you how to structure your code with JavaScript modules. First, let's look at the syntax of JavaScript modules.</p>\n\n<h3 id=\"exports\">Exports</h3>\n\n<p>Using modules makes functionalities available for other modules; the <code>export</code> keyword makes this possible. You can make a function accessible by other modules:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">verifyUser</span><span class=\"p\">(</span><span class=\"nx\">email</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"c1\">// do all necessary checks</span>\n <span class=\"k\">return</span> <span class=\"dl\">&quot;</span><span class=\"s2\">Successfully verified user!</span><span class=\"dl\">&quot;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<blockquote>\n<p>Note: Files that imports or export code are known as a module.</p>\n</blockquote>\n\n<p>The above function is ready to be used in other modules that need the <code>verifyUser</code> function. This is called a named export.</p>\n\n<h3 id=\"exporting-multiple-properties\">Exporting Multiple Properties</h3>\n\n<p>Using the <code>export</code> keyword, you can export anything from variables to classes. To export multiple properties from a module, you need to prefix the declaration with the <code>export</code> keyword:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">userName</span> <span class=\"o\">=</span> <span class=\"dl\">&quot;</span><span class=\"s2\">Lee</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">userAge</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">user</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">&quot;</span><span class=\"s2\">Lee</span><span class=\"dl\">&quot;</span><span class=\"p\">,</span>\n <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">30</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>The code above exports all the declarations in the module, but you don't need to export everything in a module; you can have declarations that are only available for use inside the module:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">apiKey</span> <span class=\"o\">=</span> <span class=\"dl\">&quot;</span><span class=\"s2\">12345</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getApiKey</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">apiKey</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<blockquote>\n<p>Note: A declaration is a function, class, variable, or anything declared inside a module.</p>\n</blockquote>\n\n<p>The code above exports only the <code>getApiKey</code> function, which returns the <code>apiKey</code> variable declared above the function.</p>\n\n<p>A cleaner way to export multiple properties is using the curly brackets notation:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// user sign in</span>\n<span class=\"kd\">function</span> <span class=\"nx\">userSignIn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed in</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// user sign out</span>\n<span class=\"kd\">function</span> <span class=\"nx\">userSignOut</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed out</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// delete task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">deleteTask</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> deleted`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//add task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">addTask</span><span class=\"p\">(</span><span class=\"nx\">task</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> added`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//edit task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">editTask</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">changes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> edited`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//complete task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">completeTask</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> completed`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>You can export all the functions in the block of code above:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">export</span> <span class=\"p\">{</span>\n <span class=\"nx\">userSignIn</span><span class=\"p\">,</span>\n <span class=\"nx\">userSignOut</span><span class=\"p\">,</span>\n <span class=\"nx\">deleteTask</span><span class=\"p\">,</span>\n <span class=\"nx\">addTask</span><span class=\"p\">,</span>\n <span class=\"nx\">editTask</span><span class=\"p\">,</span>\n <span class=\"nx\">completeTask</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>The above block of code exports all the declarations inside the curly braces and is available for imports in other modules, so now the module will look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// user sign in</span>\n<span class=\"kd\">function</span> <span class=\"nx\">userSignIn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed in</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// user sign out</span>\n<span class=\"kd\">function</span> <span class=\"nx\">userSignOut</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed out</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// delete task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">deleteTask</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> deleted`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//add task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">addTask</span><span class=\"p\">(</span><span class=\"nx\">task</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">task</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> added`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//edit task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">editTask</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">changes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> edited`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">//complete task</span>\n<span class=\"kd\">function</span> <span class=\"nx\">completeTask</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Task </span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\"> completed`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"p\">{</span>\n <span class=\"nx\">userSignIn</span><span class=\"p\">,</span>\n <span class=\"nx\">userSignOut</span><span class=\"p\">,</span>\n <span class=\"nx\">deleteTask</span><span class=\"p\">,</span>\n <span class=\"nx\">addTask</span><span class=\"p\">,</span>\n <span class=\"nx\">editTask</span><span class=\"p\">,</span>\n <span class=\"nx\">completeTask</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<blockquote>\n<p>Note: The <code>export {...}</code> block of code is typically placed at the bottom of the module for readability, but you can be put it anywhere inside the module.</p>\n</blockquote>\n\n<h3 id=\"default-exports\">Default Exports</h3>\n\n<p>Sometimes, you might have a function over 100 lines of code and want to place it alone in a single file. To make importing it into other modules easier, you can make it a default export:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// google sign in</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">googleSignIn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"c1\">// 100 lines of checking and getting details</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed in with Google</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The above function is being exported as the default from the module. I will show you how to use the <code>import</code> keyword in the next section.</p>\n\n<blockquote>\n<p>Note: A module can have only one <code>default</code> export.</p>\n</blockquote>\n\n<h3 id=\"import\">Import</h3>\n\n<p>In the previous section, you learned about using the export keyword to make properties of a module available for other modules. In this section, I'll teach you how to use the import keyword to get code from other modules.</p>\n\n<h3 id=\"importing\">Importing</h3>\n\n<p>To use code from other modules, you can import them using the <code>import</code> keyword:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">userSignIn</span><span class=\"p\">,</span> <span class=\"nx\">userSignOut</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">&quot;</span><span class=\"s2\">./filePath.js</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n</code></pre></div>\n<blockquote>\n<p>Note: The <code>&quot;./filePath&quot;</code> is a relative path to the directory route.</p>\n</blockquote>\n\n<p>The code above imports the userSignIn and userSignOut functions from the declared module. You can import one or more declarations; the only requirement is to ensure the property is defined in the module from which you are importing.</p>\n\n<h3 id=\"importing-default-exports\">Importing <code>default</code> Exports</h3>\n\n<p>In the &quot;Default Exports&quot; section above, you learned how to export functions as default from modules. This section will explain how to import exported declarations as default.</p>\n\n<p>You can import a default export using the following:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">googleSignIn</span> <span class=\"k\">from</span> <span class=\"dl\">&quot;</span><span class=\"s2\">./filePath.js</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The above code imports the <code>googleSignIn</code> function, which was exported as default in the previous section. Because a module can have only one default export, you can omit the name of the function declaration, and the above code will still work; this means you can declare the function without a name:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// google sign in</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"c1\">// 100 lines of checking and getting details</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed in with Google</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The above code will work because it is a default export.</p>\n\n<p>The only difference between importing a default and named export is the curly braces:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// default export, no braces</span>\n<span class=\"k\">import</span> <span class=\"nx\">googleSignIn</span> <span class=\"k\">from</span>  <span class=\"dl\">&quot;</span><span class=\"s2\">./filePath.js</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// named export, must use braces</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">userSignIn</span><span class=\"p\">,</span> <span class=\"nx\">userSignOut</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">&quot;</span><span class=\"s2\">./filePath.js</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n</code></pre></div>\n<h3 id=\"namespace-import\">Namespace Import</h3>\n\n<p>Sometimes, you have a module containing many different utility functions and want to use a single name to access them; this name is called a <code>namespace</code>.</p>\n\n<p>For example, you have defined all user related functions in a module:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">getUserName</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">userName</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">getUserAge</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">userAge</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">getUser</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">user</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">getApiKey</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">apiKey</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">userSignIn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed in</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">userSignOut</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">&quot;</span><span class=\"s2\">User signed out</span><span class=\"dl\">&quot;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"p\">{</span>\n <span class=\"nx\">getUserName</span><span class=\"p\">,</span>\n <span class=\"nx\">getUserAge</span><span class=\"p\">,</span>\n <span class=\"nx\">getUser</span><span class=\"p\">,</span>\n <span class=\"nx\">getApiKey</span><span class=\"p\">,</span>\n <span class=\"nx\">userSignIn</span><span class=\"p\">,</span>\n <span class=\"nx\">userSignOut</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>Then, the module that will use the function will import it:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">userFuncs</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./filePath.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The above code uses a special character <code>*</code> to import all the declarations in the module on top of the <code>userFuncs</code>. You can access the <code>getUserName</code> in the module:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">userFuncs</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./filePath.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// use getUserName function</span>\n<span class=\"nx\">userFuncs</span><span class=\"p\">.</span><span class=\"nx\">getUserName</span><span class=\"p\">();</span> \n</code></pre></div>\n<h3 id=\"renaming-declarations\">Renaming Declarations</h3>\n\n<p>To help developers avoid naming collisions, JavaScript modules use the <code>as</code> keyword to rename declarations.</p>\n\n<h3 id=\"renaming-exports\">Renaming Exports</h3>\n\n<p>Sometimes, you might have a declaration named login, and you're using another library that has a function named login; you can export your login function as myLogin:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">login</span><span class=\"p\">(</span><span class=\"nx\">email</span><span class=\"p\">,</span> <span class=\"nx\">password</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c1\">// check if your email and password are valid</span>\n <span class=\"k\">return</span> <span class=\"dl\">&quot;</span><span class=\"s2\">User logged in</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>  \n<span class=\"p\">}</span>\n<span class=\"c1\">// export as myLogin</span>\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">login</span> <span class=\"k\">as</span> <span class=\"nx\">myLogin</span> <span class=\"p\">};</span>\n</code></pre></div>\n<p>The code above declares a login function but exports it as myLogin. You can import the function as myLogin:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">myLogin</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">&quot;</span><span class=\"s2\">./filePath.js</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The above function imports the <code>myLogin</code> function. Next, I'll show you how to rename imports.</p>\n\n<h3 id=\"renaming-imports\">Renaming Imports</h3>\n\n<p>When working on a large project, you will import from multiple modules, making it easier to mix up declaration names. For example, you might be working with two different libraries, one for Twitter authentication and the other for Google authentication, and both have their own <code>login</code> function. To avoid naming collisions, in this case, you can import them with different names:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// import twitter login</span>\n<span class=\"k\">import</span> <span class=\"nx\">login</span> <span class=\"k\">as</span> <span class=\"nx\">twitterLogin</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">twitter-auth</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"c1\">// import google login</span>\n<span class=\"k\">import</span> <span class=\"nx\">login</span> <span class=\"k\">as</span> <span class=\"nx\">googleLogin</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">google-auth</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The above code imports the login function of two different libraries with specific names. This way, it's easier to avoid bugs and helps other developers understand your code.</p>\n\n<p>Next, I'll show you how to re-export a declaration.</p>\n\n<h3 id=\"re-exporting\">Re-exporting</h3>\n\n<p>Although it’s not commonly used, JavaScript modules allow you to re-export a module you previously imported:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// import the login function</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">login</span>  <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./filePath.js</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"c1\">// re-export the login function</span>\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">login</span> <span class=\"p\">};</span>\n</code></pre></div>\n<p>The above code imports the <code>login</code> function and then re-exports it.</p>\n\n<p>Now that you know how to use import and export, I'll show you how to structure applications using modules.</p>\n\n<h2 id=\"structuring-code-with-modules\">Structuring Code with Modules</h2>\n\n<p>In the previous sections, you learned how to use the import and export keywords to make code available in different and multiple modules. In this section, I'll explain the benefits of using modules and how they help in structuring your code and applications.</p>\n\n<h3 id=\"reusability\">Reusability</h3>\n\n<p>Whether you're a beginner, intermediate, or advanced developer, you've probably seen the term &quot;DRY&quot; or &quot;Don't Repeat Yourself&quot; on the internet.</p>\n\n<p>What this means is that most times, you can reuse functions multiple times in different parts of the code. As you have learned in the previous sections, modules make this easier because all you need to do is write the code, export it, and then use it in other modules that need the particular function.</p>\n\n<p>A few of the benefits of this approach are as follows:</p>\n\n<ul>\n<li>Saves time.</li>\n<li>Increases the maintainability and portability of the code.</li>\n<li>Increases the productivity of developers.</li>\n<li>Reduces redundancy.</li>\n</ul>\n\n<p>These are just a few benefits of reusability that using modules helps you achieve.</p>\n\n<h3 id=\"composability\">Composability</h3>\n\n<p>Composability allows you to break functionality into pieces and bring them together to form the whole function, as well as allow you to reuse the parts of the function in other parts of the application.</p>\n\n<p>An example of this is when creating an <code>addComment</code> function, you might want to make some checks inside the function:</p>\n\n<ul>\n<li>Is this user allowed to comment?</li>\n<li>Remove prohibited characters like <code>&lt;h1&gt;&lt;/h1&gt;</code> from input.</li>\n<li>Is this input length greater than the allowed characters?</li>\n<li>Add input to the database.</li>\n</ul>\n\n<p>Then, you can create these four different functions, for example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// check if user if allowed to comment</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">canComment</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"c1\">// make checks here</span>\n <span class=\"k\">return</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">signedIn</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input contains html tags</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">containsHTML</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"sr\">/&lt;</span><span class=\"se\">[</span><span class=\"sr\">a-z</span><span class=\"se\">][\\s\\S]</span><span class=\"sr\">*&gt;/i</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is not longer than maxLength</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isTooLong</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">maxLength</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"nx\">maxLength</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// add input to the database</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">addToDatabase</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">input</span><span class=\"p\">}</span><span class=\"s2\"> added to database`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The above functions can now be combined to create the <code>addComment</code> function:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addComment</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">comment</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">canComment</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">containsHTML</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">isTooLong</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">addToDatabase</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Each function that makes up the <code>addComment</code> function can also be used independently in other parts of the program.</p>\n\n<p>The benefits of composability include the following:</p>\n\n<ul>\n<li>It makes your code cleaner.</li>\n<li>It makes it easier to reuse existing code.</li>\n<li>It makes it easier to separate concerns.</li>\n<li>It makes code easy to understand.</li>\n</ul>\n\n<h3 id=\"isolation\">Isolation</h3>\n\n<p>Understanding the whole project can be difficult for new team members working on a large project.</p>\n\n<p>Because modules allow you to build the application by composing small, focused functions, each of these functions can be created, repaired, and thought of in isolation.</p>\n\n<p>Using the example in the previous section, to change the implementation to check whether the user can comment, you only need to modify the <code>canComment</code> function. The rest can remain unchanged.</p>\n\n<p>Isolation makes it easier to understand, modify, and test your code.</p>\n\n<h3 id=\"readability\">Readability</h3>\n\n<p>Using modules in your code makes it easier to read. This is especially necessary when working on large applications, and it's almost impossible to explain to each developer on the team what you're trying to do with a function.</p>\n\n<p>For example, without going into each file to see the implementation, a developer almost automatically knows what the following function does:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addComment</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">comment</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">canComment</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">containsHTML</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">isTooLong</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"nx\">addToDatabase</span><span class=\"p\">(</span><span class=\"nx\">comment</span><span class=\"p\">);</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The code above can be read as, &quot;If the user can comment, the comment does not contain HTML, and the comment is not too long, add the comment to the database.&quot; This makes it easier for new team members to start contributing to the project, which saves time.</p>\n\n<h3 id=\"organization\">Organization</h3>\n\n<p>When using modules, organization occurs almost automatically because each part of the code is isolated.</p>\n\n<p>For example, you might have all the functions used to check the type of declarations inside a <code>typeUtils.js</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// check if input is a string</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isString</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"k\">typeof</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"dl\">&quot;</span><span class=\"s2\">string</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is a number</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isNumber</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"k\">typeof</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"dl\">&quot;</span><span class=\"s2\">number</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is an array</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is an object</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isObject</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"k\">typeof</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"dl\">&quot;</span><span class=\"s2\">object</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is a function</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isFunction</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"k\">typeof</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"dl\">&quot;</span><span class=\"s2\">function</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is a boolean</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isBoolean</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"k\">typeof</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"dl\">&quot;</span><span class=\"s2\">boolean</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// check if input is null</span>\n<span class=\"k\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">isNull</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> \n</code></pre></div>\n<p>Without giving it much thought, the above code is organized, as they are all related and independent of one another.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I hope you enjoyed this tutorial! Hopefully, you better understand how using modules in JavaScript can improve your code. In this article, you learned what encapsulation is, what modules are and how they function, as well as explored how export and import keywords work and how to rename declarations. Finally, you learned how modules can help structure your code.</p>\n"
}