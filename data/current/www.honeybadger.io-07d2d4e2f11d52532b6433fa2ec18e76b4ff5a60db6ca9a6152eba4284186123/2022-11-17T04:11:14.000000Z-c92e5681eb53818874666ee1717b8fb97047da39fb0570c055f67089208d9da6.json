{
  "title":"Comparing Babel, Sucrase, and Similar Libraries",
  "date":"2022-11-17T04:11:14.000000Z",
  "author":"Salem Olorundare",
  "id":"https://www.honeybadger.io/blog/babel-vs-sucrase-vs-alternatives/",
  "link":"https://www.honeybadger.io/blog/babel-vs-sucrase-vs-alternatives/",
  "content":"<p>What if I told you that you could use every modern JavaScript feature in your code, even before your browser supports it? Over the past few years, JavaScript has been going through a lot of changes, including promises, JSX used in frameworks like React, arrow functions, spread operators, and typed-JavaScript like TypeScript and Flow.</p>\n\n<p>JavaScript runs in the browser and therefore needs browser support to interpret and execute these new features correctly. The integration of new JavaScript features in browsers takes time, and without browser support, JavaScript code cannot be executed.</p>\n\n<p>Coding tools like Babel are a solution to this problem. In this article, you will learn the following:</p>\n\n<ul>\n<li>What Babel is and why it is used.</li>\n<li>The processes of compiling and transpiling.</li>\n<li>What Sucrase is.</li>\n<li>Some alternatives to Babel and Sucrase.</li>\n</ul>\n\n<h2 id=\"what-is-babel-and-what-does-it-do\">What Is Babel, and What Does It Do?</h2>\n\n<p>Babel is a free and open-source JavaScript compiler. It turns your ES6+(modern JavaScript) code into ES5 browser-friendly code, so you can conveniently code your application with JavaScript's new features without waiting for browser support.</p>\n\n<p>As JavaScript changes with new features added and upgraded, developers adopt and use these new features to build their applications. Unfortunately, some browsers do not support these new changes. Older browsers are unable to run JavaScript's new features because they have not been updated or enhanced to handle such tasks.</p>\n\n<p>Take, for example, the use of TypeScript to build web applications. TypeScript is a programming language based on JavaScript. In order to run TypeScript code, it has to be compiled first into plain JavaScript. The reason for this is that TypeScript cannot be run directly because browsers do not fully support it. Babel enables JavaScript applications to run on both old and new browsers. These browsers do not necessarily need to be compatible with the just added JavaScript feature.</p>\n\n<p>Here is an example of how Babel transpiles a JavaScript code written with modern features into a code that an older browser can understand:</p>\n\n<ul>\n<li><p><strong>ES6 arrow function</strong></p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>This compiles to</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span>\n<span class=\"p\">};</span>\n</code></pre></div></li>\n<li><p><strong>Templating using backticks</strong></p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">&quot;</span><span class=\"s2\">John</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">food</span> <span class=\"o\">=</span> <span class=\"dl\">&quot;</span><span class=\"s2\">Vegetables</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"s2\">`Hello, I am </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">, and I love </span><span class=\"p\">${</span><span class=\"nx\">food</span><span class=\"p\">}</span><span class=\"s2\">?`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This compiles to</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">&quot;</span><span class=\"s2\">John</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">food</span> <span class=\"o\">=</span> <span class=\"dl\">&quot;</span><span class=\"s2\">Vegetables</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"dl\">&quot;</span><span class=\"s2\">Hello, I am </span><span class=\"dl\">&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">name</span> <span class=\"o\">+</span> <span class=\"dl\">&quot;</span><span class=\"s2\">, and I love </span><span class=\"dl\">&quot;</span> <span class=\"o\">+</span> <span class=\"nx\">food</span><span class=\"p\">;</span>\n</code></pre></div></li>\n</ul>\n\n<p>The evolution of browsers to support JavaScript’s new features takes time.</p>\n\n<p>Babel is a JavaScript transpiler that converts advanced JavaScript code into a more compatible form of JavaScript that older browsers can understand. It tries to understand modern JavaScript code and rewrite it into an older syntax that the browser can understand.</p>\n\n<h2 id=\"what-is-the-difference-between-compiling-transpiling-and-polyfilling\">What Is the Difference Between Compiling, Transpiling and Polyfilling?</h2>\n\n<p>Computers or any digital device only understand binary code. However, we code in languages that look like English, which computers obviously do not understand. How do computers understand our codes as human developers and perform what is asked of them? This is where <strong>compiling</strong> and <strong>transpiling</strong> come in.</p>\n\n<p><strong>Compiling</strong> - A compiler is a software that interprets a higher level code into machine code or code that a machine can understand. During the compilation process, code written in one programming language is translated into another programming language.</p>\n\n<p><strong>Transpiling</strong> is the process of translating a source code from one language into a different version of the same language. A transpiler is a type of compiler; however, while a compiler takes the source code and turns it into a low-level code, a transpiler takes the source code and transforms it into a code of the same high level.</p>\n\n<p>A good example is the use of TypeScript to build applications. Before TypeScript can run on a browser, it needs to first be transpiled to plain JavaScript, which allows browsers to interpret the code efficiently.</p>\n\n<p>Babel transpiles code written in a high-level language into high-level code that can be executed in a browser or other software.</p>\n\n<p><strong>Polyfilling</strong> allows you to add functionality that does not exist natively. It is a way to replicate modern JavaScript code functionality on an older browser that does not understand this feature or functionality.</p>\n\n<p>Sometimes, new language features include additional functions or built-in methods that have never existed in the language. Browsers cannot interpret this function; therefore, it needs a converter(called a polyfiller) to change or re-write this function into a function the browser can interpret.</p>\n\n<p>Babel is one of the most prominent polyfillers available that helps browsers that do not know about this new feature to find a similar function that performs the same task as the new function.</p>\n\n<h3 id=\"babel-setup-and-usage\">Babel Setup and Usage</h3>\n\n<p>Babel is an easy-to-use tool for developers. Follow the steps below to configure babel on your machine.</p>\n\n<ol>\n<li><p>Create a mini project and initialize it with npm:</p>\n\n<p><code>npm init -y</code></p></li>\n<li><p>Installation - run this command to add babel to your <code>package.json</code> file:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code> npm install --save-dev @babel/core @babel/cli @babel/preset-env\n npm install --save @babel/polyfill\n</code></pre></div></li>\n<li><p>Add a <code>babel.config.json</code> file to your project root directory with the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">&quot;presets&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">[</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;@babel/preset-env&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">&quot;targets&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nl\">&quot;edge&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;17&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">&quot;firefox&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;60&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">&quot;chrome&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;67&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">&quot;safari&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;11.1&quot;</span><span class=\"w\">\n                </span><span class=\"p\">},</span><span class=\"w\">\n                </span><span class=\"nl\">&quot;useBuiltIns&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;usage&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"nl\">&quot;corejs&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;3.6.5&quot;</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></li>\n<li><p>Write your JavaScript code and add it to a folder in your root directory called <code>src</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span><span class=\"nx\">defaults</span><span class=\"p\">,</span>\n    <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">&quot;</span><span class=\"s2\">#f5da55</span><span class=\"dl\">&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>Let’s compile this JavaScript code and see the output.</p></li>\n<li><p>Run the following command in your terminal to compile your JavaScript code:</p>\n\n<p><code>npx babel src --out-dir js</code></p>\n\n<p>This command compiles all JavaScript code written in the  <code>src</code>  folder and adds the compiled JavaScript code to the  <code>js</code>  folder.</p>\n\n<p><strong>Output:</strong></p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">&quot;</span><span class=\"s2\">use strict</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">ownKeys</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">enumerableOnly</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">var</span> <span class=\"nx\">keys</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">);</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertySymbols</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">var</span> <span class=\"nx\">symbols</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertySymbols</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">);</span> <span class=\"nx\">enumerableOnly</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"nx\">symbols</span> <span class=\"o\">=</span> <span class=\"nx\">symbols</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">sym</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertyDescriptor</span><span class=\"p\">(</span><span class=\"nx\">object</span><span class=\"p\">,</span> <span class=\"nx\">sym</span><span class=\"p\">).</span><span class=\"nx\">enumerable</span><span class=\"p\">;</span> <span class=\"p\">})),</span> <span class=\"nx\">keys</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">keys</span><span class=\"p\">,</span> <span class=\"nx\">symbols</span><span class=\"p\">);</span> <span class=\"p\">}</span> <span class=\"k\">return</span> <span class=\"nx\">keys</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">_objectSpread</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"kd\">var</span> <span class=\"nx\">source</span> <span class=\"o\">=</span> <span class=\"kc\">null</span> <span class=\"o\">!=</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"p\">?</span> <span class=\"nx\">arguments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"p\">{};</span> <span class=\"nx\">i</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"p\">?</span> <span class=\"nx\">ownKeys</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">),</span> <span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">_defineProperty</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span> <span class=\"p\">})</span> <span class=\"p\">:</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertyDescriptors</span> <span class=\"p\">?</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperties</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertyDescriptors</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">))</span> <span class=\"p\">:</span> <span class=\"nx\">ownKeys</span><span class=\"p\">(</span><span class=\"nb\">Object</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">)).</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getOwnPropertyDescriptor</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">));</span> <span class=\"p\">});</span> <span class=\"p\">}</span> <span class=\"k\">return</span> <span class=\"nx\">target</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">_defineProperty</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"na\">enumerable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">configurable</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"na\">writable</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"k\">return</span> <span class=\"nx\">obj</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">styles</span> <span class=\"o\">=</span> <span class=\"nx\">_objectSpread</span><span class=\"p\">(</span><span class=\"nx\">_objectSpread</span><span class=\"p\">({},</span> <span class=\"nx\">defaults</span><span class=\"p\">),</span> <span class=\"p\">{},</span> <span class=\"p\">{</span>\n    <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"dl\">&quot;</span><span class=\"s2\">#f5da55</span><span class=\"dl\">&quot;</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>The above result is the output of our compiled JavaScript code.</p></li>\n</ol>\n\n<h3 id=\"the-pros-and-cons-of-using-babel\">The Pros and Cons of Using Babel</h3>\n\n<p>Pros:</p>\n\n<ul>\n<li>Babel’s basic setup is relatively straightforward.</li>\n<li>There is a considerable amount of community support with constant updates and improvements.</li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>It has a slow compile time.</li>\n<li>It requires a lot of dependencies, excluding its dev-dependencies of over 269 packages installed.</li>\n</ul>\n\n<h2 id=\"what-is-sucrase-and-how-is-it-different-from-babel\">What is Sucrase and How Is It Different from Babel?</h2>\n\n<p>Sucrase is a super-fast potential alternative to Babel that allows faster development builds. It claims to be about 20x faster than Babel.</p>\n\n<p>Unlike Babel, Sucrase does not compile large range of JS features down to ES5 or lower to be able to work in older browsers. Instead, it assumes that you are developing with a recent browser and concentrates on compiling non-standard language extensions: JSX, TypeScript, and Flow. The small scope of Sucrase makes it much faster than Babel.</p>\n\n<p>Babel compiles all your code down to what your browser can run, while Sucrase focuses on a small portion of what Babel does.</p>\n\n<p>Sucrase leverages the compiler architecture to make it more performant (in terms of development builds), but less extensible and maintainable. Therefore, it is not an advisable option for a production environment. It should only be considered during development.</p>\n\n<p>Sucrase is built upon Babel, as its parser(sucrase) is forked from the Babel parser. This makes Sucrase very dependent on Babel, and it cannot exist without Babel.</p>\n\n<h3 id=\"sucrase-setup-and-usage\">Sucrase Setup and Usage</h3>\n\n<p>Using Sucrase to transpile a TypeScript application is simple. Follow the steps below to compile your first TypeScript application with Sucrase.</p>\n\n<ol>\n<li><p>Install:</p>\n\n<p><code>yarn add --dev sucrase</code>  Or <code>npm install --save-dev sucrase</code></p></li>\n<li><p>Create a <code>src</code>  file in your root project directory and add a TypeScript file with the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">addNumbers</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">sum</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"nx\">addNumbers</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Sum of the two numbers is: </span><span class=\"dl\">'</span> <span class=\"o\">+</span><span class=\"nx\">sum</span><span class=\"p\">);</span>\n</code></pre></div></li>\n<li><p>Compile your TypeScript code with Sucrase:</p>\n\n<p><code>sucrase ./src -d ./js --transforms typescript,imports</code></p>\n\n<p>The command transpiles your TypeScript code (.ts) to JavaScript code (.js) in a js folder.</p>\n\n<p><strong>Output:</strong></p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">&quot;</span><span class=\"s2\">use strict</span><span class=\"dl\">&quot;</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">addNumbers</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"nx\">addNumbers</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Sum of the two numbers is: </span><span class=\"dl\">'</span> <span class=\"o\">+</span><span class=\"nx\">sum</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The above is your transpiled TypeScript to JavaScript code.</p></li>\n</ol>\n\n<h3 id=\"the-pros-and-cons-of-using-sucrase\">The Pros and Cons of Using Sucrase</h3>\n\n<p>Pros:</p>\n\n<ul>\n<li>Faster development builds.</li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>Sucrase does not check code for errors and should always be used with a linter or type-checker.</li>\n<li>Sucrase does not leverage plug-ins. Transforms need to be written to cooperate with each other; each additional transform takes significant work.</li>\n<li>The tool is not good for prototyping language extensions and upcoming language features. The faster architecture of Sucrase makes new transforms more fragile and more difficult to write.</li>\n</ul>\n\n<p>When working with a large codebase, it is important that you use a fast JavaScript compiler to build your application quickly.</p>\n\n<p>Although Sucrase is a very productive tool for fast application development and a good compiler, it does not have the full scope and versatility of Babel. Here are some features Sucrase does not cover:</p>\n\n<ul>\n<li>Sucrase is not a type-checker. It runs code without checking that it’s correct.</li>\n<li>Sucrase does not transpile code for old browsers, such as IE, as it assumes that developers are using recent browsers for development.</li>\n<li>Sucrase does not check your code for errors. If given a valid code, Sucrase will produce a valid code and vice-versa. A suitable type-checker should be used with Sucrase during development to check for errors.</li>\n</ul>\n\n<h2 id=\"alternatives-to-sucrase-and-babel\">Alternatives to Sucrase and Babel</h2>\n\n<p>Aside from Babel and Sucrase being used as a compiler to transpile and polyfill JavaScript code, other compiler options can also be considered when building applications. Some alternatives are as follows:</p>\n\n<ul>\n<li><a href=\"https://github.com/amilajack/eslint-plugin-compat\">Eslint-plugin-compat</a></li>\n<li><a href=\"https://swc.rs/docs/getting-started\">Speedy Web Compiler(SWC)</a></li>\n</ul>\n\n<h2 id=\"other-alternatives\">Other alternatives</h2>\n\n<ul>\n<li><a href=\"https://developers.google.com/closure/compiler/docs/overview\">Closure compiler</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">TypeScript compiler(tsc)</a></li>\n</ul>\n\n<h2 id=\"eslint-plugin-compat\">Eslint-plugin-compat</h2>\n\n<p>This plugin eliminates the transpiling process when building code and lets your code editor alert you when features exist in your application that are too modern for your customer’s browser.</p>\n\n<p>If there's a modern feature you can't code without, you can polyfill it manually. If not, you can simply use the older syntax when needed.</p>\n\n<p>This plugin eliminates the need for relying on a transpiler and gives you control over your production code. It can be easily integrated with your Visual Studio code.</p>\n\n<h3 id=\"setup\">Setup</h3>\n\n<ol>\n<li><p>Install:</p>\n\n<p><code>npm install --save-dev eslint eslint-plugin-compat</code></p></li>\n<li><p>Create the following <code>.eslintrc.json</code> file and add these settings:</p>\n<div class=\"highlight\"><pre class=\"highlight diff\"><code><span class=\"err\">{</span>\n+   &quot;extends&quot;: [&quot;plugin:compat/recommended&quot;],\n<span class=\"gi\">+   &quot;env&quot;: {\n+       &quot;browser&quot;: true\n+   },\n</span>    // ...\n<span class=\"err\">}</span>\n</code></pre></div></li>\n<li><p>Add this code to your <code>package.json</code> file to configure your browser target:</p>\n<div class=\"highlight\"><pre class=\"highlight diff\"><code><span class=\"err\">{</span>\n    // ...\n<span class=\"gi\">+   &quot;browserslist&quot;: [\n+       &quot;defaults&quot;\n+   ]\n</span><span class=\"err\">}</span>\n</code></pre></div></li>\n</ol>\n\n<p>Note: Make sure to have the <a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">VS Code ESLint extension</a> installed. It is a VS code editor plugin.</p>\n\n<h3 id=\"speedy-web-compiler-swc\">Speedy Web Compiler (SWC)</h3>\n\n<p>SWC is a super-fast JavaScript compiler written in Rust. It is a developer tool used for the compilation, minification, and bundling of JavaScript code for production.</p>\n\n<p>SWC is a competitor of Babel, as it runs 20x faster than Babel. It can also be used to attain a faster development build.</p>\n\n<h3 id=\"swc-setup-and-usage\">SWC Setup and Usage</h3>\n\n<p>SWC can be installed as a package from Node Package Manager(NPM). Below are procedures to get the SWC compiler on your machine and its usage.</p>\n\n<ol>\n<li><p>Create a directory and navigate to the directory where you would like to install SWC.</p>\n\n<p><code>mkdir swc_project</code></p></li>\n<li><p>Initialize package.json:</p>\n\n<p><code>npm init</code></p></li>\n<li><p>Install swc core and the swc cli tool:</p>\n\n<p><code>npm install --save-dev @swc/core @swc/cli</code></p></li>\n<li><p>Run the following command on your terminal to transpile your file:</p>\n\n<p><code>npx swc ./filename.js</code></p></li>\n</ol>\n\n<h3 id=\"the-pros-and-cons-of-using-swc\">The Pros and Cons of Using SWC</h3>\n\n<p>Pros</p>\n\n<ul>\n<li>20x faster than Babel.</li>\n<li>Fewer dependencies are required.</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Does not support all of Babel’s features.</li>\n<li>Has a small community and few contributors.</li>\n</ul>\n\n<h2 id=\"closure-compiler\">Closure Compiler</h2>\n\n<p>Closure compiler is a tool for making JavaScript applications run faster. Closure compiles JavaScript application code by reducing and re-writing codes more effectively. It also checks for type and syntax, as well as provides warnings regarding code errors.</p>\n\n<p>Closure is very efficient in code compilation. It reduces the size of your JavaScript files. The closure compiler helps developers  write codes with fewer errors by checking for errors and warning developers of illegal codes in the codebase. This makes code more maintainable.</p>\n\n<h2 id=\"typescript-compiler-tsc\">TypeScript Compiler(tsc)</h2>\n\n<p>This is the default compiler for TypeScript. It gets installed globally when TypeScript is installed on your machine.\nTypeScript Compiler can be used in front-end projects with tools like React. It is a simple tool used for TypeScript-based projects.</p>\n\n<p>Run the <code>tsc filename.ts</code> to transpile your TypeScript application to JavaScript.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Babel is one of the most popular and most commonly used JavaScript compilers in the software development industry.</p>\n\n<p>Aside from the slow performance of Babel during development builds, Babel is a prominent production tool to consider when building applications for production.  Faster builds are not recommended for production environments.</p>\n\n<p>There are many options to choose from to transpile your code. Before building software applications, good analytical research on the browsers your potential customers use must be done to pick the right tool for production.</p>\n"
}