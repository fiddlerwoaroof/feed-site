{
  "title":"How to Build Your Own Rails Generator",
  "date":"2022-11-17T04:11:14.000000Z",
  "author":"William Kennedy",
  "id":"https://www.honeybadger.io/blog/build-a-rails-generator/",
  "link":"https://www.honeybadger.io/blog/build-a-rails-generator/",
  "content":"<p>Rails generators are one of the most prominent features of Rails. We can generate feature scaffolds, migrate databases, create mailers, and even create new background jobs. There is nothing more satisfying than running a generator with everything set up and ready to go.  </p>\n\n<p>Scaffolds also serve an essential function in a lot of successful gems. Many popular gems ship with an install command that sets up everything the developer needs to succeed with that library.</p>\n\n<p>If you’re a long-time Rails user, you probably take generators for granted until you venture outside of Rails.  </p>\n\n<p>Generators are easy to view as &quot;magic&quot;. How they work can be pretty obscure to a newcomer. This article will dig into exactly how generators work under the hood, and then we'll build one ourselves.  </p>\n\n<h2 id=\"what-is-a-generator\">What is a Generator</h2>\n\n<p>A generator consists of the following:</p>\n\n<ul>\n<li>A class that inherits from <code>Rails::Generators::NamedBase</code></li>\n<li>A template(optional)</li>\n<li>A repeatable pattern</li>\n</ul>\n\n<h2 id=\"kinds-of-generators\">Kinds of Generators</h2>\n\n<p>Generators come in all shapes and sizes, but generally, they come in two variations—generators that take arguments and do something with them and installers that set up the plumbing.</p>\n\n<p>These kinds of generators exist in the <a href=\"https://github.com/excid3/noticed\">Noticed gem</a>and within Rails itself via the various <code>rails scaffold commands</code> and even the <code>rails new</code> command, which is a Rails generator itself.  </p>\n\n<p>In the Noticed gem, we can do the following:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">generate</span> <span class=\"n\">noticed</span><span class=\"ss\">:model</span>\n</code></pre></div>\n<p>This generates a new model called notifications, a migration, and some tests.</p>\n\n<p>It then proceeds to give you some instructions on what to do next.  </p>\n\n<p>Now let’s dive into the code, which you can read <a href=\"https://github.com/excid3/noticed/blob/master/lib/generators/noticed/model_generator.rb\">here</a>.</p>\n\n<p>The critical thing here is that we inherit from <code>Rails::Generators::NamedBase</code>; note that we have a <code>source_root</code> method that points to the templates folder.  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">module</span> <span class=\"nn\">Noticed</span>\n <span class=\"k\">module</span> <span class=\"nn\">Generators</span>\n  <span class=\"k\">class</span> <span class=\"nc\">ModelGenerator</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">NamedBase</span>\n   <span class=\"kp\">include</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">ResourceHelpers</span>\n\n   <span class=\"n\">source_root</span> <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">expand_path</span><span class=\"p\">(</span><span class=\"s2\">&quot;../templates&quot;</span><span class=\"p\">,</span> <span class=\"kp\">__FILE__</span><span class=\"p\">)</span>\n\n   <span class=\"n\">desc</span> <span class=\"s2\">&quot;Generates a Notification model for storing notifications.&quot;</span>\n\n   <span class=\"n\">argument</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">type: :string</span><span class=\"p\">,</span> <span class=\"ss\">default: </span><span class=\"s2\">&quot;Notification&quot;</span><span class=\"p\">,</span> <span class=\"ss\">banner: </span><span class=\"s2\">&quot;Notification&quot;</span>\n   <span class=\"n\">argument</span> <span class=\"ss\">:attributes</span><span class=\"p\">,</span> <span class=\"ss\">type: :array</span><span class=\"p\">,</span> <span class=\"ss\">default: </span><span class=\"p\">[],</span> <span class=\"ss\">banner: </span><span class=\"s2\">&quot;field:type field:type&quot;</span>\n <span class=\"o\">...</span>\n</code></pre></div>\n<p>This class governs all behavior that goes into the noticed generator.  </p>\n\n<p>Note that we also have the <code>argument</code> method, which defaults to string. We can also pass arguments into this generator. For example, we might want the notifications model to be called something else instead of notification.  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">generate</span> <span class=\"n\">noticed</span><span class=\"ss\">:model</span> <span class=\"no\">Notice</span> \n</code></pre></div>\n<p>Noticed has a generator targeted for taking an argument in the form of a Ruby Class.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">generate</span> <span class=\"n\">noticed</span><span class=\"ss\">:notification</span> <span class=\"no\">CommentNotification</span> \n</code></pre></div>\n<p>This can be <a href=\"https://github.com/excid3/noticed/blob/master/lib/generators/noticed/notification_generator.rb\">seen here</a> and is remarkably simple. Like the previous generator, it inherits from <code>Rails::Generators::NamedBase</code> and has the <code>source_root</code> method, which points to the templates folder. However, this example uses a template that can be seen <a href=\"https://github.com/excid3/noticed/blob/master/lib/generators/noticed/templates/notification.rb.tt\">here</a>.  </p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code># To deliver this notification:\n#\n# &lt;%= class_name %&gt;.with(post: @post).deliver_later(current_user)\n# &lt;%= class_name %&gt;.with(post: @post).deliver(current_user)\n\nclass &lt;%= class_name %&gt; &lt; Noticed::Base\n # Add your delivery methods\n #\n # deliver_by :database\n # deliver_by :email, mailer: &quot;UserMailer&quot;\n # deliver_by :slack\n # deliver_by :custom, class: &quot;MyDeliveryMethod&quot;\n\n # Add required params\n #\n # param :post\n\n # Define helper methods to make rendering easier.\n #\n # def message\n #  t(&quot;.message&quot;)\n # end\n #\n # def url\n #  post_path(params[:post])\n # end\nend\n</code></pre></div>\n<h2 id=\"invocation-order\">Invocation Order</h2>\n\n<p>All public methods in the generator will be called one after the <a href=\"https://github.com/rails/thor/wiki/Invocations\">other</a>. Private methods will not be called but are available in your public methods like regular Ruby classes.  </p>\n\n<h2 id=\"building-a-generator-getting-started\">Building A Generator - Getting Started</h2>\n\n<p>The best way to understand generators is, of course, to build one ourselves. This generator will be simple initially but easy to build upon in the future. We will keep our generator simple and create new StimulusJS controllers.</p>\n\n<p>The first thing we do is build a new Rails app to get started.  </p>\n\n<p>Assuming you’re using Rails 7, run the following command:  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">new</span> <span class=\"n\">rails_generator</span>\n</code></pre></div>\n<p>Now we change into that directory:</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nb\">cd </span>rails_generator\n</code></pre></div>\n<p>Once that's ready, we will use a Rails generator to create our first generator.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">g</span> <span class=\"n\">generator</span> <span class=\"n\">stimulus</span>\n</code></pre></div>\n<p>Then we will do the following:  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code>   <span class=\"n\">create</span> <span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus</span>\n   <span class=\"n\">create</span> <span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus</span><span class=\"o\">/</span><span class=\"n\">stimulus_generator</span><span class=\"p\">.</span><span class=\"nf\">rb</span>\n   <span class=\"n\">create</span> <span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus</span><span class=\"o\">/</span><span class=\"no\">USAGE</span>\n   <span class=\"n\">create</span> <span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus</span><span class=\"o\">/</span><span class=\"n\">templates</span>\n   <span class=\"n\">invoke</span> <span class=\"n\">test_unit</span>\n   <span class=\"n\">create</span>  <span class=\"nb\">test</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus_generator_test</span><span class=\"p\">.</span><span class=\"nf\">rb</span>\n</code></pre></div>\n<p>The first file I like to edit is the <code>lib/generators/stimulus/USAGE</code> file. This allows us to do some documentation upfront and provide helpful hints to fellow developers who might want to use your generator.  </p>\n\n<p>So, let’s change that by updating the <code>lib/generators/stimulus/USAGE</code>file:</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>Description:\n  Generates a New Stimulus Controller\n\nExample:\n  bin/rails generate stimulus Thing\n\n  This will create:\n    app/javascripts/controllers/thing_controller.js\n\n</code></pre></div>\n<p>In our terminal, we can run the following, and we’ll see the output.  </p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>rails g stimulus <span class=\"nt\">--help</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight shell\"><code>Usage:\n rails generate stimulus NAME <span class=\"o\">[</span>options]\n\nOptions:\n <span class=\"o\">[</span><span class=\"nt\">--skip-namespace</span><span class=\"o\">]</span>, <span class=\"o\">[</span><span class=\"nt\">--no-skip-namespace</span><span class=\"o\">]</span>       <span class=\"c\"># Skip namespace (affects only isolated engines)</span>\n <span class=\"o\">[</span><span class=\"nt\">--skip-collision-check</span><span class=\"o\">]</span>, <span class=\"o\">[</span><span class=\"nt\">--no-skip-collision-check</span><span class=\"o\">]</span> <span class=\"c\"># Skip collision check</span>\n\nRuntime options:\n <span class=\"nt\">-f</span>, <span class=\"o\">[</span><span class=\"nt\">--force</span><span class=\"o\">]</span>          <span class=\"c\"># Overwrite files that already exist</span>\n <span class=\"nt\">-p</span>, <span class=\"o\">[</span><span class=\"nt\">--pretend</span><span class=\"o\">]</span>, <span class=\"o\">[</span><span class=\"nt\">--no-pretend</span><span class=\"o\">]</span> <span class=\"c\"># Run but do not make any changes</span>\n <span class=\"nt\">-q</span>, <span class=\"o\">[</span><span class=\"nt\">--quiet</span><span class=\"o\">]</span>, <span class=\"o\">[</span><span class=\"nt\">--no-quiet</span><span class=\"o\">]</span>   <span class=\"c\"># Suppress status output</span>\n <span class=\"nt\">-s</span>, <span class=\"o\">[</span><span class=\"nt\">--skip</span><span class=\"o\">]</span>, <span class=\"o\">[</span><span class=\"nt\">--no-skip</span><span class=\"o\">]</span>    <span class=\"c\"># Skip files that already exist</span>\n\nDescription:\n  Generates a New Stimulus Controller\n\nExample:\n  bin/rails generate stimulus Thing\n\n  This will create:\n    app/javascripts/controllers/thing_controller.js\n</code></pre></div>\n<p>This is a good start, but nothing happens if we run the generator. Let’s fix this. Let’s start by adding a test to our <code>test/lib/generators/stimulus_generator_test.rb</code></p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># test/lib/generators/stimulus_generator_test.rb</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;test_helper&quot;</span>\n<span class=\"nb\">require</span> <span class=\"s2\">&quot;generators/stimulus/stimulus_generator&quot;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">StimulusGeneratorTest</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">TestCase</span>\n <span class=\"n\">tests</span> <span class=\"no\">StimulusGenerator</span>\n <span class=\"n\">destination</span> <span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">root</span><span class=\"p\">.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;tmp/generators&quot;</span><span class=\"p\">)</span>\n <span class=\"n\">setup</span> <span class=\"ss\">:prepare_destination</span>\n\n <span class=\"nb\">test</span> <span class=\"s1\">'should add thing controller file'</span> <span class=\"k\">do</span>\n  <span class=\"n\">run_generator</span> <span class=\"p\">[</span><span class=\"s1\">'Thing'</span><span class=\"p\">]</span>\n\n  <span class=\"n\">assert_file</span> <span class=\"s1\">'app/javascript/controllers/thing_controller.js'</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Now we have created a failing test. We can run it.  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"nb\">test</span> <span class=\"nb\">test</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus_generator_test</span><span class=\"p\">.</span><span class=\"nf\">rb</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># Running:</span>\n\n<span class=\"no\">F</span>\n\n<span class=\"no\">Failure</span><span class=\"p\">:</span>\n<span class=\"no\">StimulusGeneratorTest</span><span class=\"c1\">#test_should_add_thing_controller_file [/Users/williamkennedy/projects/honeybadger/rails_generators/test/lib/generators/stimulus_generator_test.rb:12]:</span>\n<span class=\"no\">Expected</span> <span class=\"n\">file</span> <span class=\"s2\">&quot;app/javascript/controllers/thing_controller.js&quot;</span> <span class=\"n\">to</span> <span class=\"n\">exist</span><span class=\"p\">,</span> <span class=\"n\">but</span> <span class=\"n\">does</span> <span class=\"n\">not</span>\n\n\n<span class=\"n\">rails</span> <span class=\"nb\">test</span> <span class=\"nb\">test</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus_generator_test</span><span class=\"p\">.</span><span class=\"nf\">rb</span><span class=\"p\">:</span><span class=\"mi\">9</span>\n\n\n\n<span class=\"no\">Finished</span> <span class=\"k\">in</span> <span class=\"mf\">0.007052</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mf\">141.8037</span> <span class=\"n\">runs</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mf\">141.8037</span> <span class=\"n\">assertions</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"o\">.</span>\n<span class=\"mi\">1</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"n\">assertions</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"n\">failures</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"n\">skips</span>\n</code></pre></div>\n<p>Let’s fix this.  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># lib/generators/stimulus/stimulus_generator.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">StimulusGenerator</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">NamedBase</span>\n <span class=\"n\">source_root</span> <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">expand_path</span><span class=\"p\">(</span><span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">,</span> <span class=\"n\">__dir__</span><span class=\"p\">)</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">create_stimulus_controller</span>\n  <span class=\"n\">create_file</span> <span class=\"s2\">&quot;app/javascript/controllers/</span><span class=\"si\">#{</span><span class=\"n\">file_path</span><span class=\"si\">}</span><span class=\"s2\">_controller.js&quot;</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n</code></pre></div>\n<p>Now when we run our tests, it should pass.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"nb\">test</span> <span class=\"nb\">test</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">generators</span><span class=\"o\">/</span><span class=\"n\">stimulus_generator_test</span><span class=\"p\">.</span><span class=\"nf\">rb</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"no\">Running</span> <span class=\"mi\">1</span> <span class=\"n\">tests</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"n\">single</span> <span class=\"n\">process</span> <span class=\"p\">(</span><span class=\"n\">parallelization</span> <span class=\"n\">threshold</span> <span class=\"n\">is</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"no\">Run</span> <span class=\"ss\">options: </span><span class=\"o\">--</span><span class=\"n\">seed</span> <span class=\"mi\">41043</span>\n\n<span class=\"c1\"># Running:</span>\n\n<span class=\"o\">.</span>\n\n<span class=\"no\">Finished</span> <span class=\"k\">in</span> <span class=\"mf\">0.007780</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mf\">128.5347</span> <span class=\"n\">runs</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mf\">128.5347</span> <span class=\"n\">assertions</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"o\">.</span>\n<span class=\"mi\">1</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"n\">assertions</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"n\">failures</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"n\">skips</span>\n</code></pre></div>\n<h2 id=\"building-a-generator-generating-code\">Building A Generator - Generating Code</h2>\n\n<p>So far, what we’ve built is pretty cool but not practical. It only creates an empty file. However, we’ve got all the building blocks ready to take our generator further, so let’s start with a non-empty file.</p>\n\n<p>Most stimulus controllers have the following code. The connect and initialize methods are optional.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Controller</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">&quot;</span><span class=\"s2\">@hotwired/stimulus</span><span class=\"dl\">&quot;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"kd\">extends</span> <span class=\"nx\">Controller</span> <span class=\"p\">{</span>\n\n <span class=\"nx\">initialize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"p\">}</span>\n\n <span class=\"nx\">connect</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Our generator does not add any of this code, and it would be helpful if it did. Let’s modify our generator to do this.  </p>\n\n<p>In our tests, let’s add the following:  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># test/lib/generators/stimulus_generator_test.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">StimulusGeneratorTest</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">TestCase</span>\n <span class=\"o\">...</span>\n <span class=\"nb\">test</span> <span class=\"s1\">'should add stimulusjs boilerplate'</span> <span class=\"k\">do</span>\n  <span class=\"n\">run_generator</span> <span class=\"p\">[</span><span class=\"s1\">'Thing'</span><span class=\"p\">]</span>\n  <span class=\"n\">assert_file</span> <span class=\"s2\">&quot;app/javascript/controllers/thing_controller.js&quot;</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">content</span><span class=\"o\">|</span>\n   <span class=\"n\">assert_match</span> <span class=\"sr\">/Controller/</span><span class=\"p\">,</span> <span class=\"n\">content</span>\n   <span class=\"n\">assert_match</span> <span class=\"sr\">/connect()/</span><span class=\"p\">,</span> <span class=\"n\">content</span>\n   <span class=\"n\">assert_match</span> <span class=\"sr\">/@hotwired/</span><span class=\"p\">,</span> <span class=\"n\">content</span>\n  <span class=\"k\">end</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>In true test-driven-development fashion, we run this test, and it fails.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>rails <span class=\"nb\">test test</span>/lib/generators/stimulus_generator_test.rb\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight shell\"><code>Run options: <span class=\"nt\">--seed</span> 15750\n\n<span class=\"c\"># Running:</span>\n\nF\n\nFailure:\nStimulusGeneratorTest#test_should_add_stimulusjs_boilerplate <span class=\"o\">[</span>/Users/williamkennedy/projects/honeybadger/rails_generators/test/lib/generators/stimulus_generator_test.rb:17]:\nExpected /Controller/ to match <span class=\"s2\">&quot;&quot;</span><span class=\"nb\">.</span>\n\n\nrails <span class=\"nb\">test test</span>/lib/generators/stimulus_generator_test.rb:15\n\n<span class=\"nb\">.</span>\n\nFinished <span class=\"k\">in </span>0.009860s, 202.8398 runs/s, 405.6795 assertions/s.\n2 runs, 4 assertions, 1 failures, 0 errors, 0 skips\n</code></pre></div>\n<p>We can take advantage of our templates folder to make this test pass. Let’s create a new file that will be a template for our stimulus controller.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code><span class=\"nb\">touch </span>lib/generators/stimulus/templates/stimulus_controller.js.erb\n</code></pre></div>\n<p>In that file, add our stimulus controller boilerplate.  </p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// lib/generators/stimulus/templates stimulus_controller.js.erb</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Controller</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">&quot;</span><span class=\"s2\">@hotwired/stimulus</span><span class=\"dl\">&quot;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"kd\">extends</span> <span class=\"nx\">Controller</span> <span class=\"p\">{</span>\n\n <span class=\"nx\">initialize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"p\">}</span>\n\n <span class=\"nx\">connect</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Let’s also update our generator class.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># lib/generators/stimulus/stimulus_generator.rb</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">StimulusGenerator</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">NamedBase</span>\n <span class=\"n\">source_root</span> <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">expand_path</span><span class=\"p\">(</span><span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">,</span> <span class=\"n\">__dir__</span><span class=\"p\">)</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">create_stimulus_controller</span>\n  <span class=\"n\">template</span> <span class=\"s1\">'stimulus_controller.js.erb'</span><span class=\"p\">,</span> <span class=\"s2\">&quot;app/javascript/controllers/</span><span class=\"si\">#{</span><span class=\"n\">file_path</span><span class=\"si\">}</span><span class=\"s2\">_controller.js&quot;</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Now, let’s rerun our test.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>rails <span class=\"nb\">test test</span>/lib/generators/stimulus_generator_test.rb\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight shell\"><code>Running 2 tests <span class=\"k\">in </span>a single process <span class=\"o\">(</span>parallelization threshold is 50<span class=\"o\">)</span>\nRun options: <span class=\"nt\">--seed</span> 61204\n\n<span class=\"c\"># Running:</span>\n\n..\n\nFinished <span class=\"k\">in </span>0.010278s, 194.5904 runs/s, 778.3615 assertions/s.\n2 runs, 8 assertions, 0 failures, 0 errors, 0 skips\n</code></pre></div>\n<p>We have saved ourselves quite a lot of time. The next time we need a new stimulus controller, we run our generator, and we’re ready to go. However, now that we have gone beyond the basics of creating a file, could we go further. Could we make our generator even better?</p>\n\n<h2 id=\"build-a-generator-handling-command-line-arguments\">Build A Generator - Handling Command Line Arguments</h2>\n\n<p>When creating a new Rails model, we can pass in options.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>rails g model Item name:string description:text\n</code></pre></div>\n<p>This will create an ”items” table with name and description columns. StimulusJS controllers have several options that allow us to expand the usefulness of our controller.  </p>\n\n<ul>\n<li><a href=\"https://stimulus.hotwired.dev/reference/actions\">Actions</a></li>\n<li><a href=\"https://stimulus.hotwired.dev/reference/targets\">Targets</a></li>\n<li><a href=\"https://stimulus.hotwired.dev/reference/values\">Values</a></li>\n<li><a href=\"https://stimulus.hotwired.dev/reference/css-classes\">CSS Classes</a></li>\n</ul>\n\n<p>Wouldn’t it be great if we could also generate markup from our generator? Let’s try it.</p>\n\n<p>Go back to our tests and write our test case.  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"c1\"># test/lib/generators/stimulus_generator_test.rb</span>\n<span class=\"k\">class</span> <span class=\"nc\">StimulusGeneratorTest</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">TestCase</span>\n <span class=\"o\">...</span>\n <span class=\"nb\">test</span> <span class=\"s1\">'should generate actions'</span> <span class=\"k\">do</span>\n  <span class=\"n\">run_generator</span> <span class=\"p\">[</span><span class=\"s2\">&quot;toggle&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;--actions&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;toggle hide&quot;</span><span class=\"p\">]</span>\n  <span class=\"n\">assert_file</span> <span class=\"s2\">&quot;app/javascript/controllers/toggle_controller.js&quot;</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">content</span><span class=\"o\">|</span>\n   <span class=\"n\">assert_match</span> <span class=\"sr\">/toggle()/</span><span class=\"p\">,</span> <span class=\"n\">content</span>\n   <span class=\"n\">assert_match</span> <span class=\"sr\">/hide()/</span><span class=\"p\">,</span> <span class=\"n\">content</span>\n  <span class=\"k\">end</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Let’s run our tests.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>rails <span class=\"nb\">test test</span>/lib/generators/stimulus_generator_test.rb\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight shell\"><code>Running 3 tests <span class=\"k\">in </span>a single process <span class=\"o\">(</span>parallelization threshold is 50<span class=\"o\">)</span>\nRun options: <span class=\"nt\">--seed</span> 2776\n\n<span class=\"c\"># Running:</span>\n\n.F\n\nFailure:\nStimulusGeneratorTest#test_should_generate_actions <span class=\"o\">[</span>/Users/williamkennedy/projects/honeybadger/rails_generators/test/lib/generators/stimulus_generator_test.rb:26]:\nExpected /toggle<span class=\"o\">()</span>/ to match <span class=\"s2\">&quot;import { Controller } from </span><span class=\"se\">\\&quot;</span><span class=\"s2\">@hotwired/stimulus</span><span class=\"se\">\\&quot;\\n\\n</span><span class=\"s2\">export default class extends Controller {</span><span class=\"se\">\\n\\n</span><span class=\"s2\"> initialize() {</span><span class=\"se\">\\n</span><span class=\"s2\"> }</span><span class=\"se\">\\n</span><span class=\"s2\"> </span><span class=\"se\">\\n</span><span class=\"s2\"> connect() {</span><span class=\"se\">\\n</span><span class=\"s2\"> }</span><span class=\"se\">\\n</span><span class=\"s2\">}</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span><span class=\"nb\">.</span>\n\n\nrails <span class=\"nb\">test test</span>/lib/generators/stimulus_generator_test.rb:24\n\n<span class=\"nb\">.</span>\n\nFinished <span class=\"k\">in </span>0.013761s, 218.0074 runs/s, 799.3605 assertions/s.\n3 runs, 11 assertions, 1 failures, 0 errors, 0 skips\n</code></pre></div>\n<p>When taking arguments in our generators, we can use the <code>class_option</code> method. We now need to update our generator once again.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">StimulusGenerator</span> <span class=\"o\">&lt;</span> <span class=\"no\">Rails</span><span class=\"o\">::</span><span class=\"no\">Generators</span><span class=\"o\">::</span><span class=\"no\">NamedBase</span>\n <span class=\"n\">source_root</span> <span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">expand_path</span><span class=\"p\">(</span><span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">,</span> <span class=\"n\">__dir__</span><span class=\"p\">)</span>\n\n <span class=\"n\">class_option</span> <span class=\"ss\">:actions</span><span class=\"p\">,</span> <span class=\"ss\">type: :array</span><span class=\"p\">,</span> <span class=\"ss\">default: </span><span class=\"p\">[]</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">create_stimulus_controller</span>\n  <span class=\"n\">template</span> <span class=\"s1\">'stimulus_controller.js.erb'</span><span class=\"p\">,</span> <span class=\"s2\">&quot;app/javascript/controllers/</span><span class=\"si\">#{</span><span class=\"n\">file_path</span><span class=\"si\">}</span><span class=\"s2\">_controller.js&quot;</span>\n <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>Note that we have an empty array as the default for the argument. This means we don’t have to worry about nil errors if we don’t use the action argument.</p>\n\n<p>We can access the arguments by using the <code>options</code> method. Here’s how I have done it in the <code>lib/generators/stimulus/templates/stimulus_controller.js.erb</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight erb\"><code>import { Controller } from &quot;@hotwired/stimulus&quot;\n\nexport default class extends Controller {\n\n initialize() {\n }\n\n connect() {\n }\n<span class=\"cp\">&lt;%</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:actions</span><span class=\"p\">].</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">action</span><span class=\"o\">|</span> <span class=\"cp\">%&gt;</span>\n\n <span class=\"cp\">&lt;%=</span> <span class=\"n\">action</span> <span class=\"cp\">%&gt;</span>(){\n }\n\n<span class=\"cp\">&lt;%</span> <span class=\"k\">end</span> <span class=\"cp\">%&gt;</span>\n}\n</code></pre></div>\n<p>Now when we can run our generator with options.</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rails</span> <span class=\"n\">g</span> <span class=\"n\">stimulus</span> <span class=\"n\">toggle</span> <span class=\"o\">--</span><span class=\"n\">actions</span> <span class=\"n\">toggle</span> <span class=\"n\">hide</span>\n</code></pre></div>\n<p>This will produce the following in the file <code>app/javascript/controllers/toggle_controller.js</code>:  </p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">import</span> <span class=\"p\">{</span> <span class=\"no\">Controller</span> <span class=\"p\">}</span> <span class=\"n\">from</span> <span class=\"s2\">&quot;@hotwired/stimulus&quot;</span>\n\n<span class=\"n\">export</span> <span class=\"n\">default</span> <span class=\"k\">class</span> <span class=\"n\">extends</span> <span class=\"no\">Controller</span> <span class=\"p\">{</span>\n\n <span class=\"n\">initialize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"p\">}</span>\n\n <span class=\"n\">connect</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"p\">}</span>\n\n <span class=\"n\">toggle</span><span class=\"p\">(){</span>\n <span class=\"p\">}</span>\n\n <span class=\"n\">hide</span><span class=\"p\">(){</span>\n <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And, of course, if we rerun our tests, we’ll see that they pass.  </p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>rails <span class=\"nb\">test test</span>/lib/generators/stimulus_generator_test.rb\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight shell\"><code>Running 3 tests <span class=\"k\">in </span>a single process <span class=\"o\">(</span>parallelization threshold is 50<span class=\"o\">)</span>\nRun options: <span class=\"nt\">--seed</span> 47721\n\n<span class=\"c\"># Running:</span>\n\n...\n\nFinished <span class=\"k\">in </span>0.015036s, 199.5211 runs/s, 864.5916 assertions/s.\n3 runs, 13 assertions, 0 failures, 0 errors, 0 skips\n</code></pre></div>\n<p>We could do the same process for the other stimulus features, such as targets, values, and CSS classes.</p>\n\n<ol>\n<li>Create the test.</li>\n<li>Add the class option.</li>\n<li>Adjust our template.</li>\n<li>Ensure the test passes.</li>\n</ol>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Generators are pretty helpful and can save hours, reduce boilerplate errors, and create a standard across your codebase as it gets larger over time.  </p>\n\n<p>However, there is a balance to be struck on when to automate something using a generator. Luckily, XKCD has <a href=\"https://xkcd.com/1205/\">a handy guide</a>.</p>\n\n<p>The source code for this app can be found <a href=\"https://github.com/williamkennedy/rails_generator\">here</a>.</p>\n"
}