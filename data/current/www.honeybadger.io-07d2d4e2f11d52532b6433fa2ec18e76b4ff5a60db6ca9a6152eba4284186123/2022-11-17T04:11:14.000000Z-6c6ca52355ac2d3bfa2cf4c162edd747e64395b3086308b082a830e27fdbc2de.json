{
  "title":"How to Dockerize a Django and React Application",
  "date":"2022-11-17T04:11:14.000000Z",
  "author":"Muhammed Ali",
  "id":"https://www.honeybadger.io/blog/docker-django-react/",
  "link":"https://www.honeybadger.io/blog/docker-django-react/",
  "content":"<p>Docker makes deployment flawless because a Docker image works the same way regardless of the system, and the image includes all application requirements. Docker also helps with collaboration; by just sharing the image, your colleague can run the application with no dependency issues.</p>\n\n<p>Writing the instructions for a Django application is straightforward. The challenging part is when you are building an application that needs other technologies to work. For example, you may have an application built with Django, React, Postgres, or Redis. It is important to know how to piece all these technologies together.</p>\n\n<p>This article will show you how to use Docker and Docker Compose to containerize an application built with Django and React. We will build a simple application with Django and React and then look at how it can be containerized with Docker and Docker Compose. You can find the whole project on\n<a href=\"https://github.com/khabdrick/django-react-docker-sample\">GitHub</a>.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>This tutorial will be a hands-on demonstration. If you'd like to follow along, be sure you have the following:</p>\n\n<ul>\n<li><a href=\"https://docs.docker.com/engine/install/\">Docker</a> and <a href=\"https://docs.docker.com/compose/install/\">Docker Compose</a> installed.</li>\n<li><a href=\"https://docs.djangoproject.com/en/4.0/topics/install/#installing-an-official-release-with-pip\">Django</a> and <a href=\"https://nodejs.org/en/download/\">Node.js</a> installed.</li>\n</ul>\n\n<h2 id=\"what-is-docker-compose\">What is Docker Compose</h2>\n\n<p><a href=\"https://docs.docker.com/compose/\">Docker Compose</a> is a tool used to run applications with multiple containers at once with a single command. It also facilitates the sharing of multi-container applications. In Docker Compose, each image that it handles is known as a service. The instructions for Docker Compose are included in a YAML file.</p>\n\n<p>Docker Compose also helps in single-host deployment. Since Docker compose can run all your services, you can run the whole application with a single server instead of running each service independently.</p>\n\n<h2 id=\"building-the-base-application\">Building the Base Application</h2>\n\n<p>In this section, we will build an application that just displays the time and date to keep things simple. We will build the backend before going into the frontend. Create the project folder and name it <code>django-react-docker</code>. This folder will contain everything related to our project.</p>\n\n<h3 id=\"building-the-api\">Building the API</h3>\n\n<p>Inside the folder you just created, create another folder named <code>api</code>. This is where the code for the API will be located.</p>\n\n<p>Navigate to <code>django-react-docker/api</code> on your command line and run the following command to create a new Django project:</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>django-admin startproject project <span class=\"nb\">.</span>\n</code></pre></div>\n<p>Now, create a new file in <code>/project</code> directory named <code>views.py</code> and paste the following code, which uses Python’s <code>datetime</code> module to generate the current date and time and output a JSON response so that React can read it.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">current_time</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">&quot;%-I:%S %p&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">current_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">&quot;%A %m %-Y&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'time'</span><span class=\"p\">:</span> <span class=\"n\">current_time</span><span class=\"p\">,</span>\n        <span class=\"s\">'date'</span><span class=\"p\">:</span> <span class=\"n\">current_date</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Next, update the <code>urls.py</code> file with the following code to direct the view to the home page:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span> <span class=\"kn\">import</span> <span class=\"n\">index</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">'admin/'</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"p\">.</span><span class=\"n\">site</span><span class=\"p\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>Finally, we need to update the settings so that React can access the API. You can do this by adding React port to whitelist using <a href=\"https://pypi.org/project/django-cors-headers/\">django-cors-headers</a>.</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'0.0.0.0'</span><span class=\"p\">]</span> <span class=\"c1\"># this is the host that Docker uses to run application\n</span><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">'corsheaders'</span> <span class=\"c1\"># this will be installed later\n</span><span class=\"p\">]</span>\n<span class=\"p\">...</span>\n<span class=\"c1\"># this should be put at the end of the settings.py file\n</span><span class=\"n\">CORS_ORIGIN_WHITELIST</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n     <span class=\"s\">'http://localhost:3000'</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<p>You also need to add a middleware class to listen in on responses:</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">...,</span>\n    <span class=\"s\">&quot;corsheaders.middleware.CorsMiddleware&quot;</span><span class=\"p\">,</span>\n    <span class=\"s\">&quot;django.middleware.common.CommonMiddleware&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">...,</span>\n<span class=\"p\">]</span>\n</code></pre></div>\n<h3 id=\"building-a-docker-container-for-django\">Building a Docker Container for Django</h3>\n\n<p>On your text editor, navigate to <code>api/</code>, create a new file with the name <code>Dockerfile</code>, and then paste the following code. The Dockerfile contains the step-by-step process of how the Docker image should be built. In the code below, use six instructions:</p>\n\n<ul>\n<li><code>FROM</code> - Every Dockerfile starts with this command. It specifies the <em><a href=\"https://docs.docker.com/glossary/#parent-image\">Parent Image</a></em> from which your application will be built. In our case, we are using a lighter version of Python 3.8.13 (<code>python:3.8.13-bullseye</code>). You can find more information on <a href=\"https://hub.docker.com/_/python\">Docker hub</a>.</li>\n<li><code>ENV</code> - This is used to set environment variables in key-value pairs. Here, we are using it to tell Python to show the <code>stdout</code> and <code>stderr</code> streams in the command line instead of getting buffered.</li>\n<li><code>WORKDIR</code> - This is used to state the directory where the application will be located and where the rest of the instructions in the <code>Dockerfile</code> will be run.</li>\n<li><code>COPY</code> - This is used to copy files or folders.</li>\n<li><code>RUN</code> - This is used to run a command line command.</li>\n<li><code>EXPOSE</code> - This is used to expose a particular port in the image. Here, we will expose port <code>8000</code> because it is the port on which Django runs.</li>\n</ul>\n<div class=\"highlight\"><pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\">  python:3.8.13-bullseye</span>\n\n<span class=\"k\">ENV</span><span class=\"s\"> PYTHONUNBUFFERED=1</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /api</span>\n\n<span class=\"k\">RUN </span>pip <span class=\"nb\">install </span>django django-cors-headers\n\n<span class=\"c\"># copy from the current directory of the Dockerfile to /api in the image</span>\n<span class=\"k\">COPY</span><span class=\"s\"> . . </span>\n\n<span class=\"k\">EXPOSE</span><span class=\"s\"> 8000</span>\n</code></pre></div>\n<h3 id=\"building-the-frontend\">Building the Frontend</h3>\n\n<p>Next, we will create the frontend that will display the time and date obtained from the API.</p>\n\n<p>First, run the command below to create a boilerplate for a React application.</p>\n<div class=\"highlight\"><pre class=\"highlight shell\"><code>npx create-react-app frontend\n</code></pre></div>\n<p>On your text editor, navigate to <code>frontend/src/App.js</code> and replace what you find there with the code below. The code is fetching the time and date data from the backend and displaying it on the frontend.</p>\n<div class=\"highlight\"><pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span><span class=\"p\">,</span> <span class=\"nx\">useEffect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./App.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">currentTime</span><span class=\"p\">,</span> <span class=\"nx\">setCurrentTime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">currentDate</span><span class=\"p\">,</span> <span class=\"nx\">setCurrentDate</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\"> http://127.0.0.1:8000/</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">setCurrentTime</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">);</span>\n      <span class=\"nx\">setCurrentDate</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">date</span><span class=\"p\">)</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">},</span> <span class=\"p\">[]);</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">&quot;App&quot;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">header</span> <span class=\"na\">className</span><span class=\"p\">=</span><span class=\"s\">&quot;App-header&quot;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The date is <span class=\"si\">{</span><span class=\"nx\">currentDate</span><span class=\"si\">}</span> and the time is <span class=\"si\">{</span><span class=\"nx\">currentTime</span><span class=\"si\">}</span>.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">/&gt;</span>\n\n      <span class=\"p\">&lt;/</span><span class=\"nt\">header</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre></div>\n<h3 id=\"building-a-docker-container-for-react\">Building a Docker Container for React</h3>\n\n<p>Writing the Dockerfile for the frontend follows the same process as the backend, but the commands are different. On your text editor, go to <code>/frontend</code>, create a file named <code>Dockerfile</code>,  and paste the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> node:14.17.3</span>\n\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /frontend</span>\n\n<span class=\"k\">COPY</span><span class=\"s\"> . .</span>\n\n<span class=\"k\">RUN </span>npm <span class=\"nb\">install</span>\n\n<span class=\"k\">EXPOSE</span><span class=\"s\"> 3000</span>\n\n<span class=\"k\">CMD</span><span class=\"s\"> [&quot;npm&quot;, &quot;start&quot;]</span>\n</code></pre></div>\n<h2 id=\"creating-a-docker-compose-file-to-run-the-app\">Creating a Docker Compose File to Run the App</h2>\n\n<p>Here we will create a Docker Compose file that will build and run our Docker images together. Each Docker image in the Docker compose file is represented as a service. In the root of your project, create a new file named <code>docker-compose.yaml</code> and paste the following code, which will build the individual images and running them in a container.</p>\n<div class=\"highlight\"><pre class=\"highlight yaml\"><code><span class=\"na\">services</span><span class=\"pi\">:</span>\n  <span class=\"na\">api</span><span class=\"pi\">:</span>\n    <span class=\"na\">build</span><span class=\"pi\">:</span> <span class=\"s\">./api</span>        \n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">&quot;</span><span class=\"s\">8000:8000&quot;</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">./api:/api</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"s\">bash -c &quot;python manage.py runserver 0.0.0.0:8000&quot;</span>\n\n  <span class=\"na\">web</span><span class=\"pi\">:</span>\n    <span class=\"na\">build</span><span class=\"pi\">:</span> <span class=\"s\">./frontend</span>\n    <span class=\"na\">ports</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">&quot;</span><span class=\"s\">3000:3000&quot;</span>\n    <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s\">./frontend:/frontend</span>\n\n</code></pre></div>\n<p>Here is what the commands in the file above are doing:</p>\n\n<p><code>build</code> -  This is used to build each image/service.\n<code>ports</code> - This is used to map the host port to the container port\n<code>volumes</code> - This is used to copy changes made to the project to our image in real time.\n<code>command</code> - This handles the command used to run our project in our Docker container.</p>\n\n<p>Now, you can now build the image by running <code>docker-compose build</code>. The build will take some time; when it is done, run <code>docker-compose up</code> to run the container.</p>\n\n<p>Now, open <a href=\"http://localhost:3000/\">http://localhost:3000/</a> on your browser, and you will see the application come up.</p>\n\n<p><img src=\"/images/blog/posts/docker-django-react/final.png\" alt=\"The final application\"></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>With this article, we took the DevOps initiative to containerize an application built with Django and React. This is important as you grow as a developer and stay relevant in the software engineering space.</p>\n\n<p>In this article, we built a simple time and date application with Django and React. Then, we containerized an application built with Docker and Docker Compose.</p>\n\n<p>You can further increase your knowledge on this topic by adding a tool like NGINX to the mix and seeing how it is handled. You can also add a database, such as MongoDB or Postgres to Django, and then do more research on what the Docker Compose file will look like.</p>\n"
}