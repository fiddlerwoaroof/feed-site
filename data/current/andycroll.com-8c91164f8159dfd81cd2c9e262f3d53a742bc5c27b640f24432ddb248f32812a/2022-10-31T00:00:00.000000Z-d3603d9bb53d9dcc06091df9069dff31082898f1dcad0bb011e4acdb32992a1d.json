{
  "title":"Use zero? for comparison of numerics like Integer, Float and BigDecimal",
  "date":"2022-10-31T00:00:00.000000Z",
  "author":null,
  "id":"https://andycroll.com/ruby/use-zero-for-integer-float-comparison",
  "link":"https://andycroll.com/ruby/use-zero-for-integer-float-comparison/",
  "content":"<p>Compared to other similar languages, Ruby often prioritises readability (and joy) when it comes to its syntax and the methods provided in its Standard Library.</p>\n\n<p>An example of this is the syntactic sugar used when comparing a value to zero.</p>\n\n<p>Take a look at the documentation for the <code class=\"language-plaintext highlighter-rouge\">.zero?</code> method on <a href=\"https://ruby-doc.org/core-3.1.2/Integer.html#zero-3F-method\"><code class=\"language-plaintext highlighter-rouge\">Integer</code></a>, <a href=\"https://ruby-doc.org/core-3.1.2/Float.html#zero-3F-method\"><code class=\"language-plaintext highlighter-rouge\">Float</code></a>, <a href=\"https://ruby-doc.org/core-3.1.2/Numeric.html#zero-3F-method\"><code class=\"language-plaintext highlighter-rouge\">Numeric</code></a> and <a href=\"https://ruby-doc.org/stdlib-3.1.2/libdoc/bigdecimal/rdoc/BigDecimal.html#zero-3F-method\"><code class=\"language-plaintext highlighter-rouge\">BigDecimal</code></a>.</p>\n\n<h2 id=\"instead-of\">Instead of…</h2>\n\n<p>…checking whether a value is equal to <code class=\"language-plaintext highlighter-rouge\">0</code> in a conditional:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n  <span class=\"ss\">:yes</span>\n<span class=\"k\">else</span>\n  <span class=\"ss\">:no</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h2 id=\"use\">Use…</h2>\n\n<p>…the built-in <code class=\"language-plaintext highlighter-rouge\">#zero?</code> method on all numeric types:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"n\">number</span><span class=\"p\">.</span><span class=\"nf\">zero?</span>\n  <span class=\"ss\">:yes</span>\n<span class=\"k\">else</span>\n  <span class=\"ss\">:no</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<h2 id=\"why\">Why?</h2>\n\n<p>The Ruby-ish syntax is clearer and less error prone.</p>\n\n<p>In the first example, it is very easy to mistakenly type <code class=\"language-plaintext highlighter-rouge\">number = 0</code> and thus assign a variable in the conditional rather than perform a comparison (although you might use tests to protect yourself from that particular error).</p>\n\n<h2 id=\"why-not\">Why not?</h2>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">== 0</code> syntax is how <em>many</em> other similar languages perform comparisons and is deeply ingrained for many of us. I still struggle to apply this advice even after 15 years of Ruby programming.</p>\n\n<p>You might get some folks pushing back for “performance” reasons.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">require</span> <span class=\"s2\">&quot;benchmark/ips&quot;</span>\n\n<span class=\"no\">Benchmark</span><span class=\"p\">.</span><span class=\"nf\">ips</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;1 == 0&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; false</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;0 == 0&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; true</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.zero?&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">.</span><span class=\"nf\">zero?</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; false</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;0.zero?&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">.</span><span class=\"nf\">zero?</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; true</span>\n\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.0 == 0&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mf\">1.0</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; false</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;0.0 == 0&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mf\">0.0</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; true</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;1.0.zero?&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mf\">1.0</span><span class=\"p\">.</span><span class=\"nf\">zero?</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; false</span>\n  <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">report</span><span class=\"p\">(</span><span class=\"s2\">&quot;0.0.zero?&quot;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"mf\">0.0</span><span class=\"p\">.</span><span class=\"nf\">zero?</span> <span class=\"p\">}</span> <span class=\"c1\">#=&gt; true</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>For <code class=\"language-plaintext highlighter-rouge\">Integer</code>:</p>\n\n<table>\n<tr>\n  <th>1 == 0</th>\n  <td class=\"text-right\">29.049M <small>(± 0.7%)</small> i/s</td>\n</tr>\n<tr>\n  <th>0 == 0</th>\n  <td class=\"text-right\">28.972M <small>(± 0.3%)</small> i/s</td>\n</tr>\n<tr>\n  <th>1.zero?</th>\n  <td class=\"text-right\">23.009M <small>(± 1.0%)</small> i/s</td>\n</tr>\n<tr>\n  <th>0.zero?</th>\n  <td class=\"text-right\">22.860M <small>(± 1.7%)</small> i/s</td>\n</tr>\n</table>\n\n<p>For <code class=\"language-plaintext highlighter-rouge\">Float</code>:</p>\n\n<table>\n<tr>\n  <th>1.0 == 0</th>\n  <td class=\"text-right\">18.768M <small>(± 2.0%)</small> i/s</td>\n</tr>\n<tr>\n  <th>0.0 == 0</th>\n  <td class=\"text-right\">19.066M <small>(± 0.5%)</small> i/s</td>\n</tr>\n<tr>\n  <th>1.0.zero?</th>\n  <td class=\"text-right\">22.784M <small>(± 0.6%)</small> i/s</td>\n</tr>\n<tr>\n  <th>0.0.zero?</th>\n  <td class=\"text-right\">22.841M <small>(± 0.8%)</small> i/s</td>\n</tr>\n</table>\n\n<p>The benchmark shows that for <code class=\"language-plaintext highlighter-rouge\">Integer</code>s the <code class=\"language-plaintext highlighter-rouge\">==</code> syntax is faster, but for <code class=\"language-plaintext highlighter-rouge\">Float</code>s the <code class=\"language-plaintext highlighter-rouge\">.zero?</code> syntax wins out.</p>\n\n<p>However, the important thing to note is that in all cases you still get millions of executions per second, so in <em>your</em> code you should emphasise the readability over any perceived performance implications!</p>\n"
}