{
  "title":"You can add biometric authentication to your webpage. Here’s how.",
  "date":"2022-11-16T15:00:00.000000Z",
  "author":null,
  "id":"https://stackoverflow.blog/?p=21154",
  "link":"https://stackoverflow.blog/2022/11/16/biometric-authentication-for-web-devs/",
  "content":"\n<p>Biometric authentication, which allows you to authenticate to a software system with a fingerprint or facial recognition, has been around for a while. In 2003, IBM Thinkpads had a fingerprint reader which let you log in to your computer. In 2013, Apple included a fingerprint scanner on the iPhone 5S, though there were other phones that had it first (hello Motorola Atrix!). </p>\n\n\n\n<p>But biometric authentication hasn’t been easily available to web applications until recently.</p>\n\n\n\n<p>New web browser APIs  make it easy to add strong biometric authentication to your web application.</p>\n\n\n\n<h2 id=\"h-what-is-biometric-authentication\">What is biometric authentication</h2>\n\n\n\n<p>First, let’s talk about authentication in general. Biometric authentication is the general term for any authentication method which depends on a user’s physical attributes, such as a fingerprint, face, or voice.</p>\n\n\n\n<p>There are three categories of authentication:</p>\n\n\n\n<ul>\n<li>Something you know, like a password</li>\n\n\n\n<li>Something you have, like a device</li>\n\n\n\n<li>Something you are, like a fingerprint</li>\n</ul>\n\n\n\n<p>Biometric authentication has significant advantages over other options:</p>\n\n\n\n<ul>\n<li>It is difficult to lose</li>\n\n\n\n<li>It is hard to steal</li>\n\n\n\n<li>It can’t be shared</li>\n\n\n\n<li>You can’t forget it</li>\n</ul>\n\n\n\n<p>Letting your users authenticate using their biometrics has significant security and convenience advantages. According to “<a href=\"https://ink.library.smu.edu.sg/cgi/viewcontent.cgi?article=4969&amp;context=sis_research\">Biometric Authentication on iPhone and Android:</a></p>\n\n\n\n<p><a href=\"https://ink.library.smu.edu.sg/cgi/viewcontent.cgi?article=4969&amp;context=sis_research\">Usability, Perceptions, and Influences on Adoption</a>,” a paper published in 2015, “…participants found Android face unlock and iPhone fingerprint unlock to be easy to use in a number of common usage scenarios.” By their very nature, biometric methods are more difficult for attackers to obtain than knowledge based authentication methods such as passwords.</p>\n\n\n\n<p>You also don’t have to use biometric authentication alone. When combined with other authentication methods, such as a password or a magic link, biometric authentication can provide additional security without adding friction to the user experience.</p>\n\n\n\n<h2 id=\"h-how-to-add-biometric-functionality-to-your-webapp\">How to add biometric functionality to your webapp</h2>\n\n\n\n<p>The easiest way to add biometric authentication to your web application is to use a standard called <a href=\"https://webauthn.guide\">WebAuthn</a>. This is supported by every major browser (except IE, sorry IE users!) and links a friendly JavaScript API to a variety of hardware based authentication methods, including biometric options supported by desktop and mobile operating systems.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/XPg5YauvJvgI8HeulyeSY0S8o207BAEXEEGj6ii89Uhe6mwoRelDks882LK44S0rtiApDa3cZ26QfnYhsEJ3mQD4dbUIT2h3QZ3fxdLyEYMdWdHuk1zX2eFl2c8F3rQ4JsxzmoZIQanmooF_xPDo4ZYB4by_OrhwNmmU77-VThw6Eb6impyp26ZOrslrLQ\" alt=\"A chart from CanIUse.com illustrating which web browsers support the WebAuthn API. All modern browsers except IE and Opera Mini do so.\"><figcaption class=\"wp-element-caption\">Most web browsers support WebAuthn.</figcaption></figure>\n\n\n\n<p>To add strong WebAuthn-based authentication, including biometric options, take the following high level steps:</p>\n\n\n\n<ul>\n<li>Check to see if WebAuthn is supported using a JavaScript API to test the current browser.</li>\n\n\n\n<li>Prompt the user to add a biometric authentication method</li>\n\n\n\n<li>Associate the method with the account</li>\n\n\n\n<li>At next login, identify the user in some fashion\n<ul>\n<li>Set a cookie when they add the method</li>\n\n\n\n<li>Ask for their username</li>\n</ul>\n</li>\n\n\n\n<li>When you know who they are, prompt a WebAuthn login</li>\n\n\n\n<li>The biometric authenticator (the phone or operating system) will issue an authentication challenge</li>\n\n\n\n<li>The user answers it by providing their fingerprint or whatever biometric proof is needed</li>\n\n\n\n<li>Your JavaScript receives and interprets a message from the browser</li>\n\n\n\n<li>If the message indicates successful authentication, log the user in</li>\n</ul>\n\n\n\n<p>The actual code is pretty straightforward. </p>\n\n\n\n<p>To confirm that the browser supports WebAuthn, run this code:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>if (window.PublicKeyCredential) {\n  // do your webauthn stuff\n} else {\n  // wah-wah, back to passwords for you\n}\n</code></pre>\n\n\n\n<p>  Then, to add a biometric authentication method, you call this JavaScript method:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>navigator.credentials.create(options);</code></pre>\n\n\n\n<p>To prompt a biometric login, use this JavaScript:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>navigator.credentials.get(options);</code></pre>\n\n\n\n<p>The <code>options</code> object is critical and includes information about what type of credential you are asking for, a nonce that prevents replay attacks, and information about the requesting website. Full details are <a href=\"https://www.w3.org/TR/webauthn-2/\">covered in the specification</a>, but we’ll also cover the <code>options</code> object in detail below.</p>\n\n\n\n<h2 id=\"h-we-ve-got-standards\">We’ve got standards </h2>\n\n\n\n<p>It’s worth understanding the standards that allow a web application to leverage something like a user’s phone’s TouchID system for login. There are three main standards you should know about:</p>\n\n\n\n<ul>\n<li>WebAuthn, as already mentioned</li>\n\n\n\n<li>CTAP2</li>\n\n\n\n<li>FIDO2</li>\n</ul>\n\n\n\n<p>WebAuthn is also known as the Web Authentication API. This is the standard mentioned above, and as a web developer, the main one you’ll interact with. This API lets you communicate with browsers, such as Chrome or Safari, to request biometric and other means of authentication.</p>\n\n\n\n<p>The second is <a href=\"https://fidoalliance.org/specs/fido-v2.0-ps-20190130/fido-client-to-authenticator-protocol-v2.0-ps-20190130.html\">CTAP2</a>, which dictates how the browser interacts with what’s called an authenticator. An authenticator is the piece of hardware that authenticates a user with cryptographic certainty. In a biometric scenario, this might be an iOS device or Windows Hello. In general, as a web developer, you won’t be concerned with this standard, as the browser insulates you from it, but it is worthwhile to know it is in the mix.</p>\n\n\n\n<p>If you are confused about how WebAuthn and CTAP2 interact, here’s a diagram. In this diagram, the user is the smiley face, the orange box is an authenticator like TouchID or Android Fingerprint Sensor, the white globe is the browser, and the blue box is a website.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/qR7pmji_I7Dv3m0RXRrtrz_rO9rXc0hqnf0kBm0q3Eeg4U98RTceWrfK7eZQB2UwHdzFjaPm1GzhlAmZMb2zUtvOdy_dYSaRwFyKi4rXj6H1cmvV3n0hlP8leHBj9y8frBPOyTfeuAzYa7HPDer4yeKvD6paOkGSP-nE_hcluwndMXVUet55Y5bwP4Rf3g\" alt=\"A diagram showing the entities that take part in WebAuthn, with different entities being grouped. The WebAuthn protocol is concerned with the browser to website communication and the CTAP2 protocol addresses communication between the browser and the authenticator.\"><figcaption class=\"wp-element-caption\">The WebAuthn protocol is concerned with the browser to website communication and the CTAP2 protocol addresses communication between the browser and the authenticator.</figcaption></figure>\n\n\n\n<p>Finally, last but not least, <a href=\"https://fidoalliance.org/fido2-2/fido2-web-authentication-webauthn/\">FIDO2 is the umbrella standard</a>. FIDO2 includes both CTAP2 and WebAuthn. (CTAP1, the first version of CTAP, is supported for backwards compatibility.)</p>\n\n\n\n<p>What is an authenticator?</p>\n\n\n\n<p>Authenticators are what actually perform the biometric or other form of authentication. While this article focuses on biometric authentication, authenticators offer other methods to authenticate the user. At the heart of each authenticator is a way to generate and store public/private key pairs. The public key is shared with the web application and the private key is held securely by the authenticator.</p>\n\n\n\n<p>An authenticator can be implemented in hardware or software, but software authenticators such as the <a href=\"https://developer.chrome.com/docs/devtools/webauthn/\">one available in Chrome DevTools</a> are only recommended for testing, not for production use.</p>\n\n\n\n<p>There are two main categories of authenticators, cross-platform and platform. Cross-platform authenticators can be used on more than one device. Platform authenticators are tied to a specific device, such as a phone. Most consumer-focused biometric authenticators are integrated into an operating system such as iOS, Android, or Windows. This means they are tied to a given device and are therefore platform authenticators.</p>\n\n\n\n<p>The other important aspect of an authenticator is whether they test for user presence or user verification. User presence simply indicates that someone interacted with the authenticator (this interaction is called an “authorization gesture”) perhaps by clicking a button. Such a test of presence is useful if you are using an authenticator as part of a multi-factor authentication process.</p>\n\n\n\n<p>User verification, on the other hand, offers assurances that the user who authenticated is actually who we think they are. This can be done by providing something they know, or, in the biometric case, using an attribute of the user such as the dimensions of their face. In most cases, you’ll be interested in user verification, which is what the common biometric authenticators provide.</p>\n\n\n\n<h2 id=\"h-choices-choices\">Choices, choices</h2>\n\n\n\n<p>Due to the abstraction of the WebAuthn API, you can’t be certain the user is authenticating via a biometric. You can take certain steps to encourage it, but you can’t force it.</p>\n\n\n\n<p>However, biometric authentication tied to popular operating systems are a quite prevalent form of WebAuthn-compatible hardware, so it is likely that if you encourage your users to set up WebAuthn logins, they’ll be using biometrics. You can also encourage this via the messaging on your website.</p>\n\n\n\n<p>Even if they aren’t using biometrics, if you use WebAuthn, you can rest assured that they’ll be using a secure hardware solution for their authentication needs.</p>\n\n\n\n<p>If the WebAuthn authentication succeeds, you won’t know what method was used. What you can control:</p>\n\n\n\n<ul>\n<li>If you’d prefer a cross-platform or platform authenticator to be used.</li>\n\n\n\n<li>Asking for either user presence or user verification.</li>\n</ul>\n\n\n\n<p>Next, let’s dig in deeper to the flow of a user who is using WebAuthn-enabled biometric method to log in.</p>\n\n\n\n<h2 id=\"h-what-are-ceremonies\">What are “ceremonies”?</h2>\n\n\n\n<p>If you read up about WebAuhn, you might hear the word “ceremony.” Ceremonies, in the context of WebAuthn, are prescribed interactions between software, hardware, and physical entities such as human beings or devices. You can think of ceremonies as network protocols extended to the physical world.</p>\n\n\n\n<p>There are two types of ceremonies defined in WebAuthn, and both are required for biometric authentication to work with your web application.</p>\n\n\n\n<h3 id=\"h-registration\">Registration</h3>\n\n\n\n<p>The first ceremony is registration, where the authenticator is, well, registered with your website. Likewise, your website is registered with the authenticator. The end result of a registration is a credential, which is used in later ceremonies.</p>\n\n\n\n<p>To register an authenticator, use this code:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>navigator.credentials.create(options);</code></pre>\n\n\n\n<p>As promised above, let’s dive into this in more detail. The <code>options</code> object looks like this:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>options =  {\n  publicKey: {\n\trp: { id: &quot;cosmosclownstore.com&quot;,\n      \tname: &quot;Cosmo’s Clown Store&quot; },\n\tuser: { id: &quot;1234&quot;,\n        \tname: &quot;krusty@example.com&quot;,\n        \tdisplayName: &quot;Krusty The Clown&quot; },\n\tchallenge: &quot;...&quot;,\n\tpubKeyCredParams: [ { type: &quot;public-key&quot;, alg: -7 }],\n            authenticatorSelection: {}\n\t//...\n  }\n}\n</code></pre>\n\n\n\n<p> Let’s look at this <code>options</code> object in more detail.</p>\n\n\n\n<p>First, the <code>rp</code> field contains data about your web application. WebAuthn includes built-in security constraints such as:</p>\n\n\n\n<ul>\n<li>Requiring all API calls to take place from a page served up by HTTPS.</li>\n\n\n\n<li>Forcing the identifier of the website at registration to match the current hostname.</li>\n</ul>\n\n\n\n<p>When you are registering, you as the webapp developer can specify a broader domain if you’d like to be able to accept the new credential across multiple subdomains.</p>\n\n\n\n<p>For example, if I register with an <code>rp.id</code> of cosmosclownstore.com, but later request a biometric login from a webapp hosted at app.cosmosclownstore.com, it will be allowed.</p>\n\n\n\n<p>However, if I register with an <code>rp.id</code> of app.cosmosclownstore.com, then try to start a biometric authentication session from an app hosted at store.cosmosclownstore.com, it won’t.</p>\n\n\n\n<p>Second, you have the <code>user</code> field, which contains information about this user. This ties the credential that is created on the authenticator to the account on the website. You may notice this implies that the user already has an account on the website, and that the new WebAuthn credentials are only another means of authentication, not the primary one. That is generally true, though there are authenticators that support something called “discoverable credentials,” which work around this limitation.</p>\n\n\n\n<p>Third, there’s a <code>challenge</code> field, which is a nonce to prevent replay attacks. It’s a unique high-entropy string you as the web app developer must provide. This challenge will be returned in the response and you must verify they are the same.</p>\n\n\n\n<p>Fourth, there’s the <code>pubKeyCredParams</code> field, which indicates what kind of public private key algorithm you are interested in supporting. The values of the objects in the array are defined in <a href=\"https://www.iana.org/assignments/cose/cose.xhtml\">this IANA document</a>, but -7, indicating ECDSA w/ SHA-256, is guaranteed to be supported—it’s required by the specification.</p>\n\n\n\n<p>Finally, there’s the <code>authenticatorSelection</code> field, which lets you indicate certain attributes of the authenticators for this ceremony. This includes the cross-platform/platform category as mentioned above.</p>\n\n\n\n<p>After you build the <code>options</code> object and call <code>navigator.credentials.create(options);</code>, the user will be prompted by the authenticator to add a credential for your website. They’ll see information about you website from the <code>rp</code> object, as well as information about their account in the <code>user</code> object. If they choose to register, you’ll get back a response. Here’s an example response:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>{\n  response: {\n    clientDataJSON: { \n      type: “webauthn.create”,\n      challenge: ... // should match initial challenge\n      origin: ... //\n    },\n    attestationObject: {\n      authData: {\n        attestedCredentialData: {\n          credentialId: ..., \n          credentialPublicKey: ...,\n        }\n      }, // other stuff about attestation \n    }\n  }\n}\n</code></pre>\n\n\n\n<p> The interesting parts are the <code>clientDataJSON</code> object, which has a couple of fields you should validate, including the <code>type</code>, <code>challenge</code>, and <code>origin</code>. Make sure these are as expected.</p>\n\n\n\n<p>The confirmation of successful registration occurs in the <code>attestationObject.authData.attestedCredentialData</code> object, which includes the <code>credentialId</code> and the <code>credentialPublicKey</code>. These values must be associated with the user’s account; they’ll be used by the next ceremony—authentication—which will be discussed in detail below.</p>\n\n\n\n<p>Just like a username/password credential, multiple users may register using biometric authentication on a given website. Below, the website for Cosmo’s Clown Store holds public keys from multiple users’ authenticators:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/uPQQ4C0dvLmJtVSz8jqX4GYz8YNJbvgfBsmqmHCPQO8gCjYtilr1uSUJU8xMMZkn5EgVXE65HQgsVnnF7n5skClmPt-kyTAu1a--aGFzuZ1rxi9syckBMJNcX_3WqMskvQ94e3rS61bDxde4L4NhP_4JinmHSW8k4GttP5srcNW3HEBVhRIkqG-bPAO0JQ\" alt=\"Three authenticators each have a private key that corresponds to a specific public key stored in the Cosmo’s Clown Store website.\"><figcaption class=\"wp-element-caption\">Each authenticator has a private key and a corresponding public key on a site where it has been registered.</figcaption></figure>\n\n\n\n<p>But, crucially, each different website gets a different registration and credential (also called a “passkey”) on the same authenticator. Below, multiple websites hold a public key matching one of many private keys on a single user’s authenticator:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/LupToLG03G5zknraOiwELXtdeh2YTsTWMDFiG0hBKRD7yugR6XVJPFh7HKEe810zAKIXOxjULsh_3i1C1Hw-dIcWfL4EdKyy32_bFQc5PZMEn_dhdriQUG_tGtyt3k2a3DYlfmWrdzRIXBySG_AjUXFe9OxbcFBVMecy5ipS_SH2WyBoWP_ULuRxoSQV4Q\" alt=\"An authenticator can hold multiple private keys, each corresponding to a different website. In this picture, one authenticator has three private keys which match a single public key at one of three different websites.\"><figcaption class=\"wp-element-caption\">An authenticator can hold multiple private keys, each corresponding to a different website.</figcaption></figure>\n\n\n\n<h3 id=\"h-authentication\">Authentication</h3>\n\n\n\n<p>Once your user has registered a biometric authentication method, they can now log in with their face or fingerprint. To prompt a biometric login, use this JavaScript:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>navigator.credentials.get(options);</code></pre>\n\n\n\n<p>Again, the <code>options</code> object is critical. Here’s a sample <code>options</code> object:</p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>credentialId = // value pulled from data stored at registration \n\noptions = {\n  publicKey: {\n\trpId: &quot;cosmosclownstore.com&quot;,\n\tchallenge: &quot;...&quot;,\n\tuserVerification: &quot;preferred&quot;,\n\tallowCredentials: [{ type: &quot;public-key&quot;, id: credentialId }]\n\t//...\n  }\n}\n</code></pre>\n\n\n\n<p>Here, the <code>rpId</code> is the website identifier previously registered. The challenge again is a random string. <code>userVerification</code> specifies if we want the user to be verified or only test for user presence. </p>\n\n\n\n<p>The <code>allowCredentials</code> field includes the list of allowable credentials for this login. The value of <code>credentialId</code> was stored by the server during the registration process. Therefore, you must have some other way of identifying the user before making the <code>navigator.credentials.get(options);</code> request so you can retrieve the correct credential id from the server side data store. </p>\n\n\n\n<p>Options include:</p>\n\n\n\n<ul>\n<li>Set a cookie when they register</li>\n\n\n\n<li>Ask for their username</li>\n</ul>\n\n\n\n<p>After you build the <code>options</code> object and make the <code>get</code> request, you’ll be returned a response. That might look something like this: </p>\n\n\n\n<pre class=\"s-code-block wp-block-code\"><code>{\n  authenticatorData: {\n\trpIdHash : ..., // hash of the requesting party Id\n\tflags : ..., // bit array including authentication results\n\t// other info\n  },\n  clientDataJSON: {\n\ttype: &quot;webauthn.get&quot;,\n\tchallenge: ... // should match initial challenge\n  }\n}\n</code></pre>\n\n\n\n<p> Similarly to the registration ceremony, verify the values, such as the <code>challenge</code> and the <code>type</code>, in the <code>clientDataJSON</code> object to make sure they are what you expect.</p>\n\n\n\n<p>In addition, examine the <code>authenticatorData.rpIdHash</code> to make sure that the value matches a SHA256 hash of the <code>rpId</code> presented in the request. This value is the hashed <code>rpId</code> that the browser saw. If it is different than what the webapp presented, you may have a man-in-the-middle attack.</p>\n\n\n\n<p>Finally, the <code>authenticatorData.flags</code> field is a bit field which contains the results of the authentication. Bit 0 is set if the user was present, and bit 2 is set if the user was verified. </p>\n\n\n\n<h2 id=\"h-beyond-the-ceremonies\">Beyond the ceremonies</h2>\n\n\n\n<p>Integrating biometric authentication into your webapp without extensive integration work is pretty cool, especially since almost everyone with a smart phone now has such an authenticator in their pocket.</p>\n\n\n\n<p>However, there’s other work to do to build a full biometric login system. Additional items to be aware of:</p>\n\n\n\n<ul>\n<li>Unless you do certain things beyond the specification (“passkeys” managed by a central server), each credential is tied to a specific authenticator. This means that while biometric authentication is great as an alternative authentication method, it shouldn’t be the only one, unless you have a robust account recovery process. Otherwise a lost phone will mean an abandoned account.</li>\n\n\n\n<li>While the JavaScript code to register and log a user in is pretty straightforward, there’s some work to determine if the user has a valid biometric authenticator, store the credentials safely after registration, and prompt the user to log in using their biometric credentials. This scaffolding is required, but I haven’t seen libraries which help with it; be prepared to write your own logic.</li>\n\n\n\n<li>You can use WebAuthn as a second part of an MFA process, as mentioned above. It is remarkably phishing resistant, since you must have possession of the authenticator to complete the authentication ceremony.</li>\n</ul>\n\n\n\n<h2 id=\"h-further-reading\">Further Reading</h2>\n\n\n\n<p>For further education and implementation resources, check out the following sites:</p>\n\n\n\n<ul>\n<li><a href=\"https://www.w3.org/TR/webauthn-2/\">Web Authentication: An API for accessing Public Key Credentials – Level 2:</a> the WebAuthn specification</li>\n\n\n\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API\">Web Authentication API:</a> MDN’s docs on the Credentials API</li>\n\n\n\n<li><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide:</a> YubiKey’s docs, explains a lot about WebAuthn concepts, mostly focused on a cross-platform authenticator</li>\n</ul>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2022/11/16/biometric-authentication-for-web-devs/\">You can add biometric authentication to your webpage. Here’s how.</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n"
}