{
  "title":"Diagnose engineering process failures with data visualization",
  "date":"2021-08-25T09:32:33.000000-07:00",
  "author":null,
  "id":"https://stackoverflow.blog/?p=18692",
  "link":"https://stackoverflow.blog/2021/08/25/see-where-your-engineering-process-go-wrong-with-data-visualization/",
  "content":"\n<p>As developers, we are always looking for better ways to ensure we ship quality code. Many of us already use processes such as pull requests (PRs), automated integration tests, and monitoring to make sure the code we deliver is well written and working as expected. The popularity of these workflows speaks for themselves, but what happens when they go wrong? (And they will go wrong.) When we are working at larger scales, how do we even know if they <em>are</em> going wrong? The answer is data visualization, when applied properly it’s a powerful tool for getting insight into our workflows.</p>\n\n\n\n<p>In this article, we’ll discuss three areas that visualization can make it easier to diagnose and solve problems in everyday software engineering. </p>\n\n\n\n<h2 id=\"h-flaky-tests\">Flaky tests</h2>\n\n\n\n<p>When testing new code, you look for tests that fail in order to highlight bugs to fix. But what about tests that only fail some of the time? We’ve all been frustrated with the subtle time-wasting of flaky tests, but how many times do we just write it off as something that just happens to us and accept the time lost as a cost of writing software? What if we were able to see just how flaky our tests were for everyone on the team?</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/yCzFZPIqP7S1TqP1xK9ziajlnULt-FgvLPgpf0OYR-LZDchkLM-XFyS7bBiSDxkY8ZqAdF5vDlDzoKkCFLTSaRkURVizIPPPkMusuKIVi-fQujE2Fdht7rZwFkGyYCUFGvn-HpXq=s0\" alt=\"\"></figure>\n\n\n\n<p>The above visualization is taken from <a href=\"https://observablehq.com/@observablehq/integration-test-flakiness\">this example open source dashboard</a> showing the status of the test suites run for the <a href=\"https://github.com/sveltejs/svelte/actions\">sveltejs/svelte</a> repository. This kind of birds-eye-view packs a lot of information in a small amount of space so your eyes can do what they do best, spot patterns. Each row in the visualization represents a single test, while each column represents a run (perhaps triggered by a pull request). If a row has a lot of red circles (test failures) you may start to suspect that test of being flaky. However if a column has a lot of red circles and/or gray circles (tests being cancelled) then it is more likely a problem with the code being pushed. </p>\n\n\n\n<p>Integration tests in particular take a long time  to run. If everyone on the team is waiting a few extra minutes every time they push code, those minutes can add up to days worth of wasted productivity pretty quickly. </p>\n\n\n\n<p>The following visualization shows how long each test took to run and exposes patterns.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh5.googleusercontent.com/UKyPlotZ-TnGnZVQI9aI3hzpO6M5KIf0QC0hGt_Ouuo3DWjh5B__MML5IRh4OtcgiblTL0Z6Zk-KVYlaOwC5g1YHP6CBY1eUmtFdn6F-yJFs4mRR8f7n0WwnHbAF3pY1MSdBlFxo=s0\" alt=\"\"></figure>\n\n\n\n<p>Something you may notice in both of these visualizations is the lack of aggregation. These visualization techniques emphasize surfacing patterns by showing the underlying data directly. This enables further investigation directly from the visualization. For example, each integration test represented here has an interactive tooltip that gives details as well as deep links to the run on GitHub for further analysis.</p>\n\n\n\n<p>Consider where we might be without these visualizations: essentially looking at a table of information. This is the standard interface for the same set of integration tests shown in the visualizations:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/_oXXF-7AeQfB2n58xL42mVjZ5tEUf3TSCV5xrH8u9jc70KQ2SfNq5XPA5AyRQwzs-H5qHyUumNFSMnMWfLV-M2zFvqTT8k4JY3lO8OuXGCdNkpRScsz2LXFtIyXDogcjBUKiaGTs=s0\" alt=\"\"></figure>\n\n\n\n<p>While this is always a useful interface for getting detailed information and drilling into a specific test run, it does not give us a view of the patterns that can have systemic impact on our productivity.</p>\n\n\n\n<h2 id=\"h-pull-requests\">Pull requests</h2>\n\n\n\n<p>Pull requests are the way most teams collaborate to ship quality code. They provide a process for giving feedback and ensuring quality, but the process isn’t always balanced. Some teammates may end up reviewing too many PRs, while others could be helping out but don’t get asked. Data visualization can help us surface these patterns in the process so we can help bring them back into balance.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/MdnbP4B5d6RRvo_68Mx4oUhLXFscrDxPC8C2GasIVLj3M3pKdThRXWOq3yG2GFOOEZg_XOnw7mP4FRGffeSwaH_6ATz_-TGk0beJFWWUFAiA0GVE95r4sARc3g8tDlJ7yZKwK_qW=s0\" alt=\"\"></figure>\n\n\n\n<p>We can use visualization to gain a bird’s-eye view of the open pull requests on a repository and answer a couple of key questions. The first question we may ask is: what is the reviewer workload across the team? It may make sense for senior members to be doing more reviewing, but you may also notice that some teammates are ready for more responsibility.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/fH40OGT6RVzNmxQRXFAUvvlKVLWbadmFvOZuirZHGnw6okrLPtQB0PtMwGJKcLcD18xZ4PsIdefg_CnDUf996O5hQTj0L1An8AcLjSRLKaELzDiaZUud7P4ox5hhXTg5tljmRSBt=s0\" alt=\"\"></figure>\n\n\n\n<p>Data visualization enables us to answer another question: where are there stagnant pull requests that need attention? You can also look for patterns in PRs that have been unreviewed or stagnant for a long time. Individual developers may have that nagging feeling that their PR isn’t getting the attention it deserves, but it can be hard to understand where it fits in with all of the other work happening on the team. Seeing the unreviewed PRs in context can help a team decide what needs extra attention.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh6.googleusercontent.com/qpS4cTLMWP0v9lAlb2OYevIv1Z0kC1_FsfaX7OxhjPI41Q95DsU0USK5Ehqz-oFtvLy1vSoN24znH7NXaUrdO7ZhP4lMSejyj3atTTbKGN6sICn0OeaF_nPMmK8Qh2bI6kYC74-F=s0\" alt=\"\"></figure>\n\n\n\n<h2 id=\"h-monitoring\">Monitoring</h2>\n\n\n\n<p>A well known use case for data visualization in the engineering process is for monitoring the status of our systems. Whether it’s keeping an eye on system metrics like CPU usage and network latency or watching for an increase in errors or user signups, most teams have some sort of dashboards to track important metrics.</p>\n\n\n\n<p>What you may not have seen is a very compact view of your metrics using what’s called a <a href=\"https://flowingdata.com/2015/07/02/changing-price-of-food-items-and-horizon-graphs/\">horizon chart</a>. The following visualization shows HTTP status codes per minute for an app over an almost two week period, <em>minute-by-minute</em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh4.googleusercontent.com/n33yDXaehlRy7Bu4dztqV0ponMhhNbAdP7YQb_ARy0mJvc8qiDeWOM8QJ2R4vWGB9LCxJg8A4jla5_1ePwfahrLS_ki_J0sMVHiw-p0uh-5UBwG0JwZSTlknpMomC9cpviz0ZKOA=s0\" alt=\"\"></figure>\n\n\n\n<p>The principle of doing the least amount of aggregation comes through again. With this compact form, we can get very detailed information while also seeing broader patterns come through. You can see that at some point around April 17th there was a huge increase in 403 errors (due to some buggy code that was deployed). For the same period, you can see that the 200 status is lighter, indicating fewer successful requests.</p>\n\n\n\n<p>This is a <a href=\"https://en.wikipedia.org/wiki/D3.js\">D3-based </a>open source component called a <a href=\"https://observablehq.com/@observablehq/timechart\">TimeChart</a>, which is intended to make it easier to see patterns in dense time series metrics. It supports interaction, so you can see the exact values for any minute in the time range.</p>\n\n\n\n<h2 id=\"h-conclusion\">Conclusion</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://lh3.googleusercontent.com/FDt0ySmz6Ims9tMpk678hrt9wh7aiT-Di2rzf-eZYqL9SdkxLrJzlTW17HGLZMJwnFJwhhRpIsIpO_IX0nKom9a9vB7G0EThv4AL7dZbsio8EZocw5dFcMVef7s_ny1zaj7SEmx0=s0\" alt=\"\"></figure>\n\n\n\n<p>Ultimately, we all want to be productive and ship quality, working code, but it’s not always easy to see how we are doing. Data visualization can be a powerful way to direct our energies and achieve a clearer view of how our processes are functioning. Aggregating as little data as possible can give us even sharper insight into what is happening in our systems. Have you used data visualization to manage your team’s engineering process? What data visualizations do you think would be beneficial to your workflow? Let us know in the comments what works for you! </p>\n<p>The post <a rel=\"nofollow\" href=\"https://stackoverflow.blog/2021/08/25/see-where-your-engineering-process-go-wrong-with-data-visualization/\">Diagnose engineering process failures with data visualization</a> appeared first on <a rel=\"nofollow\" href=\"https://stackoverflow.blog\">Stack Overflow Blog</a>.</p>\n"
}